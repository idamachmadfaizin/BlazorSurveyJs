@using System.Reflection;
@using Newtonsoft.Json;

@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<HeadContent>
    <link href="libs/survey-core/defaultv2.min.css" rel="stylesheet" />
</HeadContent>

<survey id="@this.GetHashCode()" params="survey: model" @attributes=AllOtherAttributes></survey>

@code {
    public SurveyJsForm()
    {
        Instance = this;
    }

    private static SurveyJsForm Instance = default!;

    [Parameter]
    public object? Scheme { get; set; }

    [Parameter]
    public EventCallback<object> OnSurveyComplete { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private readonly string assemblyName = Assembly.GetEntryAssembly()?.GetName().Name ?? "";
    private IJSObjectReference? jsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/SurveyJsForm.razor.js");

            await jsModule.InvokeVoidAsync("setAssemblyName", assemblyName);
            await jsModule.InvokeVoidAsync("render", this.GetHashCode(), this.Scheme is not null ? JsonConvert.SerializeObject(this.Scheme) : null);
        }
    }

    [JSInvokable]
    public static async void OnSurveyCompleteHandle(object data)
    {
        await Instance.OnSurveyComplete.InvokeAsync(data);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.InvokeVoidAsync("dispose");
            await jsModule.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }
}