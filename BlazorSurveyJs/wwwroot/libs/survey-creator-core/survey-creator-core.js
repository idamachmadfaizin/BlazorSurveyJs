/*!
 * SurveyJS Creator v1.9.113
 * (c) 2015-2023 Devsoft Baltic OÃœ - http://surveyjs.io/
 * Github: https://github.com/surveyjs/survey-creator
 * License: https://surveyjs.io/Licenses#SurveyCreator
 */
(function webpackUniversalModuleDefinition(root, factory) {
	root = this || (0, eval)("this");
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("survey-core"));
	else if(typeof define === 'function' && define.amd)
		define("SurveyCreatorCore", ["survey-core"], factory);
	else if(typeof exports === 'object')
		exports["SurveyCreatorCore"] = factory(require("survey-core"));
	else
		root["SurveyCreatorCore"] = factory(root["Survey"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_survey_core__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/entries/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/papaparse/papaparse.min.js":
/*!*************************************************!*\
  !*** ./node_modules/papaparse/papaparse.min.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* @license
Papa Parse
v5.4.1
https://github.com/mholt/PapaParse
License: MIT
*/
!function(e,t){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this,function s(){"use strict";var f="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ","(",i,")();"],{type:"text/javascript"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,"string"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=",",y="\r\n",s='"',a=s+s,r=!1,i=null,o=!1;!function(){if("object"!=typeof t)return;"string"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);("boolean"==typeof t.quotes||"function"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);"string"==typeof t.newline&&(y=t.newline);"string"==typeof t.quoteChar&&(s=t.quoteChar);"boolean"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);("boolean"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\-@\t\r].*$/)}();var u=new RegExp(Q(s),"g");"string"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if("object"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:"object"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error("Unable to serialize unrecognized input");function h(e,t,r){var i="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h="greedy"===r?""===t[o].join("").trim():1===t[o].length&&0===t[o][0].length),"greedy"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=""===d.join("").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&"string"==typeof e&&o.test(e)&&(e="'"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||"function"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||" "===i.charAt(0)||" "===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK="\ufeff",b.BAD_DELIMITERS=["\r","\n",'"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=",",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!("INPUT"===d(this).prop("tagName").toUpperCase()&&"file"===d(this).attr("type").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if("object"==typeof s){if("abort"===s.action)return e="AbortError",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if("skip"===s.action)return void h();"object"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if("skip"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine="";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?"POST":"GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader("Range","bytes="+this._start+"-"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader("Content-Range");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf("/")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=""),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData("")},this),this._streamCleanUp=v(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,h=/^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return"greedy"===m.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+b.DefaultDelimiter+"'"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?"__parsed_extra":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),"__parsed_extra"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+l.length+" fields but parsed "+r,f+t):r<l.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+l.length+" fields but parsed "+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?"true"===t||"TRUE"===t||"false"!==t&&"FALSE"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):""===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+"([^]*?)"+Q(t),"gm"),i=(e=e.replace(r,"")).split("\r"),n=e.split("\n"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return"\n";for(var a=0,o=0;o<i.length;o++)"\n"===i[o][0]&&a++;return a>=i.length/2?"\r\n":"\r"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[",","\t","|",";",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?"":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=""}}function Q(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),("string"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=","),U===M)throw new Error("Comment character same as delimiter");!0===U?U="#":("string"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),"\n"!==P&&"\r"!==P&&"\r\n"!==P&&(P="\n");var W=0,H=!1;this.parse=function(i,t,r){if("string"!=typeof i)throw new Error("Input must be a string");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header&&!t){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;for(0<v&&(g=!0,y=m+"_"+v),p[m]=v+1;c.includes(y);)y=y+"_"+v;c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),"g"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&""===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error("Not implemented.")}function w(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return"function"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if("string"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});

/***/ }),

/***/ "./node_modules/survey-core/themes/index.js":
/*!**************************************************!*\
  !*** ./node_modules/survey-core/themes/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * surveyjs - Survey JavaScript library v1.9.113
 * Copyright (c) 2015-2023 Devsoft Baltic OÃœ  - http://surveyjs.io/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/themes/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/themes/borderless-dark-panelless.ts":
/*!*************************************************!*\
  !*** ./src/themes/borderless-dark-panelless.ts ***!
  \*************************************************/
/*! exports provided: default, BorderlessDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessDarkPanelless", function() { return BorderlessDarkPanelless; });
var Theme = {
    "themeName": "borderless",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(43, 48, 63, 1)",
        "--sjs-general-backcolor-dark": "rgba(50, 55, 72, 1)",
        "--sjs-general-backcolor-dim": "rgba(43, 48, 63, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(36, 41, 55, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(40, 46, 61, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(114, 120, 137, 1)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(114, 120, 137, 1)",
        "--sjs-primary-backcolor": "rgba(114, 187, 255, 1)",
        "--sjs-primary-backcolor-light": "rgba(114, 187, 255, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(151, 205, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 0px rgba(0, 0, 0, 0.35)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(55, 62, 79, 1)",
        "--sjs-border-default": "rgba(65, 72, 90, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var BorderlessDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/borderless-dark.ts":
/*!***************************************!*\
  !*** ./src/themes/borderless-dark.ts ***!
  \***************************************/
/*! exports provided: default, BorderlessDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessDark", function() { return BorderlessDark; });
var Theme = {
    "themeName": "borderless",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(43, 48, 63, 1)",
        "--sjs-general-backcolor-dark": "rgba(50, 55, 72, 1)",
        "--sjs-general-backcolor-dim": "rgba(33, 37, 51, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(36, 41, 55, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(40, 46, 61, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(114, 120, 137, 1)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(114, 120, 137, 1)",
        "--sjs-primary-backcolor": "rgba(114, 187, 255, 1)",
        "--sjs-primary-backcolor-light": "rgba(114, 187, 255, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(151, 205, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 0px rgba(0, 0, 0, 0.35)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(55, 62, 79, 1)",
        "--sjs-border-default": "rgba(65, 72, 90, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var BorderlessDark = Theme;


/***/ }),

/***/ "./src/themes/borderless-light-panelless.ts":
/*!**************************************************!*\
  !*** ./src/themes/borderless-light-panelless.ts ***!
  \**************************************************/
/*! exports provided: default, BorderlessLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessLightPanelless", function() { return BorderlessLightPanelless; });
var Theme = {
    "themeName": "borderless",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(231, 240, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(220, 232, 252, 1)",
        "--sjs-general-backcolor-dim": "rgba(231, 240, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(220, 232, 252, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(133, 154, 186, 1)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(133, 154, 186, 1)",
        "--sjs-primary-backcolor": "rgba(35, 101, 200, 1)",
        "--sjs-primary-backcolor-light": "rgba(35, 101, 200, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(26, 86, 175, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(220, 229, 241, 1)",
        "--sjs-border-default": "rgba(179, 200, 229, 1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var BorderlessLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/borderless-light.ts":
/*!****************************************!*\
  !*** ./src/themes/borderless-light.ts ***!
  \****************************************/
/*! exports provided: default, BorderlessLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessLight", function() { return BorderlessLight; });
var Theme = {
    "themeName": "borderless",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(241, 246, 255, 1)",
        "--sjs-general-backcolor-dim": "rgba(231, 240, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(238, 245, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(223, 233, 250, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(133, 154, 186, 1)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(133, 154, 186, 1)",
        "--sjs-primary-backcolor": "rgba(35, 101, 200, 1)",
        "--sjs-primary-backcolor-light": "rgba(35, 101, 200, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(26, 86, 175, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(220, 229, 241, 1)",
        "--sjs-border-default": "rgba(179, 200, 229, 1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var BorderlessLight = Theme;


/***/ }),

/***/ "./src/themes/contrast-dark-panelless.ts":
/*!***********************************************!*\
  !*** ./src/themes/contrast-dark-panelless.ts ***!
  \***********************************************/
/*! exports provided: default, ContrastDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastDarkPanelless", function() { return ContrastDarkPanelless; });
var Theme = {
    "themeName": "contrast",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dark": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(255, 255, 255, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 1)",
        "--sjs-primary-backcolor-dark": "rgba(53, 53, 53, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-large": "0px 6px 0px 0px rgba(0, 0, 0, 1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 1),0px -2px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-border-light": "rgba(232, 192, 51, 1)",
        "--sjs-border-default": "rgba(0, 0, 0, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ContrastDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/contrast-dark.ts":
/*!*************************************!*\
  !*** ./src/themes/contrast-dark.ts ***!
  \*************************************/
/*! exports provided: default, ContrastDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastDark", function() { return ContrastDark; });
var Theme = {
    "themeName": "contrast",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dark": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim": "rgba(0, 0, 0, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(255, 255, 255, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 1)",
        "--sjs-primary-backcolor": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 1)",
        "--sjs-primary-backcolor-dark": "rgba(53, 53, 53, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-large": "0px 6px 0px 0px rgba(0, 0, 0, 1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 1),0px -2px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-border-light": "rgba(232, 192, 51, 1)",
        "--sjs-border-default": "rgba(0, 0, 0, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ContrastDark = Theme;


/***/ }),

/***/ "./src/themes/contrast-light-panelless.ts":
/*!************************************************!*\
  !*** ./src/themes/contrast-light-panelless.ts ***!
  \************************************************/
/*! exports provided: default, ContrastLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastLightPanelless", function() { return ContrastLightPanelless; });
var Theme = {
    "themeName": "contrast",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(255, 216, 77, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 216, 77, 1)",
        "--sjs-primary-backcolor-dark": "rgba(83, 83, 83, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-large": "0px 6px 0px 0px rgba(0, 0, 0, 1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 1),0px -2px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.2)",
        "--sjs-border-default": "rgba(0, 0, 0, 1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ContrastLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/contrast-light.ts":
/*!**************************************!*\
  !*** ./src/themes/contrast-light.ts ***!
  \**************************************/
/*! exports provided: default, ContrastLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastLight", function() { return ContrastLight; });
var Theme = {
    "themeName": "contrast",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 216, 77, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(255, 216, 77, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor": "rgba(0, 0, 0, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 216, 77, 1)",
        "--sjs-primary-backcolor-dark": "rgba(83, 83, 83, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-shadow-large": "0px 6px 0px 0px rgba(0, 0, 0, 1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 1),0px -2px 0px 2px rgba(0, 0, 0, 1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.2)",
        "--sjs-border-default": "rgba(0, 0, 0, 1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ContrastLight = Theme;


/***/ }),

/***/ "./src/themes/default-dark-panelless.ts":
/*!**********************************************!*\
  !*** ./src/themes/default-dark-panelless.ts ***!
  \**********************************************/
/*! exports provided: default, DefaultDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDarkPanelless", function() { return DefaultDarkPanelless; });
var Theme = {
    "themeName": "default",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(52, 52, 52, 1)",
        "--sjs-general-backcolor-dim": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(43, 43, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(46, 46, 46, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-primary-backcolor-dark": "rgba(255, 170, 24, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 1px 2px 0px rgba(0, 0, 0, 0.35)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.08)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DefaultDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/default-dark.ts":
/*!************************************!*\
  !*** ./src/themes/default-dark.ts ***!
  \************************************/
/*! exports provided: default, DefaultDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDark", function() { return DefaultDark; });
var Theme = {
    "themeName": "default",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(52, 52, 52, 1)",
        "--sjs-general-backcolor-dim": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(43, 43, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(46, 46, 46, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-primary-backcolor-dark": "rgba(255, 170, 24, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 1px 2px 0px rgba(0, 0, 0, 0.35)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "inset 0px 1px 2px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.08)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DefaultDark = Theme;


/***/ }),

/***/ "./src/themes/default-light-panelless.ts":
/*!***********************************************!*\
  !*** ./src/themes/default-light-panelless.ts ***!
  \***********************************************/
/*! exports provided: default, DefaultLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLightPanelless", function() { return DefaultLightPanelless; });
var Theme = {
    "themeName": "default",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(249, 249, 249, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(25, 179, 148, 1)",
        "--sjs-primary-backcolor-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(20, 164, 139, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 1px 2px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 1px 2px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DefaultLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/default-light.ts":
/*!*************************************!*\
  !*** ./src/themes/default-light.ts ***!
  \*************************************/
/*! exports provided: default, DefaultLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLight", function() { return DefaultLight; });
var Theme = {
    "themeName": "default",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dim": "rgba(243, 243, 243, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(249, 249, 249, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(25, 179, 148, 1)",
        "--sjs-primary-backcolor-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(20, 164, 139, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 1px 2px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 1px 2px 0px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DefaultLight = Theme;


/***/ }),

/***/ "./src/themes/doubleborder-dark-panelless.ts":
/*!***************************************************!*\
  !*** ./src/themes/doubleborder-dark-panelless.ts ***!
  \***************************************************/
/*! exports provided: default, DoubleBorderDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderDarkPanelless", function() { return DoubleBorderDarkPanelless; });
var Theme = {
    "themeName": "doubleborder",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(52, 52, 52, 1)",
        "--sjs-general-backcolor-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(52, 52, 52, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(47, 47, 47, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(53, 53, 53, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(120, 156, 210, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(146, 181, 235, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(255, 255, 255, 0.12)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(255, 255, 255, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(255, 255, 255, 0.1)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.1)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DoubleBorderDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/doubleborder-dark.ts":
/*!*****************************************!*\
  !*** ./src/themes/doubleborder-dark.ts ***!
  \*****************************************/
/*! exports provided: default, DoubleBorderDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderDark", function() { return DoubleBorderDark; });
var Theme = {
    "themeName": "doubleborder",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(52, 52, 52, 1)",
        "--sjs-general-backcolor-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(47, 47, 47, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(47, 47, 47, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(53, 53, 53, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(120, 156, 210, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(146, 181, 235, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(255, 255, 255, 0.12)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(255, 255, 255, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(255, 255, 255, 0.1)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.1)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DoubleBorderDark = Theme;


/***/ }),

/***/ "./src/themes/doubleborder-light-panelless.ts":
/*!****************************************************!*\
  !*** ./src/themes/doubleborder-light-panelless.ts ***!
  \****************************************************/
/*! exports provided: default, DoubleBorderLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderLightPanelless", function() { return DoubleBorderLightPanelless; });
var Theme = {
    "themeName": "doubleborder",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(239, 239, 239, 1)",
        "--sjs-general-backcolor-dim": "rgba(245, 245, 245, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(237, 237, 237, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(76, 100, 137, 1)",
        "--sjs-primary-backcolor-light": "rgba(76, 100, 137, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(62, 83, 115, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 0.07)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 0.08),0px 2px 6px 0px rgba(0, 0, 0, 0.04)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.08)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.1)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DoubleBorderLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/doubleborder-light.ts":
/*!******************************************!*\
  !*** ./src/themes/doubleborder-light.ts ***!
  \******************************************/
/*! exports provided: default, DoubleBorderLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderLight", function() { return DoubleBorderLight; });
var Theme = {
    "themeName": "doubleborder",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(239, 239, 239, 1)",
        "--sjs-general-backcolor-dim": "rgba(245, 245, 245, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(237, 237, 237, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(76, 100, 137, 1)",
        "--sjs-primary-backcolor-light": "rgba(76, 100, 137, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(62, 83, 115, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 2px rgba(0, 0, 0, 0.07)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(0, 0, 0, 0.08),0px 2px 6px 0px rgba(0, 0, 0, 0.04)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.08)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.1)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.1)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var DoubleBorderLight = Theme;


/***/ }),

/***/ "./src/themes/flat-dark-panelless.ts":
/*!*******************************************!*\
  !*** ./src/themes/flat-dark-panelless.ts ***!
  \*******************************************/
/*! exports provided: default, FlatDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatDarkPanelless", function() { return FlatDarkPanelless; });
var Theme = {
    "themeName": "flat",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(56, 56, 56, 1)",
        "--sjs-general-backcolor-dim": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(43, 43, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(52, 52, 52, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(92, 214, 49, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-primary-backcolor-dark": "rgba(130, 237, 92, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.09)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.12),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.07)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.07)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var FlatDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/flat-dark.ts":
/*!*********************************!*\
  !*** ./src/themes/flat-dark.ts ***!
  \*********************************/
/*! exports provided: default, FlatDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatDark", function() { return FlatDark; });
var Theme = {
    "themeName": "flat",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(56, 56, 56, 1)",
        "--sjs-general-backcolor-dim": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(43, 43, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(52, 52, 52, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(92, 214, 49, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-primary-backcolor-dark": "rgba(130, 237, 92, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.09)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.12),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.07)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.07)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.07)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var FlatDark = Theme;


/***/ }),

/***/ "./src/themes/flat-light-panelless.ts":
/*!********************************************!*\
  !*** ./src/themes/flat-light-panelless.ts ***!
  \********************************************/
/*! exports provided: default, FlatLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatLightPanelless", function() { return FlatLightPanelless; });
var Theme = {
    "themeName": "flat",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(246, 246, 246, 1)",
        "--sjs-general-backcolor-dark": "rgba(235, 235, 235, 1)",
        "--sjs-general-backcolor-dim": "rgba(246, 246, 246, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(235, 235, 235, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(85, 181, 52, 1)",
        "--sjs-primary-backcolor-light": "rgba(85, 181, 52, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(64, 159, 31, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(0, 0, 0, 0.1),0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.12)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.12)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.12)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var FlatLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/flat-light.ts":
/*!**********************************!*\
  !*** ./src/themes/flat-light.ts ***!
  \**********************************/
/*! exports provided: default, FlatLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatLight", function() { return FlatLight; });
var Theme = {
    "themeName": "flat",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(246, 246, 246, 1)",
        "--sjs-general-backcolor-dark": "rgba(235, 235, 235, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(235, 235, 235, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(85, 181, 52, 1)",
        "--sjs-primary-backcolor-light": "rgba(85, 181, 52, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(64, 159, 31, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(0, 0, 0, 0.1),0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.12)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.12)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.12)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var FlatLight = Theme;


/***/ }),

/***/ "./src/themes/index.ts":
/*!*****************************!*\
  !*** ./src/themes/index.ts ***!
  \*****************************/
/*! exports provided: DefaultLight, DefaultDark, DefaultLightPanelless, DefaultDarkPanelless, SharpLight, SharpDark, SharpLightPanelless, SharpDarkPanelless, BorderlessLight, BorderlessDark, BorderlessLightPanelless, BorderlessDarkPanelless, FlatLight, FlatDark, FlatLightPanelless, FlatDarkPanelless, PlainLight, PlainDark, PlainLightPanelless, PlainDarkPanelless, DoubleBorderLight, DoubleBorderDark, DoubleBorderLightPanelless, DoubleBorderDarkPanelless, LayeredLight, LayeredDark, LayeredLightPanelless, LayeredDarkPanelless, SolidLight, SolidDark, SolidLightPanelless, SolidDarkPanelless, ThreeDimensionalLight, ThreeDimensionalDark, ThreeDimensionalLightPanelless, ThreeDimensionalDarkPanelless, ContrastLight, ContrastDark, ContrastLightPanelless, ContrastDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLight", function() { return DefaultLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDark", function() { return DefaultDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultLightPanelless", function() { return DefaultLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDarkPanelless", function() { return DefaultDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpLight", function() { return SharpLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpDark", function() { return SharpDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpLightPanelless", function() { return SharpLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpDarkPanelless", function() { return SharpDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessLight", function() { return BorderlessLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessDark", function() { return BorderlessDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessLightPanelless", function() { return BorderlessLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BorderlessDarkPanelless", function() { return BorderlessDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatLight", function() { return FlatLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatDark", function() { return FlatDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatLightPanelless", function() { return FlatLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatDarkPanelless", function() { return FlatDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainLight", function() { return PlainLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainDark", function() { return PlainDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainLightPanelless", function() { return PlainLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainDarkPanelless", function() { return PlainDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderLight", function() { return DoubleBorderLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderDark", function() { return DoubleBorderDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderLightPanelless", function() { return DoubleBorderLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleBorderDarkPanelless", function() { return DoubleBorderDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredLight", function() { return LayeredLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredDark", function() { return LayeredDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredLightPanelless", function() { return LayeredLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredDarkPanelless", function() { return LayeredDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidLight", function() { return SolidLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidDark", function() { return SolidDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidLightPanelless", function() { return SolidLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidDarkPanelless", function() { return SolidDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalLight", function() { return ThreeDimensionalLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalDark", function() { return ThreeDimensionalDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalLightPanelless", function() { return ThreeDimensionalLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalDarkPanelless", function() { return ThreeDimensionalDarkPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastLight", function() { return ContrastLight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastDark", function() { return ContrastDark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastLightPanelless", function() { return ContrastLightPanelless; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContrastDarkPanelless", function() { return ContrastDarkPanelless; });
/* harmony import */ var _default_light__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default-light */ "./src/themes/default-light.ts");
/* harmony import */ var _default_dark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default-dark */ "./src/themes/default-dark.ts");
/* harmony import */ var _default_light_panelless__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./default-light-panelless */ "./src/themes/default-light-panelless.ts");
/* harmony import */ var _default_dark_panelless__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./default-dark-panelless */ "./src/themes/default-dark-panelless.ts");
/* harmony import */ var _sharp_light__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sharp-light */ "./src/themes/sharp-light.ts");
/* harmony import */ var _sharp_dark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sharp-dark */ "./src/themes/sharp-dark.ts");
/* harmony import */ var _sharp_light_panelless__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sharp-light-panelless */ "./src/themes/sharp-light-panelless.ts");
/* harmony import */ var _sharp_dark_panelless__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sharp-dark-panelless */ "./src/themes/sharp-dark-panelless.ts");
/* harmony import */ var _borderless_light__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./borderless-light */ "./src/themes/borderless-light.ts");
/* harmony import */ var _borderless_dark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./borderless-dark */ "./src/themes/borderless-dark.ts");
/* harmony import */ var _borderless_light_panelless__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./borderless-light-panelless */ "./src/themes/borderless-light-panelless.ts");
/* harmony import */ var _borderless_dark_panelless__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./borderless-dark-panelless */ "./src/themes/borderless-dark-panelless.ts");
/* harmony import */ var _flat_light__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./flat-light */ "./src/themes/flat-light.ts");
/* harmony import */ var _flat_dark__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./flat-dark */ "./src/themes/flat-dark.ts");
/* harmony import */ var _flat_light_panelless__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./flat-light-panelless */ "./src/themes/flat-light-panelless.ts");
/* harmony import */ var _flat_dark_panelless__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./flat-dark-panelless */ "./src/themes/flat-dark-panelless.ts");
/* harmony import */ var _plain_light__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./plain-light */ "./src/themes/plain-light.ts");
/* harmony import */ var _plain_dark__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./plain-dark */ "./src/themes/plain-dark.ts");
/* harmony import */ var _plain_light_panelless__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./plain-light-panelless */ "./src/themes/plain-light-panelless.ts");
/* harmony import */ var _plain_dark_panelless__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./plain-dark-panelless */ "./src/themes/plain-dark-panelless.ts");
/* harmony import */ var _doubleborder_light__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./doubleborder-light */ "./src/themes/doubleborder-light.ts");
/* harmony import */ var _doubleborder_dark__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./doubleborder-dark */ "./src/themes/doubleborder-dark.ts");
/* harmony import */ var _doubleborder_light_panelless__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./doubleborder-light-panelless */ "./src/themes/doubleborder-light-panelless.ts");
/* harmony import */ var _doubleborder_dark_panelless__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./doubleborder-dark-panelless */ "./src/themes/doubleborder-dark-panelless.ts");
/* harmony import */ var _layered_light__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./layered-light */ "./src/themes/layered-light.ts");
/* harmony import */ var _layered_dark__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./layered-dark */ "./src/themes/layered-dark.ts");
/* harmony import */ var _layered_light_panelless__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./layered-light-panelless */ "./src/themes/layered-light-panelless.ts");
/* harmony import */ var _layered_dark_panelless__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./layered-dark-panelless */ "./src/themes/layered-dark-panelless.ts");
/* harmony import */ var _solid_light__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./solid-light */ "./src/themes/solid-light.ts");
/* harmony import */ var _solid_dark__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./solid-dark */ "./src/themes/solid-dark.ts");
/* harmony import */ var _solid_light_panelless__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./solid-light-panelless */ "./src/themes/solid-light-panelless.ts");
/* harmony import */ var _solid_dark_panelless__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./solid-dark-panelless */ "./src/themes/solid-dark-panelless.ts");
/* harmony import */ var _threedimensional_light__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./threedimensional-light */ "./src/themes/threedimensional-light.ts");
/* harmony import */ var _threedimensional_dark__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./threedimensional-dark */ "./src/themes/threedimensional-dark.ts");
/* harmony import */ var _threedimensional_light_panelless__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./threedimensional-light-panelless */ "./src/themes/threedimensional-light-panelless.ts");
/* harmony import */ var _threedimensional_dark_panelless__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./threedimensional-dark-panelless */ "./src/themes/threedimensional-dark-panelless.ts");
/* harmony import */ var _contrast_light__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./contrast-light */ "./src/themes/contrast-light.ts");
/* harmony import */ var _contrast_dark__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./contrast-dark */ "./src/themes/contrast-dark.ts");
/* harmony import */ var _contrast_light_panelless__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./contrast-light-panelless */ "./src/themes/contrast-light-panelless.ts");
/* harmony import */ var _contrast_dark_panelless__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./contrast-dark-panelless */ "./src/themes/contrast-dark-panelless.ts");

var DefaultLight = _default_light__WEBPACK_IMPORTED_MODULE_0__["default"];

var DefaultDark = _default_dark__WEBPACK_IMPORTED_MODULE_1__["default"];

var DefaultLightPanelless = _default_light_panelless__WEBPACK_IMPORTED_MODULE_2__["default"];

var DefaultDarkPanelless = _default_dark_panelless__WEBPACK_IMPORTED_MODULE_3__["default"];

var SharpLight = _sharp_light__WEBPACK_IMPORTED_MODULE_4__["default"];

var SharpDark = _sharp_dark__WEBPACK_IMPORTED_MODULE_5__["default"];

var SharpLightPanelless = _sharp_light_panelless__WEBPACK_IMPORTED_MODULE_6__["default"];

var SharpDarkPanelless = _sharp_dark_panelless__WEBPACK_IMPORTED_MODULE_7__["default"];

var BorderlessLight = _borderless_light__WEBPACK_IMPORTED_MODULE_8__["default"];

var BorderlessDark = _borderless_dark__WEBPACK_IMPORTED_MODULE_9__["default"];

var BorderlessLightPanelless = _borderless_light_panelless__WEBPACK_IMPORTED_MODULE_10__["default"];

var BorderlessDarkPanelless = _borderless_dark_panelless__WEBPACK_IMPORTED_MODULE_11__["default"];

var FlatLight = _flat_light__WEBPACK_IMPORTED_MODULE_12__["default"];

var FlatDark = _flat_dark__WEBPACK_IMPORTED_MODULE_13__["default"];

var FlatLightPanelless = _flat_light_panelless__WEBPACK_IMPORTED_MODULE_14__["default"];

var FlatDarkPanelless = _flat_dark_panelless__WEBPACK_IMPORTED_MODULE_15__["default"];

var PlainLight = _plain_light__WEBPACK_IMPORTED_MODULE_16__["default"];

var PlainDark = _plain_dark__WEBPACK_IMPORTED_MODULE_17__["default"];

var PlainLightPanelless = _plain_light_panelless__WEBPACK_IMPORTED_MODULE_18__["default"];

var PlainDarkPanelless = _plain_dark_panelless__WEBPACK_IMPORTED_MODULE_19__["default"];

var DoubleBorderLight = _doubleborder_light__WEBPACK_IMPORTED_MODULE_20__["default"];

var DoubleBorderDark = _doubleborder_dark__WEBPACK_IMPORTED_MODULE_21__["default"];

var DoubleBorderLightPanelless = _doubleborder_light_panelless__WEBPACK_IMPORTED_MODULE_22__["default"];

var DoubleBorderDarkPanelless = _doubleborder_dark_panelless__WEBPACK_IMPORTED_MODULE_23__["default"];

var LayeredLight = _layered_light__WEBPACK_IMPORTED_MODULE_24__["default"];

var LayeredDark = _layered_dark__WEBPACK_IMPORTED_MODULE_25__["default"];

var LayeredLightPanelless = _layered_light_panelless__WEBPACK_IMPORTED_MODULE_26__["default"];

var LayeredDarkPanelless = _layered_dark_panelless__WEBPACK_IMPORTED_MODULE_27__["default"];

var SolidLight = _solid_light__WEBPACK_IMPORTED_MODULE_28__["default"];

var SolidDark = _solid_dark__WEBPACK_IMPORTED_MODULE_29__["default"];

var SolidLightPanelless = _solid_light_panelless__WEBPACK_IMPORTED_MODULE_30__["default"];

var SolidDarkPanelless = _solid_dark_panelless__WEBPACK_IMPORTED_MODULE_31__["default"];

var ThreeDimensionalLight = _threedimensional_light__WEBPACK_IMPORTED_MODULE_32__["default"];

var ThreeDimensionalDark = _threedimensional_dark__WEBPACK_IMPORTED_MODULE_33__["default"];

var ThreeDimensionalLightPanelless = _threedimensional_light_panelless__WEBPACK_IMPORTED_MODULE_34__["default"];

var ThreeDimensionalDarkPanelless = _threedimensional_dark_panelless__WEBPACK_IMPORTED_MODULE_35__["default"];

var ContrastLight = _contrast_light__WEBPACK_IMPORTED_MODULE_36__["default"];

var ContrastDark = _contrast_dark__WEBPACK_IMPORTED_MODULE_37__["default"];

var ContrastLightPanelless = _contrast_light_panelless__WEBPACK_IMPORTED_MODULE_38__["default"];

var ContrastDarkPanelless = _contrast_dark_panelless__WEBPACK_IMPORTED_MODULE_39__["default"];


/***/ }),

/***/ "./src/themes/layered-dark-panelless.ts":
/*!**********************************************!*\
  !*** ./src/themes/layered-dark-panelless.ts ***!
  \**********************************************/
/*! exports provided: default, LayeredDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredDarkPanelless", function() { return LayeredDarkPanelless; });
var Theme = {
    "themeName": "layered",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(39, 40, 50, 1)",
        "--sjs-general-backcolor-dark": "rgba(46, 47, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(39, 40, 50, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(32, 33, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(37, 38, 48, 1)",
        "--sjs-general-forecolor": "rgba(213, 215, 238, 1)",
        "--sjs-general-forecolor-light": "rgba(117, 120, 140, 1)",
        "--sjs-general-dim-forecolor": "rgba(213, 215, 238, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(117, 119, 141, 1)",
        "--sjs-primary-backcolor": "rgba(164, 127, 243, 1)",
        "--sjs-primary-backcolor-light": "rgba(164, 127, 243, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(192, 165, 251, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.1),0px 8px 16px 0px rgba(0, 0, 0, 0.15),0px 2px 4px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.03),inset 0px 1px 4px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(54, 56, 69, 1)",
        "--sjs-border-default": "rgba(67, 69, 85, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var LayeredDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/layered-dark.ts":
/*!************************************!*\
  !*** ./src/themes/layered-dark.ts ***!
  \************************************/
/*! exports provided: default, LayeredDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredDark", function() { return LayeredDark; });
var Theme = {
    "themeName": "layered",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(39, 40, 50, 1)",
        "--sjs-general-backcolor-dark": "rgba(46, 47, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(30, 31, 40, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(32, 33, 43, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(37, 38, 48, 1)",
        "--sjs-general-forecolor": "rgba(213, 215, 238, 1)",
        "--sjs-general-forecolor-light": "rgba(117, 120, 140, 1)",
        "--sjs-general-dim-forecolor": "rgba(213, 215, 238, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(117, 119, 141, 1)",
        "--sjs-primary-backcolor": "rgba(164, 127, 243, 1)",
        "--sjs-primary-backcolor-light": "rgba(164, 127, 243, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(192, 165, 251, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.1),0px 8px 16px 0px rgba(0, 0, 0, 0.15),0px 2px 4px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "inset 0px 0px 0px 1px rgba(255, 255, 255, 0.05),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.03),inset 0px 1px 4px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-border-light": "rgba(54, 56, 69, 1)",
        "--sjs-border-default": "rgba(67, 69, 85, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var LayeredDark = Theme;


/***/ }),

/***/ "./src/themes/layered-light-panelless.ts":
/*!***********************************************!*\
  !*** ./src/themes/layered-light-panelless.ts ***!
  \***********************************************/
/*! exports provided: default, LayeredLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredLightPanelless", function() { return LayeredLightPanelless; });
var Theme = {
    "themeName": "layered",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(244, 244, 244, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(241, 237, 248, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(225, 220, 233, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.5)",
        "--sjs-primary-backcolor": "rgba(122, 100, 168, 1)",
        "--sjs-primary-backcolor-light": "rgba(122, 100, 168, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(105, 84, 152, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.05),0px 8px 16px 0px rgba(0, 0, 0, 0.1),0px 2px 4px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 1px rgba(0, 0, 0, 0.05),inset 0px 1px 4px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var LayeredLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/layered-light.ts":
/*!*************************************!*\
  !*** ./src/themes/layered-light.ts ***!
  \*************************************/
/*! exports provided: default, LayeredLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayeredLight", function() { return LayeredLight; });
var Theme = {
    "themeName": "layered",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(244, 244, 244, 1)",
        "--sjs-general-backcolor-dim": "rgba(216, 207, 236, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(241, 237, 248, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(225, 220, 233, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.5)",
        "--sjs-primary-backcolor": "rgba(122, 100, 168, 1)",
        "--sjs-primary-backcolor-light": "rgba(122, 100, 168, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(105, 84, 152, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.05),0px 8px 16px 0px rgba(0, 0, 0, 0.1),0px 2px 4px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 0px 0px 1px rgba(0, 0, 0, 0.05),inset 0px 1px 4px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var LayeredLight = Theme;


/***/ }),

/***/ "./src/themes/plain-dark-panelless.ts":
/*!********************************************!*\
  !*** ./src/themes/plain-dark-panelless.ts ***!
  \********************************************/
/*! exports provided: default, PlainDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainDarkPanelless", function() { return PlainDarkPanelless; });
var Theme = {
    "themeName": "plain",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-backcolor-dim": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(85, 171, 250, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-primary-backcolor-dark": "rgba(126, 193, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.12)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.12),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.12)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var PlainDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/plain-dark.ts":
/*!**********************************!*\
  !*** ./src/themes/plain-dark.ts ***!
  \**********************************/
/*! exports provided: default, PlainDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainDark", function() { return PlainDark; });
var Theme = {
    "themeName": "plain",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-backcolor-dim": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(36, 36, 36, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(85, 171, 250, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-primary-backcolor-dark": "rgba(126, 193, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.12)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.12),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.12)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var PlainDark = Theme;


/***/ }),

/***/ "./src/themes/plain-light-panelless.ts":
/*!*********************************************!*\
  !*** ./src/themes/plain-light-panelless.ts ***!
  \*********************************************/
/*! exports provided: default, PlainLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainLightPanelless", function() { return PlainLightPanelless; });
var Theme = {
    "themeName": "plain",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(37, 137, 229, 1)",
        "--sjs-primary-backcolor-light": "rgba(37, 137, 229, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(21, 119, 209, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.05)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.15)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.15)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var PlainLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/plain-light.ts":
/*!***********************************!*\
  !*** ./src/themes/plain-light.ts ***!
  \***********************************/
/*! exports provided: default, PlainLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlainLight", function() { return PlainLight; });
var Theme = {
    "themeName": "plain",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(37, 137, 229, 1)",
        "--sjs-primary-backcolor-light": "rgba(37, 137, 229, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(21, 119, 209, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.05)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.15)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.15)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.15)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var PlainLight = Theme;


/***/ }),

/***/ "./src/themes/sharp-dark-panelless.ts":
/*!********************************************!*\
  !*** ./src/themes/sharp-dark-panelless.ts ***!
  \********************************************/
/*! exports provided: default, SharpDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpDarkPanelless", function() { return SharpDarkPanelless; });
var Theme = {
    "themeName": "sharp",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(33, 33, 33, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.5)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.8)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.55)",
        "--sjs-primary-backcolor": "rgba(16, 226, 255, 1)",
        "--sjs-primary-backcolor-light": "rgba(0, 0, 0, 0.35)",
        "--sjs-primary-backcolor-dark": "rgba(129, 240, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.28)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.25),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.22)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.22)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.22)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SharpDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/sharp-dark.ts":
/*!**********************************!*\
  !*** ./src/themes/sharp-dark.ts ***!
  \**********************************/
/*! exports provided: default, SharpDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpDark", function() { return SharpDark; });
var Theme = {
    "themeName": "sharp",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-backcolor-dim": "rgba(27, 27, 27, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(33, 33, 33, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(47, 47, 47, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.5)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.8)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.55)",
        "--sjs-primary-backcolor": "rgba(16, 226, 255, 1)",
        "--sjs-primary-backcolor-light": "rgba(0, 0, 0, 0.35)",
        "--sjs-primary-backcolor-dark": "rgba(129, 240, 255, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(255, 255, 255, 0.28)",
        "--sjs-shadow-medium": "0px 0px 0px 1px rgba(255, 255, 255, 0.25),0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(255, 255, 255, 0.22)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.22)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.22)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SharpDark = Theme;


/***/ }),

/***/ "./src/themes/sharp-light-panelless.ts":
/*!*********************************************!*\
  !*** ./src/themes/sharp-light-panelless.ts ***!
  \*********************************************/
/*! exports provided: default, SharpLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpLightPanelless", function() { return SharpLightPanelless; });
var Theme = {
    "themeName": "sharp",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(228, 228, 228, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(238, 238, 238, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(220, 220, 220, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.6)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.6)",
        "--sjs-primary-backcolor": "rgba(103, 58, 176, 1)",
        "--sjs-primary-backcolor-light": "rgba(103, 58, 176, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(69, 24, 142, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.25)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.25)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.25)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SharpLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/sharp-light.ts":
/*!***********************************!*\
  !*** ./src/themes/sharp-light.ts ***!
  \***********************************/
/*! exports provided: default, SharpLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharpLight", function() { return SharpLight; });
var Theme = {
    "themeName": "sharp",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(228, 228, 228, 1)",
        "--sjs-general-backcolor-dim": "rgba(224, 224, 224, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(238, 238, 238, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(220, 220, 220, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.6)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.6)",
        "--sjs-primary-backcolor": "rgba(103, 58, 176, 1)",
        "--sjs-primary-backcolor-light": "rgba(103, 58, 176, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(69, 24, 142, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 0px 0px 1px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 1px rgba(0, 0, 0, 0.25)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.25)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.25)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SharpLight = Theme;


/***/ }),

/***/ "./src/themes/solid-dark-panelless.ts":
/*!********************************************!*\
  !*** ./src/themes/solid-dark-panelless.ts ***!
  \********************************************/
/*! exports provided: default, SolidDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidDarkPanelless", function() { return SolidDarkPanelless; });
var Theme = {
    "themeName": "solid",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(53, 55, 63, 1)",
        "--sjs-general-backcolor-dark": "rgba(60, 63, 74, 1)",
        "--sjs-general-backcolor-dim": "rgba(53, 55, 63, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(46, 48, 55, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(51, 53, 61, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(125, 129, 143, 1)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(125, 130, 148, 1)",
        "--sjs-primary-backcolor": "rgba(58, 202, 211, 1)",
        "--sjs-primary-backcolor-light": "rgba(67, 70, 80, 1)",
        "--sjs-primary-backcolor-dark": "rgba(92, 224, 233, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 0px rgba(33, 35, 43, 1)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px -2px 0px 0px rgba(33, 35, 43, 1)",
        "--sjs-border-light": "rgba(65, 69, 83, 1)",
        "--sjs-border-default": "rgba(97, 101, 118, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SolidDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/solid-dark.ts":
/*!**********************************!*\
  !*** ./src/themes/solid-dark.ts ***!
  \**********************************/
/*! exports provided: default, SolidDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidDark", function() { return SolidDark; });
var Theme = {
    "themeName": "solid",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(53, 55, 63, 1)",
        "--sjs-general-backcolor-dark": "rgba(60, 63, 74, 1)",
        "--sjs-general-backcolor-dim": "rgba(38, 40, 47, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(46, 48, 55, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(51, 53, 61, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(125, 129, 143, 1)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(125, 130, 148, 1)",
        "--sjs-primary-backcolor": "rgba(58, 202, 211, 1)",
        "--sjs-primary-backcolor-light": "rgba(67, 70, 80, 1)",
        "--sjs-primary-backcolor-dark": "rgba(92, 224, 233, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 0px rgba(33, 35, 43, 1)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-inner": "0px -2px 0px 0px rgba(33, 35, 43, 1)",
        "--sjs-border-light": "rgba(65, 69, 83, 1)",
        "--sjs-border-default": "rgba(97, 101, 118, 1)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SolidDark = Theme;


/***/ }),

/***/ "./src/themes/solid-light-panelless.ts":
/*!*********************************************!*\
  !*** ./src/themes/solid-light-panelless.ts ***!
  \*********************************************/
/*! exports provided: default, SolidLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidLightPanelless", function() { return SolidLightPanelless; });
var Theme = {
    "themeName": "solid",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(245, 245, 245, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(234, 234, 234, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.43)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(46, 172, 180, 1)",
        "--sjs-primary-backcolor-light": "rgba(46, 172, 180, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(23, 156, 165, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 2px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SolidLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/solid-light.ts":
/*!***********************************!*\
  !*** ./src/themes/solid-light.ts ***!
  \***********************************/
/*! exports provided: default, SolidLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SolidLight", function() { return SolidLight; });
var Theme = {
    "themeName": "solid",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dark": "rgba(243, 243, 243, 1)",
        "--sjs-general-backcolor-dim": "rgba(46, 172, 180, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(245, 245, 245, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(234, 234, 234, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.43)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.8)",
        "--sjs-primary-backcolor": "rgba(46, 172, 180, 1)",
        "--sjs-primary-backcolor-light": "rgba(46, 172, 180, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(23, 156, 165, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 0px rgba(0, 0, 0, 0.2)",
        "--sjs-shadow-medium": "0px 2px 6px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-large": "0px 8px 16px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "inset 0px 2px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.09)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.16)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var SolidLight = Theme;


/***/ }),

/***/ "./src/themes/threedimensional-dark-panelless.ts":
/*!*******************************************************!*\
  !*** ./src/themes/threedimensional-dark-panelless.ts ***!
  \*******************************************************/
/*! exports provided: default, ThreeDimensionalDarkPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalDarkPanelless", function() { return ThreeDimensionalDarkPanelless; });
var Theme = {
    "themeName": "threedimensional",
    "colorPalette": "dark",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(38, 38, 38, 1)",
        "--sjs-general-backcolor-dark": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim": "rgba(28, 28, 28, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(243, 87, 134, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.05)",
        "--sjs-primary-backcolor-dark": "rgba(250, 118, 157, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 2px rgba(64, 64, 64, 1),0px 0px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(64, 64, 64, 1),0px 8px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-shadow-large": "0px 0px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(64, 64, 64, 1),0px 2px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ThreeDimensionalDarkPanelless = Theme;


/***/ }),

/***/ "./src/themes/threedimensional-dark.ts":
/*!*********************************************!*\
  !*** ./src/themes/threedimensional-dark.ts ***!
  \*********************************************/
/*! exports provided: default, ThreeDimensionalDark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalDark", function() { return ThreeDimensionalDark; });
var Theme = {
    "themeName": "threedimensional",
    "colorPalette": "dark",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(38, 38, 38, 1)",
        "--sjs-general-backcolor-dark": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim": "rgba(28, 28, 28, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(48, 48, 48, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(58, 58, 58, 1)",
        "--sjs-general-forecolor": "rgba(255, 255, 255, 0.78)",
        "--sjs-general-forecolor-light": "rgba(255, 255, 255, 0.42)",
        "--sjs-general-dim-forecolor": "rgba(255, 255, 255, 0.79)",
        "--sjs-general-dim-forecolor-light": "rgba(255, 255, 255, 0.45)",
        "--sjs-primary-backcolor": "rgba(243, 87, 134, 1)",
        "--sjs-primary-backcolor-light": "rgba(255, 255, 255, 0.05)",
        "--sjs-primary-backcolor-dark": "rgba(250, 118, 157, 1)",
        "--sjs-primary-forecolor": "rgba(32, 32, 32, 1)",
        "--sjs-primary-forecolor-light": "rgba(32, 32, 32, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-secondary-forecolor-light": "rgba(48, 48, 48, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 2px rgba(64, 64, 64, 1),0px 0px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(64, 64, 64, 1),0px 8px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-shadow-large": "0px 0px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(64, 64, 64, 1),0px 2px 0px 2px rgba(64, 64, 64, 1)",
        "--sjs-border-light": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-default": "rgba(255, 255, 255, 0.12)",
        "--sjs-border-inside": "rgba(255, 255, 255, 0.08)",
        "--sjs-special-red": "rgba(254, 76, 108, 1)",
        "--sjs-special-red-light": "rgba(254, 76, 108, 0.1)",
        "--sjs-special-red-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-green": "rgba(36, 197, 164, 1)",
        "--sjs-special-green-light": "rgba(36, 197, 164, 0.1)",
        "--sjs-special-green-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-blue": "rgba(91, 151, 242, 1)",
        "--sjs-special-blue-light": "rgba(91, 151, 242, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(48, 48, 48, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ThreeDimensionalDark = Theme;


/***/ }),

/***/ "./src/themes/threedimensional-light-panelless.ts":
/*!********************************************************!*\
  !*** ./src/themes/threedimensional-light-panelless.ts ***!
  \********************************************************/
/*! exports provided: default, ThreeDimensionalLightPanelless */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalLightPanelless", function() { return ThreeDimensionalLightPanelless; });
var Theme = {
    "themeName": "threedimensional",
    "colorPalette": "light",
    "isPanelless": true,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dark": "rgba(242, 242, 242, 1)",
        "--sjs-general-backcolor-dim": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(242, 242, 242, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(217, 74, 100, 1)",
        "--sjs-primary-backcolor-light": "rgba(217, 74, 100, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(189, 61, 84, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 2px rgba(228, 228, 228, 1),0px 0px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(228, 228, 228, 1),0px 8px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-shadow-large": "0px 0px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(228, 228, 228, 1),0px -2px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.08)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.08)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ThreeDimensionalLightPanelless = Theme;


/***/ }),

/***/ "./src/themes/threedimensional-light.ts":
/*!**********************************************!*\
  !*** ./src/themes/threedimensional-light.ts ***!
  \**********************************************/
/*! exports provided: default, ThreeDimensionalLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThreeDimensionalLight", function() { return ThreeDimensionalLight; });
var Theme = {
    "themeName": "threedimensional",
    "colorPalette": "light",
    "isPanelless": false,
    "cssVariables": {
        "--sjs-general-backcolor": "rgba(248, 248, 248, 1)",
        "--sjs-general-backcolor-dark": "rgba(242, 242, 242, 1)",
        "--sjs-general-backcolor-dim": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-light": "rgba(255, 255, 255, 1)",
        "--sjs-general-backcolor-dim-dark": "rgba(242, 242, 242, 1)",
        "--sjs-general-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-general-dim-forecolor": "rgba(0, 0, 0, 0.91)",
        "--sjs-general-dim-forecolor-light": "rgba(0, 0, 0, 0.45)",
        "--sjs-primary-backcolor": "rgba(217, 74, 100, 1)",
        "--sjs-primary-backcolor-light": "rgba(217, 74, 100, 0.1)",
        "--sjs-primary-backcolor-dark": "rgba(189, 61, 84, 1)",
        "--sjs-primary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-primary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-base-unit": "8px",
        "--sjs-corner-radius": "4px",
        "--sjs-secondary-backcolor": "rgba(255, 152, 20, 1)",
        "--sjs-secondary-backcolor-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-secondary-backcolor-semi-light": "rgba(255, 152, 20, 0.25)",
        "--sjs-secondary-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-secondary-forecolor-light": "rgba(255, 255, 255, 0.25)",
        "--sjs-shadow-small": "0px 2px 0px 2px rgba(228, 228, 228, 1),0px 0px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-shadow-medium": "0px 0px 0px 2px rgba(228, 228, 228, 1),0px 8px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-shadow-large": "0px 0px 0px 0px rgba(0, 0, 0, 0.1)",
        "--sjs-shadow-inner": "0px 0px 0px 2px rgba(228, 228, 228, 1),0px -2px 0px 2px rgba(228, 228, 228, 1)",
        "--sjs-border-light": "rgba(0, 0, 0, 0.08)",
        "--sjs-border-default": "rgba(0, 0, 0, 0.08)",
        "--sjs-border-inside": "rgba(0, 0, 0, 0.16)",
        "--sjs-special-red": "rgba(229, 10, 62, 1)",
        "--sjs-special-red-light": "rgba(229, 10, 62, 0.1)",
        "--sjs-special-red-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-green": "rgba(25, 179, 148, 1)",
        "--sjs-special-green-light": "rgba(25, 179, 148, 0.1)",
        "--sjs-special-green-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-blue": "rgba(67, 127, 217, 1)",
        "--sjs-special-blue-light": "rgba(67, 127, 217, 0.1)",
        "--sjs-special-blue-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-special-yellow": "rgba(255, 152, 20, 1)",
        "--sjs-special-yellow-light": "rgba(255, 152, 20, 0.1)",
        "--sjs-special-yellow-forecolor": "rgba(255, 255, 255, 1)",
        "--sjs-article-font-xx-large-textDecoration": "none",
        "--sjs-article-font-xx-large-fontWeight": "700",
        "--sjs-article-font-xx-large-fontStyle": "normal",
        "--sjs-article-font-xx-large-fontStretch": "normal",
        "--sjs-article-font-xx-large-letterSpacing": "0",
        "--sjs-article-font-xx-large-lineHeight": "64px",
        "--sjs-article-font-xx-large-paragraphIndent": "0px",
        "--sjs-article-font-xx-large-textCase": "none",
        "--sjs-article-font-x-large-textDecoration": "none",
        "--sjs-article-font-x-large-fontWeight": "700",
        "--sjs-article-font-x-large-fontStyle": "normal",
        "--sjs-article-font-x-large-fontStretch": "normal",
        "--sjs-article-font-x-large-letterSpacing": "0",
        "--sjs-article-font-x-large-lineHeight": "56px",
        "--sjs-article-font-x-large-paragraphIndent": "0px",
        "--sjs-article-font-x-large-textCase": "none",
        "--sjs-article-font-large-textDecoration": "none",
        "--sjs-article-font-large-fontWeight": "700",
        "--sjs-article-font-large-fontStyle": "normal",
        "--sjs-article-font-large-fontStretch": "normal",
        "--sjs-article-font-large-letterSpacing": "0",
        "--sjs-article-font-large-lineHeight": "40px",
        "--sjs-article-font-large-paragraphIndent": "0px",
        "--sjs-article-font-large-textCase": "none",
        "--sjs-article-font-medium-textDecoration": "none",
        "--sjs-article-font-medium-fontWeight": "700",
        "--sjs-article-font-medium-fontStyle": "normal",
        "--sjs-article-font-medium-fontStretch": "normal",
        "--sjs-article-font-medium-letterSpacing": "0",
        "--sjs-article-font-medium-lineHeight": "32px",
        "--sjs-article-font-medium-paragraphIndent": "0px",
        "--sjs-article-font-medium-textCase": "none",
        "--sjs-article-font-default-textDecoration": "none",
        "--sjs-article-font-default-fontWeight": "400",
        "--sjs-article-font-default-fontStyle": "normal",
        "--sjs-article-font-default-fontStretch": "normal",
        "--sjs-article-font-default-letterSpacing": "0",
        "--sjs-article-font-default-lineHeight": "28px",
        "--sjs-article-font-default-paragraphIndent": "0px",
        "--sjs-article-font-default-textCase": "none"
    }
};
/* harmony default export */ __webpack_exports__["default"] = (Theme);
var ThreeDimensionalLight = Theme;


/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./src/components/action-container-view-model.ts":
/*!*******************************************************!*\
  !*** ./src/components/action-container-view-model.ts ***!
  \*******************************************************/
/*! exports provided: SurveyElementActionContainer, SurveyElementAdornerBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyElementActionContainer", function() { return SurveyElementActionContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyElementAdornerBase", function() { return SurveyElementAdornerBase; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");



var SurveyElementActionContainer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyElementActionContainer, _super);
    function SurveyElementActionContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SurveyElementActionContainer.prototype.setModeForActions = function (modes, defaultMode) {
        this.visibleActions.forEach(function (action) {
            action.mode = modes[action.id] || defaultMode;
        });
    };
    SurveyElementActionContainer.prototype.skipInputType = function (item, dimension) {
        return item.id != "convertInputType" ? dimension : 0;
    };
    SurveyElementActionContainer.prototype.skipQuestionType = function (item, dimension) {
        return item.id != "convertInputType" && item.id != "convertTo" ? dimension : 0;
    };
    SurveyElementActionContainer.prototype.fit = function (dimension, dotsItemSize) {
        var _this = this;
        var _a;
        if (dimension <= 0)
            return;
        this.dotsItem.visible = false;
        var items = this.visibleActions;
        if (dimension >= items.reduce(function (sum, i) { return sum += i.maxDimension; }, 0)) {
            items.forEach(function (i) { return i.mode = "large"; });
            return;
        }
        if (dimension >= items.reduce(function (sum, i) { return sum += _this.skipInputType(i, i.maxDimension); }, 0)) {
            this.setModeForActions({ "convertInputType": "removed" }, "large");
            return;
        }
        if (dimension >= items.reduce(function (sum, i) { return sum += _this.skipQuestionType(i, i.minDimension); }, (_a = this.getActionById("convertTo")) === null || _a === void 0 ? void 0 : _a.maxDimension)) {
            this.setModeForActions({ "convertInputType": "removed", "convertTo": "large" }, "small");
            return;
        }
        if (dimension >= items.reduce(function (sum, i) { return sum += _this.skipInputType(i, i.minDimension); }, 0)) {
            this.setModeForActions({ "convertInputType": "removed", "convertTo": "small" }, "small");
            return;
        }
        this.setModeForActions({ "convertInputType": "removed", "convertTo": "small" }, "popup");
        this.dotsItem.visible = true;
        this.hiddenItemsListModel.setItems(items.filter(function (i) { return i.mode == "popup"; }).map(function (i) { return i.innerItem; }));
    };
    return SurveyElementActionContainer;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["AdaptiveActionContainer"]));

var SurveyElementAdornerBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyElementAdornerBase, _super);
    function SurveyElementAdornerBase(creator, surveyElement) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.surveyElement = surveyElement;
        _this.selectedPropPageFunc = function (sender, options) {
            if (options.name === "isSelectedInDesigner") {
                _this.onElementSelectedChanged(options.newValue);
            }
        };
        _this.sidebarFlyoutModeChangedFunc = function (sender, options) {
            if (options.name === "flyoutMode") {
                _this.updateActionsProperties();
            }
        };
        _this.actionContainer = new SurveyElementActionContainer();
        _this.actionContainer.dotsItem.iconSize = 16;
        _this.actionContainer.dotsItem.popupModel.horizontalPosition = "center";
        var actions = [];
        _this.buildActions(actions);
        _this.setSurveyElement(surveyElement);
        if (_this.surveyElement) {
            _this.creator.sidebar.onPropertyChanged.add(_this.sidebarFlyoutModeChangedFunc);
            _this.creator.onElementMenuItemsChanged(_this.surveyElement, actions);
            _this.actionContainer.setItems(actions);
            _this.updateActionsProperties();
        }
        _this.setShowAddQuestionButton(true);
        return _this;
    }
    SurveyElementAdornerBase.prototype.detachElement = function (surveyElement) {
        if (surveyElement) {
            surveyElement.onPropertyChanged.remove(this.selectedPropPageFunc);
        }
    };
    SurveyElementAdornerBase.prototype.attachElement = function (surveyElement) {
        if (surveyElement) {
            surveyElement.onPropertyChanged.add(this.selectedPropPageFunc);
        }
    };
    SurveyElementAdornerBase.prototype.setSurveyElement = function (surveyElement) {
        this.detachElement(this.surveyElement);
        this.surveyElement = surveyElement;
        this.attachElement(this.surveyElement);
        this.updateActionsProperties();
    };
    SurveyElementAdornerBase.prototype.checkActionProperties = function () {
        if (this.creator.isElementSelected(this.surveyElement)) {
            this.updateActionsProperties();
        }
    };
    SurveyElementAdornerBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.detachElement(this.surveyElement);
        if (!this.actionContainer.isDisposed) {
            this.actionContainer.dispose();
        }
        this.creator.sidebar.onPropertyChanged.remove(this.sidebarFlyoutModeChangedFunc);
        this.selectedPropPageFunc = undefined;
        this.sidebarFlyoutModeChangedFunc = undefined;
    };
    SurveyElementAdornerBase.prototype.onElementSelectedChanged = function (isSelected) {
        if (!isSelected)
            return;
        this.updateActionsProperties();
    };
    SurveyElementAdornerBase.prototype.updateActionsProperties = function () {
        if (this.isDisposed)
            return;
        this.updateElementAllowOptions(this.creator.getElementAllowOperations(this.surveyElement), this.isOperationsAllow());
    };
    SurveyElementAdornerBase.prototype.updateElementAllowOptions = function (options, operationsAllow) {
        this.allowDragging = operationsAllow && options.allowDragging;
        this.allowEditOption = (options.allowEdit == undefined || !!options.allowEdit);
        this.updateActionVisibility("delete", operationsAllow && options.allowDelete);
        this.updateActionVisibility("duplicate", operationsAllow && options.allowCopy);
        var settingsVisibility = (options.allowEdit !== undefined) ? (operationsAllow && options.allowEdit) : this.creator.sidebar.flyoutMode;
        this.updateActionVisibility("settings", settingsVisibility);
        this.setShowAddQuestionButton(options.allowEdit !== false);
    };
    SurveyElementAdornerBase.prototype.isOperationsAllow = function () {
        return !this.creator.readOnly;
    };
    SurveyElementAdornerBase.prototype.updateActionVisibility = function (id, isVisible) {
        var action = this.getActionById(id);
        if (!action)
            return;
        if (action.visible == isVisible)
            return;
        action.visible = isVisible;
    };
    SurveyElementAdornerBase.prototype.getActionById = function (id) {
        var actions = this.actionContainer.actions;
        for (var i = 0; i < actions.length; i++) {
            if (actions[i].id === id)
                return actions[i];
        }
        return null;
    };
    SurveyElementAdornerBase.prototype.buildActions = function (items) {
        var _this = this;
        items.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "duplicate",
            iconName: "icon-duplicate_16x16",
            css: "sv-action-bar-item--secondary",
            title: this.creator.getLocString("survey.duplicate"),
            visibleIndex: 10,
            iconSize: 16,
            action: function () {
                _this.duplicate();
            }
        }));
        items.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "settings",
            iconName: "icon-settings_16x16",
            css: "sv-action-bar-item--secondary",
            title: this.creator.getLocString("ed.settings"),
            locTooltipName: "ed.settingsTooltip",
            visibleIndex: 20,
            iconSize: 16,
            action: function () {
                _this.creator.setShowSidebar(true, true);
                if (!_this.creator.isMobileView) {
                    _this.creator.propertyGrid.getAllQuestions()[0].focus();
                }
            }
        }));
        items.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "delete",
            iconName: "icon-delete_16x16",
            css: "sv-action-bar-item--secondary",
            //needSeparator: items.length > 0,
            title: this.creator.getLocString("pe.delete"),
            visibleIndex: 30,
            iconSize: 16,
            action: function () {
                _this.delete();
            }
        }));
    };
    Object.defineProperty(SurveyElementAdornerBase.prototype, "allowEdit", {
        get: function () {
            return !!this.creator && !this.creator.readOnly && this.allowEditOption;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementAdornerBase.prototype, "showAddQuestionButton", {
        get: function () {
            return this.getPropertyValue("showAddQuestionButton");
        },
        enumerable: false,
        configurable: true
    });
    SurveyElementAdornerBase.prototype.setShowAddQuestionButton = function (val) {
        this.setPropertyValue("showAddQuestionButton", val && this.allowEdit && _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].designer.showAddQuestionButton);
    };
    SurveyElementAdornerBase.prototype.duplicate = function () { };
    SurveyElementAdornerBase.prototype.delete = function () {
        this.creator.deleteElement(this.surveyElement);
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveyElementAdornerBase.prototype, "allowDragging", void 0);
    return SurveyElementAdornerBase;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/creator.scss":
/*!*************************************!*\
  !*** ./src/components/creator.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/embedded-survey.ts":
/*!*******************************************!*\
  !*** ./src/components/embedded-survey.ts ***!
  \*******************************************/
/*! exports provided: QuestionEmbeddedSurveyModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionEmbeddedSurveyModel", function() { return QuestionEmbeddedSurveyModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var QuestionEmbeddedSurveyModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionEmbeddedSurveyModel, _super);
    function QuestionEmbeddedSurveyModel(name) {
        var _this = _super.call(this, name) || this;
        _this.onEmbeddedSurveyValueChanged = function () { };
        return _this;
    }
    Object.defineProperty(QuestionEmbeddedSurveyModel.prototype, "embeddedSurvey", {
        get: function () {
            return this.embeddedSurveyValue;
        },
        set: function (val) {
            this.embeddedSurveyValue = val;
            this.onEmbeddedSurveyValueChanged();
        },
        enumerable: false,
        configurable: true
    });
    QuestionEmbeddedSurveyModel.prototype.getType = function () {
        return "embeddedsurvey";
    };
    return QuestionEmbeddedSurveyModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionNonValue"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("embeddedsurvey", [], function () {
    return new QuestionEmbeddedSurveyModel("");
}, "nonvalue");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("embeddedsurvey", function (name) { return new QuestionEmbeddedSurveyModel(name); });


/***/ }),

/***/ "./src/components/header/logo-image.scss":
/*!***********************************************!*\
  !*** ./src/components/header/logo-image.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/header/logo-image.ts":
/*!*********************************************!*\
  !*** ./src/components/header/logo-image.ts ***!
  \*********************************************/
/*! exports provided: LogoImageViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogoImageViewModel", function() { return LogoImageViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");



__webpack_require__(/*! ./logo-image.scss */ "./src/components/header/logo-image.scss");
var LogoImageViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogoImageViewModel, _super);
    function LogoImageViewModel(creator, root) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.root = root;
        return _this;
    }
    Object.defineProperty(LogoImageViewModel.prototype, "allowEdit", {
        get: function () {
            return !this.creator.readOnly;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogoImageViewModel.prototype, "containerCss", {
        get: function () {
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
                .append("svc-logo-image-container")
                .append("svc-logo-image-container--editable", this.allowEdit).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogoImageViewModel.prototype, "survey", {
        get: function () {
            return this.creator.survey;
        },
        enumerable: false,
        configurable: true
    });
    LogoImageViewModel.prototype.uploadFile = function (model, fileInput, files) {
        model.isUploading = true;
        model.creator.uploadFiles(files, undefined, function (_, link) {
            model.creator.survey.logo = link;
            fileInput.value = "";
            model.isUploading = false;
        });
    };
    LogoImageViewModel.prototype.chooseFile = function (model) {
        if (this.allowEdit) {
            var fileInput_1 = model.root.getElementsByClassName("svc-choose-file-input")[0];
            if (fileInput_1.files.length === 0) {
                model.creator.chooseFiles(fileInput_1, function (files) {
                    model.uploadFile(model, fileInput_1, files);
                });
            }
            else
                model.uploadFile(model, fileInput_1, [fileInput_1.files[0]]);
        }
    };
    LogoImageViewModel.prototype.remove = function (model) {
        model.creator.survey.logo = "";
    };
    Object.defineProperty(LogoImageViewModel.prototype, "chooseLogoPlaceholder", {
        get: function () {
            return this.creator.getLocString("ed.chooseLogoPlaceholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogoImageViewModel.prototype, "acceptedTypes", {
        get: function () {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["getAcceptedTypesByContentMode"])("image");
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], LogoImageViewModel.prototype, "isUploading", void 0);
    return LogoImageViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/image-item-value.scss":
/*!**********************************************!*\
  !*** ./src/components/image-item-value.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/image-item-value.ts":
/*!********************************************!*\
  !*** ./src/components/image-item-value.ts ***!
  \********************************************/
/*! exports provided: ImageItemValueWrapperViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageItemValueWrapperViewModel", function() { return ImageItemValueWrapperViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _item_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-value */ "./src/components/item-value.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");




__webpack_require__(/*! ./image-item-value.scss */ "./src/components/image-item-value.scss");
var ImageItemValueWrapperViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ImageItemValueWrapperViewModel, _super);
    function ImageItemValueWrapperViewModel(creator, question, item, templateData, itemsRoot) {
        var _this = _super.call(this, creator, question, item) || this;
        _this.question = question;
        _this.item = item;
        _this.templateData = templateData;
        _this.itemsRoot = itemsRoot;
        _this.isChoosingNewFile = false;
        _this.onDragOver = function (event) {
            _this.isFileDragging = true;
            event.dataTransfer.dropEffect = "copy";
            event.preventDefault();
        };
        _this.onDrop = function (event) {
            _this.isFileDragging = false;
            event.preventDefault();
            var input = event.dataTransfer;
            if (!input || !input.files || input.files.length < 1)
                return;
            var files = [];
            for (var i = 0; i < input.files.length; i++) {
                files.push(input.files[i]);
            }
            _this.uploadFiles(files);
        };
        _this.onDragLeave = function (event) {
            _this.isFileDragging = false;
        };
        return _this;
    }
    ImageItemValueWrapperViewModel.prototype.getRootCss = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append("svc-image-item-value-wrapper")
            .append("svc-image-item-value")
            .append("svc-image-item-value--new", this.isNew || this.isUploading)
            .append("svc-image-item-value-wrapper--ghost", this.isDragDropGhost)
            .append("svc-image-item-value--file-dragging", this.isFileDragging)
            .append("svc-image-item-value--single", this.getIsNewItemSingle()).toString();
    };
    ImageItemValueWrapperViewModel.prototype.getIsNewItemSingle = function () {
        return this.isNew && this.question.choices.length === 0;
    };
    ImageItemValueWrapperViewModel.prototype.chooseFile = function (model) {
        var fileInput = model.itemsRoot.getElementsByClassName("svc-choose-file-input")[0];
        model.creator.chooseFiles(fileInput, function (files) {
            model.isUploading = true;
            model.creator.uploadFiles(files, model.question, function (_, link) {
                model.item.imageLink = link;
                model.isUploading = false;
            });
        });
    };
    ImageItemValueWrapperViewModel.prototype.uploadFiles = function (files) {
        var _this = this;
        this.isUploading = true;
        this.creator.uploadFiles(files, this.question, function (_, link) {
            _this.creator.createNewItemValue(_this.question, _this.isChoosingNewFile, function (res) {
                res.imageLink = link;
            });
            _this.isChoosingNewFile = false;
            _this.isUploading = false;
        });
    };
    ImageItemValueWrapperViewModel.prototype.chooseNewFile = function (model) {
        var _this = this;
        var fileInput = model.itemsRoot.getElementsByClassName("svc-choose-file-input")[0];
        model.creator.chooseFiles(fileInput, function (files) {
            _this.isChoosingNewFile = true;
            model.uploadFiles(files);
        });
    };
    Object.defineProperty(ImageItemValueWrapperViewModel.prototype, "acceptedTypes", {
        get: function () {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getAcceptedTypesByContentMode"])(this.question.contentMode);
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ImageItemValueWrapperViewModel.prototype, "isFileDragging", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ImageItemValueWrapperViewModel.prototype, "isUploading", void 0);
    return ImageItemValueWrapperViewModel;
}(_item_value__WEBPACK_IMPORTED_MODULE_2__["ItemValueWrapperViewModel"]));

// chooseFiles() {
//   editor.chooseFiles(fileInput, (files: File[]) => {
//     var itemText = Survey.surveyLocalization.getString("choices_Item");
//     var nextValue = getNextValue(
//       itemText,
//       (model.choices || []).map(c => c.value)
//     );
//     var itemValue = new (<any>Survey)["ItemValue"](
//       nextValue,
//       undefined,
//       "imageitemvalue"
//     );
//     itemValue.locOwner = <any>{
//       getLocale: () => {
//         if (!!model["getLocale"]) return model.getLocale();
//         return "";
//       },
//       getMarkdownHtml: (text: string) => {
//         return text;
//       },
//       getProcessedText: (text: string) => {
//         return text;
//       }
//     };
//     model.choices = model.choices.concat([itemValue]);
//     itemValue = model.choices[model.choices.length - 1];
//     editor.onQuestionEditorChanged(model);
//     editor.onItemValueAddedCallback(
//       model,
//       "choices",
//       itemValue,
//       model.choices
//     );
//     var property = Survey.Serializer.findProperty(
//       "imageitemvalue",
//       "imageLink"
//     );
//     editor.uploadFiles(files, (_, link) => {
//       var options = {
//         propertyName: property.name,
//         obj: itemValue,
//         value: link,
//         newValue: null,
//         doValidation: false
//       };
//       editor.onValueChangingCallback(options);
//       link = options.newValue === null ? options.value : options.newValue;
//       itemValue["imageLink"] = link;
//       editor.onPropertyValueChanged(property, itemValue, link);
//       editor.onQuestionEditorChanged(model);
//     });
//   });
// });
// }


/***/ }),

/***/ "./src/components/item-value.scss":
/*!****************************************!*\
  !*** ./src/components/item-value.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/item-value.ts":
/*!**************************************!*\
  !*** ./src/components/item-value.ts ***!
  \**************************************/
/*! exports provided: ItemValueWrapperViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemValueWrapperViewModel", function() { return ItemValueWrapperViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _string_editor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string-editor */ "./src/components/string-editor.ts");


__webpack_require__(/*! ./item-value.scss */ "./src/components/item-value.scss");



var ItemValueWrapperViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ItemValueWrapperViewModel, _super);
    function ItemValueWrapperViewModel(creator, question, item) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.question = question;
        _this.item = item;
        _this.canTouchItems = true;
        _this.focusCameFromDown = false;
        _this.startDragItemValue = function (pointerDownEvent, currentTarget) {
            _this.dragDropHelper.startDrag(pointerDownEvent, _this.item, _this.question, currentTarget);
        };
        _this.handleDragDropGhostPositionChanged = function () {
            _this.ghostPosition = _this.getGhostPosition(_this.item);
            _this.isDragDropGhost = _this.item === _this.dragDropHelper.draggedElement;
            if (_this.item === _this.dragDropHelper.prevDropTarget) {
                _this.isDragDropMoveDown = _this.item.isDragDropMoveDown;
                _this.isDragDropMoveUp = _this.item.isDragDropMoveUp;
            }
            else {
                _this.isDragDropMoveDown = false;
                _this.isDragDropMoveUp = false;
            }
        };
        _this.updateIsNew(question, item);
        var updateFromProperty = function () {
            _this.updateIsNew(question, item);
        };
        if (question.noneItem === item) {
            question.registerFunctionOnPropertyValueChanged("showNoneItem", updateFromProperty);
        }
        else if (question.otherItem === item) {
            question.registerFunctionOnPropertyValueChanged("showOtherItem", updateFromProperty);
        }
        else if (question.isDescendantOf("checkbox") &&
            question.selectAllItem === item) {
            question.registerFunctionOnPropertyValueChanged("showSelectAllItem", updateFromProperty);
        }
        else if (_this.isNew) {
            question.visibleChoicesChangedCallback = function () {
                _this.updateNewItemValue();
            };
            _this.updateNewItemValue();
        }
        _this.dragDropHelper.onGhostPositionChanged.add(_this.handleDragDropGhostPositionChanged);
        _this.dragOrClickHelper = new survey_core__WEBPACK_IMPORTED_MODULE_1__["DragOrClickHelper"](_this.startDragItemValue);
        _this.allowItemOperations = { allowDelete: undefined, allowEdit: undefined, allowAdd: undefined };
        _this.collectionProperty = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(question.getType(), _this.collectionPropertyName);
        _this.creator.onCollectionItemAllowingCallback(question, _this.collectionProperty, question.visibleChoices, _this.item, _this.allowItemOperations);
        if (_this.allowItemOperations.allowDelete === undefined) {
            _this.allowItemOperations.allowDelete = true;
        }
        if (_this.allowItemOperations.allowAdd === undefined) {
            _this.allowItemOperations.allowAdd = true;
        }
        if (!_this.creator.isCanModifyProperty(question, "choices")) {
            _this.canTouchItems = false;
        }
        return _this;
    }
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "canBeDragged", {
        get: function () {
            return !this.isNew && this.question.choices.indexOf(this.item) > -1;
        },
        enumerable: false,
        configurable: true
    });
    ItemValueWrapperViewModel.prototype.isBanStartDrag = function (pointerDownEvent) {
        if (!this.isDraggable)
            return true;
        var isContentEditable = pointerDownEvent.target.getAttribute("contenteditable") === "true";
        return isContentEditable || !this.canBeDragged;
    };
    ItemValueWrapperViewModel.prototype.updateNewItemValue = function () {
        if (!this.creator || !this.question || !this.question.newItem)
            return;
        this.question.newItem.value = this.creator.getNextItemValue(this.question);
        this.question.newItem.text = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextItemText"])(this.question.choices);
    };
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "collectionPropertyName", {
        get: function () {
            return !!this.item.ownerPropertyName ? this.item.ownerPropertyName : "choices";
        },
        enumerable: false,
        configurable: true
    });
    ItemValueWrapperViewModel.prototype.onPointerDown = function (pointerDownEvent) {
        if (this.isBanStartDrag(pointerDownEvent))
            return true;
        this.dragOrClickHelper.onPointerDown(pointerDownEvent);
        return false;
    };
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "dragDropHelper", {
        get: function () {
            return this.creator.dragDropChoices;
        },
        enumerable: false,
        configurable: true
    });
    ItemValueWrapperViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.dragDropHelper.onGhostPositionChanged.remove(this.handleDragDropGhostPositionChanged);
    };
    ItemValueWrapperViewModel.prototype.getGhostPosition = function (item) {
        if (this.dragDropHelper.dropTarget !== item)
            return null;
        return this.dragDropHelper.isBottom ? "bottom" : "top";
    };
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "isDraggable", {
        get: function () {
            return this.isDraggableItem(this.item);
        },
        enumerable: false,
        configurable: true
    });
    ItemValueWrapperViewModel.prototype.isDraggableItem = function (item) {
        if (this.creator.readOnly || !this.canTouchItems)
            return false;
        return this.question.choices.indexOf(item) !== -1;
    };
    ItemValueWrapperViewModel.prototype.add = function (model) {
        if (model.question.noneItem === model.item) {
            model.question.hasNone = true;
            return;
        }
        else if (model.question.otherItem === model.item) {
            model.question.hasOther = true;
            return;
        }
        else if (model.question.isDescendantOf("checkbox") &&
            model.question.selectAllItem === model.item) {
            model.question.hasSelectAll = true;
            return;
        }
        else {
            this.addNewItem(model.item, model.question, model.creator);
        }
        this.updateIsNew(model.question, model.item);
    };
    ItemValueWrapperViewModel.prototype.addNewItem = function (item, question, creator) {
        item.value = "newitem";
        var itemValue = creator.createNewItemValue(question);
        this.updateNewItemValue();
        _string_editor__WEBPACK_IMPORTED_MODULE_4__["StringEditorConnector"].get(itemValue.locText).setAutoFocus();
    };
    ItemValueWrapperViewModel.prototype.remove = function (model) {
        if (model.question.noneItem === model.item) {
            model.question.hasNone = false;
        }
        else if (model.question.otherItem === model.item) {
            model.question.hasOther = false;
        }
        else if (model.question.isDescendantOf("checkbox") &&
            model.question.selectAllItem === model.item) {
            model.question.hasSelectAll = false;
        }
        else {
            var choices = model.question.choices;
            var index = choices.indexOf(model.item);
            if (!this.creator.onCollectionItemDeletingCallback(model.question, this.collectionProperty, choices, model.item))
                return;
            var indexToFocus = this.findNextElementIndexToRemove(index);
            model.question.choices.splice(index, 1);
            this.focusNextElementToRemove(indexToFocus);
        }
        this.updateIsNew(model.question, model.item);
    };
    ItemValueWrapperViewModel.prototype.onFocusOut = function (event) {
        this.question["_lastActiveItemValueIndex"] = this.question.choices.indexOf(this.item);
    };
    ItemValueWrapperViewModel.prototype.findNextElementIndexToRemove = function (index) {
        var indexToFocus = 0;
        if (this.question.choices.length > 0) {
            if (index < this.question["_lastActiveItemValueIndex"]) {
                indexToFocus = index - 1;
            }
            else {
                indexToFocus = index;
            }
            if (indexToFocus < 0)
                indexToFocus = 0;
            if (indexToFocus >= this.question.choices.length - 2)
                indexToFocus = this.question.choices.length - 2;
        }
        return indexToFocus;
    };
    ItemValueWrapperViewModel.prototype.focusNextElementToRemove = function (index) {
        var _this = this;
        setTimeout(function () {
            var _a;
            var el = document.getElementById(_this.question.id);
            var buttons = el.querySelectorAll(".svc-item-value-controls__remove");
            (_a = buttons[index]) === null || _a === void 0 ? void 0 : _a.focus();
        }, 100);
    };
    ItemValueWrapperViewModel.prototype.updateIsNew = function (question, item) {
        this.isNew = !question.isItemInList(item);
    };
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "allowRemove", {
        get: function () {
            var minChoices = this.creator.minimumChoicesCount;
            if (minChoices > 0 && minChoices >= this.question.choices.length)
                return false;
            var isNew = !this.question.isItemInList(this.item);
            return !this.creator.readOnly && this.canTouchItems && (this.allowItemOperations.allowDelete) && !isNew;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "tooltip", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])(this.isNew ? "pe.addItem" : "pe.removeItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "dragTooltip", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.dragItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValueWrapperViewModel.prototype, "allowAdd", {
        get: function () {
            var isNew = !this.question.isItemInList(this.item);
            return !this.creator.readOnly && this.canTouchItems && (this.allowItemOperations.allowAdd) && isNew;
        },
        enumerable: false,
        configurable: true
    });
    ItemValueWrapperViewModel.prototype.select = function (model, event) {
        if (model.question.inMatrixMode)
            return;
        model.creator.selectElement(model.question, "choices", false);
        event && event.stopPropagation();
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ItemValueWrapperViewModel.prototype, "isNew", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ItemValueWrapperViewModel.prototype, "isDragging", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ItemValueWrapperViewModel.prototype, "isDragDropGhost", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ItemValueWrapperViewModel.prototype, "isDragDropMoveDown", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], ItemValueWrapperViewModel.prototype, "isDragDropMoveUp", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: null })
    ], ItemValueWrapperViewModel.prototype, "ghostPosition", void 0);
    return ItemValueWrapperViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/link-value.scss":
/*!****************************************!*\
  !*** ./src/components/link-value.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/link-value.ts":
/*!**************************************!*\
  !*** ./src/components/link-value.ts ***!
  \**************************************/
/*! exports provided: QuestionLinkValueModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionLinkValueModel", function() { return QuestionLinkValueModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");



__webpack_require__(/*! ./link-value.scss */ "./src/components/link-value.scss");
var QuestionLinkValueModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionLinkValueModel, _super);
    function QuestionLinkValueModel(name, json) {
        if (json === void 0) { json = null; }
        var _this = _super.call(this, name) || this;
        var linkValueText = json && !json.showValueInLink && (_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.set")) + " " + json.title || null;
        _this.linkValueText = linkValueText || _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.emptyValue");
        return _this;
    }
    QuestionLinkValueModel.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "value") {
            this.updateLinkValueText();
            if (this.allowClear) {
                this.showClear = !survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(newValue);
            }
            this.updateIsClickable();
        }
    };
    QuestionLinkValueModel.prototype.onReadOnlyChanged = function () {
        this.updateIsClickable();
        _super.prototype.onReadOnlyChanged.call(this);
    };
    QuestionLinkValueModel.prototype.updateIsClickable = function () {
        this.setPropertyValue("isClickable", !this.isReadOnly || (!!this.isClickableCallback && this.isClickableCallback()));
    };
    Object.defineProperty(QuestionLinkValueModel.prototype, "ariaRole", {
        get: function () {
            return "button";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionLinkValueModel.prototype, "tooltip", {
        get: function () {
            return this.showTooltip ? this.linkValueText : undefined;
        },
        enumerable: false,
        configurable: true
    });
    QuestionLinkValueModel.prototype.getType = function () {
        return "linkvalue";
    };
    QuestionLinkValueModel.prototype.doLinkClick = function () {
        if (!!this.linkClickCallback) {
            this.linkClickCallback();
        }
    };
    QuestionLinkValueModel.prototype.doClearClick = function () {
        if (!!this.clearClickCallback) {
            this.clearClickCallback();
        }
    };
    QuestionLinkValueModel.prototype.updateLinkValueText = function () {
        var displayValue;
        if (this.showValueInLink) {
            displayValue = this.isEmpty() ? _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.emptyValue") : this.getObjDisplayValue();
        }
        else {
            displayValue = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(this.isEmpty() ? "pe.set" : "pe.change") + " " + this.title;
        }
        this.linkValueText = displayValue;
    };
    QuestionLinkValueModel.prototype.stringifyValue = function (val) {
        if (typeof val !== "string")
            return JSON.stringify(val);
        return val;
    };
    QuestionLinkValueModel.prototype.getObjDisplayValue = function () {
        var obj = this.obj;
        if (!obj || !obj["getDisplayValue"])
            return this.stringifyValue(this.value);
        var res = obj["getDisplayValue"](true, this.value);
        if (typeof res !== "string")
            return JSON.stringify(res);
        return res;
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "svc-link-value-button svc-question-link__set-button" })
    ], QuestionLinkValueModel.prototype, "linkSetButtonCssClasses", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "svc-question-link__clear-button" })
    ], QuestionLinkValueModel.prototype, "linkClearButtonCssClasses", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionLinkValueModel.prototype, "isSelected", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionLinkValueModel.prototype, "linkValueText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionLinkValueModel.prototype, "showClear", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], QuestionLinkValueModel.prototype, "allowClear", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], QuestionLinkValueModel.prototype, "showValueInLink", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionLinkValueModel.prototype, "showTooltip", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], QuestionLinkValueModel.prototype, "isClickable", void 0);
    return QuestionLinkValueModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Question"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("linkvalue", ["showValueInLink",
    {
        name: "showTooltip: boolean",
        default: false,
        visible: false
    }], function (json) {
    var viewModel = new QuestionLinkValueModel("", json);
    return viewModel;
}, "nonvalue");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("linkvalue", function (name) {
    return new QuestionLinkValueModel(name);
});


/***/ }),

/***/ "./src/components/matrix-cell.scss":
/*!*****************************************!*\
  !*** ./src/components/matrix-cell.scss ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/matrix-cell.ts":
/*!***************************************!*\
  !*** ./src/components/matrix-cell.ts ***!
  \***************************************/
/*! exports provided: MatrixCellWrapperEditSurvey, MatrixCellWrapperViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixCellWrapperEditSurvey", function() { return MatrixCellWrapperEditSurvey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixCellWrapperViewModel", function() { return MatrixCellWrapperViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");





__webpack_require__(/*! ./matrix-cell.scss */ "./src/components/matrix-cell.scss");
var MatrixCellWrapperEditSurvey = /** @class */ (function () {
    function MatrixCellWrapperEditSurvey(creator, cellQuestion, model) {
        this.cellQuestion = cellQuestion;
        this.creator = creator;
        var questionJSON = cellQuestion.toJSON();
        questionJSON.type = cellQuestion.getType();
        this.surveyValue = creator.createSurvey({ questions: [questionJSON] }, "modal-question-editor", model);
        this.survey.css = survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2Css"];
        this.survey.setDesignMode(true);
        this.survey.isPopupEditorContent = true;
        this.survey.showQuestionNumbers = "none";
        this.survey.questionTitleLocation = "hidden";
        this.question.setSurveyImpl(this.survey);
        this.question.inMatrixMode = true;
    }
    Object.defineProperty(MatrixCellWrapperEditSurvey.prototype, "survey", {
        get: function () { return this.surveyValue; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixCellWrapperEditSurvey.prototype, "question", {
        get: function () { return this.survey.getAllQuestions()[0]; },
        enumerable: false,
        configurable: true
    });
    MatrixCellWrapperEditSurvey.prototype.apply = function () {
        var matrix = this.cellQuestion.parentQuestion;
        var column = matrix.getColumnByName(this.cellQuestion.name);
        var columnJSON = column.toJSON();
        var prevCellType = columnJSON["cellType"];
        var questionJSON = this.survey.getAllQuestions()[0].toJSON();
        if (!!prevCellType) {
            questionJSON.cellType = prevCellType;
        }
        if (survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isTwoValueEquals(questionJSON, columnJSON))
            return;
        column.fromJSON(questionJSON);
        matrix.onColumnCellTypeChanged(column);
        this.creator.setModified({ type: "MATRIX_CELL_EDITOR", column: column });
    };
    return MatrixCellWrapperEditSurvey;
}());

var MatrixCellWrapperViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatrixCellWrapperViewModel, _super);
    function MatrixCellWrapperViewModel(creator, templateData, question, row, column) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.templateData = templateData;
        _this.question = question;
        _this.row = row;
        _this.column = column;
        _this.onSelectionChanged = function (sender, options) {
            if (_this.context && _this.context.getPropertyValue) {
                _this.isSelected = _this.creator.isElementSelected(_this.context);
            }
            else {
                _this.isSelected = false;
            }
        };
        // if(!question && !!this.templateData.data) {
        //   this.question = this.templateData.data;
        // }
        creator.onSelectedElementChanged.add(_this.onSelectionChanged);
        return _this;
    }
    MatrixCellWrapperViewModel.prototype.editQuestion = function (model, event) {
        var editSurvey = new MatrixCellWrapperEditSurvey(model.creator, model.question, this);
        survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog({
            componentName: "svc-question-editor-content",
            data: {
                survey: editSurvey.survey,
                creator: this.creator
            },
            onApply: function () {
                editSurvey.apply();
                return true;
            },
            cssClass: "svc-matrix-cell__popup",
            title: model.question.name,
            displayMode: this.creator.isMobileView ? "overlay" : "popup"
        }, model.creator.rootElement);
        event.stopPropagation();
        model.creator.selectElement(model.column);
    };
    Object.defineProperty(MatrixCellWrapperViewModel.prototype, "context", {
        get: function () {
            return this.row || this.column || this.templateData;
        },
        enumerable: false,
        configurable: true
    });
    MatrixCellWrapperViewModel.prototype.selectContext = function (model, event) {
        if (!!model.row) {
            model.creator.selectElement(model.row.data, "rows", false);
            event.stopPropagation();
            return;
        }
        if (typeof model.context.getType !== "function") {
            return;
        }
        var contextType = model.context.getType();
        if (contextType === "itemvalue") {
            model.creator.selectElement(model.context.locOwner, model.context.ownerPropertyName, false);
        }
        else {
            model.creator.selectElement(model.context);
        }
        event.stopPropagation();
    };
    Object.defineProperty(MatrixCellWrapperViewModel.prototype, "isSupportCellEditor", {
        get: function () {
            if (!this.question || !this.question.getType)
                return false;
            return _survey_helper__WEBPACK_IMPORTED_MODULE_3__["SurveyHelper"].isSupportCellEditor(this.question.getType());
        },
        enumerable: false,
        configurable: true
    });
    MatrixCellWrapperViewModel.prototype.hover = function (event, element) {
        if (!this.row && this.context && this.context.getPropertyValue && this.context.getType && this.context.getType() !== "itemvalue") {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["toggleHovered"])(event, element);
        }
    };
    MatrixCellWrapperViewModel.prototype.dispose = function () {
        this.creator.onSelectedElementChanged.remove(this.onSelectionChanged);
        _super.prototype.dispose.call(this);
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], MatrixCellWrapperViewModel.prototype, "isSelected", void 0);
    return MatrixCellWrapperViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/page-navigator/page-navigator-item.scss":
/*!****************************************************************!*\
  !*** ./src/components/page-navigator/page-navigator-item.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/page-navigator/page-navigator.scss":
/*!***********************************************************!*\
  !*** ./src/components/page-navigator/page-navigator.scss ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/page-navigator/page-navigator.ts":
/*!*********************************************************!*\
  !*** ./src/components/page-navigator/page-navigator.ts ***!
  \*********************************************************/
/*! exports provided: PageNavigatorViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageNavigatorViewModel", function() { return PageNavigatorViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");


__webpack_require__(/*! ./page-navigator.scss */ "./src/components/page-navigator/page-navigator.scss");
__webpack_require__(/*! ./page-navigator-item.scss */ "./src/components/page-navigator/page-navigator-item.scss");

var PageNavigatorViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PageNavigatorViewModel, _super);
    function PageNavigatorViewModel(pagesController, pageEditMode) {
        var _this = _super.call(this) || this;
        _this.pagesController = pagesController;
        _this.pageEditMode = pageEditMode;
        _this.pagesChangedFunc = function (sender, options) {
            _this.buildItems();
        };
        _this.currentPagesChangedFunc = function (sender, options) {
            _this.currentPage = _this.pagesController.currentPage;
        };
        _this.pcPropertyChangedHandler = function (sender, options) {
            if (options.name === "toolboxLocation") {
                if (_this.pagesController.creator["toolboxLocation"] == "sidebar") {
                    _this.popupModel.horizontalPosition = "right";
                }
                else {
                    _this.popupModel.horizontalPosition = _this.pagesController.creator["toolboxLocation"];
                }
            }
        };
        _this.togglePageSelector = function (event) { return _this.popupModel.toggleVisibility(); };
        _this.icon = "icon-select-page";
        _this.pagesController.onPagesChanged.add(_this.pagesChangedFunc);
        _this.pagesController.onCurrentPageChanged.add(_this.currentPagesChangedFunc);
        _this.pageListModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ListModel"]([], function (item) {
            _this.pagesController.selectPage(item.data);
            _this.popupModel.toggleVisibility();
        }, true);
        _this.popupModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["PopupModel"]("sv-list", { model: _this.pageListModel });
        !!_this.pagesController && (_this.popupModel.horizontalPosition = _this.pagesController.creator["toolboxLocation"]);
        _this.popupModel.onShow = function () {
            _this.pageListModel.selectedItem = _this.getActionBarByPage(_this.pagesController.currentPage);
            _this.isPopupOpened = true;
        };
        _this.popupModel.onHide = function () { _this.isPopupOpened = false; };
        if (!!_this.pagesController.creator["onPropertyChanged"]) {
            _this.pagesController.creator["onPropertyChanged"].add(_this.pcPropertyChangedHandler);
        }
        _this.buildItems();
        return _this;
    }
    PageNavigatorViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.stopItemsContainerHeightObserver();
        this.pagesController.onPagesChanged.remove(this.pagesChangedFunc);
        this.pagesController.onCurrentPageChanged.remove(this.currentPagesChangedFunc);
        if (!!this.pagesController.creator["onPropertyChanged"]) {
            this.pagesController.creator["onPropertyChanged"].remove(this.pcPropertyChangedHandler);
            this.pcPropertyChangedHandler = undefined;
        }
        if (this.pageListModel) {
            this.pageListModel.dispose();
        }
        if (this.popupModel) {
            this.popupModel.dispose();
        }
        this._scrollableContainer = undefined;
        this._itemsContainer = undefined;
    };
    PageNavigatorViewModel.prototype.getActionBarByPage = function (page) {
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].data === page)
                return this.items[i];
        }
        return null;
    };
    PageNavigatorViewModel.prototype.setItems = function (items) {
        this.items = items;
        this.pageListModel.setItems(items);
        this.visible = items.length > 1 || this.pageEditMode === "bypage";
    };
    PageNavigatorViewModel.prototype.buildItems = function () {
        this.currentPage = this.pagesController.currentPage || this.pagesController.pages[0];
        var items = [];
        var pages = this.pagesController.pages;
        for (var i = 0; i < pages.length; i++) {
            items.push(this.createActionBarItem(pages[i]));
        }
        if (this.pagesController.creator["pageEditMode"] === "bypage") {
            var newPage = this.pagesController["creator"].getPlugin("designer").model.newPage;
            if (!!newPage) {
                items.push(this.createActionBarItem(newPage));
            }
        }
        this.setItems(items);
    };
    PageNavigatorViewModel.prototype.patchContainerOffset = function (el) {
        while (!!el) {
            if (el.className.indexOf("svc-tab-designer--with-page-navigator") !== -1) {
                el.offsetParent.scrollTop = 0;
                return;
            }
            el = el.parentElement;
        }
    };
    PageNavigatorViewModel.prototype.createActionBarItem = function (page) {
        var _this = this;
        var item = {
            id: page.id,
            title: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                var pageName = page.name;
                var pageTitle = page.title;
                return _this.pagesController
                    ? _this.pagesController.getDisplayName(page)
                    : (pageTitle || pageName);
            })
        };
        item.active = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return page === _this.currentPage; });
        item.action = function (item) {
            _this.scrollToPage(page);
        };
        item.data = page;
        return this.createActionBarCore(item);
    };
    PageNavigatorViewModel.prototype.scrollToPage = function (page) {
        var _this = this;
        if (this.pageEditMode === "bypage") {
            this.pagesController.currentPage = page;
            this.currentPage = page;
            this.pagesController.creator.selectElement(this.pagesController.currentPage);
            return;
        }
        var el = document.getElementById(page.id);
        if (!!el) {
            var isLastPage = this.pagesController.pages.indexOf(page) === (this.pagesController.pages.length - 1);
            if (!!this._scrollableContainer) {
                // const y = el.offsetTop - (this._scrollableContainer.clientHeight / 4);
                this._scrollableContainer.scrollTo(this._scrollableContainer.scrollLeft, el.offsetTop - 20);
                this.patchContainerOffset(el);
                if (isLastPage) {
                    setTimeout(function () {
                        _this._scrollableContainer.scrollTo(_this._scrollableContainer.scrollLeft, el.offsetTop - 20);
                        _this.patchContainerOffset(el);
                    }, 50);
                }
            }
            else {
                el.scrollIntoView({ block: "start" });
                this.patchContainerOffset(el);
                if (isLastPage) {
                    setTimeout(function () {
                        el.scrollIntoView({ block: "start" });
                        _this.patchContainerOffset(el);
                    }, 50);
                }
            }
        }
    };
    PageNavigatorViewModel.prototype.createActionBarCore = function (item) {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"](item);
    };
    Object.defineProperty(PageNavigatorViewModel.prototype, "pageSelectorCaption", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.selectPage");
        },
        enumerable: false,
        configurable: true
    });
    PageNavigatorViewModel.prototype.onContainerScroll = function (viewPort) {
        var viewPortTop = viewPort.scrollTop;
        var viewPortHeight = viewPort.clientHeight;
        var viewPortBottom = viewPortTop + viewPortHeight;
        var visiblePages = [];
        var maxVisiblePage = undefined;
        var maxVisiblePagePart = 0;
        this.pagesController.pages.forEach(function (page) {
            var pageElement = document.getElementById(page.id);
            if (!!pageElement) {
                var pageTop = pageElement.offsetTop;
                var pageBottom = pageTop + pageElement.clientHeight;
                var possiblyVisible = pageTop < viewPortBottom || pageBottom > viewPortTop;
                if (!possiblyVisible)
                    return;
                var deltaTop = pageTop - viewPortTop;
                var deltaBottom = viewPortBottom - pageBottom;
                var visiblePart = pageElement.clientHeight;
                if (deltaTop < 0) {
                    visiblePart += deltaTop;
                }
                if (deltaBottom < 0) {
                    visiblePart += deltaBottom;
                }
                visiblePart = visiblePart / pageElement.clientHeight;
                if (visiblePart > 0) {
                    visiblePages.push({
                        page: page,
                        visiblePart: visiblePart
                    });
                    if (visiblePart > maxVisiblePagePart) {
                        maxVisiblePagePart = visiblePart;
                        maxVisiblePage = page;
                    }
                }
            }
        });
        this.currentPage = maxVisiblePage;
        return visiblePages;
    };
    PageNavigatorViewModel.prototype.stopItemsContainerHeightObserver = function () {
        this._itemsContainer = undefined;
        if (!!this._resizeObserver) {
            this._resizeObserver.disconnect();
            this._resizeObserver = undefined;
        }
        if (!this.isDisposed) {
            this.visibleItemsStartIndex = 0;
            this.visibleItemsCount = Number.MAX_VALUE;
        }
    };
    PageNavigatorViewModel.prototype.setScrollableContainer = function (scrollableContainer) {
        this._scrollableContainer = scrollableContainer;
    };
    PageNavigatorViewModel.prototype.setItemsContainer = function (itemsContainer) {
        var _this = this;
        this.stopItemsContainerHeightObserver();
        this._itemsContainer = itemsContainer;
        this._resizeObserver = new ResizeObserver(function (entries, observer) { return _this.updateVisibleItems(entries[0].contentBoxSize[0].blockSize); });
        this._resizeObserver.observe(itemsContainer);
    };
    PageNavigatorViewModel.prototype.updateVisibleItems = function (allAvailableHeight) {
        var itemsAvailableHeight = allAvailableHeight - PageNavigatorViewModel.PAGE_NAVIGATION_MENU_ITEM_HEIGHT;
        this.visibleItemsCount = Math.floor(itemsAvailableHeight / PageNavigatorViewModel.PAGE_NAVIGATION_ITEM_HEIGHT);
        var currantPageIndex = this.pagesController.pages.indexOf(this.currentPage);
        var visibleStart = 0;
        if (currantPageIndex >= this.visibleItemsCount) {
            visibleStart = this.items.length - currantPageIndex - 1 < this.visibleItemsCount / 2 ? this.items.length - this.visibleItemsCount : currantPageIndex - Math.floor(this.visibleItemsCount / 2);
        }
        this.visibleItemsStartIndex = visibleStart;
    };
    Object.defineProperty(PageNavigatorViewModel.prototype, "visibleItems", {
        get: function () {
            if (this.items.length <= this.visibleItemsCount) {
                return this.items;
            }
            return this.items.slice(this.visibleItemsStartIndex, this.visibleItemsStartIndex + this.visibleItemsCount);
        },
        enumerable: false,
        configurable: true
    });
    PageNavigatorViewModel.PAGE_NAVIGATION_MENU_ITEM_HEIGHT = 44;
    PageNavigatorViewModel.PAGE_NAVIGATION_ITEM_HEIGHT = 36;
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], PageNavigatorViewModel.prototype, "items", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PageNavigatorViewModel.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PageNavigatorViewModel.prototype, "isPopupOpened", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (page, navigator) {
                var currantPageIndex = navigator.pagesController.pages.indexOf(page);
                if (currantPageIndex >= navigator.visibleItemsStartIndex && currantPageIndex < navigator.visibleItemsStartIndex + navigator.visibleItemsCount) {
                    return;
                }
                var newVisibleItemsStartIndex = navigator.visibleItemsStartIndex;
                if (currantPageIndex < navigator.visibleItemsStartIndex) {
                    newVisibleItemsStartIndex = currantPageIndex;
                }
                if (currantPageIndex >= navigator.visibleItemsStartIndex + navigator.visibleItemsCount) {
                    newVisibleItemsStartIndex = currantPageIndex - navigator.visibleItemsCount + 1;
                }
                if (navigator.visibleItemsStartIndex !== newVisibleItemsStartIndex) {
                    if (navigator.visible && !!navigator._itemsContainer) {
                        var itemsHolder_1 = navigator._itemsContainer.querySelectorAll(".svc-page-navigator__selector + div")[0];
                        if (!!itemsHolder_1) {
                            var cssClass = "svc-page-navigator__items--" + (navigator.visibleItemsStartIndex < newVisibleItemsStartIndex ? "up" : "down");
                            itemsHolder_1.className = cssClass;
                            setTimeout(function () {
                                itemsHolder_1.className = "";
                                navigator.visibleItemsStartIndex = newVisibleItemsStartIndex;
                            }, 250);
                        }
                    }
                    else {
                        navigator.visibleItemsStartIndex = newVisibleItemsStartIndex;
                    }
                }
            }
        })
    ], PageNavigatorViewModel.prototype, "currentPage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: 0 })
    ], PageNavigatorViewModel.prototype, "visibleItemsStartIndex", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: Number.MAX_VALUE })
    ], PageNavigatorViewModel.prototype, "visibleItemsCount", void 0);
    return PageNavigatorViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/page.scss":
/*!**********************************!*\
  !*** ./src/components/page.scss ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/page.ts":
/*!********************************!*\
  !*** ./src/components/page.ts ***!
  \********************************/
/*! exports provided: PageAdorner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageAdorner", function() { return PageAdorner; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _action_container_view_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action-container-view-model */ "./src/components/action-container-view-model.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");




__webpack_require__(/*! ./page.scss */ "./src/components/page.scss");


var PageAdorner = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PageAdorner, _super);
    function PageAdorner(creator, page) {
        var _this = _super.call(this, creator, page) || this;
        _this.addGhostPage = function (selectCurrentPage) {
            if (selectCurrentPage === void 0) { selectCurrentPage = true; }
            var currentPage = _this.page;
            if (_this.isGhost) {
                if (!!_this.creator.addPage(currentPage, selectCurrentPage, function () {
                    currentPage.unRegisterFunctionOnPropertiesValueChanged([
                        "title",
                        "description"
                    ]);
                    currentPage.name = _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].getNewPageName(_this.creator.survey.pages);
                    return true;
                })) {
                    _this.creator.survey.currentPage = currentPage;
                }
            }
            if (selectCurrentPage) {
                _this.creator.selectElement(currentPage);
            }
        };
        _this.actionContainer.sizeMode = "small";
        _this.questionTypeSelectorModel = _this.creator.getQuestionTypeSelectorModel(function (type) {
            _this.currentAddQuestionType = type;
            _this.addGhostPage();
        });
        _this.attachElement(page);
        return _this;
    }
    PageAdorner.prototype.updateDragTypeOverMe = function () {
        var _a;
        if (!this.isDisposed) {
            this.dragTypeOverMe = (_a = this.page) === null || _a === void 0 ? void 0 : _a.dragTypeOverMe;
        }
    };
    PageAdorner.prototype.attachElement = function (surveyElement) {
        var _this = this;
        _super.prototype.attachElement.call(this, surveyElement);
        this.dragTypeOverMe = null;
        if (!!surveyElement) {
            surveyElement["surveyChangedCallback"] = function () {
                _this.isPageLive = !!surveyElement.survey;
            };
            if (this.calcIsGhostPage(surveyElement)) {
                this.updateActionsProperties();
                surveyElement.registerFunctionOnPropertiesValueChanged(["title", "description"], function () {
                    _this.addGhostPage();
                });
                this.patchPageForDragDrop(surveyElement, this.addGhostPage);
            }
            surveyElement.registerFunctionOnPropertiesValueChanged(["dragTypeOverMe"], function () {
                _this.updateDragTypeOverMe();
            });
            surveyElement.onFirstRendering();
            surveyElement.updateCustomWidgets();
            surveyElement.setWasShown(true);
            this.checkActionProperties();
            this.dragTypeOverMe = surveyElement.dragTypeOverMe;
        }
    };
    PageAdorner.prototype.detachElement = function (surveyElement) {
        if (!!surveyElement) {
            surveyElement.unRegisterFunctionOnPropertiesValueChanged([
                "dragTypeOverMe"
            ]);
            surveyElement.unRegisterFunctionOnPropertiesValueChanged([
                "title",
                "description"
            ]);
            surveyElement["surveyChangedCallback"] = undefined;
        }
        _super.prototype.detachElement.call(this, surveyElement);
        if (!this.isDisposed) {
            this.dragTypeOverMe = null;
        }
    };
    PageAdorner.prototype.onElementSelectedChanged = function (isSelected) {
        _super.prototype.onElementSelectedChanged.call(this, isSelected);
        this.isSelected = isSelected;
        if (isSelected && this.creator.pageEditMode === "bypage") {
            this.setSurveyElement(this.creator.selectedElement);
        }
        if (isSelected && !!this.onPageSelectedCallback) {
            this.onPageSelectedCallback();
        }
    };
    PageAdorner.prototype.patchPageForDragDrop = function (page, addGhostPage) {
        // need for the drag drop see https://github.com/surveyjs/survey-library/blob/871492817561de11f934ebdf50481770300a396a/src/dragdrop/survey-elements.ts#L266
        page["_isGhost"] = true;
        page["_addGhostPageViewModel"] = function () {
            delete page["_isGhost"];
            delete page["_addGhostPageViewModel"];
            addGhostPage();
        };
    };
    PageAdorner.prototype.dispose = function () {
        this.detachElement(this.page);
        _super.prototype.dispose.call(this);
        this.onPropertyValueChangedCallback = undefined;
    };
    PageAdorner.prototype.calcIsGhostPage = function (page) {
        return this.creator.survey.pages.indexOf(page) < 0;
    };
    Object.defineProperty(PageAdorner.prototype, "isGhost", {
        get: function () {
            return this.calcIsGhostPage(this.page);
        },
        enumerable: false,
        configurable: true
    });
    PageAdorner.prototype.isOperationsAllow = function () {
        return _super.prototype.isOperationsAllow.call(this) && !this.isGhost && this.creator.pageEditMode !== "single" && this.creator.allowModifyPages;
    };
    PageAdorner.prototype.getPage = function () {
        return this.surveyElement;
    };
    Object.defineProperty(PageAdorner.prototype, "page", {
        get: function () {
            return this.getPage();
        },
        enumerable: false,
        configurable: true
    });
    PageAdorner.prototype.addNewQuestion = function (model, event, type) {
        var _this = this;
        this.creator.addNewQuestionInPage(function (type) {
            _this.addGhostPage(false);
            _this.creator.survey.currentPage = _this.page;
        }, null, type || this.currentAddQuestionType || _creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].designer.defaultAddQuestionType);
    };
    PageAdorner.prototype.select = function (model, event) {
        if (!model.isGhost) {
            if (model.creator.pageEditMode !== "single") {
                model.creator.selectElement(model.page, undefined, false);
                if (!!this.onPageSelectedCallback) {
                    this.onPageSelectedCallback();
                }
            }
            else {
                model.creator.selectElement(model.creator.survey, undefined, false);
            }
        }
        event.stopPropagation();
        event.cancelBubble = true;
    };
    Object.defineProperty(PageAdorner.prototype, "css", {
        get: function () {
            var result = "";
            if (!!this.dragTypeOverMe && this.page.elements.length === 0 && this.creator.survey.pages.length > 0) {
                result = "svc-page--drag-over-empty";
            }
            if (this.isGhost) {
                return result + " svc-page__content--new";
            }
            if (this.creator.isElementSelected(this.page)) {
                result += " svc-page__content--selected";
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    PageAdorner.prototype.hover = function (event, element) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["toggleHovered"])(event, element, this.creator.pageHoverDelay);
    };
    PageAdorner.prototype.hoverStopper = function (event, element) {
        event["__svc_question_processed"] = true;
    };
    PageAdorner.prototype.duplicate = function () {
        var newElement = this.creator.copyPage(this.page);
        this.creator.selectElement(newElement);
    };
    PageAdorner.prototype.delete = function () {
        this.creator.deleteElement(this.page);
    };
    Object.defineProperty(PageAdorner.prototype, "addNewQuestionText", {
        get: function () {
            if (!this.currentAddQuestionType && this.creator)
                return this.creator.getLocString("ed.addNewQuestion");
            return !!this.creator ? this.creator.getAddNewQuestionText(this.currentAddQuestionType) : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageAdorner.prototype, "footerActionsBar", {
        get: function () {
            var _this = this;
            if (!this._footerActionsBar) {
                this._footerActionsBar = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ActionContainer"]();
                this._footerActionsBar.containerCss = "svc-page__footer";
                this._footerActionsBar.cssClasses = {
                    item: "svc-btn",
                    itemTitle: "svc-text svc-text--normal svc-text--bold"
                };
                var footerActions = [{
                        css: "svc-add-new-question-action",
                        visible: (new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.showAddQuestionButton; })),
                        component: "svc-add-new-question-btn",
                        data: this
                    }];
                footerActions = this.creator.getUpdatedPageAdornerFooterActions(this, footerActions);
                this.footerActionsBar.setItems(footerActions);
            }
            return this._footerActionsBar;
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PageAdorner.prototype, "isSelected", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], PageAdorner.prototype, "isPageLive", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "" })
    ], PageAdorner.prototype, "currentAddQuestionType", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: null })
    ], PageAdorner.prototype, "dragTypeOverMe", void 0);
    return PageAdorner;
}(_action_container_view_model__WEBPACK_IMPORTED_MODULE_2__["SurveyElementAdornerBase"]));



/***/ }),

/***/ "./src/components/property-panel/property-panel-item.scss":
/*!****************************************************************!*\
  !*** ./src/components/property-panel/property-panel-item.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/property-panel/property-panel.scss":
/*!***********************************************************!*\
  !*** ./src/components/property-panel/property-panel.scss ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/question-dropdown.scss":
/*!***********************************************!*\
  !*** ./src/components/question-dropdown.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/question-dropdown.ts":
/*!*********************************************!*\
  !*** ./src/components/question-dropdown.ts ***!
  \*********************************************/
/*! exports provided: QuestionDropdownAdornerViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownAdornerViewModel", function() { return QuestionDropdownAdornerViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/components/question.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");




__webpack_require__(/*! ./question-dropdown.scss */ "./src/components/question-dropdown.scss");
var QuestionDropdownAdornerViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionDropdownAdornerViewModel, _super);
    function QuestionDropdownAdornerViewModel(creator, surveyElement, templateData) {
        var _this = _super.call(this, creator, surveyElement, templateData) || this;
        _this.switchCollapse = function () {
            _this.isCollapsed = !_this.isCollapsed;
        };
        _this.surveyElement.registerFunctionOnPropertyValueChanged("isSelectedInDesigner", function () {
            _this.leftFocus();
        }, "dropdownCollapseChecker");
        _this.visibleCount = creator.maxVisibleChoices;
        _this.isCollapsed = _this.isCollapsed && _this.needToCollapse;
        return _this;
    }
    Object.defineProperty(QuestionDropdownAdornerViewModel.prototype, "question", {
        get: function () {
            return this.surveyElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownAdornerViewModel.prototype, "itemComponent", {
        get: function () {
            if (this.surveyElement.isDescendantOf("dropdown")) {
                return "survey-radiogroup-item";
            }
            return "survey-checkbox-item";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownAdornerViewModel.prototype, "needToCollapse", {
        get: function () {
            return this.visibleCount > 0 && this.question.visibleChoices.length > this.visibleCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownAdornerViewModel.prototype, "isCollapseView", {
        get: function () {
            return this.isCollapsed;
        },
        enumerable: false,
        configurable: true
    });
    QuestionDropdownAdornerViewModel.prototype.leftFocus = function () {
        if (!this.creator.isElementSelected(this.surveyElement) && !this.isCollapsed) {
            this.isCollapsed = this.needToCollapse;
        }
    };
    QuestionDropdownAdornerViewModel.prototype.getChoiceCss = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append("svc-question__dropdown-choice")
            .append("svc-question__dropdown-choice--collapsed", this.isCollapsed && this.needToCollapse)
            .toString();
    };
    QuestionDropdownAdornerViewModel.prototype.getRenderedItems = function () {
        return this.isCollapsed ?
            this.question.visibleChoices.slice(0, this.visibleCount) :
            this.question.visibleChoices;
    };
    QuestionDropdownAdornerViewModel.prototype.getButtonText = function () {
        return !this.isCollapsed ?
            _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.showLessChoices") :
            _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.showMoreChoices");
    };
    QuestionDropdownAdornerViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.surveyElement.unRegisterFunctionOnPropertyValueChanged("isSelectedInDesigner", "dropdownCollapseChecker");
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], QuestionDropdownAdornerViewModel.prototype, "isCollapsed", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: -1 })
    ], QuestionDropdownAdornerViewModel.prototype, "visibleCount", void 0);
    return QuestionDropdownAdornerViewModel;
}(_question__WEBPACK_IMPORTED_MODULE_2__["QuestionAdornerViewModel"]));



/***/ }),

/***/ "./src/components/question-image.scss":
/*!********************************************!*\
  !*** ./src/components/question-image.scss ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/question-image.ts":
/*!******************************************!*\
  !*** ./src/components/question-image.ts ***!
  \******************************************/
/*! exports provided: QuestionImageAdornerViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionImageAdornerViewModel", function() { return QuestionImageAdornerViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/components/question.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");





__webpack_require__(/*! ./question-image.scss */ "./src/components/question-image.scss");
var QuestionImageAdornerViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionImageAdornerViewModel, _super);
    function QuestionImageAdornerViewModel(creator, surveyElement, templateData, questionRoot) {
        var _this = _super.call(this, creator, surveyElement, templateData) || this;
        _this.questionRoot = questionRoot;
        _this.isEmptyImageLink = !_this.question.imageLink;
        _this.surveyElement.registerFunctionOnPropertyValueChanged("imageLink", function () { _this.imageLinkValueChangedHandler(); }, "imageLinkValueChanged");
        _this.initFilePresentationModel();
        return _this;
    }
    QuestionImageAdornerViewModel.prototype.initFilePresentationModel = function () {
        var _this = this;
        this.filePresentationModel = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("file", { name: this.question.name });
        var surveyModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"]();
        this.filePresentationModel.setSurveyImpl(surveyModel);
        this.filePresentationModel.forceIsInputReadOnly = !this.creator.isCanModifyProperty(this.question, "imageLink");
        this.filePresentationModel.dragAreaPlaceholder = this.placeholderText;
        this.filePresentationModel.chooseButtonCaption = this.chooseImageText;
        this.filePresentationModel.acceptedTypes = "image/*";
        this.filePresentationModel.storeDataAsText = false;
        surveyModel.onUploadFiles.add(function (s, o) {
            var fileToUpload = o.files[0];
            if (!!fileToUpload) {
                _this.creator.uploadFiles(o.files, _this.question, function (status, link) {
                    _this.question.imageLink = link;
                    o.callback(status, [{ content: link, file: o.files[0] }]);
                });
            }
        });
    };
    QuestionImageAdornerViewModel.prototype.chooseFile = function (model) {
        var fileInput = model.questionRoot.getElementsByClassName("svc-choose-file-input")[0];
        model.creator.chooseFiles(fileInput, function (files) {
            model.isUploading = true;
            model.creator.uploadFiles(files, model.surveyElement, function (_, link) {
                model.surveyElement.imageLink = link;
                model.isUploading = false;
            });
        });
    };
    Object.defineProperty(QuestionImageAdornerViewModel.prototype, "acceptedTypes", {
        get: function () {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getAcceptedTypesByContentMode"])(this.surveyElement.contentMode);
        },
        enumerable: false,
        configurable: true
    });
    QuestionImageAdornerViewModel.prototype.imageLinkValueChangedHandler = function () {
        this.isEmptyImageLink = !this.question.imageLink;
        this.filePresentationModel.value = null;
        this.filePresentationModel.visible = !this.question.imageLink;
    };
    Object.defineProperty(QuestionImageAdornerViewModel.prototype, "isEmptyElement", {
        get: function () {
            return this.isEmptyImageLink;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageAdornerViewModel.prototype, "question", {
        get: function () {
            return this.surveyElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageAdornerViewModel.prototype, "placeholderText", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_4__["getLocString"])("ed.imagePlaceHolder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageAdornerViewModel.prototype, "chooseImageText", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_4__["getLocString"])("ed.imageChooseImage");
        },
        enumerable: false,
        configurable: true
    });
    QuestionImageAdornerViewModel.prototype.css = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(_super.prototype.css.call(this))
            .append("svc-question__content--loading", this.isUploading).toString();
    };
    QuestionImageAdornerViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.questionRoot = undefined;
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionImageAdornerViewModel.prototype, "isUploading", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionImageAdornerViewModel.prototype, "isEmptyImageLink", void 0);
    return QuestionImageAdornerViewModel;
}(_question__WEBPACK_IMPORTED_MODULE_2__["QuestionAdornerViewModel"]));



/***/ }),

/***/ "./src/components/question-rating.scss":
/*!*********************************************!*\
  !*** ./src/components/question-rating.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/question-rating.ts":
/*!*******************************************!*\
  !*** ./src/components/question-rating.ts ***!
  \*******************************************/
/*! exports provided: QuestionRatingAdornerViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingAdornerViewModel", function() { return QuestionRatingAdornerViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");




__webpack_require__(/*! ./question-rating.scss */ "./src/components/question-rating.scss");
var QuestionRatingAdornerViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionRatingAdornerViewModel, _super);
    function QuestionRatingAdornerViewModel(creator, surveyElement, templateData) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.surveyElement = surveyElement;
        _this.templateData = templateData;
        return _this;
    }
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "element", {
        get: function () {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getQuestionFromObj"])(this.surveyElement);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingAdornerViewModel.useRateValues = function (element) {
        return element.useRateValues();
    };
    QuestionRatingAdornerViewModel.prototype.addItem = function (model) {
        if (!model.allowAdd)
            return;
        if (!model.enableAdd)
            return;
        if (!QuestionRatingAdornerViewModel.useRateValues(model.element)) {
            model.element.rateMax += model.element.rateStep;
        }
        else {
            var nextValue = null;
            var values = model.element.rateValues.map(function (item) {
                return item.value;
            });
            var itemText = model.creator.getChoicesItemBaseTitle();
            nextValue = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextValue"])(itemText, values);
            var itemValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](nextValue);
            itemValue.locOwner = {
                getLocale: function () {
                    if (!!model.element["getLocale"])
                        return model.element.getLocale();
                    return "";
                },
                getMarkdownHtml: function (text) {
                    return text;
                },
                getProcessedText: function (text) {
                    return text;
                }
            };
            model.element.rateValues = model.element.rateValues.concat([itemValue]);
            var rateValues = model.element.rateValues;
            model.creator.onItemValueAddedCallback(model.element, "rateValues", rateValues[rateValues.length - 1], rateValues);
        }
    };
    QuestionRatingAdornerViewModel.prototype.removeItem = function (model) {
        if (!model.allowRemove)
            return;
        if (!model.enableRemove)
            return;
        var property = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(model.element.getType(), "rateValues");
        var itemIndex = model.element.rateValues && model.element.rateValues.length - 1;
        var item = (model.element.rateValues && model.element.rateValues[itemIndex]) || null;
        var allowDelete = model.creator.onCollectionItemDeletingCallback(model.element, property, model.element.rateValues, item);
        if (allowDelete) {
            var question = model.element;
            if (!QuestionRatingAdornerViewModel.useRateValues(model.element) &&
                itemIndex === question.rateValues.length - 1) {
                question.rateMax -= question.rateStep;
            }
            else {
                if (!QuestionRatingAdornerViewModel.useRateValues(model.element)) {
                    // eslint-disable-next-line no-self-assign
                    question.rateValues = question.rateValues;
                }
                question.rateValues.splice(itemIndex, 1);
            }
        }
    };
    QuestionRatingAdornerViewModel.allowAddForElement = function (element, maximumRateValues) {
        if ((maximumRateValues < 1 || maximumRateValues > survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].ratingMaximumRateValueCount) && !QuestionRatingAdornerViewModel.useRateValues(element))
            maximumRateValues = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].ratingMaximumRateValueCount;
        if (element.rateDisplayMode == "smileys" && (maximumRateValues < 1 || maximumRateValues > 10))
            maximumRateValues = 10;
        if (maximumRateValues < 1)
            return true;
        return element.rateCount < maximumRateValues;
    };
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "allowAdd", {
        get: function () {
            return this.canAddOrRemove();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "enableAdd", {
        get: function () {
            return this.allowAdd && QuestionRatingAdornerViewModel.allowAddForElement(this.element, this.creator.maximumRateValues);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "addClassNames", {
        get: function () {
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
                .append("svc-item-value-controls__button")
                .append("svc-item-value-controls__button--disabled", !this.enableAdd)
                .append("svc-item-value-controls__add").toString();
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingAdornerViewModel.allowRemoveForElement = function (element) {
        return element.rateCount > 2;
    };
    QuestionRatingAdornerViewModel.prototype.canAddOrRemove = function () {
        return this.creator.isCanModifyProperty(this.element, "rateValues") &&
            this.creator.isCanModifyProperty(this.element, "rateCount") &&
            (!this.element.autoGenerate || this.creator.isCanModifyProperty(this.element, "rateMax"));
    };
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "allowRemove", {
        get: function () {
            return this.canAddOrRemove();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "enableRemove", {
        get: function () {
            return this.allowRemove && QuestionRatingAdornerViewModel.allowRemoveForElement(this.element);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "removeClassNames", {
        get: function () {
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
                .append("svc-item-value-controls__button")
                .append("svc-item-value-controls__button--disabled", !this.enableRemove)
                .append("svc-item-value-controls__remove").toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "addTooltip", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.addItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingAdornerViewModel.prototype, "removeTooltip", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.removeItem");
        },
        enumerable: false,
        configurable: true
    });
    return QuestionRatingAdornerViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/question.scss":
/*!**************************************!*\
  !*** ./src/components/question.scss ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/question.ts":
/*!************************************!*\
  !*** ./src/components/question.ts ***!
  \************************************/
/*! exports provided: QuestionAdornerViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionAdornerViewModel", function() { return QuestionAdornerViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _questionconverter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../questionconverter */ "./src/questionconverter.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _action_container_view_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./action-container-view-model */ "./src/components/action-container-view-model.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _string_editor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./string-editor */ "./src/components/string-editor.ts");






__webpack_require__(/*! ./question.scss */ "./src/components/question.scss");


var QuestionAdornerViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionAdornerViewModel, _super);
    function QuestionAdornerViewModel(creator, surveyElement, templateData) {
        var _this = _super.call(this, creator, surveyElement) || this;
        _this.templateData = templateData;
        _this.startDragSurveyElement = function (event) {
            var element = _this.surveyElement;
            var isElementSelected = _this.creator.selectedElement === element;
            _this.dragDropHelper.startDragSurveyElement(event, element, isElementSelected);
            return true;
        };
        _this.questionTypeSelectorModel = _this.creator.getQuestionTypeSelectorModel(function (type) { _this.currentAddQuestionType = type; }, _this.surveyElement);
        _this.actionContainer.sizeMode = "small";
        if (surveyElement.isQuestion &&
            !!surveyElement["setCanShowOptionItemCallback"]) {
            surveyElement.setCanShowOptionItemCallback(function (item) {
                if (creator.readOnly)
                    return false;
                if (item !== _this.surveyElement.newItem)
                    return true;
                return (creator.maximumChoicesCount < 1 ||
                    surveyElement["choices"].length < creator.maximumChoicesCount);
            });
        }
        _this.checkActionProperties();
        _this.dragOrClickHelper = new survey_core__WEBPACK_IMPORTED_MODULE_1__["DragOrClickHelper"](_this.startDragSurveyElement);
        _string_editor__WEBPACK_IMPORTED_MODULE_7__["StringItemsNavigatorBase"].setQuestion(_this);
        return _this;
    }
    Object.defineProperty(QuestionAdornerViewModel.prototype, "element", {
        get: function () {
            return this.surveyElement;
        },
        enumerable: false,
        configurable: true
    });
    QuestionAdornerViewModel.prototype.select = function (model, event) {
        if (!model.surveyElement.isInteractiveDesignElement) {
            return;
        }
        var creator = model.creator;
        var selEl = model.surveyElement;
        var el = document === null || document === void 0 ? void 0 : document.activeElement;
        if (creator.selectedElement !== selEl && !!el && !!el.blur && el.tagName.toLocaleLowerCase() === "input") {
            el.blur();
        }
        event.stopPropagation();
        event.cancelBubble = true;
        creator.selectElement(selEl, undefined, false);
        return true;
    };
    QuestionAdornerViewModel.prototype.rootCss = function () {
        return this.surveyElement.isQuestion && !this.surveyElement.startWithNewLine ? " svc-question__adorner--start-with-new-line" : "";
    };
    QuestionAdornerViewModel.prototype.css = function () {
        if (!this.surveyElement.isInteractiveDesignElement)
            return "";
        var result = "svc-question__content";
        result += typeof this.surveyElement.getType === "function" ? (" svc-question__content--" + this.surveyElement.getType()) : "";
        if (this.creator.isElementSelected(this.surveyElement)) {
            result += " svc-question__content--selected";
        }
        if (this.isEmptyElement) {
            result += " svc-question__content--empty";
        }
        if (this.isDragMe) {
            result += " svc-question__content--dragged";
        }
        else {
            result = result.replace(" svc-question__content--dragged", "");
        }
        if (this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].InsideEmptyPanel) {
            result += " svc-question__content--drag-over-inside";
        }
        else {
            result = result.replace(" svc-question__content--drag-over-inside", "");
        }
        if (this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].MultilineLeft || this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Left) {
            result += " svc-question__content--drag-over-left";
        }
        else {
            result = result.replace(" svc-question__content--drag-over-left", "");
        }
        if (this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].MultilineRight || this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Right) {
            result += " svc-question__content--drag-over-right";
        }
        else {
            result = result.replace(" svc-question__content--drag-over-right", "");
        }
        if (this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top) {
            result += " svc-question__content--drag-over-top";
        }
        else {
            result = result.replace(" svc-question__content--drag-over-top", "");
        }
        if (this.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom) {
            result += " svc-question__content--drag-over-bottom";
        }
        else {
            result = result.replace(" svc-question__content--drag-over-bottom", "");
        }
        return result;
    };
    Object.defineProperty(QuestionAdornerViewModel.prototype, "isDragMe", {
        get: function () {
            return this.surveyElement.isDragMe;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionAdornerViewModel.prototype, "dragTypeOverMe", {
        get: function () {
            return this.element.dragTypeOverMe;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionAdornerViewModel.prototype, "isUsingCarryForward", {
        get: function () {
            var _a;
            return (_a = this.element) === null || _a === void 0 ? void 0 : _a.isUsingCarryForward;
        },
        enumerable: false,
        configurable: true
    });
    QuestionAdornerViewModel.prototype.createCarryForwardParams = function () {
        var _this = this;
        var _a;
        if (!this.isUsingCarryForward)
            return null;
        var name = (_a = this.element) === null || _a === void 0 ? void 0 : _a.choicesFromQuestion;
        if (!name)
            return null;
        var question = this.creator.survey.getQuestionByName(name);
        if (!question)
            return null;
        return { question: question, text: this.creator.getLocString("ed.carryForwardChoicesCopied"), onClick: function () { _this.creator.selectElement(question); } };
    };
    QuestionAdornerViewModel.prototype.dispose = function () {
        this.surveyElement.unRegisterFunctionOnPropertyValueChanged("isRequired", "isRequiredAdorner");
        this.surveyElement.unRegisterFunctionOnPropertyValueChanged("inputType", "inputTypeAdorner");
        if (!!this.surveyElement["setCanShowOptionItemCallback"]) {
            this.surveyElement.setCanShowOptionItemCallback(undefined);
        }
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(QuestionAdornerViewModel.prototype, "isDraggable", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    QuestionAdornerViewModel.prototype.hover = function (event, element) {
        if (!this.surveyElement.isInteractiveDesignElement) {
            return;
        }
        this.updateActionsProperties();
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["toggleHovered"])(event, element);
    };
    QuestionAdornerViewModel.prototype.updateElementAllowOptions = function (options, operationsAllow) {
        _super.prototype.updateElementAllowOptions.call(this, options, operationsAllow);
        this.updateActionVisibility("convertTo", operationsAllow && options.allowChangeType);
        this.updateActionVisibilityByProp("isrequired", "isRequired", operationsAllow && options.allowChangeRequired);
        this.updateActionVisibilityByProp("convertInputType", "inputType", options.allowChangeInputType);
        this.updateActionVisibilityByProp("convertInputType", "rateDisplayMode", options.allowChangeInputType);
    };
    QuestionAdornerViewModel.prototype.updateActionVisibilityByProp = function (actionName, propName, allow) {
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(this.surveyElement.getType(), propName);
        if (!prop)
            return;
        var isPropReadOnly = this.creator.onIsPropertyReadOnlyCallback(this.surveyElement, prop, prop.readOnly, null, null);
        this.updateActionVisibility(actionName, allow && !isPropReadOnly);
    };
    Object.defineProperty(QuestionAdornerViewModel.prototype, "isEmptyElement", {
        get: function () {
            if (this.surveyElement instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionHtmlModel"]) {
                return !this.surveyElement.html;
            }
            if (this.surveyElement instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["PanelModelBase"]) {
                var panel = this.surveyElement;
                return (!panel.rows || panel.rows.length <= 0 || panel.elements.length === 0);
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionAdornerViewModel.prototype, "placeholderText", {
        get: function () {
            if (this.surveyElement instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionHtmlModel"]) {
                return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.htmlPlaceHolder");
            }
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.panelPlaceHolder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionAdornerViewModel.prototype, "dragDropHelper", {
        get: function () {
            return this.creator.dragDropSurveyElements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionAdornerViewModel.prototype, "isRequired", {
        get: function () {
            return this.surveyElement.isRequired;
        },
        set: function (newVal) {
            this.surveyElement.isRequired = newVal;
        },
        enumerable: false,
        configurable: true
    });
    QuestionAdornerViewModel.prototype.onPointerDown = function (pointerDownEvent) {
        this.dragOrClickHelper.onPointerDown(pointerDownEvent);
    };
    QuestionAdornerViewModel.prototype.getConvertToTypesActions = function () {
        var _this = this;
        var availableItems = this.creator.getAvailableToolboxItems(this.element, false);
        var itemNames = [];
        availableItems.forEach(function (item) { return itemNames.push(item.typeName); });
        var convertClasses = _questionconverter__WEBPACK_IMPORTED_MODULE_3__["QuestionConverter"].getConvertToClasses(this.currentType, itemNames, true);
        var res = [];
        var lastItem = null;
        convertClasses.forEach(function (className) {
            var item = _this.creator.toolbox.items.filter(function (item) { return item.name == className; })[0];
            var needSeparator = lastItem && item.category != lastItem.category;
            var action = _this.creator.createIActionBarItemByClass(item.name, item.title, item.iconName, needSeparator);
            lastItem = item;
            res.push(action);
        });
        return res;
    };
    Object.defineProperty(QuestionAdornerViewModel.prototype, "currentType", {
        get: function () {
            return this.surveyElement.getType();
        },
        enumerable: false,
        configurable: true
    });
    QuestionAdornerViewModel.prototype.createConvertToAction = function () {
        var _this = this;
        var availableTypes = this.getConvertToTypesActions();
        var allowChangeType = availableTypes.length > 0;
        var newAction = this.createDropdownModel("convertTo", availableTypes, allowChangeType, 0, this.currentType, function (item) {
            _this.creator.convertCurrentQuestion(item.id);
        });
        newAction.disableHide = true;
        return newAction;
    };
    QuestionAdornerViewModel.prototype.createConvertInputType = function () {
        var _this = this;
        var prop = null;
        if (this.surveyElement.getType() === "text")
            prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty("text", "inputType");
        if (this.surveyElement.getType() === "rating")
            prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty("rating", "rateDisplayMode");
        if (!prop || !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["isPropertyVisible"])(this.surveyElement, prop.name))
            return null;
        var propName = prop.name;
        var questionSubType = this.surveyElement.getPropertyValue(propName);
        var items = prop.getChoices(this.surveyElement, function (chs) { });
        var availableTypes = [];
        items.forEach(function (item) {
            availableTypes.push({ id: item, title: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getPropertyValueInEditor(prop.name, item) });
        });
        var newAction = this.createDropdownModel("convertInputType", availableTypes, true, 1, questionSubType, function (item) {
            _this.surveyElement.setPropertyValue(propName, item.id);
            newAction.title = item.title;
        });
        newAction.disableShrink = true;
        this.surveyElement.registerFunctionOnPropertyValueChanged(propName, function () {
            var item = _this.getSelectedItem(availableTypes, _this.surveyElement.getPropertyValue(propName));
            if (!item)
                return;
            var popup = newAction.popupModel;
            var list = popup.contentComponentData.model;
            list.selectedItem = item;
            newAction.title = item.title;
        }, "inputTypeAdorner");
        newAction.removePriority = 1;
        return newAction;
    };
    QuestionAdornerViewModel.prototype.getSelectedItem = function (actions, id) {
        var selectedItems = actions.filter(function (item) { return item.id === id; });
        return selectedItems.length > 0 ? selectedItems[0] : undefined;
    };
    QuestionAdornerViewModel.prototype.createDropdownModel = function (id, actions, enabled, index, selValue, onSelectionChanged) {
        var _a;
        var selItem = this.getSelectedItem(actions, selValue);
        var actionTitle = !!selItem ? selItem.title : selValue;
        var newAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModel"])({
            id: id,
            css: "sv-action--convertTo sv-action-bar-item--secondary",
            iconName: (_a = this.creator.toolbox.getItemByName(this.element.getType())) === null || _a === void 0 ? void 0 : _a.iconName,
            iconSize: 24,
            title: actionTitle,
            enabled: enabled,
            visibleIndex: index,
            disableShrink: false,
            action: function (newType) {
            },
        }, {
            items: actions,
            onSelectionChanged: onSelectionChanged,
            allowSelection: true,
            selectedItem: selItem,
            horizontalPosition: "center"
        });
        newAction.popupModel.displayMode = this.creator.isTouch ? "overlay" : "popup";
        newAction.data.locOwner = this.creator;
        return newAction;
    };
    QuestionAdornerViewModel.prototype.createRequiredAction = function () {
        var _this = this;
        this.surveyElement.isRequired;
        var requiredAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "isrequired",
            ariaChecked: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.isRequired; }),
            ariaRole: "checkbox",
            css: "sv-action-bar-item--secondary",
            title: this.creator.getLocString("pe.isRequired"),
            visibleIndex: 20,
            iconName: "icon-required",
            iconSize: 16,
            action: function () {
                if (_this.creator.isCanModifyProperty(_this.surveyElement, "isRequired")) {
                    _this.isRequired = !_this.isRequired;
                }
            }
        });
        requiredAction.innerCss = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]().append("svc-required-action").append("svc-required-action--active", _this.isRequired).toString(); });
        requiredAction.innerItem.title = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
            return _this.isRequired ? _this.creator.getLocString("pe.removeRequiredMark") : _this.creator.getLocString("pe.markRequired");
        });
        return requiredAction;
    };
    QuestionAdornerViewModel.prototype.buildActions = function (items) {
        _super.prototype.buildActions.call(this, items);
        var element = this.surveyElement;
        items.push(this.createConvertToAction());
        var inputTypeConverter = this.createConvertInputType();
        if (!!inputTypeConverter) {
            items.push(inputTypeConverter);
        }
        items[items.length - 1].css += " sv-action--convertTo-last";
        if (typeof element["isRequired"] !== "undefined" &&
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["propertyExists"])(element, "isRequired") &&
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["isPropertyVisible"])(element, "isRequired")) {
            items.push(this.createRequiredAction());
        }
    };
    QuestionAdornerViewModel.prototype.duplicate = function () {
        var _this = this;
        setTimeout(function () {
            var newElement = _this.creator.fastCopyQuestion(_this.surveyElement);
            _this.creator.selectElement(newElement);
        }, 1);
    };
    QuestionAdornerViewModel.prototype.addNewQuestion = function () {
        this.creator.addNewQuestionInPage(function (type) { }, this.surveyElement instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["PanelModelBase"] ? this.surveyElement : null, this.currentAddQuestionType || _creator_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].designer.defaultAddQuestionType);
    };
    Object.defineProperty(QuestionAdornerViewModel.prototype, "addNewQuestionText", {
        get: function () {
            if (!this.currentAddQuestionType && this.creator)
                return this.creator.getLocString("ed.addNewQuestion");
            return !!this.creator ? this.creator.getAddNewQuestionText(this.currentAddQuestionType) : "";
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionAdornerViewModel.prototype, "isDragged", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "" })
    ], QuestionAdornerViewModel.prototype, "currentAddQuestionType", void 0);
    return QuestionAdornerViewModel;
}(_action_container_view_model__WEBPACK_IMPORTED_MODULE_5__["SurveyElementAdornerBase"]));



/***/ }),

/***/ "./src/components/results.scss":
/*!*************************************!*\
  !*** ./src/components/results.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/results.ts":
/*!***********************************!*\
  !*** ./src/components/results.ts ***!
  \***********************************/
/*! exports provided: SurveyResultsItemModel, SurveyResultsModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyResultsItemModel", function() { return SurveyResultsItemModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyResultsModel", function() { return SurveyResultsModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_2__);



__webpack_require__(/*! ./results.scss */ "./src/components/results.scss");
var SurveyResultsItemModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyResultsItemModel, _super);
    function SurveyResultsItemModel(_data, _lvl) {
        var _this = _super.call(this) || this;
        _this._data = _data;
        _this._lvl = _lvl;
        _this.toggle = function () {
            _this.collapsed = !_this.collapsed;
        };
        _this.markerWidth = 16;
        _this.items = addCollapsed(_data.data, _lvl + 1);
        _this.lvl = _lvl;
        return _this;
    }
    Object.defineProperty(SurveyResultsItemModel.prototype, "data", {
        get: function () {
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "isNode", {
        get: function () {
            return this._data.isNode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "name", {
        get: function () {
            return this._data.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "title", {
        get: function () {
            return this._data.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "value", {
        get: function () {
            return this._data.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "displayValue", {
        get: function () {
            return this._data.displayValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyResultsItemModel.prototype.getString = function (data) {
        return this._data.getString(data);
    };
    Object.defineProperty(SurveyResultsItemModel.prototype, "markerMargin", {
        get: function () {
            return (1.5 + this.lvl) * this.markerWidth + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsItemModel.prototype, "textMargin", {
        get: function () {
            return (2.75 + this.lvl) * this.markerWidth + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: true })
    ], SurveyResultsItemModel.prototype, "collapsed", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: 0 })
    ], SurveyResultsItemModel.prototype, "lvl", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], SurveyResultsItemModel.prototype, "items", void 0);
    return SurveyResultsItemModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_2__["Base"]));

function addCollapsed(items, initLvl) {
    if (items === void 0) { items = []; }
    return items.filter(function (item) { return !!item; }).map(function (item) {
        return new SurveyResultsItemModel(item, initLvl);
    });
}
var SurveyResultsModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyResultsModel, _super);
    function SurveyResultsModel(survey) {
        var _this = _super.call(this) || this;
        _this.survey = survey;
        _this.selectTableClick = function () {
            _this.resultViewType = "table";
        };
        _this.selectJsonClick = function () {
            _this.resultViewType = "text";
        };
        _this.resultText = JSON.stringify(survey.data, null, 4);
        var plainData = survey.getPlainData({ includeEmpty: false, includeValues: true });
        _this.resultData = addCollapsed(plainData, 0);
        return _this;
    }
    SurveyResultsModel.prototype.getLocString = function (name) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString(name);
    };
    Object.defineProperty(SurveyResultsModel.prototype, "surveyResultsText", {
        get: function () {
            return this.getLocString("ed.surveyResults");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "surveyResultsTableText", {
        get: function () {
            return this.getLocString("ed.surveyResultsTable");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "surveyResultsJsonText", {
        get: function () {
            return this.getLocString("ed.surveyResultsJson");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "resultsTitle", {
        get: function () {
            return this.getLocString("ed.resultsTitle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "resultsName", {
        get: function () {
            return this.getLocString("ed.resultsName");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "resultsValue", {
        get: function () {
            return this.getLocString("ed.resultsValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "resultsDisplayValue", {
        get: function () {
            return this.getLocString("ed.resultsDisplayValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "isTableSelected", {
        get: function () {
            return this.resultViewType === "table";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyResultsModel.prototype, "isJsonSelected", {
        get: function () {
            return this.resultViewType === "text";
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "table" })
    ], SurveyResultsModel.prototype, "resultViewType", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "" })
    ], SurveyResultsModel.prototype, "resultText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["propertyArray"])()
    ], SurveyResultsModel.prototype, "resultData", void 0);
    return SurveyResultsModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_2__["Base"]));



/***/ }),

/***/ "./src/components/row.scss":
/*!*********************************!*\
  !*** ./src/components/row.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/row.ts":
/*!*******************************!*\
  !*** ./src/components/row.ts ***!
  \*******************************/
/*! exports provided: RowViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RowViewModel", function() { return RowViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


__webpack_require__(/*! ./row.scss */ "./src/components/row.scss");
var RowViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RowViewModel, _super);
    function RowViewModel(creator, row, templateData) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.row = row;
        _this.templateData = templateData;
        return _this;
    }
    Object.defineProperty(RowViewModel.prototype, "cssClasses", {
        get: function () {
            var result = "svc-row";
            var ghostClass = " svc-row--ghost";
            if (this.row.elements.length === 1 &&
                this.row.elements[0].name === "sv-drag-drop-ghost-survey-element-name") {
                result += ghostClass;
            }
            if (this.row.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top) {
                result += " svc-row--drag-over-top";
            }
            if (this.row.dragTypeOverMe === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom) {
                result += " svc-row--drag-over-bottom";
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    return RowViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/side-bar/side-bar-model.ts":
/*!***************************************************!*\
  !*** ./src/components/side-bar/side-bar-model.ts ***!
  \***************************************************/
/*! exports provided: SidebarModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidebarModel", function() { return SidebarModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _side_bar_tab_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./side-bar-tab-model */ "./src/components/side-bar/side-bar-tab-model.ts");
/* harmony import */ var _utils_resizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/resizer */ "./src/utils/resizer.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");






var SidebarModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SidebarModel, _super);
    function SidebarModel(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.toolbar = new survey_core__WEBPACK_IMPORTED_MODULE_1__["AdaptiveActionContainer"]();
        _this.sidebarLocationChangedHandler = function (sender, options) {
            if (options.name === "sidebarLocation" && !!_this.resizeManager) {
                _this.resizeManager.setHandles(_this.getCurrentHandles());
            }
        };
        _this.onSidebarVisibilityChanged = function (sender, options) {
            if (_this.isDisposed)
                return;
            _this.visible = options.show;
        };
        _this.creator.onShowSidebarVisibilityChanged.add(_this.onSidebarVisibilityChanged);
        _this.creator.onPropertyChanged.add(_this.sidebarLocationChangedHandler);
        _this.visible = _this.creator.showSidebar;
        _this.createActions();
        return _this;
    }
    Object.defineProperty(SidebarModel.prototype, "flyoutPanelMode", {
        get: function () {
            return this.visible && this.flyoutMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SidebarModel.prototype, "closeText", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.close");
        },
        enumerable: false,
        configurable: true
    });
    SidebarModel.prototype.getTabById = function (id) {
        return this.tabs.filter(function (tab) { return tab.id === id; })[0];
    };
    SidebarModel.prototype.createActions = function () {
        var _this = this;
        this._collapseAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-grid-hide",
            iconName: "icon-collapse-panel",
            css: "svd-grid-hide",
            locTitleName: "ed.hidePanel",
            showTitle: false,
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["notShortCircuitAnd"])(!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["notShortCircuitAnd"])(!_this.creator.allowCollapseSidebar, !_this.flyoutMode), _this.visible);
            }),
            action: function () {
                _this.collapseSidebar();
                if (!_this.flyoutMode) {
                    _this.collapsedManually = true;
                    _this.expandedManually = false;
                }
                else {
                    _this.creator.focusElement(_this.creator.selectedElement, true);
                }
            }
        });
        this.toolbar.actions.push(this._collapseAction);
        if (this.creator.allowCollapseSidebar) {
            this._expandAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "svd-grid-expand",
                iconName: "icon-expand-panel",
                css: "svd-grid-expand",
                needSeparator: true,
                action: function () {
                    _this.expandSidebar();
                    if (!_this.flyoutMode) {
                        _this.collapsedManually = false;
                        _this.expandedManually = _this.flyoutMode;
                    }
                },
                locTitleName: "ed.showPanel",
                visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["notShortCircuitAnd"])(_this.hasVisibleTabs, !_this.visible);
                }),
                showTitle: false
            });
        }
    };
    SidebarModel.prototype.getCurrentHandles = function () {
        return this.creator.sidebarLocation == "right" ? "w" : "e";
    };
    SidebarModel.prototype.getExpandAction = function () {
        return this._expandAction;
    };
    SidebarModel.prototype.collapseSidebar = function () {
        this.creator.setShowSidebar(false);
    };
    SidebarModel.prototype.expandSidebar = function () {
        this.creator.setShowSidebar(true);
    };
    SidebarModel.prototype.addTab = function (id, componentName, model, buildActions) {
        var _this = this;
        var tab = new _side_bar_tab_model__WEBPACK_IMPORTED_MODULE_3__["SidebarTabModel"](id, this, componentName, model);
        this.tabs.push(tab);
        if (!!buildActions) {
            (buildActions() || []).forEach(function (action) { return _this.toolbar.actions.push(action); });
        }
        return tab;
    };
    SidebarModel.prototype.updateHasVisibleTabs = function () {
        this.hasVisibleTabs = (this.tabs || []).filter(function (tab) { return tab.visible; }).length > 0;
    };
    SidebarModel.prototype.dispose = function () {
        if (!!this.creator && !this.isDisposed) {
            this.creator.onShowSidebarVisibilityChanged.remove(this.onSidebarVisibilityChanged);
            this.creator.onPropertyChanged.remove(this.sidebarLocationChangedHandler);
            this.sidebarLocationChangedHandler = undefined;
        }
        this.resetResizeManager();
        _super.prototype.dispose.call(this);
    };
    SidebarModel.prototype.initResizeManager = function (container) {
        this.resizeManager = new _utils_resizer__WEBPACK_IMPORTED_MODULE_4__["ResizeManager"](container, this.getCurrentHandles());
    };
    SidebarModel.prototype.resetResizeManager = function () {
        if (!!this.resizeManager) {
            this.resizeManager.dispose();
            this.resizeManager = undefined;
        }
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], SidebarModel.prototype, "tabs", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SidebarModel.prototype, "headerText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SidebarModel.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], SidebarModel.prototype, "collapsedManually", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], SidebarModel.prototype, "expandedManually", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SidebarModel.prototype, "hasVisibleTabs", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], SidebarModel.prototype, "flyoutMode", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (val, target) {
                target.tabs.forEach(function (tab) { return tab.visible = false; });
                target._activeTab = target.tabs.filter(function (tab) { return tab.id === val; })[0];
                if (target._activeTab) {
                    target.headerText = target._activeTab.caption;
                    target._activeTab.visible = true;
                }
            }
        })
    ], SidebarModel.prototype, "activeTab", void 0);
    return SidebarModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/side-bar/side-bar-tab-model.ts":
/*!*******************************************************!*\
  !*** ./src/components/side-bar/side-bar-tab-model.ts ***!
  \*******************************************************/
/*! exports provided: SidebarTabModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidebarTabModel", function() { return SidebarTabModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var SidebarTabModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SidebarTabModel, _super);
    function SidebarTabModel(id, sidePanel, componentName, model) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.sidePanel = sidePanel;
        !!componentName && (_this.componentName = componentName);
        !!model && (_this.model = model);
        return _this;
    }
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (newVal, target) {
                target.sidePanel.headerText = target.caption;
            }
        })
    ], SidebarTabModel.prototype, "caption", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (newVal, target) {
                target.sidePanel.updateHasVisibleTabs();
            }
        })
    ], SidebarTabModel.prototype, "visible", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SidebarTabModel.prototype, "model", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SidebarTabModel.prototype, "componentName", void 0);
    return SidebarTabModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/side-bar/side-bar.scss":
/*!***********************************************!*\
  !*** ./src/components/side-bar/side-bar.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/simulator.scss":
/*!***************************************!*\
  !*** ./src/components/simulator.scss ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/simulator.ts":
/*!*************************************!*\
  !*** ./src/components/simulator.ts ***!
  \*************************************/
/*! exports provided: SurveySimulatorModel, DEFAULT_MONITOR_DPI, simulatorDevices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveySimulatorModel", function() { return SurveySimulatorModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MONITOR_DPI", function() { return DEFAULT_MONITOR_DPI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simulatorDevices", function() { return simulatorDevices; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


__webpack_require__(/*! ./simulator.scss */ "./src/components/simulator.scss");
var SurveySimulatorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveySimulatorModel, _super);
    function SurveySimulatorModel() {
        var _this = _super.call(this) || this;
        _this.activateZoom = function () {
            document.addEventListener("keydown", _this.listenTryToZoom);
            document.addEventListener("wheel", _this.listenTryToZoomWithWheel, { passive: false });
        };
        _this.deactivateZoom = function () {
            document.removeEventListener("keydown", _this.listenTryToZoom);
            document.removeEventListener("wheel", _this.listenTryToZoomWithWheel);
        };
        _this.listenTryToZoomWithWheel = function (e) { return _this.tryToZoomWithWheel(e, e); };
        _this.listenTryToZoom = function (e) { return _this.tryToZoom(e, e); };
        return _this;
        // if (!!_toolbarHolder) {
        //   this.simulatorOptions.survey = this._toolbarHolder.koSurvey;
        //   ko.computed(() => {
        //     this.simulatorEnabled = _toolbarHolder.showSimulator();
        //   });
        //   _toolbarHolder.toolbarItems.push({
        //     id: "svd-test-simulator",
        //     title: getLocString("pe.simulator"),
        //     visible: ko.computed(() => this.simulatorEnabled),
        //     tooltip: getLocString("pe.simulator"),
        //     component: "svd-dropdown",
        //     action: ko.computed({
        //       read: () => this.activeDevice,
        //       write: (val: any) => (this.activeDevice = val),
        //     }),
        //     items: <any>this.koDevices,
        //   });
        //   _toolbarHolder.toolbarItems.push({
        //     id: "svd-test-simulator-orientation",
        //     title: getLocString("pe.landscapeOrientation"),
        //     visible: this.koHasFrame,
        //     tooltip: getLocString("pe.landscapeOrientation"),
        //     component: "svd-boolean",
        //     action: ko.computed({
        //       read: () => this.landscapeOrientation,
        //       write: (val: any) => (this.landscapeOrientation = val),
        //     }),
        //   });
        // }
    }
    Object.defineProperty(SurveySimulatorModel.prototype, "zoomScale", {
        get: function () {
            return this.currZoomScale;
        },
        enumerable: false,
        configurable: true
    });
    SurveySimulatorModel.prototype.tryToZoomWithWheel = function (data, event) {
        var diff = event.deltaY;
        if (event.ctrlKey || event.metaKey) {
            diff < 0 ? this.zoomSimulator("up", event) : this.zoomSimulator("down", event);
        }
        return true;
    };
    SurveySimulatorModel.prototype.tryToZoom = function (data, event) {
        if (event.ctrlKey || event.metaKey) {
            if (event.keyCode == 107 || event.keyCode == 187) {
                this.zoomSimulator("up", event);
            }
            if (event.keyCode == 109 || event.keyCode == 189) {
                this.zoomSimulator("down", event);
            }
            if (event.keyCode == 48 || event.keyCode == 96) {
                this.zoomSimulator("zero", event);
            }
        }
        return true;
    };
    SurveySimulatorModel.prototype.changeZoomScale = function (type) {
        var coef = 1.01;
        var multiplier = type === "up" ? coef : (type === "down" ? 1 / coef : 1);
        this.currZoomScale = type === "zero" ? 1 : this.currZoomScale * multiplier;
    };
    SurveySimulatorModel.prototype.zoomSimulator = function (type, event) {
        event.preventDefault();
        this.changeZoomScale(type);
        var simulator = document.getElementById("svd-simulator-wrapper");
        if (!!simulator)
            simulator.style.transform = "scale(" + this.currZoomScale + ")";
        event.stopPropagation();
    };
    SurveySimulatorModel.prototype.resetZoomParameters = function () {
        this.currZoomScale = 1;
        var simulator = document.getElementById("svd-simulator-wrapper");
        if (!!simulator)
            simulator.style.transform = "";
    };
    Object.defineProperty(SurveySimulatorModel.prototype, "activeDevice", {
        get: function () {
            return this.device;
        },
        set: function (device) {
            this.device = device;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveySimulatorModel.prototype, "landscapeOrientation", {
        get: function () {
            return this.landscape;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveySimulatorModel.prototype, "hasFrame", {
        // set landscapeOrientation(isLanscape: boolean) {
        //   this.landscape = isLanscape;
        // }
        get: function () {
            var device = simulatorDevices[this.activeDevice];
            return this.simulatorEnabled && device.deviceType !== "desktop";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveySimulatorModel.prototype, "simulatorFrame", {
        get: function () {
            if (!this.hasFrame) {
                return undefined;
            }
            var device = simulatorDevices[this.activeDevice];
            var scale = 1; //DEFAULT_MONITOR_DPI / device.ppi;
            var deviceWidth = (this.landscapeOrientation ? device.height : device.width) / device.cssPixelRatio;
            var deviceHeight = (this.landscapeOrientation ? device.width : device.height) / device.cssPixelRatio;
            var deviceLandscapedFrameWidth = (this.landscapeOrientation ? device.frameHeight : device.frameWidth) / device.cssPixelRatio;
            var deviceLandscapedFrameHeight = (this.landscapeOrientation ? device.frameWidth : device.frameHeight) / device.cssPixelRatio;
            var frameWidth = deviceLandscapedFrameWidth * scale;
            var frameHeight = deviceLandscapedFrameHeight * scale;
            return {
                scale: this.simulatorScaleEnabled ? scale /* * device.cssPixelRatio */ : 1,
                frameWidth: frameWidth,
                frameHeight: frameHeight,
                landscapedFrameWidth: this.landscapeOrientation ? frameHeight : frameWidth,
                landscapedFrameHeight: this.landscapeOrientation ? frameWidth : frameHeight,
                deviceWidth: deviceWidth,
                deviceHeight: deviceHeight,
                cssClass: device.cssClass +
                    (this.landscapeOrientation ? " svd-simulator-frame-landscape" : ""),
            };
        },
        enumerable: false,
        configurable: true
    });
    SurveySimulatorModel.prototype.getRootCss = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append("svd-simulator-main")
            .append("svd-simulator-main--frame", this.hasFrame)
            .append("svd-simulator-main--desktop", this.device === "desktop")
            .append("svd-simulator-main--running", this.isRunning)
            .toString();
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveySimulatorModel.prototype, "landscape", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveySimulatorModel.prototype, "survey", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "desktop" })
    ], SurveySimulatorModel.prototype, "device", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "l" })
    ], SurveySimulatorModel.prototype, "orientation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveySimulatorModel.prototype, "considerDPI", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveySimulatorModel.prototype, "isRunning", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveySimulatorModel.prototype, "simulatorEnabled", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], SurveySimulatorModel.prototype, "simulatorScaleEnabled", void 0);
    return SurveySimulatorModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var DEFAULT_MONITOR_DPI = (typeof window !== "undefined" ? window.devicePixelRatio : 1) * 96;
var simulatorDevices = {
    desktop: {
        deviceType: "desktop",
        title: "Desktop",
    },
    // desktop_1280x720: {
    //   cssPixelRatio: 1,
    //   ppi: DEFAULT_MONITOR_DPI,
    //   width: 720,
    //   height: 1280,
    //   deviceType: "desktop",
    //   title: "Desktop 1280x720"
    // },
    // desktop_1440x900: {
    //   cssPixelRatio: 1,
    //   ppi: DEFAULT_MONITOR_DPI,
    //   width: 900,
    //   height: 1440,
    //   deviceType: "desktop",
    //   title: "Desktop 1440x900"
    // },
    // desktop_1920x1080: {
    //   cssPixelRatio: 1,
    //   ppi: DEFAULT_MONITOR_DPI,
    //   width: 1080,
    //   height: 1920,
    //   deviceType: "desktop",
    //   title: "Desktop 1920x1080"
    // },
    // iPhone: {
    //   cssPixelRatio: 2,
    //   ppi: 326,
    //   width: 640,
    //   height: 960,
    //   frameWidth: 730,
    //   frameHeight: 1340,
    //   deviceType: "phone",
    //   title: "iPhone",
    //   cssClass: "svd-simulator-iphone4"
    // },
    // iPhone5: {
    //   cssPixelRatio: 2,
    //   ppi: 326,
    //   width: 640,
    //   height: 1136,
    //   frameWidth: 750,
    //   frameHeight: 1500,
    //   deviceType: "phone",
    //   title: "iPhone 5",
    //   cssClass: "svd-simulator-iphone5",
    // },
    iPhone6: {
        cssPixelRatio: 2,
        ppi: 326,
        width: 750,
        height: 1334,
        frameWidth: 960,
        frameHeight: 1750,
        deviceType: "phone",
        title: "iPhone 6",
        cssClass: "svd-simulator-iphone6",
    },
    iPhone6plus: {
        cssPixelRatio: 2.6,
        ppi: 401,
        width: 1080,
        height: 1920,
        frameWidth: 1330,
        frameHeight: 2550,
        deviceType: "phone",
        title: "iPhone 6 Plus",
        cssClass: "svd-simulator-iphone6plus",
    },
    iPhone8: {
        cssPixelRatio: 2,
        ppi: 326,
        width: 750,
        height: 1334,
        frameWidth: 990,
        frameHeight: 1860,
        deviceType: "phone",
        title: "iPhone 8",
        cssClass: "svd-simulator-iphone8",
    },
    iPhone8plus: {
        cssPixelRatio: 3,
        ppi: 401,
        width: 1080,
        height: 1920,
        frameWidth: 1330,
        frameHeight: 2550,
        deviceType: "phone",
        title: "iPhone 8 Plus",
        cssClass: "svd-simulator-iphone8plus",
    },
    iPhoneX: {
        cssPixelRatio: 3,
        ppi: 458,
        width: 1125,
        height: 2436,
        frameWidth: 1330,
        frameHeight: 2680,
        deviceType: "phone",
        title: "iPhone X",
        cssClass: "svd-simulator-iphonex",
    },
    iPhoneXmax: {
        cssPixelRatio: 3,
        ppi: 458,
        width: 1242,
        height: 2688,
        frameWidth: 1410,
        frameHeight: 2980,
        deviceType: "phone",
        title: "iPhone X Max",
        cssClass: "svd-simulator-iphonexmax",
    },
    iPad: {
        cssPixelRatio: 2,
        ppi: 264,
        width: 1536,
        height: 2048,
        frameWidth: 1837,
        frameHeight: 2563,
        deviceType: "tablet",
        title: "iPad",
        cssClass: "svd-simulator-ipad",
    },
    iPadMini: {
        cssPixelRatio: 2,
        ppi: 326,
        width: 1536,
        height: 2048,
        frameWidth: 1890,
        frameHeight: 2600,
        deviceType: "tablet",
        title: "iPad Mini",
        cssClass: "svd-simulator-ipadmini",
    },
    iPadPro: {
        cssPixelRatio: 2,
        ppi: 264,
        width: 1688,
        height: 2388,
        frameWidth: 2008,
        frameHeight: 2980,
        deviceType: "tablet",
        title: 'iPad Pro 11"',
        cssClass: "svd-simulator-ipadpro",
    },
    iPadPro13: {
        cssPixelRatio: 2,
        ppi: 264,
        width: 2048,
        height: 2732,
        frameWidth: 2360,
        frameHeight: 3300,
        deviceType: "tablet",
        title: 'iPad Pro 12,9"',
        cssClass: "svd-simulator-ipadpro13",
    },
    androidPhone: {
        cssPixelRatio: 2,
        ppi: 316,
        width: 720,
        height: 1280,
        frameWidth: 850,
        frameHeight: 1630,
        deviceType: "phone",
        title: "Android Phone",
        cssClass: "svd-simulator-androidphone",
    },
    androidTablet: {
        cssPixelRatio: 1.5,
        ppi: 149,
        width: 800,
        height: 1280,
        frameWidth: 1070,
        frameHeight: 1480,
        deviceType: "tablet",
        title: "Android Tablet",
        cssClass: "svd-simulator-androidtablet",
    },
    win10Phone: {
        cssPixelRatio: 2,
        ppi: 294,
        width: 720,
        height: 1280,
        frameWidth: 1152,
        frameHeight: 2030,
        deviceType: "phone",
        title: "Windows 10 Phone",
        cssClass: "svd-simulator-win10phone",
    },
    msSurface: {
        cssPixelRatio: 1,
        ppi: 148,
        width: 768,
        height: 1366,
        frameWidth: 1040,
        frameHeight: 1620,
        deviceType: "tablet",
        title: "MS Surface",
        cssClass: "svd-simulator-mssurface",
    },
    genericPhone: {
        cssPixelRatio: 1,
        deviceType: "phone",
        title: "",
        cssClass: "svd-simulator-genphone",
    },
};


/***/ }),

/***/ "./src/components/string-editor.scss":
/*!*******************************************!*\
  !*** ./src/components/string-editor.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/string-editor.ts":
/*!*****************************************!*\
  !*** ./src/components/string-editor.ts ***!
  \*****************************************/
/*! exports provided: StringItemsNavigatorBase, StringEditorConnector, StringEditorViewModelBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringItemsNavigatorBase", function() { return StringItemsNavigatorBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringEditorConnector", function() { return StringEditorConnector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringEditorViewModelBase", function() { return StringEditorViewModelBase; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");





var StringItemsNavigatorBase = /** @class */ (function () {
    function StringItemsNavigatorBase(question) {
        this.question = question;
    }
    StringItemsNavigatorBase.createItemsNavigator = function (question) {
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionImagePickerModel"])
            return null;
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionMultipleTextModel"])
            return new StringItemsNavigatorMultipleText(question);
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionMatrixDropdownModel"])
            return new StringItemsNavigatorMatrixDropdown(question);
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionMatrixDynamicModel"])
            return new StringItemsNavigatorMatrixDynamic(question);
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionMatrixModel"])
            return new StringItemsNavigatorMatrix(question);
        if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionSelectBase"])
            return new StringItemsNavigatorSelectBase(question);
        return null;
    };
    StringItemsNavigatorBase.prototype.addNewItems = function (items, startIndex, itemsToAdd) {
        var _this = this;
        var createNewItem = function (val) {
            if (_this.question.createItemValue)
                return _this.question.createItemValue(val);
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](val);
        };
        var newItems = items.slice(0, startIndex).concat(itemsToAdd.map(function (text) { return createNewItem(text); })).concat(items.slice(startIndex + 1));
        this.question[this.getItemsPropertyName(items)] = newItems;
    };
    StringItemsNavigatorBase.prototype.setEventsForItem = function (creator, items, item) {
        var _this = this;
        var connector = StringEditorConnector.get(this.getItemLocString(items, item));
        connector.onEditComplete.clear();
        connector.onEditComplete.add(function () {
            var itemIndex = items.indexOf(item);
            if (itemIndex >= 0 && itemIndex < items.length - 1) {
                StringEditorConnector.get(_this.getItemLocString(items, items[itemIndex + 1])).activateEditor();
            }
            if (itemIndex == items.length - 1) {
                _this.addNewItem(creator, items);
                StringEditorConnector.get(_this.getItemLocString(items, items[items.length - 1])).setAutoFocus();
                StringEditorConnector.get(_this.getItemLocString(items, items[items.length - 1])).activateEditor();
            }
        });
        connector.onBackspaceEmptyString.clear();
        connector.onBackspaceEmptyString.add(function () {
            var itemIndex = items.indexOf(item);
            var itemToFocus = null;
            if (itemIndex !== -1) {
                if (itemIndex == 0 && items.length >= 2)
                    itemToFocus = items[1];
                if (itemIndex > 0)
                    itemToFocus = items[itemIndex - 1];
                if (itemToFocus) {
                    var connector_1 = StringEditorConnector.get(_this.getItemLocString(items, itemToFocus));
                    connector_1.setAutoFocus();
                    connector_1.activateEditor();
                }
                items.splice(itemIndex, 1);
            }
        });
        connector.onTextChanging.clear();
        connector.onTextChanging.add(function (sender, options) {
            var lines = options.value.split(/\r?\n/).filter(function (line) { return !!line; });
            if (lines.length <= 1)
                return;
            options.cancel = true;
            var itemIndex = items.indexOf(item);
            _this.addNewItems(items, itemIndex, lines);
            var focusedItemIndex = itemIndex + lines.length;
            if (focusedItemIndex >= items.length)
                focusedItemIndex = items.length - 1;
            StringEditorConnector.get(_this.getItemLocString(items, items[focusedItemIndex])).setAutoFocus();
            StringEditorConnector.get(_this.getItemLocString(items, items[focusedItemIndex])).activateEditor();
        });
    };
    StringItemsNavigatorBase.setQuestion = function (questionAdorner) {
        var question = questionAdorner.element;
        var navigator = StringItemsNavigatorBase.createItemsNavigator(question);
        if (navigator) {
            var creator_1 = questionAdorner.creator;
            var titleConnector = StringEditorConnector.get(question.locTitle);
            var allItemSets = navigator.getItemSets();
            var activeChoices_1 = allItemSets[0];
            if (!titleConnector.hasEditCompleteHandler) {
                titleConnector.onEditComplete.add(function () {
                    if (activeChoices_1.length)
                        StringEditorConnector.get(navigator.getItemLocString(activeChoices_1, activeChoices_1[0])).activateEditor();
                });
                titleConnector.hasEditCompleteHandler = true;
            }
            allItemSets.forEach(function (activeChoices) {
                activeChoices.forEach(function (item) {
                    navigator.setEventsForItem(creator_1, activeChoices, item);
                });
                var itemsPropertyName = navigator.getItemsPropertyName(activeChoices);
                question.onPropertyChanged.add(function (sender, options) {
                    if (options.name == itemsPropertyName) {
                        activeChoices.forEach(function (item) {
                            navigator.setEventsForItem(creator_1, activeChoices, item);
                        });
                    }
                });
            });
        }
        return !!navigator;
    };
    return StringItemsNavigatorBase;
}());

var StringItemsNavigatorSelectBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringItemsNavigatorSelectBase, _super);
    function StringItemsNavigatorSelectBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StringItemsNavigatorSelectBase.prototype.getItemLocString = function (items, item) {
        return item.locText;
    };
    StringItemsNavigatorSelectBase.prototype.getItemSets = function () {
        return [this.question.choices];
    };
    StringItemsNavigatorSelectBase.prototype.addNewItem = function (creator, items, text) {
        if (text === void 0) { text = null; }
        var itemValue = creator.createNewItemValue(this.question);
        if (!!text)
            itemValue.value = text;
    };
    StringItemsNavigatorSelectBase.prototype.getItemsPropertyName = function (items) {
        return "choices";
    };
    return StringItemsNavigatorSelectBase;
}(StringItemsNavigatorBase));
var StringItemsNavigatorMultipleText = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringItemsNavigatorMultipleText, _super);
    function StringItemsNavigatorMultipleText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StringItemsNavigatorMultipleText.prototype.getItemLocString = function (items, item) {
        return item.locTitle;
    };
    StringItemsNavigatorMultipleText.prototype.getItemSets = function () {
        return [this.question.items];
    };
    StringItemsNavigatorMultipleText.prototype.addNewItem = function (creator, items, text) {
        if (text === void 0) { text = null; }
        this.question.addItem(text || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextValue"])("text", items.map(function (i) { return i.name; })));
    };
    StringItemsNavigatorMultipleText.prototype.getItemsPropertyName = function (items) {
        return "items";
    };
    StringItemsNavigatorMultipleText.prototype.addNewItems = function (items, startIndex, itemsToAdd) {
        var newItems = items.slice(0, startIndex).concat(itemsToAdd.map(function (text) { return new survey_core__WEBPACK_IMPORTED_MODULE_1__["MultipleTextItemModel"](text); })).concat(items.slice(startIndex + 1));
        this.question[this.getItemsPropertyName(items)] = newItems;
    };
    return StringItemsNavigatorMultipleText;
}(StringItemsNavigatorBase));
var StringItemsNavigatorMatrix = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringItemsNavigatorMatrix, _super);
    function StringItemsNavigatorMatrix() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StringItemsNavigatorMatrix.prototype.getItemLocString = function (items, item) {
        return item.locText;
    };
    StringItemsNavigatorMatrix.prototype.getItemSets = function () {
        return [this.question.columns, this.question.rows];
    };
    StringItemsNavigatorMatrix.prototype.addNewItem = function (creator, items, text) {
        if (text === void 0) { text = null; }
        if (items == this.question.columns)
            this.question.addColumn(text || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextValue"])("Column ", items.map(function (i) { return i.value; })));
        if (items == this.question.rows)
            this.question.rows.push(text || new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextValue"])("Row ", items.map(function (i) { return i.value; }))));
    };
    StringItemsNavigatorMatrix.prototype.getItemsPropertyName = function (items) {
        if (items == this.question.columns)
            return "columns";
        if (items == this.question.rows)
            return "rows";
    };
    return StringItemsNavigatorMatrix;
}(StringItemsNavigatorBase));
var StringItemsNavigatorMatrixDropdown = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringItemsNavigatorMatrixDropdown, _super);
    function StringItemsNavigatorMatrixDropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StringItemsNavigatorMatrixDropdown.prototype.getItemLocString = function (items, item) {
        if (items == this.question.columns)
            return item.locTitle;
        return item.locText;
    };
    StringItemsNavigatorMatrixDropdown.prototype.addNewItems = function (items, startIndex, itemsToAdd) {
        if (items == this.question.columns) {
            var newItems = items.slice(0, startIndex).concat(itemsToAdd.map(function (text) { return new survey_core__WEBPACK_IMPORTED_MODULE_1__["MatrixDropdownColumn"](text); })).concat(items.slice(startIndex + 1));
            this.question[this.getItemsPropertyName(items)] = newItems;
        }
        else {
            _super.prototype.addNewItems.call(this, items, startIndex, itemsToAdd);
        }
    };
    return StringItemsNavigatorMatrixDropdown;
}(StringItemsNavigatorMatrix));
var StringItemsNavigatorMatrixDynamic = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringItemsNavigatorMatrixDynamic, _super);
    function StringItemsNavigatorMatrixDynamic() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StringItemsNavigatorMatrixDynamic.prototype.getItemSets = function () {
        return [this.question.columns];
    };
    return StringItemsNavigatorMatrixDynamic;
}(StringItemsNavigatorMatrixDropdown));
var StringEditorConnector = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringEditorConnector, _super);
    function StringEditorConnector(locString) {
        var _this = _super.call(this) || this;
        _this.locString = locString;
        _this.hasEditCompleteHandler = false;
        _this.onDoActivate = new survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]();
        _this.onTextChanging = new survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]();
        _this.onEditComplete = new survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]();
        _this.onBackspaceEmptyString = new survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]();
        return _this;
    }
    StringEditorConnector.get = function (locString) {
        if (!locString["_stringEditorConnector"])
            locString["_stringEditorConnector"] = new StringEditorConnector(locString);
        return locString["_stringEditorConnector"];
    };
    StringEditorConnector.prototype.setAutoFocus = function () { this.focusOnEditor = true; };
    StringEditorConnector.prototype.activateEditor = function () {
        this.onDoActivate.fire(this.locString, {});
    };
    return StringEditorConnector;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var StringEditorViewModelBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StringEditorViewModelBase, _super);
    function StringEditorViewModelBase(locString, creator) {
        var _this = _super.call(this) || this;
        _this.locString = locString;
        _this.creator = creator;
        _this.blurredByEscape = false;
        _this.focusedProgram = false;
        _this.characterCounter = new survey_core__WEBPACK_IMPORTED_MODULE_1__["CharacterCounter"]();
        _this.activate = function () {
            var element = _this.getEditorElement();
            if (element && element.offsetParent != null) {
                element.focus();
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["select"])(element);
                return true;
            }
            return false;
        };
        _this.justFocused = false;
        _this.locString = locString;
        _this.checkMarkdownToTextConversion(_this.locString.owner, _this.locString.name);
        return _this;
    }
    StringEditorViewModelBase.prototype.afterRender = function () {
        if (this.connector.focusOnEditor) {
            if (this.activate())
                this.connector.focusOnEditor = false;
        }
    };
    StringEditorViewModelBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.connector.onDoActivate.remove(this.activate);
    };
    StringEditorViewModelBase.prototype.setLocString = function (locString) {
        var _a;
        (_a = this.connector) === null || _a === void 0 ? void 0 : _a.onDoActivate.clear();
        this.connector = StringEditorConnector.get(locString);
        this.connector.onDoActivate.add(this.activate);
    };
    StringEditorViewModelBase.prototype.checkConstraints = function (event) {
        if (this.maxLength > 0 && event.keyCode >= 32) {
            var text = event.target.innerText || "";
            if (text.length >= this.maxLength) {
                event.preventDefault();
            }
        }
        if (event.ctrlKey || event.metaKey) {
            if ([89, 90].indexOf(event.keyCode) !== -1) {
                event.stopImmediatePropagation();
                event.preventDefault();
            }
        }
    };
    StringEditorViewModelBase.prototype.onClick = function (event) {
        event.stopPropagation();
    };
    StringEditorViewModelBase.prototype.onFocus = function (event) {
        if (!this.focusedProgram) {
            this.valueBeforeEdit = this.locString.hasHtml ? event.target.innerHTML : event.target.innerText;
            this.focusedProgram = false;
        }
        if (this.maxLength > 0) {
            this.characterCounter.updateRemainingCharacterCounter(this.valueBeforeEdit, this.maxLength);
        }
        this.creator.selectFromStringEditor = true;
        event.target.parentElement.click();
        event.target.spellcheck = true;
        event.target.setAttribute("tabindex", -1);
        this.focused = true;
        this.justFocused = true;
    };
    StringEditorViewModelBase.prototype.checkMarkdownToTextConversion = function (element, name) {
        var options = {
            element: element,
            text: null,
            name: name,
            html: "",
        };
        if (this.creator) {
            this.creator.onHtmlToMarkdown.fire(this.creator, options);
            this.editAsText = (options.text === null);
        }
    };
    StringEditorViewModelBase.prototype.onCompositionStart = function (event) {
        this.compostionInProgress = true;
    };
    StringEditorViewModelBase.prototype.onInput = function (event) {
        var _a;
        if (this.maxLength > 0) {
            var text = event.target.innerText || "";
            this.characterCounter.updateRemainingCharacterCounter(text, this.maxLength);
        }
        if (this.editAsText && !this.compostionInProgress) {
            var options = { value: (_a = event.target) === null || _a === void 0 ? void 0 : _a.innerText, cancel: null };
            if (this.connector)
                this.connector.onTextChanging.fire(this, options);
            if (options.cancel)
                return;
            Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["sanitizeEditableContent"])(event.target);
            if (this.maxLength >= 0 && event.target.innerText.length > this.maxLength) {
                event.target.innerText = event.target.innerText.substring(0, this.maxLength);
            }
        }
    };
    StringEditorViewModelBase.prototype.onCompositionEnd = function (event) {
        this.compostionInProgress = false;
        this.onInput(event);
    };
    StringEditorViewModelBase.prototype.onBlur = function (event) {
        event.target.removeAttribute("tabindex");
        if (this.blurredByEscape) {
            this.blurredByEscape = false;
            if (this.locString.hasHtml) {
                event.target.innerHTML = this.valueBeforeEdit;
            }
            else {
                event.target.innerText = this.valueBeforeEdit;
            }
            this.errorText = null;
            this.focused = false;
            window === null || window === void 0 ? void 0 : window.getSelection().removeAllRanges();
            return;
        }
        var mdText = null;
        if (!this.editAsText) {
            var options = {
                element: this.locString.owner,
                text: null,
                name: this.locString.name,
                html: event.target.innerHTML
            };
            this.creator.onHtmlToMarkdown.fire(this.creator, options);
            mdText = options.text;
        }
        var clearedText = mdText || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["clearNewLines"])(this.locString.hasHtml ? event.target.innerHTML : event.target.innerText);
        var owner = this.locString.owner;
        var changingOptions = {
            obj: owner,
            propertyName: this.locString.name,
            value: this.locString.text,
            newValue: clearedText,
            doValidation: false
        };
        this.creator.onValueChangingCallback(changingOptions);
        clearedText = changingOptions.newValue;
        this.errorText = this.creator.onGetErrorTextOnValidationCallback(this.locString.name, owner, clearedText);
        if (!this.errorText && !clearedText) {
            var propJSON = owner.getPropertyByName && owner.getPropertyByName(this.locString.name);
            if (propJSON && propJSON.isRequired) {
                this.errorText = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyIsEmpty");
            }
        }
        if (this.locString.text != clearedText &&
            !(!this.locString.text && clearedText == this.locString.calculatedText)) {
            if (!this.errorText) {
                if (this.locString.owner instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"] &&
                    this.creator.inplaceEditForValues &&
                    ["noneText", "otherText", "selectAllText"].indexOf(this.locString.name) == -1) {
                    var itemValue = this.locString.owner;
                    if (itemValue.value !== clearedText) {
                        if (!!itemValue.locOwner && !!itemValue.ownerPropertyName) {
                            var choices = itemValue.locOwner[itemValue.ownerPropertyName];
                            if (Array.isArray(choices) && !!survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getItemByValue(choices, clearedText)) {
                                clearedText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["getNextItemValue"])(clearedText, choices);
                                if (!!event && !!event.target) {
                                    event.target.innerText = clearedText;
                                }
                            }
                        }
                        itemValue.value = clearedText;
                    }
                }
                else {
                    var oldStoreDefaultText = this.locString.storeDefaultText;
                    this.locString.storeDefaultText = false;
                    this.locString.text = clearedText;
                    this.locString.storeDefaultText = oldStoreDefaultText;
                }
            }
            else {
                this.creator.notify(this.errorText, "error");
                this.focusedProgram = true;
                event.target.innerText = clearedText;
                event.target.focus();
                return;
            }
        }
        else {
            if (this.locString.hasHtml) {
                event.target.innerHTML = this.locString.renderedHtml;
            }
            else {
                event.target.innerText = this.locString.renderedHtml;
            }
            this.locString.strChanged();
        }
        this.focused = false;
        window === null || window === void 0 ? void 0 : window.getSelection().removeAllRanges();
    };
    StringEditorViewModelBase.prototype.done = function (event) {
        event.stopImmediatePropagation();
        event.preventDefault();
    };
    StringEditorViewModelBase.prototype.onPaste = function (event) {
        if (this.editAsText) {
            event.preventDefault();
            // get text representation of clipboard
            var text = event.clipboardData.getData("text/plain");
            // insert text manually
            document.execCommand("insertHTML", false, text);
        }
    };
    StringEditorViewModelBase.prototype.onKeyDown = function (event) {
        if (event.keyCode === 13 && (this.editAsText || !event.shiftKey)) {
            this.blurEditor();
            if (!event.ctrlKey && !event.metaKey) {
                this.connector.onEditComplete.fire(this, {});
            }
            this.done(event);
        }
        if (event.keyCode === 27) {
            this.blurredByEscape = true;
            this.blurEditor();
            this.done(event);
        }
        if (event.keyCode === 8 && !event.target.innerText) {
            this.done(event);
            this.connector.onBackspaceEmptyString.fire(this, {});
        }
        this.checkConstraints(event);
        return true;
    };
    StringEditorViewModelBase.prototype.onKeyUp = function (event) {
        if (event.keyCode === 9 && event.target === document.activeElement) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["select"])(event.target);
        }
        return true;
    };
    StringEditorViewModelBase.prototype.onMouseUp = function (event) {
        if (this.justFocused) {
            this.justFocused = false;
            if (!window)
                return false;
            if (window.getSelection().focusNode && (window.getSelection().focusNode.parentElement !== event.target) || window.getSelection().toString().length == 0) {
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["select"])(event.target);
            }
            return false;
        }
        return true;
    };
    StringEditorViewModelBase.prototype.findProperty = function () {
        if (!this.locString.owner.getType)
            return undefined;
        var ownerType = this.locString.owner.getType();
        if (!this.locString.name)
            return undefined;
        var property = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(ownerType, this.locString.name);
        return property;
    };
    Object.defineProperty(StringEditorViewModelBase.prototype, "maxLength", {
        get: function () {
            var property = this.findProperty();
            if (!property || property.maxLength <= 0)
                return -1;
            return property.maxLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringEditorViewModelBase.prototype, "placeholder", {
        get: function () {
            var _this = this;
            if (!!this.placeholderValue)
                return this.placeholderValue;
            var property = this.findProperty();
            if (!property || !property.placeholder)
                return "";
            var placeholderValue = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(property.placeholder);
            if (!!placeholderValue) {
                var re = /\{([^}]+)\}/g;
                this.placeholderValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    var result = placeholderValue;
                    var match = re.exec(result);
                    while (match != null) {
                        result = result.replace(re, function (propertyName) {
                            var propertyValue = _this.locString.owner && _this.locString.owner[match[1]];
                            return "" + propertyValue;
                        });
                        match = re.exec(result);
                    }
                    return result;
                });
            }
            return this.placeholderValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringEditorViewModelBase.prototype, "contentEditable", {
        get: function () {
            return this.creator.isCanModifyProperty(this.locString.owner, this.locString.name);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringEditorViewModelBase.prototype, "showCharacterCounter", {
        get: function () {
            return this.maxLength !== -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringEditorViewModelBase.prototype, "getCharacterCounterClass", {
        get: function () {
            return "svc-remaining-character-counter";
        },
        enumerable: false,
        configurable: true
    });
    StringEditorViewModelBase.prototype.className = function (text) {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append("svc-string-editor")
            .append("svc-string-editor--hidden", text == "" && this.placeholder == "")
            .append("svc-string-editor--readonly", !this.contentEditable)
            .append("svc-string-editor--error", !!this.errorText)
            .toString();
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], StringEditorViewModelBase.prototype, "errorText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], StringEditorViewModelBase.prototype, "focused", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], StringEditorViewModelBase.prototype, "editAsText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], StringEditorViewModelBase.prototype, "placeholderValue", void 0);
    return StringEditorViewModelBase;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/tabbed-menu/tabbed-menu-item.scss":
/*!**********************************************************!*\
  !*** ./src/components/tabbed-menu/tabbed-menu-item.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabbed-menu/tabbed-menu.scss":
/*!*****************************************************!*\
  !*** ./src/components/tabbed-menu/tabbed-menu.scss ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/designer-plugin.ts":
/*!************************************************!*\
  !*** ./src/components/tabs/designer-plugin.ts ***!
  \************************************************/
/*! exports provided: TabDesignerPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabDesignerPlugin", function() { return TabDesignerPlugin; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _property_grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../property-grid */ "./src/property-grid/index.ts");
/* harmony import */ var _property_grid_property_grid_view_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../property-grid/property-grid-view-model */ "./src/property-grid/property-grid-view-model.ts");
/* harmony import */ var _designer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./designer */ "./src/components/tabs/designer.ts");





var TabDesignerPlugin = /** @class */ (function () {
    function TabDesignerPlugin(creator) {
        var _this = this;
        this.creator = creator;
        creator.addPluginTab("designer", this);
        var propertyGridModel = new _property_grid__WEBPACK_IMPORTED_MODULE_2__["PropertyGridModel"](creator.survey, creator);
        this.propertyGrid = new _property_grid_property_grid_view_model__WEBPACK_IMPORTED_MODULE_3__["PropertyGridViewModel"](propertyGridModel, creator);
        this.propertyGridTab = this.creator.sidebar.addTab("propertyGrid", "svc-property-grid", this.propertyGrid, function () {
            var result = [];
            if (!!_this.propertyGrid.prevSelectionAction) {
                _this.propertyGrid.prevSelectionAction.visible = _this.createVisibleUpdater();
                result.push(_this.propertyGrid.prevSelectionAction);
            }
            if (!!_this.propertyGrid.nextSelectionAction) {
                _this.propertyGrid.nextSelectionAction.visible = _this.createVisibleUpdater();
                result.push(_this.propertyGrid.nextSelectionAction);
            }
            if (!!_this.propertyGrid.objectSelectionAction) {
                _this.propertyGrid.objectSelectionAction.visible = _this.createVisibleUpdater();
                result.push(_this.propertyGrid.objectSelectionAction);
            }
            return result;
        });
        this.toolboxTab = this.creator.sidebar.addTab("toolbox", "svc-toolbox", creator);
        this.creator.onPropertyChanged.add(function (sender, options) {
            if (options.name === "toolboxLocation") {
                if (_this.toolboxTab.visible && options.newVal !== "sidebar") {
                    _this.propertyGridTab.visible = true;
                }
                _this.toolboxTab.visible = options.newVal === "sidebar";
            }
        });
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
        creator.registerShortcut("delete", {
            affectedTab: "designer",
            hotKey: {
                keyCode: 46,
            },
            macOsHotkey: {
                keyCode: 46,
            },
            execute: function () { return _this.creator.deleteCurrentElement(); }
        });
    }
    Object.defineProperty(TabDesignerPlugin.prototype, "isSurveySelected", {
        get: function () {
            return this.creator.isElementSelected(this.creator.survey);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabDesignerPlugin.prototype, "isSettingsActive", {
        get: function () {
            return this.creator.showSidebar && this.isSurveySelected;
        },
        enumerable: false,
        configurable: true
    });
    TabDesignerPlugin.prototype.createVisibleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "designer"; });
    };
    TabDesignerPlugin.prototype.activate = function () {
        this.model = new _designer__WEBPACK_IMPORTED_MODULE_4__["TabDesignerViewModel"](this.creator);
        this.creator.sidebar.activeTab = this.propertyGridTab.id;
        this.creator.focusElement(undefined, true);
    };
    TabDesignerPlugin.prototype.deactivate = function () {
        this.model = undefined;
        this.propertyGridTab.visible = false;
        return true;
    };
    TabDesignerPlugin.prototype.onDesignerSurveyPropertyChanged = function (obj, propName) {
        if (!!this.model) {
            this.model.onDesignerSurveyPropertyChanged(obj, propName);
        }
    };
    TabDesignerPlugin.prototype.update = function () {
        if (!this.model)
            return;
        this.model.initSurvey();
    };
    TabDesignerPlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        var toolboxAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-toolbox",
            iconName: "icon-toolbox",
            needSeparator: true,
            action: function () {
                if (!_this.creator.showSidebar) {
                    _this.creator.setShowSidebar(true, true);
                }
                _this.creator.sidebar.activeTab = "toolbox";
            },
            active: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.sidebar.activeTab === "toolbox"; }),
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.activeTab === "designer", _this.creator.showToolbox, _this.creator.toolboxLocation === "sidebar");
            }),
            title: "Toolbox",
            showTitle: false
        });
        this.surveySettingsAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-settings",
            iconName: "icon-settings",
            needSeparator: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.toolboxLocation !== "sidebar", !_this.creator.isMobileView);
            }),
            action: function () {
                _this.selectSurvey();
                if (!_this.creator.isMobileView) {
                    _this.creator.propertyGrid.getAllQuestions()[0].focus();
                }
            },
            active: this.isSettingsActive,
            pressed: this.isSettingsActive,
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.surveySettings",
            locTooltipName: "ed.surveySettingsTooltip",
            showTitle: false
        });
        this.saveSurveyAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-save",
            iconName: "icon-save",
            action: function () { return _this.creator.doSave(); },
            active: false,
            enabled: false,
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.activeTab === "designer", _this.creator.showSaveButton);
            }),
            locTitleName: "ed.saveSurvey",
            locTooltipName: "ed.saveSurveyTooltip",
            showTitle: false
        });
        this.designerAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-designer",
            iconName: "icon-config",
            visible: this.createVisibleUpdater(),
            active: true,
            locTitleName: "ed.designer",
            showTitle: false,
            action: function () { }
        });
        this.previewAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-preview",
            iconName: "icon-preview",
            action: function () {
                _this.creator.makeNewViewActive(_this.creator.showThemeTab ? "theme" : "test");
            },
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.testSurvey",
            showTitle: false
        });
        items.push(this.saveSurveyAction);
        items.push(toolboxAction);
        items.push(this.surveySettingsAction);
        this.creator.onSelectedElementChanged.add(function (sender, options) {
            _this.surveySettingsAction.active = _this.isSettingsActive;
            _this.surveySettingsAction.pressed = _this.isSettingsActive;
        });
        this.creator.onShowSidebarVisibilityChanged.add(function (sender, options) {
            _this.surveySettingsAction.active = _this.isSettingsActive;
            _this.surveySettingsAction.pressed = _this.isSettingsActive;
        });
        return items;
    };
    TabDesignerPlugin.prototype.selectSurvey = function () {
        if (!this.creator.showSidebar) {
            this.creator.setShowSidebar(true, true);
        }
        this.creator.selectElement(this.creator.survey);
        this.creator.sidebar.activeTab = this.propertyGridTab.id;
    };
    TabDesignerPlugin.prototype.addFooterActions = function () {
        this.creator.footerToolbar.actions.push(this.designerAction);
        this.creator.footerToolbar.actions.push(this.previewAction);
        this.creator.footerToolbar.actions.push(this.surveySettingsAction);
    };
    return TabDesignerPlugin;
}());



/***/ }),

/***/ "./src/components/tabs/designer.scss":
/*!*******************************************!*\
  !*** ./src/components/tabs/designer.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/designer.ts":
/*!*****************************************!*\
  !*** ./src/components/tabs/designer.ts ***!
  \*****************************************/
/*! exports provided: initialSettingsAllowShowEmptyTitleInDesignMode, TabDesignerViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initialSettingsAllowShowEmptyTitleInDesignMode", function() { return initialSettingsAllowShowEmptyTitleInDesignMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabDesignerViewModel", function() { return TabDesignerViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _pages_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../pages-controller */ "./src/pages-controller.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _survey_elements__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../survey-elements */ "./src/survey-elements.ts");






__webpack_require__(/*! ./designer.scss */ "./src/components/tabs/designer.scss");
var initialSettingsAllowShowEmptyTitleInDesignMode = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].allowShowEmptyTitleInDesignMode;
var TabDesignerViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TabDesignerViewModel, _super);
    function TabDesignerViewModel(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.pagesControllerValue = new _pages_controller__WEBPACK_IMPORTED_MODULE_3__["PagesController"](creator);
        _this.initSurvey();
        return _this;
    }
    TabDesignerViewModel.prototype.createNewPage = function () {
        var _this = this;
        var newPage = this.survey.createNewPage("");
        newPage["ignoreUndoRedo"] = true;
        this.creator.setNewNames(newPage);
        newPage.onFirstRendering();
        newPage.updateCustomWidgets();
        newPage.setWasShown(true);
        newPage.setSurveyImpl(this.survey);
        newPage.updateElementCss();
        var checkNewElementHandler = function (sender, options) {
            if (options.name === "elements" && newPage.elements.length > 0) {
                // if (this.survey.pages.indexOf(newPage) > -1) return;
                _this.creator.addPage(newPage, true, function () {
                    newPage.onPropertyChanged.remove(checkNewElementHandler);
                    newPage.showTitle = true;
                    newPage.showDescription = true;
                    delete newPage["ignoreUndoRedo"];
                    return !(_this.survey.pages.indexOf(newPage) > -1);
                });
            }
        };
        newPage.num = this.survey.pages.length + 1;
        newPage.onPropertyChanged.add(checkNewElementHandler);
        this.newPage = newPage;
        _survey_elements__WEBPACK_IMPORTED_MODULE_5__["DragDropSurveyElements"].newGhostPage = newPage;
    };
    Object.defineProperty(TabDesignerViewModel.prototype, "canShowNewPage", {
        get: function () {
            if (!this.survey || this.creator.pageEditMode === "single" || !this.creator.allowModifyPages)
                return false;
            if (this.creator.pageEditMode === "bypage")
                return true;
            var pages = this.survey.pages;
            return pages.length === 0 || pages[pages.length - 1].elements.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabDesignerViewModel.prototype, "survey", {
        get: function () {
            return this.creator.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabDesignerViewModel.prototype, "pagesController", {
        get: function () {
            return this.pagesControllerValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabDesignerViewModel.prototype, "isToolboxVisible", {
        get: function () {
            return this.creator.showToolboxValue && (this.creator.toolboxLocation === "right" || this.creator.toolboxLocation === "left");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabDesignerViewModel.prototype, "placeholderText", {
        get: function () {
            return Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.surveyPlaceHolder");
        },
        enumerable: false,
        configurable: true
    });
    TabDesignerViewModel.prototype.onDesignerSurveyPropertyChanged = function (obj, propName) {
        if (!obj || this.isUpdatingNewPage)
            return;
        this.isUpdatingNewPage = true;
        if (propName === "elements" && obj.isDescendantOf("page")) {
            var updatePageController = false;
            if (obj.elements.length === 0) {
                updatePageController = this.checkLastPageToDelete();
            }
            this.checkNewPage(updatePageController);
        }
        if (propName === "pages" && obj.isDescendantOf("survey")) {
            this.checkNewPage(true);
        }
        this.isUpdatingNewPage = false;
    };
    TabDesignerViewModel.prototype.calculateDesignerCss = function () {
        return this.survey.css.container + " " + this.survey.css.container + "--" + this.survey.calculatedWidthMode;
    };
    TabDesignerViewModel.prototype.initSurvey = function () {
        var _this = this;
        if (!this.survey)
            return;
        this.showNewPage = false;
        this.newPage = undefined;
        this.checkNewPage(false);
        this.cssUpdater && this.cssUpdater.dispose();
        this.cssUpdater = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
            return _this.calculateDesignerCss();
        });
        this.designerCss = this.cssUpdater;
        this.pagesController.onSurveyChanged();
    };
    TabDesignerViewModel.prototype.checkNewPage = function (updatePageController) {
        var showPlaceholder = this.survey.getAllQuestions().length === 0 && this.survey.pageCount === 0;
        this.showPlaceholder = showPlaceholder;
        this.pageCount = this.survey.pageCount;
        if (this.showPlaceholder || this.canShowNewPage) {
            var pages = this.survey.pages;
            if (!this.newPage || (pages.length > 0 && this.newPage === pages[pages.length - 1])) {
                this.createNewPage();
                this.showNewPage = true;
            }
            this.newPage.showTitle = !showPlaceholder;
            this.newPage.showDescription = !showPlaceholder;
        }
        else {
            this.showNewPage = false;
            this.newPage = undefined;
        }
        if (updatePageController) {
            if (this.newPage) {
                this.newPage.num = this.survey.pages.length + 1;
                this.newPage.name = _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].getNewPageName(this.survey.pages);
            }
            this.pagesController.raisePagesChanged();
        }
    };
    TabDesignerViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.cssUpdater && this.cssUpdater.dispose();
    };
    TabDesignerViewModel.prototype.checkLastPageToDelete = function () {
        if (this.survey.pageCount === 0)
            return false;
        if (this.survey.pageCount === 1 && !this.creator.isInitialSurveyEmpty)
            return false;
        var lastPage = this.survey.pages[this.survey.pageCount - 1];
        if (lastPage.elements.length > 0 || lastPage.isConverting)
            return false;
        if (!_survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].isPageNameAutoGenerated(lastPage.name))
            return false;
        var json = lastPage.toJSON();
        delete json["name"];
        //If there is at least one property in page is set, then return
        for (var key in json)
            return false;
        lastPage.delete();
        if (this.survey.pageCount === 0) {
            this.creator.selectElement(this.survey);
        }
        return true;
    };
    TabDesignerViewModel.prototype.clickDesigner = function () {
        this.creator.selectedElement = this.creator.survey;
    };
    TabDesignerViewModel.prototype.getRootCss = function () {
        var rootCss = this.survey.css.root;
        if (this.creator.showPageNavigator && this.survey.pageCount > 1 || this.creator.pageEditMode === "bypage") {
            rootCss += " svc-tab-designer--with-page-navigator";
        }
        if (this.showPlaceholder) {
            rootCss += " svc-tab-designer--with-place-holder";
        }
        return rootCss;
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TabDesignerViewModel.prototype, "newPage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], TabDesignerViewModel.prototype, "showNewPage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TabDesignerViewModel.prototype, "pageCount", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TabDesignerViewModel.prototype, "designerCss", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TabDesignerViewModel.prototype, "showPlaceholder", void 0);
    return TabDesignerViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/tabs/json-editor-ace.scss":
/*!**************************************************!*\
  !*** ./src/components/tabs/json-editor-ace.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/json-editor-ace.ts":
/*!************************************************!*\
  !*** ./src/components/tabs/json-editor-ace.ts ***!
  \************************************************/
/*! exports provided: AceJsonEditorModel, TabJsonEditorAcePlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AceJsonEditorModel", function() { return AceJsonEditorModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorAcePlugin", function() { return TabJsonEditorAcePlugin; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _textWorker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../textWorker */ "./src/textWorker.ts");
/* harmony import */ var _json_editor_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./json-editor-plugin */ "./src/components/tabs/json-editor-plugin.ts");





__webpack_require__(/*! ./json-editor-ace.scss */ "./src/components/tabs/json-editor-ace.scss");
var AceJsonEditorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AceJsonEditorModel, _super);
    function AceJsonEditorModel(creator) {
        var _this = _super.call(this, creator) || this;
        _this.aceCanUndo = false;
        _this.aceCanRedo = false;
        return _this;
    }
    AceJsonEditorModel.prototype.getText = function () {
        return !!this.aceEditor ? this.aceEditor.getValue() : "";
    };
    AceJsonEditorModel.prototype.setText = function (value) {
        this.isProcessingImmediately = true;
        this.aceEditor.setValue(value);
        this.aceEditor.renderer.updateFull(true);
        this.aceEditor.getSession().getUndoManager().reset();
        this.processErrors(value);
        this.isProcessingImmediately = false;
    };
    AceJsonEditorModel.prototype.init = function (aceEditor) {
        var _a, _b;
        this.aceEditor = aceEditor;
        var aceModules = (_b = (_a = window["ace"]) === null || _a === void 0 ? void 0 : _a.define) === null || _b === void 0 ? void 0 : _b.modules;
        if (!(aceModules && aceModules["ace/ext/searchbox"])) {
            this.aceEditor.commands["removeCommand"]("find");
        }
        this.aceEditor.setReadOnly(this.readOnly);
        if (AceJsonEditorModel.aceBasePath) {
            try {
                window["ace"]["config"].set("basePath", AceJsonEditorModel.aceBasePath);
                this.aceEditor.session.setMode("ace/mode/json");
            }
            catch (_c) { }
        }
        var self = this;
        this.aceEditor.setShowPrintMargin(false);
        this.aceEditor.getSession().on("change", function () {
            self.onTextChanged();
        });
        this.aceEditor.getSession().setUseWorker(true);
        _textWorker__WEBPACK_IMPORTED_MODULE_3__["SurveyTextWorker"].newLineChar =
            this.aceEditor.session.doc.getNewLineCharacter();
        this.onPluginActivate();
    };
    AceJsonEditorModel.prototype.updateUndoRedoState = function () {
        var undoManager = this.aceEditor
            .getSession()
            .getUndoManager();
        this.aceCanUndo = undoManager.hasUndo();
        this.aceCanRedo = undoManager.hasRedo();
        var isFocused = this.aceEditor.isFocused();
        if (isFocused === true) {
            this.isJSONChanged = !undoManager.isClean();
        }
    };
    AceJsonEditorModel.prototype.onTextChanged = function () {
        this.updateUndoRedoState();
        _super.prototype.onTextChanged.call(this);
    };
    AceJsonEditorModel.prototype.createAnnotations = function (errors) {
        var annotations = [];
        for (var i = 0; i < errors.length; i++) {
            var error = errors[i];
            var annotation = {
                row: error.rowAt,
                column: error.columnAt,
                text: error.text,
                type: "error"
            };
            annotations.push(annotation);
        }
        return annotations;
    };
    AceJsonEditorModel.prototype.setErrors = function (errors) {
        var _this = this;
        _super.prototype.setErrors.call(this, errors);
        this.aceEditor.getSession().setAnnotations(this.createAnnotations(errors));
        setTimeout(function () { return _this.aceEditor.resize(); });
    };
    AceJsonEditorModel.prototype.gotoError = function (at, row, column) {
        this.aceEditor.focus();
        this.aceEditor.renderer.scrollCursorIntoView({ row: row + 1, column: column + 1 }, 0.5);
        this.aceEditor.gotoLine(row + 1, column + 1);
    };
    AceJsonEditorModel.prototype.onEditorActivated = function () {
        this.aceEditor.getSession().getUndoManager().markClean();
        this.updateUndoRedoState();
        this.aceEditor.focus();
    };
    AceJsonEditorModel.aceBasePath = "";
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], AceJsonEditorModel.prototype, "aceCanUndo", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], AceJsonEditorModel.prototype, "aceCanRedo", void 0);
    return AceJsonEditorModel;
}(_json_editor_plugin__WEBPACK_IMPORTED_MODULE_4__["JsonEditorBaseModel"]));

var TabJsonEditorAcePlugin = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TabJsonEditorAcePlugin, _super);
    function TabJsonEditorAcePlugin(creator) {
        var _this = _super.call(this, creator) || this;
        creator.addPluginTab("editor", _this, Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.jsonEditor"), "svc-tab-json-editor-ace");
        return _this;
    }
    TabJsonEditorAcePlugin.prototype.createModel = function (creator) {
        return new AceJsonEditorModel(creator);
    };
    TabJsonEditorAcePlugin.hasAceEditor = function () {
        return typeof window["ace"] !== "undefined";
    };
    return TabJsonEditorAcePlugin;
}(_json_editor_plugin__WEBPACK_IMPORTED_MODULE_4__["TabJsonEditorBasePlugin"]));



/***/ }),

/***/ "./src/components/tabs/json-editor-plugin.ts":
/*!***************************************************!*\
  !*** ./src/components/tabs/json-editor-plugin.ts ***!
  \***************************************************/
/*! exports provided: JsonEditorBaseModel, TabJsonEditorBasePlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonEditorBaseModel", function() { return JsonEditorBaseModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorBasePlugin", function() { return TabJsonEditorBasePlugin; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _textWorker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../textWorker */ "./src/textWorker.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");





var maxErrorLength = 150;
var JsonEditorBaseModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(JsonEditorBaseModel, _super);
    function JsonEditorBaseModel(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.isJSONChanged = false;
        _this.isProcessingImmediately = false;
        _this.jsonEditorChangedTimeoutId = -1;
        return _this;
    }
    Object.defineProperty(JsonEditorBaseModel.prototype, "text", {
        get: function () {
            return this.getText();
        },
        set: function (val) {
            this.setText(val);
        },
        enumerable: false,
        configurable: true
    });
    JsonEditorBaseModel.prototype.onEditorActivated = function () { };
    JsonEditorBaseModel.prototype.onPluginActivate = function () {
        this.text = this.creator.text;
        this.onEditorActivated();
        this.isJSONChanged = false;
    };
    JsonEditorBaseModel.prototype.onTextChanged = function () {
        if (this.jsonEditorChangedTimeoutId !== -1) {
            clearTimeout(this.jsonEditorChangedTimeoutId);
        }
        if (this.isProcessingImmediately) {
            this.jsonEditorChangedTimeoutId = -1;
        }
        else {
            var self_1 = this;
            if (!!window) {
                this.jsonEditorChangedTimeoutId = window.setTimeout(function () {
                    self_1.jsonEditorChangedTimeoutId = -1;
                    self_1.processErrors(self_1.text);
                }, JsonEditorBaseModel.updateTextTimeout);
            }
        }
    };
    Object.defineProperty(JsonEditorBaseModel.prototype, "errorList", {
        get: function () {
            var _this = this;
            if (!this.errorListValue) {
                this.errorListValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ListModel"]([], function (action) {
                    var error = action.data.error;
                    if (!!error)
                        _this.gotoError(error.at, error.rowAt, error.columnAt);
                }, false);
                this.errorListValue.searchEnabled = false;
                this.errorListValue.cssClasses = {
                    item: "svc-json-errors__item",
                    itemBody: "svc-json-error",
                    itemsContainer: "svc-json-errors"
                };
                this.errorListValue.hasVerticalScroller = true;
            }
            return this.errorListValue;
        },
        enumerable: false,
        configurable: true
    });
    JsonEditorBaseModel.prototype.setErrors = function (errors) {
        var hasErrors = errors.length > 0;
        if (hasErrors) {
            var actions_1 = [];
            this.createErrorActions(errors).forEach(function (action) { return actions_1.push(action); });
            this.errorList.setItems(actions_1);
        }
        this.hasErrors = hasErrors;
    };
    JsonEditorBaseModel.prototype.gotoError = function (at, row, column) { };
    JsonEditorBaseModel.prototype.createErrorActions = function (errors) {
        var _this = this;
        var res = [];
        var counter = 1;
        errors.forEach(function (error) {
            var line = error.rowAt > -1 ? "Line: " + (error.rowAt + 1) + ". " : "";
            var title = error.text;
            if (title.length > maxErrorLength + 3) {
                title = title.substring(0, maxErrorLength) + "...";
            }
            title = line + title;
            var at = error.at;
            res.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "error_" + counter++,
                component: "json-error-item",
                title: title,
                tooltip: error.text,
                iconName: "icon-error",
                iconSize: 16,
                data: {
                    error: error,
                    showFixButton: error.isFixable,
                    fixError: function () {
                        _this.text = error.fixError(_this.text);
                    },
                    fixButtonIcon: "icon-fix",
                    //todo
                    fixButtonTitle: "Fix error"
                }
            }));
        });
        return res;
    };
    JsonEditorBaseModel.prototype.processErrors = function (text) {
        var textWorker = new _textWorker__WEBPACK_IMPORTED_MODULE_2__["SurveyTextWorker"](text);
        this.setErrors(textWorker.errors);
    };
    Object.defineProperty(JsonEditorBaseModel.prototype, "readOnly", {
        get: function () {
            return this.creator.readOnly;
        },
        enumerable: false,
        configurable: true
    });
    JsonEditorBaseModel.updateTextTimeout = 1000;
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], JsonEditorBaseModel.prototype, "hasErrors", void 0);
    return JsonEditorBaseModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var TabJsonEditorBasePlugin = /** @class */ (function () {
    function TabJsonEditorBasePlugin(creator) {
        this.creator = creator;
        this.saveToFileHandler = _utils_utils__WEBPACK_IMPORTED_MODULE_3__["saveToFileHandler"];
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
    }
    TabJsonEditorBasePlugin.prototype.exportToFile = function (fileName) {
        if (this.model) {
            var jsonBlob = new Blob([this.model.text], { type: "application/json" });
            this.saveToFileHandler(fileName, jsonBlob);
        }
    };
    TabJsonEditorBasePlugin.prototype.importFromFile = function (file, callback) {
        var _this = this;
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            var surveyJSONText = fileReader.result;
            if (_this.model) {
                _this.model.text = surveyJSONText;
            }
            callback && callback(surveyJSONText);
        };
        fileReader.readAsText(file);
    };
    TabJsonEditorBasePlugin.prototype.copyToClipboard = function () {
        if (this.model) {
            navigator.clipboard.writeText(this.model.text);
        }
    };
    TabJsonEditorBasePlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        this.importAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svc-json-import",
            iconName: "icon-load",
            locTitleName: "ed.surveyJsonImportButton",
            locTooltipName: "ed.surveyJsonImportButton",
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "editor"; }),
            mode: "small",
            component: "sv-action-bar-item",
            needSeparator: true,
            action: function () {
                if (!document)
                    return;
                if (!_this.inputFileElement) {
                    _this.inputFileElement = document.createElement("input");
                    _this.inputFileElement.type = "file";
                    _this.inputFileElement.style.display = "none";
                    _this.inputFileElement.onchange = function () {
                        if (_this.inputFileElement.files.length < 1)
                            return;
                        _this.importFromFile(_this.inputFileElement.files[0]);
                        _this.inputFileElement.value = "";
                    };
                }
                _this.inputFileElement.click();
            }
        });
        items.push(this.importAction);
        this.exportAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svc-json-export",
            iconName: "icon-download",
            locTitleName: "ed.surveyJsonExportButton",
            locTooltipName: "ed.surveyJsonExportButton",
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "editor"; }),
            mode: "small",
            component: "sv-action-bar-item",
            action: function () {
                _this.exportToFile(_creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].jsonEditor.exportFileName);
            }
        });
        items.push(this.exportAction);
        this.copyAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svc-json-copy",
            iconName: "icon-copy",
            locTitleName: "ed.surveyJsonCopyButton",
            locTooltipName: "ed.surveyJsonCopyButton",
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "editor"; }),
            mode: "small",
            component: "sv-action-bar-item",
            action: function () {
                _this.copyToClipboard();
            }
        });
        items.push(this.copyAction);
        return items;
    };
    TabJsonEditorBasePlugin.prototype.activate = function () {
        this.model = this.createModel(this.creator);
    };
    TabJsonEditorBasePlugin.prototype.deactivate = function () {
        if (this.model) {
            var textWorker = new _textWorker__WEBPACK_IMPORTED_MODULE_2__["SurveyTextWorker"](this.model.text);
            if (!textWorker.isJsonCorrect) {
                return false;
            }
            if (!this.model.readOnly && this.model.isJSONChanged) {
                this.creator.selectedElement = undefined;
                this.creator.text = this.model.text;
                this.creator.selectedElement = this.creator.survey;
                this.creator.setModified({ type: "JSON_EDITOR" });
            }
            this.model = undefined;
        }
        return true;
    };
    TabJsonEditorBasePlugin.prototype.defaultAllowingDeactivate = function () {
        if (!this.model)
            return true;
        var textWorker = new _textWorker__WEBPACK_IMPORTED_MODULE_2__["SurveyTextWorker"](this.model.text);
        if (!textWorker.isJsonCorrect)
            return undefined;
        return !textWorker.isJsonHasErrors;
    };
    return TabJsonEditorBasePlugin;
}());



/***/ }),

/***/ "./src/components/tabs/json-editor-textarea.scss":
/*!*******************************************************!*\
  !*** ./src/components/tabs/json-editor-textarea.scss ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/json-editor-textarea.ts":
/*!*****************************************************!*\
  !*** ./src/components/tabs/json-editor-textarea.ts ***!
  \*****************************************************/
/*! exports provided: TextareaJsonEditorModel, TabJsonEditorTextareaPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextareaJsonEditorModel", function() { return TextareaJsonEditorModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorTextareaPlugin", function() { return TabJsonEditorTextareaPlugin; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _json_editor_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json-editor-plugin */ "./src/components/tabs/json-editor-plugin.ts");




__webpack_require__(/*! ./json-editor-textarea.scss */ "./src/components/tabs/json-editor-textarea.scss");
var TextareaJsonEditorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TextareaJsonEditorModel, _super);
    function TextareaJsonEditorModel(creator) {
        var _this = _super.call(this, creator) || this;
        _this.ariaLabel = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.jsonEditor");
        _this.onPluginActivate();
        return _this;
    }
    TextareaJsonEditorModel.prototype.checkKey = function (data, e) {
        if (e.key === "Tab") {
            e.preventDefault();
            var textareaElement = e.target;
            var start = textareaElement.selectionStart;
            var end = textareaElement.selectionEnd;
            textareaElement.value = textareaElement.value.substring(0, start) +
                "\t" + textareaElement.value.substring(end);
            textareaElement.selectionStart =
                textareaElement.selectionEnd = start + 1;
            e.stopPropagation();
        }
        return true;
    };
    TextareaJsonEditorModel.prototype.getText = function () {
        return this._text;
    };
    TextareaJsonEditorModel.prototype.setText = function (value) {
        this.isProcessingImmediately = true;
        this._text = value;
        this.processErrors(value);
        this.isProcessingImmediately = false;
    };
    TextareaJsonEditorModel.prototype.gotoError = function (at, row, column) {
        if (!this.textElement)
            return;
        var el = this.textElement;
        el.selectionStart = at;
        el.selectionEnd = at;
        el.focus();
    };
    Object.defineProperty(TextareaJsonEditorModel.prototype, "errorButtonText", {
        get: function () {
            return this.canShowErrors ? Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.jsonHideErrors") : Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.jsonShowErrors");
        },
        enumerable: false,
        configurable: true
    });
    TextareaJsonEditorModel.prototype.toggleErrors = function () {
        this.canShowErrors = !this.canShowErrors;
    };
    Object.defineProperty(TextareaJsonEditorModel.prototype, "userFriendlyErrors", {
        get: function () {
            if (this._errors.length === 0) {
                return [];
            }
            var customErrors = [];
            for (var i = 0; i < this._errors.length - 1; i++) {
                customErrors[i] = this._errors[i].text;
                customErrors[i] += "\n\n";
            }
            customErrors[this._errors.length - 1] = this._errors[this._errors.length - 1].text;
            return customErrors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextareaJsonEditorModel.prototype, "errors", {
        get: function () {
            return this._errors;
        },
        enumerable: false,
        configurable: true
    });
    TextareaJsonEditorModel.prototype.onTextChanged = function () {
        this.isJSONChanged = true;
        _super.prototype.onTextChanged.call(this);
    };
    TextareaJsonEditorModel.prototype.setErrors = function (errors) {
        //TODO Remove this line and then the function
        this._errors = errors;
        _super.prototype.setErrors.call(this, errors);
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "", onSet: function (_, target) { return target.onTextChanged(); } })
    ], TextareaJsonEditorModel.prototype, "_text", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], TextareaJsonEditorModel.prototype, "_errors", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], TextareaJsonEditorModel.prototype, "canShowErrors", void 0);
    return TextareaJsonEditorModel;
}(_json_editor_plugin__WEBPACK_IMPORTED_MODULE_3__["JsonEditorBaseModel"]));

var TabJsonEditorTextareaPlugin = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TabJsonEditorTextareaPlugin, _super);
    function TabJsonEditorTextareaPlugin(creator) {
        var _this = _super.call(this, creator) || this;
        creator.addPluginTab("editor", _this, Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed.jsonEditor"), "svc-tab-json-editor-textarea");
        return _this;
    }
    TabJsonEditorTextareaPlugin.prototype.createModel = function (creator) {
        return new TextareaJsonEditorModel(creator);
    };
    return TabJsonEditorTextareaPlugin;
}(_json_editor_plugin__WEBPACK_IMPORTED_MODULE_3__["TabJsonEditorBasePlugin"]));



/***/ }),

/***/ "./src/components/tabs/logic-actions-model.ts":
/*!****************************************************!*\
  !*** ./src/components/tabs/logic-actions-model.ts ***!
  \****************************************************/
/*! exports provided: LogicActionModelBase, LogicActionModel, LogicActionSetValueModel, LogicActionTriggerModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicActionModelBase", function() { return LogicActionModelBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicActionModel", function() { return LogicActionModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicActionSetValueModel", function() { return LogicActionSetValueModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicActionTriggerModel", function() { return LogicActionTriggerModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _property_grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../property-grid */ "./src/property-grid/index.ts");
/* harmony import */ var _logic_items__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logic-items */ "./src/components/tabs/logic-items.ts");





var LogicActionModelBase = /** @class */ (function () {
    function LogicActionModelBase(panel, initialLogicAction, logicType) {
        this.panel = panel;
        this.initialLogicAction = initialLogicAction;
        this.logicType = logicType;
    }
    LogicActionModelBase.createActionModel = function (panel, logicAction, logicType, selectorElementsHash) {
        if (!!logicType && logicType.hasSelectorChoices) {
            if (logicType.name.indexOf("_setValue") > -1)
                return new LogicActionSetValueModel(panel, logicAction, logicType, selectorElementsHash);
            return new LogicActionModel(panel, logicAction, logicType, selectorElementsHash);
        }
        else {
            return new LogicActionTriggerModel(panel, logicAction, logicType);
        }
    };
    LogicActionModelBase.prototype.updateCurrentLogicAction = function (survey) { return false; };
    LogicActionModelBase.prototype.afterUpdateInitialLogicAction = function () { };
    LogicActionModelBase.prototype.resetElements = function () { };
    LogicActionModelBase.prototype.getSelectedElement = function () { return null; };
    LogicActionModelBase.prototype.updateInitialLogicAction = function () {
        this.initialLogicAction = this.currentLogicAction;
        if (this.afterUpdateInitialLogicAction) {
            this.afterUpdateInitialLogicAction();
        }
    };
    LogicActionModelBase.prototype.setInitialElementValue = function (question, action, selectedQuestion) {
        if (!!selectedQuestion && question.choices.filter(function (ch) { return ch.value === selectedQuestion; }).length !== 0) {
            question.value = selectedQuestion;
        }
        else {
            question.value = !!action && action.logicType == this.logicType ? action.elementName : undefined;
        }
    };
    return LogicActionModelBase;
}());

var LogicActionModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogicActionModel, _super);
    function LogicActionModel(panel, logicAction, logicType, selectorElementsHash) {
        var _this = _super.call(this, panel, logicAction, logicType) || this;
        _this.selectorElementsHash = selectorElementsHash;
        return _this;
    }
    LogicActionModel.prototype.getSelectorOptionsText = function (logicType) {
        var elementType = logicType.baseClass;
        var optionsCaptionName = elementType == "page" ? "pe.conditionSelectPage" : (elementType == "panel" ? "pe.conditionSelectPanel" : "pe.conditionSelectQuestion");
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(optionsCaptionName);
    };
    LogicActionModel.prototype.getElementBySelectorName = function (panel) {
        var value = panel.getQuestionByName("elementSelector").value;
        if (!value)
            return null;
        return this.selectorElementsHash[value];
    };
    LogicActionModel.prototype.updateCurrentLogicAction = function (survey) {
        var selectedElement = this.getElementBySelectorName(this.panel);
        var createNewAction = !this.initialLogicAction || this.initialLogicAction.logicType != this.logicType || (!!selectedElement && this.initialLogicAction.element != selectedElement);
        if (!createNewAction) {
            return false;
        }
        this.currentLogicAction = new _logic_items__WEBPACK_IMPORTED_MODULE_4__["SurveyLogicAction"](this.logicType, selectedElement, survey);
        return true;
    };
    LogicActionModel.prototype.resetElements = function () {
        var question = this.panel.getQuestionByName("elementSelector");
        question.visible = false;
    };
    LogicActionModel.prototype.updatePanelElements = function (selectedElement, choices) {
        var question = this.panel.getQuestionByName("elementSelector");
        question.visible = true;
        question.choices = choices;
        question.allowClear = false;
        question.optionsCaption = this.getSelectorOptionsText(this.logicType);
        this.setInitialElementValue(question, this.initialLogicAction, selectedElement);
    };
    LogicActionModel.prototype.getSelectedElement = function () {
        var question = this.panel.getQuestionByName("elementSelector");
        return question.value;
    };
    return LogicActionModel;
}(LogicActionModelBase));

var LogicActionSetValueModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogicActionSetValueModel, _super);
    function LogicActionSetValueModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LogicActionSetValueModel.prototype.updatePanelElements = function (selectedElement, choices) {
        _super.prototype.updatePanelElements.call(this, selectedElement, choices);
        this.getValueIfQuestion().placeholder = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("ed.lg.setValueExpressionPlaceholder");
        this.getValueIfPanel().visible = true;
        this.setValueExpressionValue();
    };
    LogicActionSetValueModel.prototype.afterUpdateInitialLogicAction = function () {
        var selectedElement = this.getElementBySelectorName(this.panel);
        if (!!selectedElement) {
            selectedElement.setValueExpression = this.panel.getQuestionByName("setValueExpression").value;
        }
    };
    LogicActionSetValueModel.prototype.setValueExpressionValue = function () {
        var selectedElement = this.getElementBySelectorName(this.panel);
        if (!!selectedElement) {
            this.getValueIfQuestion().value = selectedElement.setValueExpression;
        }
    };
    LogicActionSetValueModel.prototype.getValueIfPanel = function () { return this.panel.getElementByName("setValueIfPanel"); };
    LogicActionSetValueModel.prototype.getValueIfQuestion = function () { return this.panel.getQuestionByName("setValueExpression"); };
    LogicActionSetValueModel.prototype.resetElements = function () {
        _super.prototype.resetElements.call(this);
        this.getValueIfPanel().visible = false;
        this.getValueIfQuestion().clearValue();
    };
    return LogicActionSetValueModel;
}(LogicActionModel));

var LogicActionTriggerModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogicActionTriggerModel, _super);
    function LogicActionTriggerModel(panel, logicAction, logicType) {
        var _this = _super.call(this, panel, logicAction, logicType) || this;
        _this.isTrigger = true;
        return _this;
    }
    LogicActionTriggerModel.prototype.recreateQuestion = function (panel, obj, name, options) {
        var oldQuestion = !!name ? panel.getQuestionByName(name) : null;
        if (!oldQuestion)
            return;
        var triggerEditorPanel = panel.getElementByName("triggerEditorPanel");
        var tempPanel = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("panel");
        var propGenerator = new _property_grid__WEBPACK_IMPORTED_MODULE_3__["PropertyJSONGenerator"](obj, options);
        propGenerator.setupObjPanel(tempPanel, true, "logic");
        var newQuestion = tempPanel.getQuestionByName(name);
        if (!!newQuestion) {
            var index = triggerEditorPanel.elements.indexOf(oldQuestion);
            triggerEditorPanel.addElement(newQuestion, index);
            oldQuestion.delete();
        }
        if (newQuestion.name === "setValue") {
            this.updateSetValueQuestion(newQuestion);
        }
        this.updateVisibilityPanel(triggerEditorPanel);
        tempPanel.dispose();
    };
    LogicActionTriggerModel.prototype.updateSetValueQuestion = function (question) {
        var obj = question.obj;
        var survey = obj.getSurvey();
        if (!survey) {
            survey = obj["owner"];
        }
        if (!obj["setToName"] || !survey)
            return;
        var originalQuestion = survey.getQuestionByValueName(obj["setToName"]);
        question.title = originalQuestion.title;
        question.titleLocation = "top";
    };
    LogicActionTriggerModel.prototype.updateRunExpressionQuestion = function (question) {
        question.titleLocation = "hidden";
        question.placeholder = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.emptyExpressionPlaceHolder");
    };
    LogicActionTriggerModel.prototype.createElementPanelObj = function () {
        var action = this.initialLogicAction;
        var srcElement = !!action && action.logicType == this.logicType ? action.element : null;
        var newObj = this.logicType.createNewObj(srcElement);
        this.setPanelObj(newObj);
        return newObj;
    };
    LogicActionTriggerModel.prototype.getQuestions = function () {
        var _this = this;
        var triggerQuestionsPanel = this.panel.getElementByName("triggerQuestionsPanel");
        if (triggerQuestionsPanel.elements.length === 0 || !this.logicType.questionNames) {
            return null;
        }
        return triggerQuestionsPanel.elements.filter(function (el) { return _this.logicType.questionNames.indexOf(el.name) !== -1; });
    };
    LogicActionTriggerModel.prototype.resetPanel = function (panelName) {
        var panel = this.panel.getElementByName(panelName);
        panel.questions.forEach(function (q) { q.clearValue(); });
        panel.elements.splice(0, panel.elements.length);
        panel.visible = false;
    };
    LogicActionTriggerModel.prototype.updateVisibilityPanel = function (panel) {
        if (panel.elements.length > 0) {
            panel.visible = panel.elements.filter(function (el) { return el.visible; }).length > 0;
        }
        else {
            panel.visible = false;
        }
    };
    LogicActionTriggerModel.prototype.updatePanelQuestionsValue = function (panel) {
        var _this = this;
        panel.onSurveyLoad();
        panel.questions.forEach(function (q) {
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(_this.panelObj[q.getValueName()])) {
                q.value = _this.panelObj[q.getValueName()];
            }
        });
    };
    LogicActionTriggerModel.prototype.afterUpdateInitialLogicAction = function () {
        this.setPanelObj(this.initialLogicAction.element);
        if (!!this.panelObj) {
            this.logicType.saveNewElement(this.panelObj);
        }
    };
    LogicActionTriggerModel.prototype.updateCurrentLogicAction = function (survey) {
        var createNewAction = !this.initialLogicAction || this.initialLogicAction.logicType != this.logicType;
        if (!createNewAction) {
            var el = this.initialLogicAction.element;
            var srcJson = this.panelObj.toJSON();
            var srcKeys = Object.keys(srcJson);
            var destKeys = Object.keys(el.toJSON());
            var propsToDelete = [];
            for (var i = 0; i < destKeys.length; i++) {
                var key = destKeys[i];
                if (srcKeys.indexOf(key) < 0) {
                    propsToDelete.push(key);
                }
            }
            el.fromJSON(srcJson);
            this.currentLogicAction = this.initialLogicAction;
            for (var i = 0; i < propsToDelete.length; i++) {
                el[propsToDelete[i]] = undefined;
            }
            return false;
        }
        this.currentLogicAction = new _logic_items__WEBPACK_IMPORTED_MODULE_4__["SurveyLogicAction"](this.logicType, this.panelObj, survey);
        return true;
    };
    LogicActionTriggerModel.prototype.updatePanel = function (propertyName, newValue, options, survey) {
        if (!this.panelObj)
            return;
        this.panelObj[propertyName] = newValue;
        if (!!this.logicType && this.logicType.dependedOnPropertyName === propertyName) {
            this.recreateQuestion(this.panel, this.panelObj, this.logicType.dynamicPropertyName, options);
        }
        this.panel.runCondition(survey.getAllValues(), { survey: survey });
    };
    LogicActionTriggerModel.prototype.setPanelObj = function (obj) {
        var _this = this;
        var oldPanelObj = this.panelObj;
        if (!!oldPanelObj) {
            oldPanelObj.onPropertyValueChangedCallback = undefined;
        }
        this.panelObj = obj;
        if (!!obj) {
            obj.onPropertyValueChangedCallback = function (name, oldValue, newValue, sender, arrayChanges) {
                if (!_this.panel || _this.panel.isDisposed) {
                    oldPanelObj.onPropertyValueChangedCallback = undefined;
                    return;
                }
                var q = _this.panel.getQuestionByName(name);
                if (!!q) {
                    q.value = newValue;
                }
            };
        }
    };
    LogicActionTriggerModel.prototype.resetElements = function () {
        this.setPanelObj(null);
        this.resetPanel("triggerQuestionsPanel");
        this.resetPanel("triggerEditorPanel");
    };
    LogicActionTriggerModel.prototype.updatePanelElements = function (selectedElement, options) {
        var _this = this;
        var triggerEditorPanel = this.panel.getElementByName("triggerEditorPanel");
        var triggerQuestionsPanel = this.panel.getElementByName("triggerQuestionsPanel");
        var obj = this.createElementPanelObj();
        var propGenerator = new _property_grid__WEBPACK_IMPORTED_MODULE_3__["PropertyJSONGenerator"](obj, options);
        propGenerator.setupObjPanel(triggerEditorPanel, true, "logic");
        triggerEditorPanel.title = "";
        var runExpressionQuestion = triggerEditorPanel.getQuestionByName("runExpression");
        runExpressionQuestion && this.updateRunExpressionQuestion(runExpressionQuestion);
        if (!!this.logicType.questionNames) {
            var questionsToMove = triggerEditorPanel.elements.filter(function (el) { return _this.logicType.questionNames.indexOf(el.name) !== -1; });
            questionsToMove.forEach(function (q) {
                var question = q;
                if (question.getType() === "dropdown") {
                    question.allowClear = false;
                    question.renderAs = "logicoperator";
                }
                triggerQuestionsPanel.addQuestion(question);
            });
        }
        triggerEditorPanel.getElementByName(this.logicType.propertyName).visible = false;
        this.updateVisibilityPanel(triggerQuestionsPanel);
        this.updatePanelQuestionsValue(triggerQuestionsPanel);
        this.updateVisibilityPanel(triggerEditorPanel);
        this.updatePanelQuestionsValue(triggerEditorPanel);
        var questions = this.getQuestions();
        if (!!questions && !!selectedElement) {
            questions.forEach(function (question) {
                _this.setInitialElementValue(question, _this.initialLogicAction, selectedElement);
                selectedElement = null;
            });
        }
    };
    LogicActionTriggerModel.prototype.getSelectedElement = function () {
        var questions = this.getQuestions();
        if (!questions)
            return;
        var question = questions[0];
        return (!!question && question.value);
    };
    return LogicActionTriggerModel;
}(LogicActionModelBase));



/***/ }),

/***/ "./src/components/tabs/logic-expression.ts":
/*!*************************************************!*\
  !*** ./src/components/tabs/logic-expression.ts ***!
  \*************************************************/
/*! exports provided: SurveyLogicExpressionUpdater, updateLogicExpression */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicExpressionUpdater", function() { return SurveyLogicExpressionUpdater; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateLogicExpression", function() { return updateLogicExpression; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

var SurveyLogicExpressionUpdater = /** @class */ (function () {
    function SurveyLogicExpressionUpdater(expresion) {
        this.constChanges = [];
        this.operand = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ConditionsParser"]().parseExpression(expresion);
    }
    SurveyLogicExpressionUpdater.prototype.update = function (varName, oldValue, newValue) {
        this.updateOperand(this.operand, varName.toLocaleLowerCase(), oldValue, newValue);
    };
    Object.defineProperty(SurveyLogicExpressionUpdater.prototype, "isModified", {
        get: function () { return this.constChanges.length > 0; },
        enumerable: false,
        configurable: true
    });
    SurveyLogicExpressionUpdater.prototype.toString = function () {
        var self = this;
        var isRoot = true;
        var strFunc = function (op) {
            var locIsRoot = isRoot;
            isRoot = false;
            if (op.getType() === "const") {
                return self.constToString(op);
            }
            if (op.getType() === "binary") {
                return self.binaryToString(op, locIsRoot, strFunc);
            }
            return undefined;
        };
        return this.operand.toString(strFunc);
    };
    SurveyLogicExpressionUpdater.prototype.constToString = function (op) {
        for (var i = 0; i < this.constChanges.length; i++) {
            if (this.constChanges[i].op === op)
                return this.constChanges[i].val;
        }
        return op.toString();
    };
    SurveyLogicExpressionUpdater.prototype.binaryToString = function (op, isRoot, func) {
        return ((isRoot ? "" : "(") +
            this.operandToString(op.leftOperand, func) +
            " " +
            this.operatorToString(op.operator) +
            " " +
            this.operandToString(op.rightOperand, func) +
            (isRoot ? "" : ")"));
    };
    SurveyLogicExpressionUpdater.prototype.operandToString = function (op, func) {
        return !!op ? op.toString(func) : "";
    };
    SurveyLogicExpressionUpdater.prototype.operatorToString = function (operator) {
        var res = SurveyLogicExpressionUpdater.operatorText[operator];
        return !!res ? res : operator;
    };
    SurveyLogicExpressionUpdater.prototype.updateOperand = function (op, varName, oldValue, newValue) {
        if (op.getType() == "binary") {
            var bOP = op;
            if (bOP.isConjunction) {
                this.updateOperand(bOP.leftOperand, varName, oldValue, newValue);
                this.updateOperand(bOP.rightOperand, varName, oldValue, newValue);
            }
            else {
                if (this.hasVarName(bOP.leftOperand, varName)) {
                    this.updateOperandConst(bOP.rightOperand, oldValue, newValue);
                }
                else {
                    if (this.hasVarName(bOP.rightOperand, varName)) {
                        this.updateOperandConst(bOP.leftOperand, oldValue, newValue);
                    }
                }
            }
        }
    };
    SurveyLogicExpressionUpdater.prototype.hasVarName = function (op, varName) {
        if (!op || op.getType() !== "variable")
            return;
        return op.variable.toLowerCase() === varName;
    };
    SurveyLogicExpressionUpdater.prototype.updateOperandConst = function (op, oldValue, newValue) {
        var _this = this;
        if (op.getType() === "array") {
            var aOp = op;
            if (Array.isArray(aOp.values)) {
                aOp.values.forEach(function (item) { return _this.updateOperandConst(item, oldValue, newValue); });
            }
        }
        if (op.getType() !== "const")
            return;
        var cOp = op;
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(cOp.correctValue, oldValue)) {
            newValue = this.getCorrectNewValue(cOp, newValue);
            this.constChanges.push({ op: op, val: newValue });
        }
    };
    SurveyLogicExpressionUpdater.prototype.getCorrectNewValue = function (op, newValue) {
        var str = op.toString();
        if (!!str && !survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(op.correctValue, str)) {
            if (str[0] === "\"" || str[0] === "'") {
                return str[0] + newValue + str[0];
            }
        }
        return newValue;
    };
    SurveyLogicExpressionUpdater.operatorText = {
        less: "<",
        lessorequal: "<=",
        greater: ">",
        greaterorequal: ">=",
        equal: "=",
        notequal: "!=",
        plus: "+",
        minus: "-",
        mul: "*",
        div: "/",
        power: "^",
        mod: "%",
        negate: "!",
    };
    return SurveyLogicExpressionUpdater;
}());

function updateLogicExpression(expression, varName, oldValue, newValue) {
    var updater = new SurveyLogicExpressionUpdater(expression);
    updater.update(varName, oldValue, newValue);
    return updater.isModified ? updater.toString() : expression;
}


/***/ }),

/***/ "./src/components/tabs/logic-item-editor.ts":
/*!**************************************************!*\
  !*** ./src/components/tabs/logic-item-editor.ts ***!
  \**************************************************/
/*! exports provided: LogicItemEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicItemEditor", function() { return LogicItemEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _property_grid_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../property-grid/index */ "./src/property-grid/index.ts");
/* harmony import */ var _logic_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logic-types */ "./src/components/tabs/logic-types.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _logic_theme__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./logic-theme */ "./src/components/tabs/logic-theme.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _logic_actions_model__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logic-actions-model */ "./src/components/tabs/logic-actions-model.ts");
/* harmony import */ var _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../property-grid-theme/property-grid */ "./src/property-grid-theme/property-grid.ts");











function logicTypeVisibleIf(params) {
    if (!this.question || !this.question.parentQuestion || params.length != 1)
        return true;
    var panels = this.question.parentQuestion.panels;
    if (panels.length < 2)
        return true;
    for (var i = 0; i < panels.length; i++) {
        var q = panels[i].getQuestionByName("logicTypeName");
        if (q == this.question)
            continue;
        if (q.value == params[0])
            return false;
    }
    return true;
}
survey_core__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.register("logicTypeVisibleIf", logicTypeVisibleIf);
var LogicItemEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogicItemEditor, _super);
    function LogicItemEditor(editableItem, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, options) || this;
        _this.options = options;
        _this.initialSelectedElements = {};
        _this.isModifiedValue = false;
        _this.selectorElementsHash = {};
        if (!_this.options) {
            _this.options = new _creator_settings__WEBPACK_IMPORTED_MODULE_2__["EmptySurveyCreatorOptions"]();
        }
        _this.editSurvey.onDynamicPanelItemValueChanged.add(function (sender, options) {
            if (options.name == "logicTypeName") {
                _this.onLogicTypeChanged(options.panel);
            }
            var actionModel = _this.getActionModelByPanel(options.panel);
            if (actionModel.isTrigger) {
                actionModel.updatePanel(options.name, options.value, _this.options, _this.editSurvey);
            }
        });
        _this.editSurvey.onDynamicPanelRemoved.add(function (sender, options) {
            if (_this.isBuildingPanels)
                return;
            var actionModel = _this.getActionModelByPanel(options.panel);
            if (!!actionModel && !!actionModel.initialLogicAction) {
                _this.editableItem.removeAction(actionModel.initialLogicAction);
            }
            if (_this.panel.panelCount == 0) {
                _this.panel.addPanel();
            }
            if (_this.panel.panelCount > 0)
                _this.panels[0].getQuestionByName("logicTypeName").title = _editorLocalization__WEBPACK_IMPORTED_MODULE_5__["editorLocalization"].getString("pe.then");
        });
        _this.editSurvey.onDynamicPanelAdded.add(function (sender, options) {
            if (_this.isBuildingPanels)
                return;
            var panel = _this.panels[_this.panel.panelCount - 1];
            _this.onPanelAdded(panel, null);
        });
        _this.editSurvey.css = _logic_theme__WEBPACK_IMPORTED_MODULE_7__["logicCss"];
        _this.editSurvey.onUpdateQuestionCssClasses.add(function (sender, options) {
            _this.onUpdateQuestionCssClasses(options);
        });
        _this.editSurvey.onUpdatePanelCssClasses.add(function (sender, options) {
            _this.onUpdatePanelCssClasses(options);
        });
        _this.editSurvey.onQuestionAdded.add(function (sender, options) {
            _this.onQuestionAdded(options);
        });
        _this.editSurvey.onGetQuestionTitleActions.add(function (sender, options) {
            _this.onGetQuestionTitleActions(options);
        });
        _this.editSurvey.onValueChanged.add(function (sender, options) {
            _this.onValueChanged(options);
        });
        _this.setEditableItem(editableItem);
        return _this;
    }
    Object.defineProperty(LogicItemEditor.prototype, "editableItem", {
        get: function () {
            return this.editableItemValue;
        },
        enumerable: false,
        configurable: true
    });
    LogicItemEditor.prototype.setEditableItem = function (val) {
        this.editableItemValue = val;
        this.buildInitialSelectedElements();
        this.buildPanels();
        this.resetModified();
    };
    Object.defineProperty(LogicItemEditor.prototype, "survey", {
        get: function () {
            return this.editableItem.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicItemEditor.prototype, "isModified", {
        get: function () {
            return this.isModifiedValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicItemEditor.prototype, "panel", {
        get: function () {
            return (this.editSurvey.getQuestionByName("panel"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogicItemEditor.prototype, "panels", {
        get: function () {
            return this.panel.panels;
        },
        enumerable: false,
        configurable: true
    });
    LogicItemEditor.prototype.getActionModelByPanel = function (panel) {
        return panel["actionModel"];
    };
    LogicItemEditor.prototype.setActionModelByPanel = function (panel, actionModel) {
        panel["actionModel"] = actionModel;
    };
    Object.defineProperty(LogicItemEditor.prototype, "context", {
        get: function () { return this.contextValue; },
        set: function (val) {
            if (val === this.context)
                return;
            this.contextValue = val;
            this.updatePanelsOnContextChanged();
        },
        enumerable: false,
        configurable: true
    });
    LogicItemEditor.prototype.getLogicTypeByPanel = function (panel) {
        return this.getLogicTypeByName(panel.getQuestionByName("logicTypeName").value);
    };
    LogicItemEditor.prototype.getSurveyJSON = function () {
        return {
            clearInvisibleValues: "onHidden",
            elements: [
                {
                    type: "paneldynamic",
                    name: "panel",
                    title: Object(_logic_types__WEBPACK_IMPORTED_MODULE_4__["getLogicString"])("actionsEditorTitle"),
                    titleLocation: "hidden",
                    panelAddText: Object(_logic_types__WEBPACK_IMPORTED_MODULE_4__["getLogicString"])("addNewAction"),
                    panelRemoveButtonLocation: "right",
                    panelCount: 0,
                    minPanelCount: 1,
                    maxPanelCount: 1,
                    templateElements: [
                        {
                            name: "logicTypeName",
                            type: "dropdown",
                            renderAs: "logicoperator",
                            searchEnabled: false,
                            allowClear: false,
                            title: _editorLocalization__WEBPACK_IMPORTED_MODULE_5__["editorLocalization"].getString("pe.then"),
                            titleLocation: "left",
                            isRequired: true,
                            optionsCaption: Object(_logic_types__WEBPACK_IMPORTED_MODULE_4__["getLogicString"])("selectedActionCaption"),
                            requiredErrorText: this.getLocString("pe.conditionActionEmpty")
                        },
                        {
                            name: "logicTypeDescription",
                            type: "html",
                            startWithNewLine: false,
                            visible: false // TODO we do not show description by the new design
                        },
                        {
                            name: "elementSelector",
                            type: "dropdown",
                            renderAs: "logicoperator",
                            allowClear: false,
                            titleLocation: "hidden",
                            isRequired: true,
                            startWithNewLine: false,
                            visible: false
                        },
                        {
                            name: "triggerQuestionsPanel",
                            type: "panel",
                            startWithNewLine: false,
                            visible: false
                        },
                        {
                            name: "removeAction",
                            type: "linkvalue",
                            titleLocation: "hidden",
                            showOptionsCaption: false,
                            visible: false,
                            startWithNewLine: false,
                            showValueInLink: false,
                            allowClear: false,
                            showClear: false
                        },
                        {
                            name: "triggerEditorPanel",
                            type: "panel",
                            visible: false
                        },
                        {
                            name: "setValueIfPanel",
                            visible: false,
                            type: "panel",
                            elements: [{
                                    name: "setValueExpression",
                                    type: "comment",
                                    titleLocation: "hidden"
                                }]
                        }
                    ]
                }
            ]
        };
    };
    LogicItemEditor.prototype.getSurveyCreationReason = function () {
        return "logic-item-editor";
    };
    LogicItemEditor.prototype.resetModified = function () {
        this.isModifiedValue = false;
    };
    LogicItemEditor.prototype.isEmpty = function () {
        if (this.panels.length === 0)
            return true;
        if (this.panels.length > 1)
            return false;
        var modelAction = this.getActionModelByPanel(this.panels[0]);
        return !modelAction;
    };
    LogicItemEditor.prototype.apply = function () {
        if (this.editSurvey.hasErrors())
            return false;
        for (var i = 0; i < this.panels.length; i++) {
            this.applyPanel(this.panels[i]);
        }
        this.resetModified();
        return true;
    };
    LogicItemEditor.prototype.getEditingActions = function () {
        var _this = this;
        return this.panels.map(function (panel) {
            var modelAction = _this.getActionModelByPanel(panel);
            modelAction.updateCurrentLogicAction(_this.survey);
            return modelAction.currentLogicAction || modelAction.initialLogicAction;
        }).filter(function (action) { return !!action; });
    };
    LogicItemEditor.prototype.onUpdateQuestionCssClasses = function (options) {
        var cssClasses = options.cssClasses;
        var question = options.question;
        cssClasses.answered = "svc-logic-question--answered";
        if (question.name === "logicTypeName") {
            question.allowRootStyle = false;
            cssClasses.control += " svc-logic-operator svc-logic-operator--action";
            cssClasses.error.root = "svc-logic-operator__error";
            cssClasses.onError = "svc-logic-operator--error";
        }
        var selectorsNames = ["elementSelector", "setToName", "fromName", "gotoName"];
        if (selectorsNames.indexOf(question.name) > -1) {
            question.allowRootStyle = false;
            if (question.name === "setToName" || question.name === "fromName") {
                question.titleLocation = "left";
                question.startWithNewLine = false;
            }
            cssClasses.control += " svc-logic-operator svc-logic-operator--question";
            cssClasses.error.root = "svc-logic-operator__error";
            cssClasses.onError = "svc-logic-operator--error";
        }
        if (question.name === "setValue" || question.isContentElement) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["assignDefaultV2Classes"])(cssClasses, question.getType());
            cssClasses.mainRoot += " svc-logic-question-value sd-element--with-frame";
        }
        var parentName = question.parent.name;
        if (selectorsNames.indexOf(question.name) < 0 && (parentName === "triggerEditorPanel" || parentName === "setValueIfPanel")) {
            var qType = question.getType();
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["assignDefaultV2Classes"])(cssClasses, qType);
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2Css"][qType]) {
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["copyCssClasses"])(cssClasses, _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_10__["propertyGridCss"].question);
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["copyCssClasses"])(cssClasses, _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_10__["propertyGridCss"][qType]);
            }
            var els = question.parent.elements.filter(function (el) { return selectorsNames.indexOf(el.name) < 0 && el.name !== "expression"; });
            if ((question.name !== "runExpression" && qType !== "comment") || (Array.isArray(els) && els.length > 1)) {
                cssClasses.mainRoot += " svc-logic-question-value sd-element--with-frame";
            }
        }
        if (question.name === "removeAction") {
            question.allowRootStyle = false;
            cssClasses.mainRoot += " svc-logic-condition-remove-question";
        }
        if (question.name === "panel") {
            cssClasses.root += " svc-logic-paneldynamic";
            cssClasses.buttonAdd += " svc-logic-operator--action ";
            cssClasses.iconRemove = "svc-icon-remove";
            cssClasses.buttonRemove = "svc-logic-paneldynamic__button svc-logic-paneldynamic__remove-btn";
            cssClasses.buttonRemoveRight = "svc-logic-paneldynamic__remove-btn--right";
            cssClasses.buttonRemoveText = "svc-logic-paneldynamic__button-remove-text";
        }
    };
    LogicItemEditor.prototype.onUpdatePanelCssClasses = function (options) {
        var name = options.panel.name;
        if (name === "triggerEditorPanel" || name === "setValueIfPanel") {
            options.cssClasses.panel.container += " svc-logic_trigger-editor";
        }
        if (name === "triggerQuestionsPanel") {
            options.panel.allowRootStyle = false;
            options.cssClasses.panel.container += " svc-logic_trigger-questions";
        }
    };
    LogicItemEditor.prototype.onValueChanged = function (options) {
        this.isModifiedValue = true;
        options.question.maxPanelCount = (options.value.length === 1 && !options.value[0].logicTypeName) ? 1 : 100;
        this.panels.forEach(function (panel) {
            panel.getQuestionByName("removeAction").visible = options.value.length !== 1;
        });
    };
    LogicItemEditor.prototype.onQuestionAdded = function (options) {
        if (options.question.name === "setToName" || options.question.name === "fromName") {
            options.question.titleLocation = "left";
            options.question.startWithNewLine = false;
        }
    };
    LogicItemEditor.prototype.onGetQuestionTitleActions = function (options) {
        if (options.question.name === "setValue") {
            options.titleActions = [];
        }
    };
    LogicItemEditor.prototype.applyPanel = function (panel) {
        var actionModel = this.getActionModelByPanel(panel);
        if (!actionModel.updateCurrentLogicAction(this.survey)) {
            return;
        }
        this.editableItem.replaceAction(actionModel.currentLogicAction, actionModel.initialLogicAction);
        actionModel.updateInitialLogicAction();
    };
    LogicItemEditor.prototype.buildInitialSelectedElements = function () {
        this.initialSelectedElements = {};
        if (!this.editableItem)
            return;
        for (var i = 0; i < this.editableItem.actions.length; i++) {
            var action = this.editableItem.actions[i];
            if (this.isElementSelectorVisible(action.logicType)) {
                var lgName = action.logicTypeName;
                if (!this.initialSelectedElements[lgName]) {
                    this.initialSelectedElements[lgName] = [];
                }
                this.initialSelectedElements[lgName].push(action.element);
            }
        }
    };
    LogicItemEditor.prototype.buildPanels = function () {
        this.panel.panelCount = 0;
        if (!this.editableItem)
            return;
        this.logicTypeChoices = this.getLogicTypeChoices();
        for (var i = 0; i < this.editableItem.actions.length; i++) {
            this.onPanelAdded(this.panel.addPanel(), this.editableItem.actions[i]);
        }
        if (this.panel.panelCount == 0) {
            this.onPanelAdded(this.panel.addPanel(), null);
        }
    };
    LogicItemEditor.prototype.onPanelAdded = function (panel, action) {
        var ltQuestion = panel.getQuestionByName("logicTypeName");
        ltQuestion.title = this.panel.panelCount > 1 ? _editorLocalization__WEBPACK_IMPORTED_MODULE_5__["editorLocalization"].getString("pe.and") : _editorLocalization__WEBPACK_IMPORTED_MODULE_5__["editorLocalization"].getString("pe.then");
        ltQuestion.choices = this.logicTypeChoices;
        ltQuestion.allowClear = false;
        if (!!action) {
            var newActionModel = _logic_actions_model__WEBPACK_IMPORTED_MODULE_9__["LogicActionModelBase"].createActionModel(panel, action, this.getLogicTypeByName(action.logicTypeName), this.selectorElementsHash);
            this.setActionModelByPanel(panel, newActionModel);
            ltQuestion.value = action.logicTypeName;
        }
        var removeActionLinkQuestion = (panel.getQuestionByName("removeAction"));
        var dynamicPanel = (removeActionLinkQuestion.parentQuestion);
        removeActionLinkQuestion.linkClickCallback = function () {
            if (!!dynamicPanel) {
                dynamicPanel.removePanelUI(panel);
            }
        };
        removeActionLinkQuestion.linkSetButtonCssClasses = "svc-logic-condition-remove svc-icon-remove";
        removeActionLinkQuestion.linkValueText = "";
        return panel;
    };
    LogicItemEditor.prototype.updatePanelsOnContextChanged = function () {
        this.logicTypeChoices = this.getLogicTypeChoices();
        if (!!this.context) {
            for (var i = this.panels.length - 1; i >= 0; i--) {
                var panel = this.panels[i];
                if (this.isPanelSupportContext(panel))
                    continue;
                if (i === 0 && this.panels.length === 1) {
                    panel.getQuestionByName("logicTypeName").clearValue();
                }
                else {
                    this.panel.removePanel(i);
                }
            }
        }
        for (var i = 0; i < this.panels.length; i++) {
            this.updateSelectorOnContextChanged(this.panels[i]);
        }
    };
    LogicItemEditor.prototype.isPanelSupportContext = function (panel) {
        var logicType = this.getLogicTypeByPanel(panel);
        return !!logicType ? logicType.supportContext(this.context) : false;
    };
    LogicItemEditor.prototype.updateSelectorOnContextChanged = function (panel) {
        var logicTypeQuestion = panel.getQuestionByName("logicTypeName");
        logicTypeQuestion.choices = this.logicTypeChoices;
        logicTypeQuestion.allowClear = false;
        var logicType = this.getLogicTypeByPanel(panel);
        if (!this.isElementSelectorVisible(logicType))
            return;
        var selectorQuestion = panel.getQuestionByName("elementSelector");
        selectorQuestion.choices = this.getSelectorChoices(logicType);
        selectorQuestion.allowClear = false;
    };
    LogicItemEditor.prototype.getLogicTypeChoices = function () {
        var res = [];
        var logicTypes = this.editableItem.getVisibleLogicTypes();
        for (var i = 0; i < logicTypes.length; i++) {
            var lt = logicTypes[i];
            if (!!this.context && !lt.supportContext(this.context))
                continue;
            var item = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](lt.name, lt.displayName);
            if (lt.isUniqueItem) {
                item.visibleIf = "logicTypeVisibleIf({item})";
            }
            res.push(item);
        }
        return res;
    };
    LogicItemEditor.prototype.onLogicTypeChanged = function (panel) {
        var logicType = this.getLogicTypeByPanel(panel);
        var qTypeDescription = panel.getQuestionByName("logicTypeDescription");
        qTypeDescription.html = !!logicType ? logicType.description : "";
        var oldActionModel = this.getActionModelByPanel(panel);
        var prevSelectedQuestion;
        if (!!oldActionModel) {
            prevSelectedQuestion = oldActionModel.getSelectedElement();
            oldActionModel.resetElements();
        }
        if (!logicType)
            return;
        var newActionModel = _logic_actions_model__WEBPACK_IMPORTED_MODULE_9__["LogicActionModelBase"].createActionModel(panel, (oldActionModel ? oldActionModel.initialLogicAction : null), logicType, this.selectorElementsHash);
        this.setActionModelByPanel(panel, newActionModel);
        if (newActionModel.isTrigger) {
            newActionModel.updatePanelElements(prevSelectedQuestion, this.options);
        }
        else {
            newActionModel.updatePanelElements(prevSelectedQuestion, this.getSelectorChoices(newActionModel.logicType));
        }
    };
    LogicItemEditor.prototype.getLogicTypeByName = function (ltName) {
        if (!ltName)
            return null;
        var logicTypes = this.editableItem.getVisibleLogicTypes();
        for (var i = 0; i < logicTypes.length; i++) {
            if (logicTypes[i].name == ltName)
                return logicTypes[i];
        }
        return null;
    };
    LogicItemEditor.prototype.isElementSelectorVisible = function (logicType) {
        return !!logicType && logicType.hasSelectorChoices;
    };
    LogicItemEditor.prototype.getLocString = function (name) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_5__["editorLocalization"].getString(name);
    };
    LogicItemEditor.prototype.getElementText = function (el, showTitles) {
        var text = "";
        if (showTitles) {
            text = el.locTitle.renderedHtml;
        }
        if (!text)
            text = el.name;
        if (el.isQuestion) {
            text = this.options.getObjectDisplayName(el, "logic-tab:question-selector", "condition", text);
        }
        return text;
    };
    LogicItemEditor.prototype.getSelectorChoices = function (logicType) {
        if (!logicType.hasSelectorChoices)
            return [];
        var elements = logicType.getSelectorChoices(this.survey, this.context);
        var res = [];
        var showTitles = this.options.showTitlesInExpressions;
        for (var i = 0; i < elements.length; i++) {
            var namePrefix = "";
            var textPrefix = "";
            var el = elements[i];
            var owner = logicType.getParentElement(el);
            if (owner) {
                namePrefix = owner.name + ".";
                textPrefix = this.getElementText(owner, showTitles) + ".";
            }
            var text = this.getElementText(el, showTitles);
            var value = namePrefix + el.name;
            var itemValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](value, textPrefix + text);
            this.selectorElementsHash[value] = el;
            if (!!el[logicType.propertyName] && !this.isElementInInitialSelection(logicType.name, el)) {
                itemValue.enableIf = "1=2";
                itemValue.visibleIf = "1=2";
            }
            res.push(itemValue);
        }
        _survey_helper__WEBPACK_IMPORTED_MODULE_6__["SurveyHelper"].sortItems(res);
        return res;
    };
    LogicItemEditor.prototype.isElementInInitialSelection = function (logicTypeName, el) {
        if (!this.initialSelectedElements[logicTypeName])
            return false;
        return this.initialSelectedElements[logicTypeName].indexOf(el) > -1;
    };
    return LogicItemEditor;
}(_property_grid_index__WEBPACK_IMPORTED_MODULE_3__["PropertyEditorSetupValue"]));



/***/ }),

/***/ "./src/components/tabs/logic-items.ts":
/*!********************************************!*\
  !*** ./src/components/tabs/logic-items.ts ***!
  \********************************************/
/*! exports provided: SurveyLogicAction, SurveyLogicItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicAction", function() { return SurveyLogicAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicItem", function() { return SurveyLogicItem; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _expressionToDisplayText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../expressionToDisplayText */ "./src/expressionToDisplayText.ts");
/* harmony import */ var _logic_expression__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logic-expression */ "./src/components/tabs/logic-expression.ts");
/* harmony import */ var _logic_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logic-types */ "./src/components/tabs/logic-types.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../survey-helper */ "./src/survey-helper.ts");








var SurveyLogicAction = /** @class */ (function () {
    function SurveyLogicAction(logicType, element, survey) {
        this.surveyValue = survey;
        this.logicTypeValue = logicType;
        this.elementValue = element;
    }
    Object.defineProperty(SurveyLogicAction.prototype, "logicType", {
        get: function () {
            return this.logicTypeValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "element", {
        get: function () {
            return this.elementValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "parentElement", {
        get: function () {
            if (!this.element || !this.logicType)
                return null;
            return this.logicType.getParentElement(this.element);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicAction.prototype.apply = function (expression, isRenaming) {
        if (isRenaming === void 0) { isRenaming = false; }
        if (!!this.element && !!this.logicType) {
            this.element[this.logicType.propertyName] = expression;
            if (!expression &&
                survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(this.element.getType(), "surveytrigger")) {
                var index = this.survey.triggers.indexOf(this.element);
                if (index > -1) {
                    this.survey.triggers.splice(index, 1);
                }
            }
        }
    };
    SurveyLogicAction.prototype.renameQuestion = function (oldName, newName) {
        if (!this.element)
            return;
        var names = this.questionNames;
        for (var i = 0; i < names.length; i++) {
            var str = this.element[names[i]];
            if (!!str && str.toLowerCase() == oldName.toLowerCase()) {
                this.element[names[i]] = newName;
            }
        }
    };
    SurveyLogicAction.prototype.clone = function () {
        var el = this.logicType.cloneElement(this.element);
        return new SurveyLogicAction(this.logicType, el, this.survey);
    };
    SurveyLogicAction.prototype.equals = function (action) {
        if (this.logicType !== action.logicType)
            return false;
        return this.logicType.areElementsEqual(this.element, action.element);
    };
    Object.defineProperty(SurveyLogicAction.prototype, "name", {
        get: function () {
            return !!this.logicType ? this.logicType.displayName : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "logicTypeName", {
        get: function () {
            return !!this.logicType ? this.logicType.name : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "logicTypeDescription", {
        get: function () {
            return !!this.logicType ? this.logicType.description : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "text", {
        get: function () {
            return !!this.logicType ? this.logicType.getDisplayText(this.element) : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "deleteActionText", {
        get: function () {
            return Object(_logic_types__WEBPACK_IMPORTED_MODULE_4__["getLogicString"])("deleteAction");
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicAction.prototype.getLocString = function (name) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString(name);
    };
    SurveyLogicAction.prototype.isSuitableByQuestionName = function (questionName) {
        var res = this.elementName === questionName || this.elementName.indexOf(questionName + ".") === 0;
        if (!res) {
            res = this.questionNamesValues.filter(function (question) { return question === questionName || question.indexOf(questionName + ".") === 0; }).length > 0;
        }
        return res;
    };
    SurveyLogicAction.prototype.isSuitableByLogicType = function (logicTypeName) {
        if (!this.logicTypeName)
            return true;
        return logicTypeName === this.logicTypeName;
    };
    SurveyLogicAction.prototype.addQuestionNames = function (names) {
        var name = this.elementOwnerName;
        if (!!this.elementName && names.indexOf(name) === -1) {
            names.push(name);
        }
        this.questionNamesValues.forEach(function (name) {
            if (!!name && names.indexOf(name) === -1) {
                names.push(name);
            }
        });
    };
    Object.defineProperty(SurveyLogicAction.prototype, "questionNames", {
        get: function () {
            if (!this.logicType || !this.logicType.questionNames)
                return [];
            return this.logicType.questionNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "elementName", {
        get: function () {
            if (!this.element)
                return "";
            var prefix = "";
            var owner = this.getOwnerElement();
            if (!!owner && owner !== this.element) {
                prefix = owner.name + ".";
            }
            return (prefix + this.element.name) || "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicAction.prototype, "elementOwnerName", {
        get: function () {
            var owner = this.getOwnerElement();
            return !!owner ? owner.name || "" : "";
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicAction.prototype.getOwnerElement = function () {
        if (!this.element)
            return null;
        var parentElement = this.parentElement;
        return !!parentElement ? parentElement : this.element;
    };
    Object.defineProperty(SurveyLogicAction.prototype, "questionNamesValues", {
        get: function () {
            var _this = this;
            return this.questionNames.map(function (name) { return _this.element[name]; });
        },
        enumerable: false,
        configurable: true
    });
    return SurveyLogicAction;
}());

var SurveyLogicItem = /** @class */ (function () {
    function SurveyLogicItem(owner, expression) {
        if (expression === void 0) { expression = ""; }
        this.owner = owner;
        this.expression = expression;
        this.idValue = ++SurveyLogicItem.counter;
        this.isNew = false;
        this.isModified = false;
        this.actionsValue = [];
        this.removedActions = [];
    }
    Object.defineProperty(SurveyLogicItem.prototype, "actions", {
        get: function () {
            return this.actionsValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "id", {
        get: function () { return this.idValue; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "name", {
        get: function () {
            return "logicItem" + this.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "survey", {
        get: function () {
            return this.owner.survey;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicItem.prototype.getVisibleLogicTypes = function () {
        return this.owner.getVisibleLogicTypes();
    };
    Object.defineProperty(SurveyLogicItem.prototype, "expressionText", {
        get: function () {
            var text = this.getExpressionAsDisplayText();
            if (!text)
                return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.lg.itemEmptyExpressionText");
            return text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "actionsText", {
        get: function () {
            return this.actions.map(function (action) { return action.text; }).join(", ");
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicItem.prototype.getDisplayText = function () {
        var conditionText = this.getExpressionAsDisplayText();
        var actionsText = "";
        this.actions.forEach(function (action) {
            actionsText += (", " + action.text);
        });
        if (!!conditionText && !!actionsText) {
            var text = this.ifText + " " + conditionText + actionsText;
            return text.replace(new RegExp("({|})", "gm"), "'");
        }
        else {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.lg.itemEmptyExpressionText");
        }
    };
    SurveyLogicItem.prototype.edit = function () {
        if (!!this.owner) {
            this.owner.editItem(this);
        }
    };
    SurveyLogicItem.prototype.remove = function () {
        if (!!this.owner) {
            this.owner.removeItem(this);
        }
    };
    Object.defineProperty(SurveyLogicItem.prototype, "isReadOnly", {
        get: function () {
            return !!this.owner && this.owner.readOnly;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicItem.prototype.addNewAction = function (action) {
        this.actions.push(action);
    };
    SurveyLogicItem.prototype.removeAction = function (action) {
        this.replaceActionCore(null, action);
    };
    SurveyLogicItem.prototype.replaceAction = function (newAction, oldAction) {
        if (!!oldAction) {
            this.replaceActionCore(newAction, oldAction);
        }
        else {
            this.addNewAction(newAction);
        }
    };
    SurveyLogicItem.prototype.clone = function () {
        var res = new SurveyLogicItem(this.owner, this.expression);
        for (var i = 0; i < this.actions.length; i++) {
            res.addNewAction(this.actions[i].clone());
        }
        return res;
    };
    SurveyLogicItem.prototype.equals = function (item) {
        if (this.expression !== item.expression)
            return false;
        if (this.actions.length !== item.actions.length)
            return false;
        for (var i = 0; i < this.actions.length; i++) {
            if (!this.actions[i].equals(item.actions[i]))
                return false;
        }
        return true;
    };
    SurveyLogicItem.prototype.replaceActionCore = function (newAction, oldAction) {
        this.removedActions.push(oldAction);
        var index = this.actions.indexOf(oldAction);
        if (index > -1) {
            if (!!newAction) {
                this.actions.splice(index, 1, newAction);
            }
            else {
                this.actions.splice(index, 1);
            }
        }
    };
    SurveyLogicItem.prototype.apply = function (expression) {
        if (!expression) {
            this.removeActions();
        }
        else {
            this.removeSameActions();
        }
        for (var i = 0; i < this.removedActions.length; i++) {
            this.removedActions[i].apply("");
        }
        this.removedActions = [];
        this.applyExpression(expression, false);
    };
    SurveyLogicItem.prototype.renameQuestion = function (oldName, newName) {
        var _this = this;
        if (!oldName || !newName || oldName === newName)
            return;
        ["", "panel.", "row."].forEach(function (prefix) {
            return _this.renameQuestionInExpression(prefix + oldName, prefix + newName, [_creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.closeBracket, ".", "["]);
        });
        var ops = this.actions;
        for (var i = 0; i < ops.length; i++) {
            ops[i].renameQuestion(oldName, newName);
        }
    };
    SurveyLogicItem.prototype.renameColumn = function (question, column, oldName) {
        if (!this.canUpdateExpressionByQuestion(question))
            return;
        if (this.actions[0].parentElement === question) {
            this.renameQuestionInExpression("row." + oldName, "row." + column.name, [_creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.closeBracket]);
        }
        var rows = question["rows"];
        if (!Array.isArray(rows) || !this.isQuestionInExpression(question))
            return;
        var questionPrefix = this.getItemValueQuestionName(question) + ".";
        for (var i = 0; i < rows.length; i++) {
            if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(rows[i].value))
                continue;
            var rowName = rows[i].value.toString() + ".";
            this.renameQuestionInExpression(questionPrefix + rowName + oldName, questionPrefix + rowName + column.name, [_creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.closeBracket]);
        }
    };
    SurveyLogicItem.prototype.renameItemValue = function (question, item, oldValue) {
        if (!this.canUpdateExpressionByQuestion(question))
            return;
        if (!!question.parentQuestion) {
            if (Array.isArray(question.parentQuestion["rows"])) {
                this.renameDropdownColumnItemValue(question, item, oldValue);
            }
            if (this.actions[0].parentElement !== question.parentQuestion)
                return;
        }
        if (!this.isQuestionInExpression(question))
            return;
        var questionName = this.getItemValueQuestionName(question).toLocaleLowerCase();
        var rows = question["rows"];
        var newExpression = this.expression;
        if (!Array.isArray(rows)) {
            newExpression = Object(_logic_expression__WEBPACK_IMPORTED_MODULE_3__["updateLogicExpression"])(newExpression, questionName, oldValue, item.value);
        }
        else {
            for (var i = 0; i < rows.length; i++) {
                if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(rows[i].value))
                    continue;
                var rowName = "." + rows[i].value.toString();
                newExpression = Object(_logic_expression__WEBPACK_IMPORTED_MODULE_3__["updateLogicExpression"])(newExpression, questionName + rowName, oldValue, item.value);
            }
        }
        if (newExpression != this.expression) {
            this.applyExpression(newExpression, true);
        }
    };
    SurveyLogicItem.prototype.renameDropdownColumnItemValue = function (question, item, oldValue) {
        var matrix = question.parentQuestion;
        if (!this.isQuestionInExpression(matrix))
            return;
        var columnPostFix = "." + question.getValueName();
        if (!this.isStrContainsInExpression(columnPostFix + _creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.closeBracket))
            return;
        var questionPrefix = matrix.getValueName() + ".";
        var rows = matrix["rows"];
        var newExpression = this.expression;
        for (var i = 0; i < rows.length; i++) {
            if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(rows[i].value))
                continue;
            var rowName = rows[i].value.toString();
            newExpression = Object(_logic_expression__WEBPACK_IMPORTED_MODULE_3__["updateLogicExpression"])(newExpression, questionPrefix + rowName + columnPostFix, oldValue, item.value);
        }
        if (newExpression != this.expression) {
            this.applyExpression(newExpression, true);
        }
    };
    SurveyLogicItem.prototype.renameRowValue = function (question, item, oldValue) {
        if (!this.canUpdateExpressionByQuestion(question) || !this.isQuestionInExpression(question))
            return;
        var questionName = this.getItemValueQuestionName(question);
        this.renameQuestionInExpression(questionName + "." + oldValue.toString(), questionName + "." + item.value.toString(), [_creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.closeBracket, "."]);
    };
    SurveyLogicItem.prototype.canUpdateExpressionByQuestion = function (question) {
        return !!this.expression && !!question.name && this.actions.length > 0;
    };
    SurveyLogicItem.prototype.isQuestionInExpression = function (question) {
        return this.isStrContainsInExpression(this.getItemValueQuestionName(question).toLocaleLowerCase());
    };
    SurveyLogicItem.prototype.isStrContainsInExpression = function (str) {
        if (!str)
            return false;
        return this.expression.toLocaleLowerCase().indexOf(str.toLocaleLowerCase()) > -1;
    };
    SurveyLogicItem.prototype.getItemValueQuestionName = function (question) {
        var valName = question.getValueName();
        if (!!question.parentQuestion) {
            if (question.parentQuestion.isDescendantOf("paneldynamic"))
                return "panel." + valName;
            if (question.parentQuestion.isDescendantOf("matrixdropdownbase"))
                return "row." + valName;
        }
        return valName;
    };
    SurveyLogicItem.prototype.removeQuestion = function (name) {
        this.removeQuestionInExpression(name);
    };
    SurveyLogicItem.prototype.getQuestionNames = function () {
        var res = [];
        this.getQuestionNamesFromExpression(res);
        this.getQuestionNamesFromActions(res);
        return res;
    };
    SurveyLogicItem.prototype.getActionTypes = function () {
        return this.actions.map(function (action) { return action.logicTypeName; });
    };
    SurveyLogicItem.prototype.getContext = function () {
        var exp = this.expression;
        if (!exp)
            return null;
        if (!_survey_helper__WEBPACK_IMPORTED_MODULE_7__["SurveyHelper"].getQuestionContextIndexInfo(exp, "{"))
            return null;
        for (var i = 0; i < this.actions.length; i++) {
            var parentEl = this.actions[i].parentElement;
            if (!!parentEl) {
                return parentEl;
            }
        }
        return null;
    };
    SurveyLogicItem.prototype.getQuestionNamesFromExpression = function (names) {
        var conditionRunner = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ConditionRunner"](this.expression);
        conditionRunner.getVariables().forEach(function (item) {
            if (names.indexOf(item) === -1)
                names.push(item);
        });
    };
    SurveyLogicItem.prototype.getQuestionNamesFromActions = function (names) {
        this.actions.forEach(function (action) { return action.addQuestionNames(names); });
    };
    SurveyLogicItem.prototype.getExpressionAsDisplayText = function () {
        return !!this.owner
            ? this.owner.getExpressionAsDisplayText(this.expression)
            : this.expression;
    };
    Object.defineProperty(SurveyLogicItem.prototype, "editText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("pe.edit");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "deleteText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("pe.delete");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicItem.prototype, "ifText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("pe.if");
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicItem.prototype.isSuitable = function (filteredName, logicTypeName) {
        if (logicTypeName === void 0) { logicTypeName = ""; }
        if (!filteredName && !logicTypeName)
            return true;
        if (!filteredName) {
            return this.isSuitableByLogicTypeInActions(logicTypeName);
        }
        if (!logicTypeName) {
            return this.isSuitableInExpression(filteredName) || this.isSuitableByNameInActions(filteredName);
        }
        return (this.isSuitableInExpression(filteredName) || this.isSuitableByNameInActions(filteredName)) && this.isSuitableByLogicTypeInActions(logicTypeName);
    };
    SurveyLogicItem.prototype.isSuitableInExpression = function (filteredName) {
        return this.expression.indexOf(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["wrapTextByCurlyBraces"])(filteredName)) !== -1 || this.expression.indexOf("'" + filteredName + ".") !== -1;
    };
    SurveyLogicItem.prototype.isSuitableByNameInActions = function (filteredName) {
        return this.actions.some(function (action) { return action.isSuitableByQuestionName(filteredName); });
    };
    SurveyLogicItem.prototype.isSuitableByLogicTypeInActions = function (logicTypeName) {
        return this.actions.some(function (action) { return action.isSuitableByLogicType(logicTypeName); });
    };
    SurveyLogicItem.prototype.renameQuestionInExpression = function (oldName, newName, postFixes) {
        var _this = this;
        if (!this.expression)
            return;
        oldName = oldName.toLowerCase();
        if (!this.isStrContainsInExpression(oldName))
            return;
        var ob = _creator_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].logic.openBracket;
        oldName = ob + oldName;
        newName = ob + newName;
        var newExpression = this.expression;
        postFixes.forEach(function (ch) {
            newExpression = _this.renameQuestionInExpressionCore(newExpression, newExpression.toLocaleLowerCase(), oldName + ch, newName + ch);
        });
        if (newExpression != this.expression) {
            this.applyExpression(newExpression, true);
        }
    };
    SurveyLogicItem.prototype.renameQuestionInExpressionCore = function (expression, lowCaseExpression, oldSubStr, newSubStr) {
        var index = lowCaseExpression.lastIndexOf(oldSubStr, lowCaseExpression.length);
        while (index > -1) {
            expression = expression.substring(0, index) + newSubStr + expression.substring(index + oldSubStr.length);
            lowCaseExpression = lowCaseExpression.substring(0, index);
            index = lowCaseExpression.lastIndexOf(oldSubStr, index);
        }
        return expression;
    };
    SurveyLogicItem.prototype.removeQuestionInExpression = function (name) {
        if (!this.expression)
            return;
        var expR = new _expressionToDisplayText__WEBPACK_IMPORTED_MODULE_2__["ExpressionRemoveVariable"]();
        var newExpression = expR.remove(this.expression, name);
        if (newExpression != this.expression) {
            this.applyExpression(newExpression, true);
        }
    };
    SurveyLogicItem.prototype.applyExpression = function (expression, isRenaming) {
        this.expression = expression;
        var ops = this.actions;
        for (var i = 0; i < ops.length; i++) {
            ops[i].apply(expression, isRenaming);
        }
    };
    SurveyLogicItem.prototype.removeActions = function () {
        var ops = this.actions;
        for (var i = ops.length - 1; i >= 0; i--) {
            this.removeAction(ops[i]);
        }
    };
    SurveyLogicItem.prototype.removeSameActions = function () {
        var ops = this.actions;
        for (var i = ops.length - 1; i >= 0; i--) {
            for (var j = i - 1; j >= 0; j--) {
                if (ops[i].equals(ops[j])) {
                    this.removeAction(ops[i]);
                    break;
                }
            }
        }
    };
    SurveyLogicItem.counter = 0;
    return SurveyLogicItem;
}());



/***/ }),

/***/ "./src/components/tabs/logic-plugin.ts":
/*!*********************************************!*\
  !*** ./src/components/tabs/logic-plugin.ts ***!
  \*********************************************/
/*! exports provided: TabLogicPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabLogicPlugin", function() { return TabLogicPlugin; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _logic_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logic-types */ "./src/components/tabs/logic-types.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _logic_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logic-ui */ "./src/components/tabs/logic-ui.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../survey-helper */ "./src/survey-helper.ts");





var TabLogicPlugin = /** @class */ (function () {
    function TabLogicPlugin(creator) {
        this.creator = creator;
        creator.addPluginTab("logic", this);
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
    }
    TabLogicPlugin.prototype.activate = function () {
        var _this = this;
        this.model = new _logic_ui__WEBPACK_IMPORTED_MODULE_3__["SurveyLogicUI"](this.creator.survey, this.creator);
        this.filterQuestionAction.title = this.createFilterQuestionTitleUpdater();
        this.filterQuestionAction.visible = true;
        this.filterActionTypeAction.title = this.createFilterTypeTitleUpdater();
        this.filterActionTypeAction.visible = true;
        if (this.fastEntryAction) {
            this.fastEntryAction.visible = true;
            this.fastEntryAction.active = this.model.expressionEditorIsFastEntry;
            this.fastEntryAction.enabled = false;
        }
        this.model.onPropertyChanged.add(function (sender, options) {
            if (!!_this.fastEntryAction && options.name === "expressionEditorIsFastEntry") {
                _this.fastEntryAction.active = _this.model.expressionEditorIsFastEntry;
            }
            if (!!_this.fastEntryAction && options.name === "expressionEditorCanShowBuilder") {
                _this.fastEntryAction.enabled = _this.model.expressionEditorCanShowBuilder;
            }
        });
    };
    TabLogicPlugin.prototype.createFilterTypeTitleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () {
            var loc = _this.creator.locale;
            if (!loc)
                loc = "en";
            var type = _this.model.actionTypeFilter;
            var allType = _this.showAllActionTypesText;
            return !!type ? _this.model.getTypeByName(type).displayName : allType;
        });
    };
    TabLogicPlugin.prototype.createFilterQuestionTitleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () {
            var loc = _this.creator.locale;
            if (!loc)
                loc = "en";
            var questionFilter = _this.model.questionFilter;
            var allQuestions = _this.showAllQuestionsText;
            return !!questionFilter ? questionFilter : allQuestions;
        });
    };
    TabLogicPlugin.prototype.update = function () {
        if (!this.model)
            return;
        this.model.update(this.creator.survey);
    };
    TabLogicPlugin.prototype.canDeactivateAsync = function (onSuccess) {
        var _this = this;
        if (!!this.model) {
            this.model.tryLeaveUI(function (res) {
                if (!res) {
                    _this.creator.notify(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("ed.lg.expressionInvalid"), "error");
                }
                else {
                    onSuccess();
                }
            });
            return;
        }
        onSuccess();
    };
    TabLogicPlugin.prototype.deactivate = function () {
        this.disposeObjs();
        return true;
    };
    TabLogicPlugin.prototype.dispose = function () {
        this.disposeObjs();
    };
    TabLogicPlugin.prototype.disposeObjs = function () {
        this.filterActionTypeAction.title = undefined;
        this.filterQuestionAction.title = undefined;
        if (this.model) {
            this.model.dispose();
            this.model = undefined;
        }
        this.filterQuestionAction.visible = false;
        this.filterActionTypeAction.visible = false;
        this.fastEntryAction && (this.fastEntryAction.visible = false);
    };
    TabLogicPlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        var onQuestionPopupShow = function () {
            var items = _this.model.getUsedQuestions().map(function (question) { return { id: question.name, title: _this.creator.getObjectDisplayName(question, "logic-tab:question-filter", "condition", question.name) }; });
            _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].sortItems(items, "title");
            questionPopupModel.contentComponentData.model.setItems([{ id: null, title: _this.showAllQuestionsText }].concat(items));
        };
        var questionListModel = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ListModel"]([{ id: null, title: this.showAllQuestionsText }], function (item) {
            _this.model.questionFilter = !!item.id ? item.id : "";
            questionPopupModel.toggleVisibility();
        }, true);
        questionListModel.locOwner = this.creator;
        var questionPopupModel = new survey_core__WEBPACK_IMPORTED_MODULE_0__["PopupModel"]("sv-list", { model: questionListModel }, "bottom", "center", undefined, undefined, undefined, undefined, undefined, onQuestionPopupShow);
        this.filterQuestionAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svc-logic-filter-question",
            visible: false,
            component: "sv-action-bar-item-dropdown",
            popupModel: questionPopupModel,
            action: function () { questionPopupModel.toggleVisibility(); }
        });
        items.push(this.filterQuestionAction);
        var onActionTypesPopupShow = function () {
            var items = _this.model.getUsedActionTypes().map(function (type) { return { id: type.name, title: type.displayName }; });
            _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].sortItems(items, "title");
            actionTypesPopupModel.contentComponentData.model.setItems([{ id: null, title: _this.showAllActionTypesText }].concat(items));
        };
        var actionTypesListModel = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ListModel"]([{ id: null, title: this.showAllActionTypesText }], function (item) {
            _this.model.actionTypeFilter = !!item.id ? item.id : "";
            actionTypesPopupModel.toggleVisibility();
        }, true);
        actionTypesListModel.locOwner = this.creator;
        var actionTypesPopupModel = new survey_core__WEBPACK_IMPORTED_MODULE_0__["PopupModel"]("sv-list", { model: actionTypesListModel }, "bottom", "center", undefined, undefined, undefined, undefined, undefined, onActionTypesPopupShow);
        this.filterActionTypeAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svc-logic-filter-actiontype",
            visible: false,
            component: "sv-action-bar-item-dropdown",
            popupModel: actionTypesPopupModel,
            action: function () { actionTypesPopupModel.toggleVisibility(); }
        });
        items.push(this.filterActionTypeAction);
        if (this.creator.allowEditExpressionsInTextEditor) {
            this.fastEntryAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
                id: "svc-logic-fast-entry",
                iconName: "icon-fast-entry",
                locTitleName: "pe.fastEntry",
                visible: false,
                component: "sv-action-bar-item",
                action: function () {
                    _this.model.toggleExpressionEditorIsFastEntry();
                }
            });
            items.push(this.fastEntryAction);
        }
        return items;
    };
    Object.defineProperty(TabLogicPlugin.prototype, "showAllQuestionsText", {
        get: function () { return Object(_logic_types__WEBPACK_IMPORTED_MODULE_1__["getLogicString"])("showAllQuestions"); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabLogicPlugin.prototype, "showAllActionTypesText", {
        get: function () { return Object(_logic_types__WEBPACK_IMPORTED_MODULE_1__["getLogicString"])("showAllActionTypes"); },
        enumerable: false,
        configurable: true
    });
    return TabLogicPlugin;
}());



/***/ }),

/***/ "./src/components/tabs/logic-theme.ts":
/*!********************************************!*\
  !*** ./src/components/tabs/logic-theme.ts ***!
  \********************************************/
/*! exports provided: logicCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logicCss", function() { return logicCss; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

var logicCss = {
    root: "",
    container: "",
    header: "",
    body: "sl-body",
    bodyEmpty: "",
    footer: "",
    title: "",
    description: "",
    logo: "",
    logoImage: "",
    headerText: "",
    navigationButton: "",
    completedPage: "",
    navigation: {
        complete: "",
        prev: "",
        next: "",
        start: "",
        preview: "",
        edit: ""
    },
    panel: {
        title: "",
        titleExpandable: "",
        titleOnExpand: "",
        titleOnError: "",
        description: "",
        container: "sl-panel",
        content: "",
        icon: "",
        iconExpanded: "",
        footer: "sl-panel__footer",
        requiredText: "sl-panel__required-text"
    },
    paneldynamic: {
        mainRoot: "",
        root: "",
        navigation: "",
        title: "",
        button: "",
        buttonRemove: "",
        buttonAdd: "svc-logic-operator sl-paneldynamic__add-btn",
        progressTop: "",
        progressBottom: "",
        buttonPrev: "",
        buttonNext: "",
        progressContainer: "",
        progress: "",
        progressBar: "",
        progressText: "",
        separator: "sv-hidden",
        panelWrapper: "",
        panelWrapperInRow: "sl-panel-wrapper--in-row"
    },
    progress: "",
    progressBar: "",
    progressText: "",
    progressTextInBar: "",
    page: {
        root: "",
        title: "",
        description: ""
    },
    pageTitle: "",
    pageDescription: "",
    row: "sl-row",
    rowMultiple: "sl-row--multiple",
    question: {
        mainRoot: "sl-question",
        flowRoot: "",
        asCell: "",
        header: "sl-question__header",
        headerLeft: "sl-question__header--left",
        headerTop: "",
        headerBottom: "",
        content: "",
        contentLeft: "",
        titleLeftRoot: "",
        titleOnAnswer: "",
        titleOnError: "",
        title: "sl-question__title",
        requiredText: "sl-question__required-text",
        number: "",
        description: "",
        descriptionUnderInput: "",
        comment: "",
        required: "",
        titleRequired: "",
        indent: 0,
        footer: "",
        formGroup: "",
        hasError: "",
        disabled: ""
    },
    image: { root: "" },
    error: {
        root: "",
        icon: "",
        item: "",
        locationTop: "",
        locationBottom: ""
    },
    checkbox: {
        root: "",
        item: "",
        itemSelectAll: "",
        itemNone: "",
        itemDisabled: "",
        itemChecked: "",
        itemHover: "",
        itemInline: "",
        label: "",
        labelChecked: "",
        itemControl: "",
        itemDecorator: "",
        controlLabel: "",
        materialDecorator: "",
        other: "",
        column: ""
    },
    radiogroup: {
        root: "",
        item: "",
        itemInline: "",
        label: "",
        labelChecked: "",
        itemDisabled: "",
        itemChecked: "",
        itemHover: "",
        itemControl: "",
        itemDecorator: "",
        controlLabel: "",
        materialDecorator: "",
        other: "",
        clearButton: "",
        column: ""
    },
    boolean: {
        mainRoot: "",
        root: "",
        item: "",
        control: "",
        itemChecked: "",
        itemIndeterminate: "",
        itemDisabled: "",
        label: "",
        switch: "",
        disabledLabel: "",
        itemDecorator: "",
        materialDecorator: "",
        sliderText: "",
        slider: ""
    },
    text: {
        root: "",
        small: "",
        controlDisabled: "",
        onError: ""
    },
    multipletext: {
        root: "",
        item: "",
        itemTitle: "",
        row: "",
        cell: ""
    },
    dropdown: {
        root: "",
        popup: "",
        small: "",
        control: "sl-dropdown",
        selectWrapper: "",
        other: "",
        onError: "",
        label: "",
        item: "",
        itemDisabled: "",
        itemChecked: "",
        itemHover: "",
        itemControl: "",
        itemDecorator: "",
        controlDisabled: "",
        controlLabel: "",
        materialDecorator: "",
        controlValue: "sl-dropdown__value",
        chevronButton: "",
        chevronButtonSvg: "",
        chevronButtonIconId: "",
    },
    imagepicker: {
        root: "",
        item: "",
        itemInline: "",
        itemChecked: "",
        itemDisabled: "",
        itemHover: "",
        label: "",
        itemControl: "",
        image: "",
        itemText: "",
        clearButton: "",
        other: ""
    },
    matrix: {
        mainRoot: "",
        tableWrapper: "",
        root: "",
        row: "",
        rowAdditional: "",
        rowError: "",
        cell: "",
        headerCell: "",
        label: "",
        itemValue: "",
        itemChecked: "",
        itemDisabled: "",
        itemHover: "",
        materialDecorator: "",
        itemDecorator: "",
        cellText: "",
        cellTextSelected: "",
        cellTextDisabled: ""
    },
    matrixdropdown: {
        tableWrapper: "",
        mainRoot: "",
        root: "",
        row: "",
        rowAdditional: "",
        cell: "",
        headerCell: ""
    },
    matrixdynamic: {
        tableWrapper: "",
        mainRoot: "sl-question st-row__question st-scrollable",
        root: "sl-table st-matrixdynamic",
        noHeader: "",
        row: "sl-table__row",
        rowAdditional: "sl-table__row--additional",
        cell: "sl-table__cell",
        headerCell: "sl-table__cell st-table__cell--header",
        button: "sl-btn",
        detailRow: "sl-table__row st-table__row--detail",
        detailButton: "sl-table__cell--detail-button",
        detailButtonExpanded: "sl-table__cell--detail-button--expanded",
        detailIcon: "sl-detail-panel__icon",
        detailIconExpanded: "sl-detail-panel__icon--expanded",
        detailPanelCell: "sl-table__cell--detail-panel",
        actionsCell: "sl-table__cell sl-table__cell--actions st-table__cell--actions",
        buttonAdd: "sl-matrixdynamic__add-btn",
        buttonRemove: "sl-matrixdynamic__remove-btn",
        iconAdd: "",
        iconRemove: ""
    },
    rating: {
        root: "",
        item: "",
        itemHover: "",
        selected: "",
        minText: "",
        itemText: "",
        maxText: "",
        itemDisabled: ""
    },
    comment: {
        mainRoot: "",
        root: "spg-input spg-comment sl-comment",
        small: ""
    },
    expression: "",
    file: {
        root: "",
        other: "",
        placeholderInput: "",
        preview: "",
        fileSign: "",
        fileSignBottom: "",
        fileDecorator: "",
        fileInput: "",
        noFileChosen: "",
        chooseFile: "",
        disabled: "",
        removeButton: "",
        removeButtonBottom: "",
        removeFile: "",
        removeFileSvg: "",
        wrapper: ""
    },
    signaturepad: {
        root: "",
        small: "",
        controls: "",
        placeholder: "",
        clearButton: ""
    },
    saveData: {
        root: "",
        saving: "",
        error: "",
        success: "",
        saveAgainButton: ""
    },
    window: {
        root: "",
        body: "",
        header: {
            root: "",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: ""
        }
    },
    list: {
        root: "sv-list__container sl-list",
        itemBody: "sv-list__item-body sl-list__item-body"
    },
    embeddedsurvey: {
        mainRoot: "sl-embedded-survey"
    },
    actionBar: survey_core__WEBPACK_IMPORTED_MODULE_0__["defaultActionBarCss"]
};


/***/ }),

/***/ "./src/components/tabs/logic-types.ts":
/*!********************************************!*\
  !*** ./src/components/tabs/logic-types.ts ***!
  \********************************************/
/*! exports provided: getLogicString, SurveyLogicType, SurveyLogicTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLogicString", function() { return getLogicString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicType", function() { return SurveyLogicType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicTypes", function() { return SurveyLogicTypes; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _expressionToDisplayText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../expressionToDisplayText */ "./src/expressionToDisplayText.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");




function getLogicString(name) {
    return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.lg." + name);
}
var SurveyLogicType = /** @class */ (function () {
    function SurveyLogicType(logicType, survey, options) {
        if (options === void 0) { options = null; }
        this.logicType = logicType;
        this.survey = survey;
        this.options = options;
        this.mergeWithBaseClass();
    }
    SurveyLogicType.expressionToDisplayText = function (survey, options, expression) {
        return new _expressionToDisplayText__WEBPACK_IMPORTED_MODULE_2__["ExpressionToDisplayText"](survey, options).toDisplayText(expression);
    };
    SurveyLogicType.prototype.mergeWithBaseClass = function () {
        if (!this.logicType.baseClass)
            return;
        var baseClass = SurveyLogicTypes.baseTypes[this.logicType.baseClass];
        if (!baseClass)
            return;
        for (var key in baseClass) {
            if (!this.logicType[key]) {
                this.logicType[key] = baseClass[key];
            }
        }
    };
    Object.defineProperty(SurveyLogicType.prototype, "name", {
        get: function () {
            return this.logicType.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "baseClass", {
        get: function () {
            return this.logicType.baseClass;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "propertyName", {
        get: function () {
            return this.logicType.propertyName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "hasVisibleElements", {
        get: function () {
            return this.logicType.isInvisible !== true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "dynamicPropertyName", {
        get: function () {
            return this.logicType.dynamicPropertyName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "dependedOnPropertyName", {
        get: function () {
            return this.logicType.dependedOnPropertyName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "visible", {
        get: function () {
            if (!this.showInUI)
                return false;
            if (!!this.logicType.showIf)
                return this.logicType.showIf(this.survey);
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "showTitlesInExpression", {
        get: function () {
            return !!this.options && this.options.showTitlesInExpressions;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicType.prototype.createNewObj = function (srcObj) {
        var obj = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(this.baseClass);
        if (!!srcObj) {
            obj.fromJSON(srcObj.toJSON());
        }
        //TODO
        obj["survey"] = this.survey;
        if (obj.setOwner) {
            obj.setOwner(this.survey);
        }
        return obj;
    };
    SurveyLogicType.prototype.cloneElement = function (el) {
        if (this.isTrigger)
            return this.createNewObj(el);
        return el;
    };
    SurveyLogicType.prototype.areElementsEqual = function (el1, el2) {
        if (el1 === el2)
            return true;
        if (!this.isTrigger || el1.getType() !== el2.getType())
            return false;
        return survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(el1.toJSON(), el2.toJSON());
    };
    SurveyLogicType.prototype.saveNewElement = function (el) {
        var collection = !!this.logicType.getCollection
            ? this.logicType.getCollection(this.survey)
            : null;
        if (!collection && this.isTrigger) {
            collection = this.survey.triggers;
        }
        if (!!collection && collection.indexOf(el) < 0) {
            collection.push(el);
        }
    };
    Object.defineProperty(SurveyLogicType.prototype, "showInUI", {
        get: function () {
            return this.logicType.showInUI !== false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "isUniqueItem", {
        get: function () {
            return this.logicType.isUniqueItem === true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "questionNames", {
        get: function () {
            return this.logicType.questionNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "displayName", {
        get: function () {
            return getLogicString(this.name + "Name");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicType.prototype, "description", {
        get: function () {
            return getLogicString(this.name + "Description");
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicType.prototype.getParentElement = function (element) {
        return !!this.logicType.getParentElement ? this.logicType.getParentElement(element) : null;
    };
    Object.defineProperty(SurveyLogicType.prototype, "hasSelectorChoices", {
        get: function () {
            return !!this.logicType.getSelectorChoices;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicType.prototype.getSelectorChoices = function (survey, context) {
        if (!this.hasSelectorChoices)
            return null;
        return this.logicType.getSelectorChoices(survey, context);
    };
    SurveyLogicType.prototype.getDisplayText = function (element) {
        var str = getLogicString(this.name + "Text");
        if (!!this.logicType.getDisplayText)
            return this.logicType.getDisplayText(element, str, this);
        if (!!this.logicType.getElementName) {
            element = this.getElementByName(this.logicType.getElementName(element));
        }
        var name = this.getElementDisplayName(element);
        if (!!name) {
            var parentElement = this.getParentElement(element);
            var parentName = this.getElementDisplayName(parentElement);
            return str["format"](name, parentName);
        }
        return str;
    };
    SurveyLogicType.prototype.getElementDisplayName = function (element) {
        if (!element)
            return "";
        var res = "";
        if (this.showTitlesInExpression) {
            res = element["title"];
        }
        if (!res) {
            res = element["name"] || "";
        }
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["wrapTextByCurlyBraces"])(res);
    };
    SurveyLogicType.prototype.getElementByName = function (name) {
        if (!this.survey)
            return null;
        var question = this.survey.getQuestionByName(name);
        if (!!question)
            return question;
        return this.survey.getPageByName(name);
    };
    SurveyLogicType.prototype.formatElName = function (name) {
        var el = this.getElementByName(name);
        return this.getElementDisplayName(el);
    };
    SurveyLogicType.prototype.formatExpression = function (expression) {
        return SurveyLogicType.expressionToDisplayText(this.survey, this.options, expression);
    };
    SurveyLogicType.prototype.supportContext = function (context) {
        if (!this.logicType.supportContext)
            return false;
        return this.logicType.supportContext(context);
    };
    Object.defineProperty(SurveyLogicType.prototype, "isTrigger", {
        get: function () {
            return !!this.baseClass && this.baseClass.indexOf("trigger") > -1;
        },
        enumerable: false,
        configurable: true
    });
    return SurveyLogicType;
}());

function hasMatrixColumns(survey) {
    var questions = survey.getAllQuestions();
    for (var i = 0; i < questions.length; i++) {
        var q = questions[i];
        if (q instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"]) {
            if (q.columns.length > 0)
                return true;
        }
    }
    return false;
}
var SurveyLogicTypes = /** @class */ (function () {
    function SurveyLogicTypes() {
    }
    SurveyLogicTypes.baseTypes = {
        panel: {
            showIf: function (survey) {
                return survey.getAllPanels().length > 0;
            },
            getSelectorChoices: function (survey, context) {
                return survey.getAllPanels();
            }
        },
        question: {
            showIf: function (survey) {
                return survey.getAllQuestions().length > 0;
            },
            supportContext: function (context) {
                return Array.isArray(context["templateElements"]) ||
                    (Array.isArray(context["detailElements"]) && context["detailElements"].length > 0);
            },
            getParentElement: function (element) {
                return !!element ? element.parentQuestion : null;
            },
            getSelectorChoices: function (survey, context) {
                var res = new Array();
                var questions = survey.getAllQuestions();
                var addElement = function (el) {
                    res.push(el);
                    if (el.isPanel) {
                        el.elements.forEach(function (child) { return addElement(child); });
                    }
                };
                for (var i = 0; i < questions.length; i++) {
                    var q = questions[i];
                    if (!context) {
                        res.push(q);
                    }
                    if (q instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["QuestionPanelDynamicModel"] && (!context || context === q)) {
                        q.templateElements.forEach(function (el) { return addElement(el); });
                    }
                    if (q instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"] && (!context || context === q)) {
                        q.detailElements.forEach(function (el) { return addElement(el); });
                    }
                }
                return res;
            }
        },
        matrixdropdowncolumn: {
            showIf: function (survey) {
                return hasMatrixColumns(survey);
            },
            supportContext: function (context) {
                return Array.isArray(context["columns"]);
            },
            getParentElement: function (element) {
                return !!element ? element.colOwner : null;
            },
            getSelectorChoices: function (survey, context) {
                var res = [];
                var questions = survey.getAllQuestions();
                for (var i = 0; i < questions.length; i++) {
                    var question = questions[i];
                    if (question instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"] &&
                        (!context || context === question)) {
                        var columns = question.columns;
                        for (var j = 0; j < columns.length; j++) {
                            res.push(columns[j]);
                        }
                    }
                }
                return res;
            }
        }
    };
    SurveyLogicTypes.types = [
        {
            name: "page_visibility",
            baseClass: "page",
            propertyName: "visibleIf",
            showIf: function (survey) {
                return survey.pages.length > 1;
            },
            getSelectorChoices: function (survey, context) {
                return survey.pages;
            }
        },
        {
            name: "page_enable",
            baseClass: "page",
            propertyName: "enableIf",
            showIf: function (survey) {
                return survey.pages.length > 1;
            },
            getSelectorChoices: function (survey, context) {
                return survey.pages;
            }
        },
        {
            name: "panel_visibility",
            baseClass: "panel",
            propertyName: "visibleIf",
        },
        {
            name: "panel_enable",
            baseClass: "panel",
            propertyName: "enableIf",
        },
        {
            name: "question_visibility",
            baseClass: "question",
            propertyName: "visibleIf",
        },
        {
            name: "question_enable",
            baseClass: "question",
            propertyName: "enableIf",
        },
        {
            name: "question_require",
            baseClass: "question",
            propertyName: "requiredIf",
        },
        {
            name: "question_resetValue",
            baseClass: "question",
            propertyName: "resetValueIf",
        },
        {
            name: "question_setValue",
            baseClass: "question",
            propertyName: "setValueIf",
            getDisplayText: function (element, formatStr, lt) {
                return getDisplayTextForSetValueIf(element, formatStr, lt);
            }
        },
        {
            name: "question_setValueExpression",
            baseClass: "question",
            propertyName: "setValueExpression",
            showInUI: false,
        },
        {
            name: "column_visibility",
            baseClass: "matrixdropdowncolumn",
            propertyName: "visibleIf",
        },
        {
            name: "column_enable",
            baseClass: "matrixdropdowncolumn",
            propertyName: "enableIf",
        },
        {
            name: "column_require",
            baseClass: "matrixdropdowncolumn",
            propertyName: "requiredIf",
        },
        {
            name: "column_resetValue",
            baseClass: "matrixdropdowncolumn",
            propertyName: "resetValueIf",
        },
        {
            name: "column_setValue",
            baseClass: "matrixdropdowncolumn",
            propertyName: "setValueIf",
            getDisplayText: function (element, formatStr, lt) {
                return getDisplayTextForSetValueIf(element, formatStr, lt);
            }
        },
        {
            name: "column_setValueExpression",
            baseClass: "matrixdropdowncolumn",
            propertyName: "setValueExpression",
            showInUI: false,
        },
        {
            name: "expression_expression",
            baseClass: "expression",
            propertyName: "expression",
            showInUI: false,
        },
        {
            name: "matrixdropdowncolumn_totalExpression",
            baseClass: "matrixdropdowncolumn",
            propertyName: "totalExpression",
            showInUI: false,
        },
        {
            name: "trigger_complete",
            baseClass: "completetrigger",
            propertyName: "expression",
            isUniqueItem: true,
            isInvisible: true
        },
        {
            name: "trigger_setvalue",
            baseClass: "setvaluetrigger",
            propertyName: "expression",
            dynamicPropertyName: "setValue",
            dependedOnPropertyName: "setToName",
            questionNames: ["setToName"],
            getDisplayText: function (element, formatStr, lt) {
                if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(element["setValue"])) {
                    formatStr = getLogicString("trigger_setvalueEmptyText");
                }
                return formatStr["format"](lt.formatElName(element["setToName"]), element["setValue"]);
            },
        },
        {
            name: "trigger_copyvalue",
            baseClass: "copyvaluetrigger",
            propertyName: "expression",
            questionNames: ["setToName", "fromName"],
            getDisplayText: function (element, formatStr, lt) {
                return formatStr["format"](lt.formatElName(element["setToName"]), lt.formatElName(element["fromName"]));
            },
        },
        {
            name: "trigger_skip",
            baseClass: "skiptrigger",
            propertyName: "expression",
            questionNames: ["gotoName"],
            isUniqueItem: true,
            getElementName: function (element) {
                return element["gotoName"];
            },
        },
        {
            name: "trigger_runExpression",
            baseClass: "runexpressiontrigger",
            propertyName: "expression",
            questionNames: ["setToName"],
            getDisplayText: function (element, formatStr, lt) {
                var res = getLogicString("trigger_runExpressionText1");
                res = res["format"](lt.formatExpression(element["runExpression"]));
                var setToName = element["setToName"];
                if (!!setToName) {
                    var str = getLogicString("trigger_runExpressionText2");
                    res += str["format"](lt.formatElName(element["setToName"]));
                }
                return res;
            },
        },
        {
            name: "completedHtmlOnCondition",
            baseClass: "htmlconditionitem",
            propertyName: "expression",
            isUniqueItem: true,
            getCollection: function (survey) {
                return survey.completedHtmlOnCondition;
            },
        },
        {
            name: "trigger_runExpression_Expression",
            baseClass: "runexpressiontrigger",
            propertyName: "runExpression",
            showInUI: false,
        },
        {
            name: "question_expressionValidator",
            baseClass: "expressionvalidator",
            propertyName: "expression",
            showInUI: false,
        },
        {
            name: "matrix_rowsVisibleIf",
            baseClass: "matrix",
            propertyName: "rowsVisibleIf",
            showInUI: false,
        },
        {
            name: "matrix_columnsVisibleIf",
            baseClass: "matrix",
            propertyName: "columnsVisibleIf",
            showInUI: false,
        },
        {
            name: "matrixdropdown_rowsVisibleIf",
            baseClass: "matrixdropdown",
            propertyName: "rowsVisibleIf",
            showInUI: false,
        },
        {
            name: "select_choicesVisibleIf",
            baseClass: "selectbase",
            propertyName: "choicesVisibleIf",
            showInUI: false,
        },
        {
            name: "select_choicesEnableIf",
            baseClass: "selectbase",
            propertyName: "choicesEnableIf",
            showInUI: false,
        },
        {
            name: "itemvalue_visibleIf",
            baseClass: "itemvalue",
            propertyName: "visibleIf",
            showInUI: false,
        },
        {
            name: "itemvalue_enableIf",
            baseClass: "itemvalue",
            propertyName: "enableIf",
            showInUI: false,
        },
        {
            name: "calculatedValue",
            baseClass: "calculatedvalue",
            propertyName: "expression",
            showInUI: false,
        },
    ];
    return SurveyLogicTypes;
}());

function getDisplayTextForSetValueIf(element, formatStr, lt) {
    var name = lt.formatElName(element["name"]);
    var exp = element["setValueExpression"];
    if (!exp) {
        return getLogicString("trigger_setvalueEmptyText")["format"](name);
    }
    return formatStr["format"](name, exp);
}


/***/ }),

/***/ "./src/components/tabs/logic-ui.scss":
/*!*******************************************!*\
  !*** ./src/components/tabs/logic-ui.scss ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/logic-ui.ts":
/*!*****************************************!*\
  !*** ./src/components/tabs/logic-ui.ts ***!
  \*****************************************/
/*! exports provided: SurveyLogicUI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicUI", function() { return SurveyLogicUI; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _property_grid_condition_survey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../property-grid/condition-survey */ "./src/property-grid/condition-survey.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _logic_item_editor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logic-item-editor */ "./src/components/tabs/logic-item-editor.ts");
/* harmony import */ var _logic_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logic-types */ "./src/components/tabs/logic-types.ts");
/* harmony import */ var _logic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./logic */ "./src/components/tabs/logic.ts");
/* harmony import */ var _property_grid_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../property-grid/index */ "./src/property-grid/index.ts");
/* harmony import */ var _utils_actions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/actions */ "./src/utils/actions.ts");
/* harmony import */ var _logic_theme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logic-theme */ "./src/components/tabs/logic-theme.ts");










__webpack_require__(/*! ./logic-ui.scss */ "./src/components/tabs/logic-ui.scss");

var SurveyLogicUI = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyLogicUI, _super);
    function SurveyLogicUI(survey, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, survey, options) || this;
        _this.survey = survey;
        _this.options = options;
        _this.itemUIHash = {};
        if (!_this.options)
            _this.options = new _creator_settings__WEBPACK_IMPORTED_MODULE_3__["EmptySurveyCreatorOptions"]();
        _this.setupToolbarItems();
        _this.update();
        return _this;
    }
    SurveyLogicUI.prototype.update = function (survey, options) {
        var _this = this;
        if (survey === void 0) { survey = null; }
        if (options === void 0) { options = null; }
        _super.prototype.update.call(this, survey, options);
        var newItemsSurveyValue = this.options.createSurvey(this.getLogicItemSurveyJSON(), "logic-items", this);
        newItemsSurveyValue.css = _logic_theme__WEBPACK_IMPORTED_MODULE_9__["logicCss"];
        this.itemsSurveyValue = newItemsSurveyValue;
        this.itemsSurvey.onMatrixRowRemoving.add(function (sender, options) {
            var item = _this.visibleItems[options.rowIndex];
            options.allow = _this.canRemoveItem(item);
        });
        this.itemsSurvey.onMatrixRowRemoved.add(function (sender, options) {
            var item = _this.visibleItems[options.rowIndex];
            var isDeleteEditable = item === _this.editableItem;
            _this.removeItem(item, false);
            if (isDeleteEditable) {
                _this.mode = "view";
                _this.updateNewActionState();
            }
            _this.expressionEditorCanShowBuilder = !!_this.editableItem;
        });
        this.itemsSurvey.onGetMatrixRowActions.add(function (sender, options) {
            Object(_utils_actions__WEBPACK_IMPORTED_MODULE_8__["updateMatrixLogicExpandAction"])(options.question, options.actions, options.row);
            Object(_utils_actions__WEBPACK_IMPORTED_MODULE_8__["updateMatrixLogicRemoveAction"])(options.question, options.actions, options.row);
        });
        this.updateItemsSurveyData();
        this.onReadOnlyChanged();
    };
    SurveyLogicUI.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        for (var key in this.itemUIHash) {
            var itemUI = this.itemUIHash[key];
            itemUI.expressionEditor.dispose();
            itemUI.itemEditor.dispose();
        }
        this.itemUIHash = {};
    };
    SurveyLogicUI.prototype.addNewUI = function () {
        if (this.items.length == 0 || !this.items[this.items.length - 1].isNew) {
            this.addNew();
        }
        var rows = this.matrixItems.visibleRows;
        rows[rows.length - 1].showDetailPanel();
    };
    SurveyLogicUI.prototype.toggleExpressionEditorIsFastEntry = function () {
        this.expressionEditorIsFastEntry = !this.expressionEditorIsFastEntry;
        if (!!this.expressionEditor) {
            this.expressionEditor.setIsFastEntry(this.expressionEditorIsFastEntry);
        }
    };
    SurveyLogicUI.prototype.updateEditableItemIsModifiedState = function () {
        if (!!this.editableItem) {
            this.editableItem.isModified = !!this.itemEditor && !!this.expressionEditor && (this.itemEditor.isModified || this.expressionEditor.isModified(this.editableItem.expression));
        }
    };
    SurveyLogicUI.prototype.getUnsavedItems = function () {
        var res = [];
        for (var i = 0; i < this.visibleItems.length; i++) {
            var item = this.visibleItems[i];
            var itemUI = this.findLogicItemUI(item);
            if (!itemUI)
                continue;
            if (item.isNew) {
                if (!itemUI.expressionEditor.isEmpty() || !itemUI.itemEditor.isEmpty()) {
                    res.push(item);
                }
            }
            else {
                if (item.isModified) {
                    res.push(item);
                }
            }
        }
        return res;
    };
    SurveyLogicUI.prototype.getErroredItem = function (items) {
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (this.isErroredItem(item))
                return item;
        }
        return null;
    };
    SurveyLogicUI.prototype.isErroredItem = function (item) {
        var itemUI = this.findLogicItemUI(item);
        if (!itemUI)
            return false;
        return itemUI.expressionEditor.hasErrors() || itemUI.itemEditor.hasErrors();
    };
    SurveyLogicUI.prototype.showErroredItem = function (item) {
        var index = this.visibleItems.indexOf(item);
        var rows = this.matrixItems.visibleRows;
        var row = index > -1 && index < rows.length ? rows[index] : null;
        if (!!row) {
            rows.forEach(function (r) { return r.hideDetailPanel(); });
            this.mode = "view";
            row.showDetailPanel();
            this.hasErrorInUI();
        }
    };
    SurveyLogicUI.prototype.saveItem = function (item) {
        if (this.isErroredItem(item))
            return;
        !!this.options && this.options.startUndoRedoTransaction();
        this.doItemApply(item);
        !!this.options && this.options.stopUndoRedoTransaction();
    };
    SurveyLogicUI.prototype.tryLeaveUI = function (resultFunc) {
        var _this = this;
        this.updateEditableItemIsModifiedState();
        var unsavedItems = this.getUnsavedItems();
        if (unsavedItems.length === 0) {
            !!resultFunc && resultFunc(true);
            return true;
        }
        var erroredItem = this.getErroredItem(unsavedItems);
        var onLeavingFunc = function () {
            unsavedItems.forEach(function (item) { return _this.saveItem(item); });
            !!resultFunc && resultFunc(true);
        };
        if (!erroredItem) {
            onLeavingFunc();
            return true;
        }
        var onStayingFunc = function () {
            _this.showErroredItem(erroredItem);
            !!resultFunc && resultFunc(false);
        };
        if (this.confirmLeavingOnError(onLeavingFunc, onStayingFunc)) {
            return undefined;
        }
        onStayingFunc();
        return false;
    };
    SurveyLogicUI.prototype.confirmLeavingOnError = function (onLeaving, onStaying) {
        if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog)
            return false;
        var locStr = new survey_core__WEBPACK_IMPORTED_MODULE_1__["LocalizableString"](undefined);
        locStr.text = this.getLocString("ed.lg.uncompletedRule_text");
        var popupModel = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog({
            componentName: "sv-string-viewer",
            data: { locStr: locStr, locString: locStr, model: locStr },
            onApply: function () {
                onLeaving();
                return true;
            },
            onCancel: function () {
                onStaying();
                return true;
            },
            title: this.getLocString("ed.lg.uncompletedRule_title"),
            displayMode: "popup"
        }, this.options.rootElement);
        var toolbar = popupModel.footerToolbar;
        var applyBtn = toolbar.getActionById("apply");
        var cancelBtn = toolbar.getActionById("cancel");
        cancelBtn.title = this.getLocString("ed.lg.uncompletedRule_cancel");
        applyBtn.title = this.getLocString("ed.lg.uncompletedRule_apply");
        applyBtn.innerCss += " svc-logic-tab__leave-apply-button";
        popupModel.width = "800px";
        return true;
    };
    SurveyLogicUI.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "items") {
            this.updateItemsSurveyData();
        }
    };
    SurveyLogicUI.prototype.onReadOnlyChanged = function () {
        var _this = this;
        if (!this.itemsSurvey)
            return;
        this.itemsSurvey.mode = this.readOnly ? "display" : "edit";
        Object.keys(this.itemUIHash || {}).forEach(function (id) {
            _this.updateEditModeLogicItem(_this.itemUIHash[id]);
        });
    };
    Object.defineProperty(SurveyLogicUI.prototype, "expressionEditor", {
        get: function () {
            return this.expressionEditorValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "itemEditor", {
        get: function () {
            return this.itemEditorValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicUI.prototype.getExpressionEditor = function (item) {
        return this.getLogicItemUI(item).expressionEditor;
    };
    SurveyLogicUI.prototype.getLogicItemEditor = function (item) {
        return this.getLogicItemUI(item).itemEditor;
    };
    SurveyLogicUI.prototype.updateEditModeLogicItem = function (item) {
        if (!item)
            return;
        item.expressionEditor.editSurvey.mode = this.readOnly ? "display" : "edit";
        item.itemEditor.editSurvey.mode = this.readOnly ? "display" : "edit";
    };
    SurveyLogicUI.prototype.getLogicItemUI = function (item) {
        var res = this.findLogicItemUI(item);
        if (!res) {
            var context = item.getContext();
            res = { expressionEditor: this.createExpressionPropertyEditor(), itemEditor: new _logic_item_editor__WEBPACK_IMPORTED_MODULE_4__["LogicItemEditor"](item, this.options) };
            this.updateEditModeLogicItem(res);
            res.expressionEditor.context = context;
            res.itemEditor.context = context;
            res.expressionEditor.text = item.expression;
            res.expressionEditor.onContextChanged = function (context) {
                res.itemEditor.context = context;
            };
            this.itemUIHash[item.id] = res;
        }
        return res;
    };
    SurveyLogicUI.prototype.findLogicItemUI = function (item) {
        return this.itemUIHash[item.id];
    };
    Object.defineProperty(SurveyLogicUI.prototype, "expressionSurvey", {
        get: function () {
            return this.expressionEditor.editSurvey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "itemEditorSurvey", {
        get: function () {
            return this.itemEditor.editSurvey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "itemsSurvey", {
        get: function () {
            return this.itemsSurveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "hasItems", {
        get: function () {
            return this.items.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "matrixItems", {
        get: function () {
            return this.itemsSurvey.getQuestionByName("items");
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogicUI.prototype.onStartEditing = function () {
        _super.prototype.onStartEditing.call(this);
        this.expressionEditorValue = this.getExpressionEditor(this.editableItem);
        this.itemEditorValue = this.getLogicItemEditor(this.editableItem);
        this.expressionEditorIsFastEntry = false;
        this.expressionEditor.setIsFastEntry(this.expressionEditorIsFastEntry);
        this.expressionEditorCanShowBuilder = _property_grid_condition_survey__WEBPACK_IMPORTED_MODULE_2__["ConditionEditor"].canBuildExpression(this.expressionEditor.text);
    };
    SurveyLogicUI.prototype.onEndEditing = function () {
        this.updateEditableItemIsModifiedState();
        _super.prototype.onEndEditing.call(this);
        this.expressionEditorValue = null;
        this.itemEditorValue = null;
    };
    SurveyLogicUI.prototype.onEditableItemApply = function () {
        this.doItemApply(this.editableItem);
        if (!this.editableItem.isSuitable(this.questionFilter, this.actionTypeFilter)) {
            this.questionFilter = "";
            this.actionTypeFilter = "";
        }
        else {
            this.updateItemsSurveyData();
        }
    };
    SurveyLogicUI.prototype.doItemApply = function (item) {
        var itemUI = this.findLogicItemUI(item);
        if (!itemUI)
            return;
        itemUI.expressionEditor.apply();
        itemUI.itemEditor.apply();
        item.apply(itemUI.expressionEditor.text);
        if (item.actions.length != itemUI.itemEditor.panels.length) {
            itemUI.itemEditor.setEditableItem(item);
        }
        itemUI.itemEditor.resetModified();
        item.isNew = false;
    };
    SurveyLogicUI.prototype.hasErrorInUI = function () {
        var creator = this.survey.creator;
        if (this.expressionEditor.hasErrorInUI()) {
            this.errorText = this.expressionEditor.errorText;
            return true;
        }
        if (this.itemEditor.hasErrors()) {
            this.errorText = Object(_logic_types__WEBPACK_IMPORTED_MODULE_5__["getLogicString"])("actionInvalid");
            !!creator &&
                creator.notify(this.errorText, "error");
            return true;
        }
        return false;
    };
    SurveyLogicUI.prototype.getExpressionText = function () {
        return this.expressionEditor.text;
    };
    SurveyLogicUI.prototype.getEditingActions = function () {
        return this.itemEditor.getEditingActions();
    };
    SurveyLogicUI.prototype.getLogicItemSurveyJSON = function () {
        var creator = this.survey.creator;
        var json = (creator && creator.useTableViewInLogicTab) ? this.getTwoColumnsLayout() : this.getOneColumnLayout();
        Object(_property_grid_index__WEBPACK_IMPORTED_MODULE_7__["setSurveyJSONForPropertyGrid"])(json);
        return json;
    };
    SurveyLogicUI.prototype.getTwoColumnsLayout = function () {
        return {
            elements: [
                {
                    type: "matrixdynamic",
                    name: "items",
                    titleLocation: "hidden",
                    detailPanelMode: "underRowSingle",
                    allowAddRows: false,
                    allowAdaptiveActions: false,
                    rowCount: 0,
                    columns: [
                        {
                            cellType: "linkvalue",
                            name: "conditions",
                            title: this.getLocString("ed.lg.conditions")
                        },
                        {
                            cellType: "linkvalue",
                            name: "actions",
                            title: this.getLocString("ed.lg.actions")
                        }
                    ]
                }
            ]
        };
    };
    SurveyLogicUI.prototype.getOneColumnLayout = function () {
        return {
            elements: [
                {
                    type: "matrixdynamic",
                    name: "items",
                    titleLocation: "hidden",
                    showColumnHeader: false,
                    detailPanelMode: "underRowSingle",
                    allowAddRows: false,
                    allowAdaptiveActions: false,
                    rowCount: 0,
                    showHeader: false,
                    columns: [
                        {
                            cellType: "linkvalue",
                            name: "rules",
                            showTooltip: true,
                            width: "100%"
                        }
                    ]
                }
            ]
        };
    };
    SurveyLogicUI.prototype.createExpressionPropertyEditor = function () {
        var _this = this;
        var res = new _property_grid_condition_survey__WEBPACK_IMPORTED_MODULE_2__["ConditionEditor"](this.survey, null, this.options);
        res.isModal = false;
        res.editSurvey.onValueChanged.add(function (sender, options) {
            if (options.name === "textEditor") {
                _this.expressionEditorCanShowBuilder = _property_grid_condition_survey__WEBPACK_IMPORTED_MODULE_2__["ConditionEditor"].canBuildExpression(options.value);
            }
        });
        return res;
    };
    SurveyLogicUI.prototype.getVisibleItems = function () {
        var _this = this;
        return this.items.filter(function (item) { return item.isNew || item.isSuitable(_this.questionFilter, _this.actionTypeFilter); });
    };
    SurveyLogicUI.prototype.getDataFromItem = function (item) {
        var creator = this.survey.creator;
        if (creator && creator.useTableViewInLogicTab) {
            return {
                conditions: item.expressionText,
                actions: item.actionsText
            };
        }
        else {
            return { rules: this.getLogicItemDisplayText(item) };
        }
    };
    SurveyLogicUI.prototype.getLogicItemDisplayText = function (item) {
        var text = item.getDisplayText();
        if (!this.options)
            return text;
        return this.options.onLogicGetTitleCallback(item.expression, item.expressionText, text, item);
    };
    SurveyLogicUI.prototype.updateItemsSurveyData = function () {
        var _this = this;
        if (!this.itemsSurvey)
            return;
        var data = [];
        this.visibleItems = this.getVisibleItems();
        this.visibleItems.forEach(function (item) {
            data.push(_this.getDataFromItem(item));
        });
        this.matrixItems.onHasDetailPanelCallback = function (row) { return true; };
        this.matrixItems.onCreateDetailPanelCallback = function (row, panel) {
            row.onDetailPanelShowingChanged = function () {
                _this.expressionEditorCanShowBuilder = row.isDetailPanelShowing;
                if (row.isDetailPanelShowing) {
                    if (_this.mode === "view") {
                        var logicItem = _this.visibleItems[row.rowIndex - 1];
                        _this.editItem(logicItem);
                    }
                    var condQuestion = panel.getQuestionByName("conditions");
                    var actionsQuestion = panel.getQuestionByName("actions");
                    condQuestion.embeddedSurvey = _this.expressionEditor.editSurvey;
                    actionsQuestion.embeddedSurvey = _this.itemEditorValue.editSurvey;
                    _this.updateRowIsAdditionalClasses(row.rowIndex - 1, false);
                }
                else {
                    _this.mode = "view";
                    _this.updateRenderedRows();
                }
                _this.updateNewActionState();
            };
            panel.addNewQuestion("embeddedsurvey", "conditions");
            panel.addNewQuestion("embeddedsurvey", "actions");
            panel.footerActions.push({
                id: "saveDetailPanel",
                innerCss: "sl-panel__done-button",
                title: _this.getLocString("pe.doneEditing"),
                action: function () {
                    if (_this.saveEditableItem()) {
                        row.hideDetailPanel(true);
                    }
                }
            });
        };
        this.matrixItems.onCellCreatedCallback = function (options) {
            options.cell.question.linkClickCallback = function () {
                if (options.row.isDetailPanelShowing) {
                    options.row.hideDetailPanel();
                }
                else {
                    options.row.showDetailPanel();
                }
            };
            options.cell.question.showClear = false;
            options.cell.question.allowClear = false;
        };
        this.matrixItems.value = data;
        this.updateRenderedRows();
    };
    SurveyLogicUI.prototype.updateRenderedRows = function () {
        var _this = this;
        this.visibleItems.forEach(function (_, index) {
            _this.updateRowIsAdditionalClasses(index, _this.visibleItems[index].isModified || _this.visibleItems[index].isNew);
        });
    };
    SurveyLogicUI.prototype.updateRowIsAdditionalClasses = function (index, isAdditionalClasses) {
        if (!!this.matrixItems.renderedTable) {
            var visibleRows = this.matrixItems.renderedTable.rows.filter(function (row) { return row.visible; });
            visibleRows[index].isAdditionalClasses = isAdditionalClasses;
        }
    };
    SurveyLogicUI.prototype.updateNewActionState = function () {
        this.addNewButton.enabled = this.mode !== "new";
    };
    SurveyLogicUI.prototype.setupToolbarItems = function () {
        var _this = this;
        this.addNewButton = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-logic-addNew",
            title: this.addNewText,
            tooltip: this.addNewText,
            component: "sv-action-bar-item",
            enabled: true,
            action: function () {
                _this.addNewUI();
            }
        });
    };
    Object.defineProperty(SurveyLogicUI.prototype, "addNewText", {
        get: function () {
            return Object(_logic_types__WEBPACK_IMPORTED_MODULE_5__["getLogicString"])("addNewItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogicUI.prototype, "emptyTabPlaceholder", {
        get: function () {
            return Object(_logic_types__WEBPACK_IMPORTED_MODULE_5__["getLogicString"])("empty_tab");
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyLogicUI.prototype, "itemsSurveyValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyLogicUI.prototype, "expressionEditorIsFastEntry", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyLogicUI.prototype, "expressionEditorCanShowBuilder", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (value, target) {
                target.updateItemsSurveyData();
            }
        })
    ], SurveyLogicUI.prototype, "questionFilter", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (value, target) {
                target.updateItemsSurveyData();
            }
        })
    ], SurveyLogicUI.prototype, "actionTypeFilter", void 0);
    return SurveyLogicUI;
}(_logic__WEBPACK_IMPORTED_MODULE_6__["SurveyLogic"]));



/***/ }),

/***/ "./src/components/tabs/logic.scss":
/*!****************************************!*\
  !*** ./src/components/tabs/logic.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/logic.ts":
/*!**************************************!*\
  !*** ./src/components/tabs/logic.ts ***!
  \**************************************/
/*! exports provided: initLogicOperator, LogicEvent, SurveyLogic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initLogicOperator", function() { return initLogicOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogicEvent", function() { return LogicEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLogic", function() { return SurveyLogic; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _logic_items__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logic-items */ "./src/components/tabs/logic-items.ts");
/* harmony import */ var _logic_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logic-types */ "./src/components/tabs/logic-types.ts");






__webpack_require__(/*! ./logic.scss */ "./src/components/tabs/logic.scss");
function initLogicOperator(question) {
    question.popupModel.isFocusedContent = true;
    question.popupModel.setWidthByTarget = false;
    question.popupModel.positionMode = "flex";
    question.popupModel.showPointer = true;
    question.dropdownListModel["listModel"].searchEnabled = question.searchEnabled;
}
var LogicEvent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogicEvent, _super);
    function LogicEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogicEvent;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]));

var SurveyLogic = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyLogic, _super);
    function SurveyLogic(survey, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this) || this;
        _this.survey = survey;
        _this.options = options;
        _this.invisibleItems = [];
        /**
         * The event is called when logic item is saved.
         * options.item is the saved logic item.
         */
        _this.onLogicItemSaved = new LogicEvent();
        /**
         * The event is called before logic item is saved. You can set options.error to non empty string to show error instead of saving the item.
         * You can use options.item.actions to access actions and optionally set errorText to a particular action.
         * options.item is the editing logic item. options.item.actions contains the old actions.
         * options.actions is the array of  logic actions that user edit and create.
         * usedNamesInExpression - the string list of all variables (questions, calculatedValues, and so on) that are used in expression
         * error - the error string. It is empty by default. You have to set it to non-empty string to show the error on saving.
         */
        _this.onLogicItemValidation = new LogicEvent();
        /**
         * The event is called before logic item is being removed.
         * options.allowRemove is the option you can set to false and prevent removing.
         * options.item is the logic item to remove.
         */
        _this.onLogicItemRemoving = new LogicEvent();
        /**
         * The event is called when logic item is removed.
         * options.item is the removed logic item.
         */
        _this.onLogicItemRemoved = new LogicEvent();
        if (!_this.options)
            _this.options = new _creator_settings__WEBPACK_IMPORTED_MODULE_3__["EmptySurveyCreatorOptions"]();
        _this.readOnly = _this.optionsReadOnly;
        _this.update();
        return _this;
    }
    Object.defineProperty(SurveyLogic, "visibleActions", {
        get: function () {
            return _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].logic.visibleActions;
        },
        set: function (val) {
            _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].logic.visibleActions = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogic, "types", {
        get: function () {
            return _logic_types__WEBPACK_IMPORTED_MODULE_5__["SurveyLogicTypes"].types;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogic.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onEndEditing();
        this.survey = undefined;
    };
    Object.defineProperty(SurveyLogic.prototype, "editableItem", {
        get: function () {
            return this.editableItemValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyLogic.prototype, "mode", {
        /**
         * There are 3 modes: view, new, edit
         */
        get: function () { return this.modeValue; },
        set: function (val) {
            if (this.modeValue === val)
                return;
            var oldValue = this.mode;
            this.modeValue = val;
            this.errorText = "";
            if (val == "view" && (oldValue == "edit" || oldValue == "new")) {
                this.onEndEditing();
            }
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogic.prototype.getLocString = function (name) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(name);
    };
    SurveyLogic.prototype.getTypeByName = function (name) {
        for (var i = 0; i < this.logicTypes.length; i++) {
            if (this.logicTypes[i].name == name)
                return this.logicTypes[i];
        }
        return null;
    };
    SurveyLogic.prototype.update = function (survey, options) {
        if (survey === void 0) { survey = null; }
        if (options === void 0) { options = null; }
        if (!!survey) {
            this.survey = survey;
        }
        if (!!options) {
            this.options = options;
        }
        this.logicTypes = this.createLogicTypes();
        this.updateVisibleItems();
        this.invisibleItems = this.buildItems(false);
        this.readOnly = this.optionsReadOnly;
        this.mode = "view";
    };
    SurveyLogic.prototype.updateVisibleItems = function () {
        this.items = this.buildItems(true);
        this.editableItemValue = null;
    };
    Object.defineProperty(SurveyLogic.prototype, "optionsReadOnly", {
        get: function () {
            return !!this.options && this.options.readOnly;
        },
        enumerable: false,
        configurable: true
    });
    SurveyLogic.prototype.saveEditableItem = function () {
        if (!this.editableItem || this.hasError())
            return false;
        !!this.options && this.options.startUndoRedoTransaction();
        this.onEditableItemApply();
        var hasInList = this.items.indexOf(this.editableItem) < 0;
        if (hasInList) {
            this.items.push(this.editableItem);
        }
        var isNew = !hasInList || this.editableItem.isNew;
        this.editableItem.isNew = false;
        this.onItemChanged(this.editableItem, isNew ? "new" : "modify");
        !!this.options && this.options.stopUndoRedoTransaction();
        this.onLogicItemSaved.fire(this, { item: this.editableItem });
        return true;
    };
    SurveyLogic.prototype.saveEditableItemAndBack = function () {
        var res = this.saveEditableItem();
        if (res) {
            this.mode = "view";
        }
        return res;
    };
    SurveyLogic.prototype.onEditableItemApply = function () { };
    SurveyLogic.prototype.onItemChanged = function (item, changeType) {
        if (!!this.onChangedCallback) {
            this.onChangedCallback(item, changeType);
        }
    };
    SurveyLogic.prototype.renameQuestion = function (oldName, newName) {
        this.items.forEach(function (item) { return item.renameQuestion(oldName, newName); });
        this.invisibleItems.forEach(function (item) { return item.renameQuestion(oldName, newName); });
    };
    SurveyLogic.prototype.renameItemValue = function (item, oldValue) {
        var question = this.getItemValueQuestion(item, oldValue);
        if (!question)
            return;
        this.items.forEach(function (lItem) { return lItem.renameItemValue(question, item, oldValue); });
        this.invisibleItems.forEach(function (lItem) { return lItem.renameItemValue(question, item, oldValue); });
    };
    SurveyLogic.prototype.renameRowValue = function (item, oldValue) {
        var question = this.getItemValueQuestion(item, oldValue);
        if (!question)
            return;
        this.items.forEach(function (lItem) { return lItem.renameRowValue(question, item, oldValue); });
        this.invisibleItems.forEach(function (lItem) { return lItem.renameRowValue(question, item, oldValue); });
    };
    SurveyLogic.prototype.renameColumn = function (column, oldName) {
        var question = column.colOwner;
        if (!question || !question.isQuestion)
            return;
        this.items.forEach(function (lItem) { return lItem.renameColumn(question, column, oldName); });
        this.invisibleItems.forEach(function (lItem) { return lItem.renameColumn(question, column, oldName); });
    };
    SurveyLogic.prototype.getItemValueQuestion = function (item, oldValue) {
        if (!item.locOwner || survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(oldValue) || survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(item.value))
            return null;
        var owner = item.locOwner;
        return owner.isQuestion ? owner : null;
    };
    SurveyLogic.prototype.removeQuestion = function (name) {
        this.removeQuestionCore(name, this.items);
        this.removeQuestionCore(name, this.invisibleItems);
    };
    SurveyLogic.prototype.hasError = function () {
        if (!this.editableItem)
            return false;
        if (this.hasErrorInUI())
            return true;
        var exp = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ExpressionRunner"](this.getExpressionText());
        var options = {
            item: this.editableItem,
            error: "",
            usedNamesInExpression: exp.getVariables(),
            actions: this.getEditingActions(),
        };
        this.onLogicItemValidation.fire(this, options);
        this.errorText = options.error;
        var creator = this.survey.creator;
        if (!!this.errorText && !!creator)
            creator.notify(this.errorText, "error");
        return !!this.errorText;
    };
    SurveyLogic.prototype.getUsedQuestions = function () {
        var _this = this;
        var names = {};
        this.items.forEach(function (item) {
            item.getQuestionNames().forEach(function (name) {
                var question = _this.survey.getQuestionByName(name);
                if (!!question && !names[name]) {
                    names[name] = question;
                }
            });
        });
        var res = [];
        Object.keys(names).forEach(function (item) {
            if (!!names[item]) {
                res.push(names[item]);
            }
        });
        return res;
    };
    SurveyLogic.prototype.getUsedActionTypes = function () {
        var _this = this;
        var types = {};
        this.items.forEach(function (item) {
            item.getActionTypes().forEach(function (name) {
                if (!types[name]) {
                    types[name] = _this.logicTypes.filter(function (logicType) { return logicType.name == name; })[0];
                }
            });
        });
        var res = [];
        Object.keys(types).forEach(function (item) {
            if (!!types[item]) {
                res.push(types[item]);
            }
        });
        return res;
    };
    SurveyLogic.prototype.hasErrorInUI = function () {
        return false;
    };
    SurveyLogic.prototype.getExpressionText = function () {
        return "";
    };
    SurveyLogic.prototype.getEditingActions = function () {
        return [];
    };
    SurveyLogic.prototype.onReadOnlyChanged = function () { };
    SurveyLogic.prototype.removeQuestionCore = function (name, items) {
        for (var i = 0; i < items.length; i++) {
            items[i].removeQuestion(name);
        }
    };
    SurveyLogic.prototype.addNew = function () {
        !!this.options && this.options.startUndoRedoTransaction();
        var logicItem = new _logic_items__WEBPACK_IMPORTED_MODULE_4__["SurveyLogicItem"](this);
        logicItem.isNew = true;
        this.items.push(logicItem);
        this.editItemCore(logicItem);
        !!this.options && this.options.stopUndoRedoTransaction();
    };
    SurveyLogic.prototype.editItem = function (item) {
        !!this.options && this.options.startUndoRedoTransaction();
        this.editItemCore(item);
        !!this.options && this.options.stopUndoRedoTransaction();
    };
    SurveyLogic.prototype.editItemCore = function (item) {
        this.editableItemValue = item;
        this.onStartEditing();
        this.mode = item.isNew ? "new" : "edit";
    };
    SurveyLogic.prototype.onStartEditing = function () { };
    SurveyLogic.prototype.onEndEditing = function () {
        this.editableItemValue = null;
    };
    SurveyLogic.prototype.canRemoveItem = function (item) {
        var eventOptions = { item: item, allowRemove: true };
        this.onLogicItemRemoving.fire(this, eventOptions);
        return eventOptions.allowRemove;
    };
    SurveyLogic.prototype.removeItem = function (item, checkCanRemove) {
        if (checkCanRemove === void 0) { checkCanRemove = true; }
        if (checkCanRemove && !this.canRemoveItem(item))
            return;
        !!this.options && this.options.startUndoRedoTransaction();
        item.apply("");
        var index = this.items.indexOf(item);
        if (index > -1) {
            this.items.splice(index, 1);
        }
        this.onItemChanged(item, "delete");
        !!this.options && this.options.stopUndoRedoTransaction();
        this.onLogicItemRemoved.fire(this, { item: item });
    };
    SurveyLogic.prototype.addAction = function (lt, element) {
        if (element === void 0) { element = null; }
        var action = this.createNewAction(lt, element);
        this.editableItem.addNewAction(action);
        return action;
    };
    SurveyLogic.prototype.addNewAction = function () {
        return this.addAction(null, null);
    };
    SurveyLogic.prototype.createNewAction = function (lt, element) {
        var action = new _logic_items__WEBPACK_IMPORTED_MODULE_4__["SurveyLogicAction"](lt, element, this.survey);
        return action;
    };
    SurveyLogic.prototype.getVisibleLogicTypes = function () {
        var res = [];
        var logicTypes = this.logicTypes;
        for (var i = 0; i < logicTypes.length; i++) {
            if (logicTypes[i].visible) {
                res.push(logicTypes[i]);
            }
        }
        return res;
    };
    SurveyLogic.prototype.removeAction = function (action) {
        if (!this.editableItem)
            return;
        this.editableItem.removeAction(action);
        if (this.editableItem.actions.length == 0) {
            this.addNewAction();
        }
    };
    SurveyLogic.prototype.getExpressionAsDisplayText = function (expression) {
        return _logic_types__WEBPACK_IMPORTED_MODULE_5__["SurveyLogicType"].expressionToDisplayText(this.survey, this.options, expression);
    };
    SurveyLogic.prototype.buildItems = function (showInUI) {
        var res = [];
        var hash = {};
        var elements = this.getAllElements();
        for (var i = 0; i < elements.length; i++) {
            this.buildItemsByElement(elements[i], res, hash, showInUI);
        }
        return res;
    };
    SurveyLogic.prototype.getAllElements = function () {
        var res = [];
        this.AddElements(this.survey.pages, res);
        this.AddElements(_logic_types__WEBPACK_IMPORTED_MODULE_5__["SurveyLogicTypes"].baseTypes.question.getSelectorChoices(this.survey, null), res);
        this.AddElements(this.survey.getAllPanels(), res);
        this.AddElements(this.survey.triggers, res);
        this.AddElements(this.survey.completedHtmlOnCondition, res);
        this.AddElements(this.survey.calculatedValues, res);
        this.AddElements(_logic_types__WEBPACK_IMPORTED_MODULE_5__["SurveyLogicTypes"].baseTypes.matrixdropdowncolumn.getSelectorChoices(this.survey, null), res);
        this.AddElements(this.getValidators(), res);
        this.AddElements(this.getItemValues(), res);
        return res;
    };
    SurveyLogic.prototype.getValidators = function () {
        var res = [];
        var questions = this.survey.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            this.AddElements(questions[i].validators, res);
        }
        return res;
    };
    SurveyLogic.prototype.getItemValues = function () {
        var res = [];
        var questions = this.survey.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            var choices = q["choices"];
            if (!choices)
                continue;
            var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(q.getType(), "choices");
            if (!prop || prop.type !== "itemvalue[]")
                continue;
            this.AddElements(choices, res);
        }
        return res;
    };
    SurveyLogic.prototype.AddElements = function (src, dest) {
        for (var i = 0; i < src.length; i++) {
            dest.push(src[i]);
        }
    };
    SurveyLogic.prototype.buildItemsByElement = function (element, dest, hash, showInUI) {
        var types = this.getElementAllTypes(element);
        for (var i = 0; i < this.logicTypes.length; i++) {
            var lt = this.logicTypes[i];
            if (lt.showInUI !== showInUI)
                continue;
            var expression = element[lt.propertyName];
            if (types.indexOf(lt.baseClass) > -1 &&
                !survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(expression)) {
                var key = this.getLogicItemHashKey(expression, element);
                var item = hash[key];
                if (!item) {
                    item = new _logic_items__WEBPACK_IMPORTED_MODULE_4__["SurveyLogicItem"](this, expression);
                    hash[key] = item;
                    dest.push(item);
                }
                var action = this.createNewAction(lt, element);
                item.addNewAction(action);
            }
        }
    };
    SurveyLogic.prototype.getLogicItemHashKey = function (expression, element) {
        var parentQuestion = this.getParentQuestion(element);
        var parentName = !!parentQuestion ? "@" + parentQuestion.name : "";
        return parentName + expression.replace(" ", "").toLowerCase();
    };
    SurveyLogic.prototype.getParentQuestion = function (element) {
        var parentQuestion = element.parentQuestion;
        if (!!parentQuestion)
            return parentQuestion;
        if (element.isDescendantOf("matrixdropdowncolumn"))
            return element.colOwner;
        return null;
    };
    SurveyLogic.prototype.getElementAllTypes = function (element) {
        var types = [];
        var type = element.getType();
        types.push(type);
        while (!!type && type != "base") {
            var cl = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(type);
            if (!cl)
                break;
            type = cl.parentName;
            if (!!type) {
                types.push(type);
            }
        }
        return types;
    };
    SurveyLogic.prototype.createLogicTypes = function () {
        var res = [];
        var visActions = SurveyLogic.visibleActions;
        for (var i = 0; i < SurveyLogic.types.length; i++) {
            if (visActions.length > 0 &&
                visActions.indexOf(SurveyLogic.types[i].name) < 0)
                continue;
            res.push(new _logic_types__WEBPACK_IMPORTED_MODULE_5__["SurveyLogicType"](SurveyLogic.types[i], this.survey, this.options));
        }
        return res;
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], SurveyLogic.prototype, "items", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], SurveyLogic.prototype, "logicTypes", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyLogic.prototype, "errorText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (value, target) {
                target.onReadOnlyChanged();
            }
        })
    ], SurveyLogic.prototype, "readOnly", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyLogic.prototype, "placeholderHtml", void 0);
    return SurveyLogic;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/tabs/test-plugin.ts":
/*!********************************************!*\
  !*** ./src/components/tabs/test-plugin.ts ***!
  \********************************************/
/*! exports provided: TabTestPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabTestPlugin", function() { return TabTestPlugin; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _simulator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../simulator */ "./src/components/simulator.ts");
/* harmony import */ var _test__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./test */ "./src/components/tabs/test.ts");





var TabTestPlugin = /** @class */ (function () {
    function TabTestPlugin(creator) {
        this.creator = creator;
        this.simulatorTheme = survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyCss"][survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2ThemeName"]];
        creator.addPluginTab("test", this, "ed.testSurvey");
        this.setPreviewTheme(this.creator.themeForPreview);
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
    }
    TabTestPlugin.prototype.setDevice = function (newVal) {
        this.model.simulator.device = newVal;
        this.model.simulator.resetZoomParameters();
        var currentType = _simulator__WEBPACK_IMPORTED_MODULE_3__["simulatorDevices"][this.model.simulator.device].deviceType;
        this.orientationSelectorAction.enabled = currentType != "desktop";
        this.deviceSelectorAction.iconName = "icon-device-" + currentType;
        this.deviceSelectorAction.title = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.simulator");
    };
    TabTestPlugin.prototype.setDefaultLanguageOption = function (opt) {
        var _this = this;
        var vis = opt === true || opt === "all" || (opt === "auto" && this.model.survey.getUsedLocales().length > 1);
        this.languageSelectorAction.visible = vis;
        var languages = [];
        if (vis) {
            languages = this.getLanguages(opt !== "all" ? this.model.survey.getUsedLocales() : null);
        }
        this.languageSelectorAction.popupModel.contentComponentData.model.setItems(languages);
        this.languageSelectorAction.data.selectedItem = languages.filter(function (lang) { return lang.id === _this.model.activeLanguage; })[0];
    };
    TabTestPlugin.prototype.getLanguages = function (usedLanguages) {
        if (usedLanguages === void 0) { usedLanguages = null; }
        var res = [];
        var locales = !!usedLanguages && usedLanguages.length > 1 ? usedLanguages : survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getLocales();
        for (var i = 0; i < locales.length; i++) {
            var loc = locales[i];
            res.push({ id: loc, title: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getLocaleName(loc) });
        }
        return res;
    };
    TabTestPlugin.prototype.updateActions = function () {
        this.languageSelectorAction.title = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getLocaleName(this.model.activeLanguage);
        this.languageSelectorAction.visible = true;
        if (this.creator.showSimulatorInTestSurveyTab) {
            this.setDevice(this.model.simulator.device);
            this.deviceSelectorAction.data.selectedItem = { id: this.model.simulator.device };
            this.orientationSelectorAction.title = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.portraitOrientation");
        }
        if (this.creator.showInvisibleElementsInTestSurveyTab) {
            this.invisibleToggleAction.css = this.model.showInvisibleElements ? "sv-action-bar-item--active" : "";
            this.invisibleToggleAction.visible = this.model.isRunning;
        }
        if (this.creator.showDefaultLanguageInTestSurveyTab != undefined) {
            this.setDefaultLanguageOption(this.creator.showDefaultLanguageInTestSurveyTab);
        }
    };
    TabTestPlugin.prototype.setPreviewTheme = function (themeName) {
        this.simulatorTheme = survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyCss"][themeName] || survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyCss"][survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2ThemeName"]];
    };
    TabTestPlugin.prototype.createVisibleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "test"; });
    };
    TabTestPlugin.prototype.activate = function () {
        var _this = this;
        this.model = new _test__WEBPACK_IMPORTED_MODULE_4__["TestSurveyTabViewModel"](this.creator, this.simulatorTheme);
        this.model.onSurveyCreatedCallback = function (survey) {
            _this.creator["onTestSurveyCreated"] && _this.creator["onTestSurveyCreated"].fire(_this.creator, { survey: survey });
        };
        this.model.simulator.landscape = this.creator.previewOrientation != "portrait";
        this.update();
    };
    TabTestPlugin.prototype.update = function () {
        var _this = this;
        if (!this.model)
            return;
        var options = {
            showPagesInTestSurveyTab: this.creator.showPagesInTestSurveyTab,
        };
        this.model.testAgainAction = this.testAgainAction;
        this.model.prevPageAction = this.prevPageAction;
        this.model.nextPageAction = this.nextPageAction;
        this.model.initialize(this.creator.JSON, options);
        this.updateActions();
        this.model.show();
        this.model.onPropertyChanged.add(function (sender, options) {
            if (options.name === "isRunning") {
                _this.invisibleToggleAction && (_this.invisibleToggleAction.visible = _this.model.isRunning);
                _this.testAgainAction.visible = !_this.model.isRunning;
            }
        });
    };
    TabTestPlugin.prototype.deactivate = function () {
        if (this.model) {
            this.simulatorTheme = this.model.simulator.survey.css;
            this.model.onSurveyCreatedCallback = undefined;
            this.model.dispose();
            this.model = undefined;
        }
        this.languageSelectorAction.visible = false;
        this.testAgainAction.visible = false;
        this.invisibleToggleAction && (this.invisibleToggleAction.visible = false);
        return true;
    };
    TabTestPlugin.prototype.getAvailableThemes = function (themeMapper) {
        var availableThemesToItems = [];
        for (var i = 0; i < themeMapper.length; i++) {
            var item = themeMapper[i];
            var action = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({ id: item.name + "_themeSwitcher", locTitleName: this.getThemeLocName(item.name) });
            action.value = item.name;
            availableThemesToItems.push(action);
        }
        return availableThemesToItems;
    };
    TabTestPlugin.prototype.getThemeLocName = function (name) {
        return "ed." + name + "Theme";
    };
    TabTestPlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        this.testAgainAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "testSurveyAgain",
            visible: false,
            locTitleName: "ed.testSurveyAgain",
            action: function () {
                _this.model.testAgain();
            }
        });
        if (this.creator.showSimulatorInTestSurveyTab) {
            var deviceSelectorItems = Object.keys(_simulator__WEBPACK_IMPORTED_MODULE_3__["simulatorDevices"])
                .filter(function (key) { return !!_simulator__WEBPACK_IMPORTED_MODULE_3__["simulatorDevices"][key].title; })
                .map(function (key) { return ({ id: key, title: _simulator__WEBPACK_IMPORTED_MODULE_3__["simulatorDevices"][key].title }); });
            this.deviceSelectorAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModel"])({
                id: "deviceSelector",
                iconName: "icon-device-desktop",
                mode: "small",
                visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.activeTab === "test", _this.creator.showSimulatorInTestSurveyTab);
                }),
            }, {
                items: deviceSelectorItems,
                allowSelection: true,
                onSelectionChanged: function (item) { _this.setDevice(item.id); },
                horizontalPosition: "center",
                onHide: function () { _this.deviceSelectorAction.enabled = true; },
                onShow: function () { _this.deviceSelectorAction.enabled = false; }
            });
            items.push(this.deviceSelectorAction);
            this.orientationSelectorAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "orientationSelector",
                iconName: "icon-device-rotate",
                mode: "small",
                visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.activeTab === "test", _this.creator.showSimulatorInTestSurveyTab);
                }),
                action: function () {
                    _this.model.simulator.landscape = !_this.model.simulator.landscape;
                    _this.orientationSelectorAction.title = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])(!_this.model.simulator.landscape ? "pe.landscapeOrientation" : "pe.portraitOrientation");
                }
            });
            items.push(this.orientationSelectorAction);
        }
        if (this.creator.showInvisibleElementsInTestSurveyTab) {
            this.invisibleToggleAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "showInvisible",
                iconName: "icon-invisible-items",
                mode: "small",
                needSeparator: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    return !_this.creator.isMobileView;
                }),
                locTitleName: "ts.showInvisibleElements",
                visible: false,
                action: function () {
                    _this.model.showInvisibleElements = !_this.model.showInvisibleElements;
                    _this.invisibleToggleAction.css = _this.model.showInvisibleElements ? "sv-action-bar-item--active" : "";
                    _this.invisibleToggleAction.title = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])(!_this.model.showInvisibleElements ? "ts.showInvisibleElements" : "ts.hideInvisibleElements");
                }
            });
            items.push(this.invisibleToggleAction);
        }
        var themeMapper = survey_core__WEBPACK_IMPORTED_MODULE_1__["StylesManager"].getIncludedThemeCss();
        var sequence = ["defaultV2", "modern", "default"];
        themeMapper = themeMapper.sort(function (theme1, theme2) {
            return sequence.indexOf(theme1.name) > sequence.indexOf(theme2.name) ? 1 : -1;
        });
        var availableThemesToItems = this.getAvailableThemes(themeMapper);
        if (this.creator.allowChangeThemeInPreview && availableThemesToItems.length > 1 && !this.creator.showThemeTab) {
            this.changeThemeModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ListModel"](availableThemesToItems, function (item) {
                if (!!_this.model) {
                    _this.model.setTheme(item.value, themeMapper);
                }
                _this.changeThemeAction.locTitleName = _this.getThemeLocName(item.value);
                _this.changeThemeAction.locStrsChanged();
                _this.changeThemePopupModel.toggleVisibility();
            }, true);
            this.changeThemeModel.locOwner = this.creator;
            this.changeThemePopupModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["PopupModel"]("sv-list", { model: this.changeThemeModel }, "bottom", "center");
            var getStartThemeName = function () {
                var availableThemes = themeMapper.filter(function (item) { return item.theme.root === _this.simulatorTheme.root; });
                return availableThemes.length > 0 ? availableThemes[0].name : "defaultV2";
            };
            this.changeThemeAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "themeSwitcher",
                iconName: "icon-theme",
                component: "sv-action-bar-item-dropdown",
                mode: "large",
                locTitleName: this.getThemeLocName(getStartThemeName()),
                needSeparator: true,
                visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["notShortCircuitAnd"])(_this.creator.showSimulatorInTestSurveyTab, _this.creator.activeTab === "test");
                }),
                action: function () {
                    _this.changeThemePopupModel.toggleVisibility();
                },
                popupModel: this.changeThemePopupModel
            });
            items.push(this.changeThemeAction);
        }
        this.languageSelectorAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModel"])({
            id: "languageSelector",
            iconName: "icon-language",
            visible: false,
            mode: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return _this.creator.isMobileView ? "small" : "large";
            }),
        }, {
            items: [],
            allowSelection: true,
            onSelectionChanged: function (item) {
                _this.model.activeLanguage = item.id;
                _this.languageSelectorAction.title = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getLocaleName(item.id);
            },
            horizontalPosition: "center",
            onHide: function () { _this.languageSelectorAction.enabled = true; },
            onShow: function () { _this.languageSelectorAction.enabled = false; }
        });
        items.push(this.languageSelectorAction);
        this.designerAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-designer",
            iconName: "icon-config",
            action: function () { _this.creator.makeNewViewActive("designer"); },
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.designer",
            showTitle: false
        });
        this.previewAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-preview",
            iconName: "icon-preview",
            active: true,
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.testSurvey",
            showTitle: false,
            action: function () { }
        });
        this.prevPageAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "prevPage",
            iconName: "icon-arrow-left_16x16",
            needSeparator: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return _this.creator.isMobileView;
            }),
            visible: false
        });
        this.nextPageAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "nextPage",
            iconName: "icon-arrow-right_16x16",
            visible: false
        });
        return items;
    };
    TabTestPlugin.prototype.addFooterActions = function () {
        this.creator.footerToolbar.actions.push(this.designerAction);
        this.creator.footerToolbar.actions.push(this.previewAction);
        this.creator.footerToolbar.actions.push(this.prevPageAction);
        this.creator.footerToolbar.actions.push(this.nextPageAction);
        this.invisibleToggleAction && (this.creator.footerToolbar.actions.push(this.invisibleToggleAction));
        // this.languageSelectorAction && (this.creator.footerToolbar.actions.push(this.languageSelectorAction));
    };
    return TabTestPlugin;
}());



/***/ }),

/***/ "./src/components/tabs/test.scss":
/*!***************************************!*\
  !*** ./src/components/tabs/test.scss ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/test.ts":
/*!*************************************!*\
  !*** ./src/components/tabs/test.ts ***!
  \*************************************/
/*! exports provided: TestSurveyTabViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestSurveyTabViewModel", function() { return TestSurveyTabViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var _simulator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../simulator */ "./src/components/simulator.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");


__webpack_require__(/*! ./test.scss */ "./src/components/tabs/test.scss");



var TestSurveyTabViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TestSurveyTabViewModel, _super);
    function TestSurveyTabViewModel(surveyProvider, startTheme) {
        if (startTheme === void 0) { startTheme = survey_core__WEBPACK_IMPORTED_MODULE_2__["defaultV2Css"]; }
        var _this = _super.call(this) || this;
        _this.surveyProvider = surveyProvider;
        _this.startTheme = startTheme;
        _this.enableInvisiblePages = true;
        _this.pages = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ActionContainer"]();
        _this.simulator = new _simulator__WEBPACK_IMPORTED_MODULE_1__["SurveySimulatorModel"]();
        return _this;
    }
    Object.defineProperty(TestSurveyTabViewModel.prototype, "activeLanguage", {
        get: function () {
            return this.getPropertyValue("activeLanguage", this.survey.locale || survey_core__WEBPACK_IMPORTED_MODULE_2__["surveyLocalization"].defaultLocale);
        },
        set: function (val) {
            if (val === this.activeLanguage)
                return;
            this.setPropertyValue("activeLanguage", val);
            this.survey.locale = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TestSurveyTabViewModel.prototype, "survey", {
        get: function () {
            return this.simulator.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TestSurveyTabViewModel.prototype, "pageActions", {
        get: function () {
            return this.pages.actions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TestSurveyTabViewModel.prototype, "isPageToolbarVisible", {
        get: function () {
            return this.pages.visibleActions.length > 0 && !this.surveyProvider.isMobileView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TestSurveyTabViewModel.prototype, "isMobileView", {
        get: function () {
            return this.surveyProvider.isMobileView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TestSurveyTabViewModel.prototype, "showResults", {
        get: function () {
            return !this.isRunning && !this.isMobileView;
        },
        enumerable: false,
        configurable: true
    });
    TestSurveyTabViewModel.prototype.updateSimulatorSurvey = function (json, theme) {
        var _this = this;
        var newSurvey = this.surveyProvider.createSurvey(json || {}, "test", this);
        newSurvey.applyTheme(this.surveyProvider.theme);
        newSurvey.setCss(theme, false);
        newSurvey.fitToContainer = true;
        newSurvey.addLayoutElement({
            id: "complete-customization",
            container: "completePage",
            component: "svc-complete-page",
            data: this
        });
        this.simulator.survey = newSurvey;
        if (this.onSurveyCreatedCallback)
            this.onSurveyCreatedCallback(this.survey);
        this.survey.onComplete.add(function (sender) {
            _this.isRunning = false;
        });
        if (!!this.survey["onNavigateToUrl"]) {
            this.survey["onNavigateToUrl"].add(function (sender, options) {
                var url = options.url;
                options.url = "";
                if (!!url) {
                    var message = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("ed.navigateToMsg") + " '" + url + "'.";
                    if (!!this.surveyProvider) {
                        this.surveyProvider.notify(message);
                    }
                    else {
                        alert(message);
                    }
                }
            });
        }
        this.survey.onStarted.add(function (sender) {
            _this.setActivePageItem(_this.simulator.survey.activePage, true);
        });
        this.survey.onCurrentPageChanged.add(function (sender, options) {
            _this.activePage = options.newCurrentPage;
            _this.setActivePageItem(options.oldCurrentPage, false);
            _this.setActivePageItem(options.newCurrentPage, true);
        });
        this.survey.onPageVisibleChanged.add(function (sender, options) {
            _this.updatePageItem(options.page);
            _this.updatePrevNextPageActionState();
        });
    };
    TestSurveyTabViewModel.prototype.setJSON = function (json, currTheme) {
        this.json = json;
        if (json != null) {
            if (json.cookieName) {
                delete json.cookieName;
            }
        }
        this.updateSimulatorSurvey(json, currTheme);
    };
    TestSurveyTabViewModel.prototype.initialize = function (json, options) {
        this.setJSON(json, this.startTheme);
        this.updatePageList();
        if (options.showPagesInTestSurveyTab !== undefined) {
            this.showPagesInTestSurveyTab = options.showPagesInTestSurveyTab;
        }
        this.buildActions();
    };
    TestSurveyTabViewModel.prototype.updatePageItem = function (page) {
        var item = this.getPageItemByPage(page);
        if (item) {
            item.enabled = this.enableInvisiblePages || page.isVisible;
        }
    };
    TestSurveyTabViewModel.prototype.getCurrentPageItem = function () {
        return this.pageListItems[this.survey.pages.indexOf(this.survey.activePage)];
    };
    TestSurveyTabViewModel.prototype.getSelectPageTitle = function () {
        return (this.activePage && this.getPageTitle(this.activePage, "preview-tab:selected-page", "survey-tester-selected")) || Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("ts.selectPage");
    };
    TestSurveyTabViewModel.prototype.getPageTitle = function (page, area, reason) {
        if (area === void 0) { area = "preview-tab:page-list"; }
        if (reason === void 0) { reason = "survey-tester"; }
        var pageTitle = page.title.replace(TestSurveyTabViewModel.tagRegex, "");
        var title = this.surveyProvider.getObjectDisplayName(page, area, reason, pageTitle);
        if (title === page.name && title.indexOf("page") === 0) {
            var index = this.survey.pages.indexOf(page);
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.pageTypeName") + " " + (index + 1);
        }
        return title;
    };
    TestSurveyTabViewModel.prototype.updatePageList = function () {
        var pages = [];
        for (var i = 0; i < this.survey.pages.length; i++) {
            var page = this.survey.pages[i];
            pages.push({
                id: page.name,
                data: page,
                title: this.getPageTitle(page),
                enabled: this.enableInvisiblePages || page.isVisible,
                visible: true
            });
        }
        this.pageListItems = pages;
    };
    TestSurveyTabViewModel.prototype.show = function () {
        this.showInvisibleElements = false;
        this.activePage = this.survey.activePage;
        this.survey.locale = this.activeLanguage;
        this.isRunning = true;
    };
    TestSurveyTabViewModel.prototype.testAgain = function () {
        this.setJSON(this.json, this.simulator.survey.css);
        this.updatePageList();
        this.show();
    };
    TestSurveyTabViewModel.prototype.buildActions = function () {
        var _this = this;
        var pageActions = [];
        var setNearPage = function (isNext) {
            var currentIndex = _this.survey.currentPageNo;
            var shift = isNext ? 1 : -1;
            var newIndex = currentIndex + shift;
            if (_this.survey.state === "starting" && isNext) {
                newIndex = 0;
            }
            var nearPage = _this.survey.visiblePages[newIndex];
            if (!isNext && currentIndex === 0 && _this.survey.firstPageIsStarted
                && _this.survey.pages.length > 0) {
                nearPage = _this.survey.pages[0];
            }
            var pageIndex = _this.survey.pages.indexOf(nearPage);
            _this.activePage = _this.survey.pages[pageIndex];
            _this.selectPageAction.data.selectedItem = _this.pageListItems[pageIndex];
        };
        if (this.prevPageAction) {
            this.prevPageAction.visible = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                var isRunning = _this.survey.state === "running";
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["notShortCircuitAnd"])(_this.isRunning, _this.surveyProvider.activeTab === "test", _this.pageListItems.length > 1) && isRunning;
            });
            this.prevPageAction.iconName = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? "icon-arrow-left" : "icon-arrow-left_16x16";
            });
            this.prevPageAction.iconSize = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? 24 : 16;
            });
            this.prevPageAction.action = function () { return setNearPage(false); };
            pageActions.push(this.prevPageAction);
        }
        this.selectPageAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["createDropdownActionModel"])({
            id: "pageSelector",
            css: "svc-page-selector",
            title: this.getSelectPageTitle(),
            visible: this.isRunning && this.pageListItems.length > 1 && this.showPagesInTestSurveyTab
        }, {
            items: this.pageListItems,
            allowSelection: true,
            selectedItem: this.getCurrentPageItem(),
            onSelectionChanged: function (item) {
                _this.activePage = item.data;
            },
            verticalPosition: "top",
            horizontalPosition: "center"
        });
        pageActions.push(this.selectPageAction);
        this.selectPageAction.visible = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
            return _this.survey.state === "running";
        });
        if (this.nextPageAction) {
            this.nextPageAction.visible = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                var isRunning = _this.survey.state === "running";
                return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["notShortCircuitAnd"])(_this.isRunning, _this.surveyProvider.activeTab === "test", _this.pageListItems.length > 1) && isRunning;
            });
            this.nextPageAction.iconName = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? "icon-arrow-right" : "icon-arrow-right_16x16";
            });
            this.nextPageAction.iconSize = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? 24 : 16;
            });
            this.nextPageAction.action = function () { return setNearPage(true); };
            pageActions.push(this.nextPageAction);
        }
        this.pages.actions = pageActions;
        this.pages.containerCss = "sv-action-bar--pages";
        this.updatePrevNextPageActionState();
    };
    TestSurveyTabViewModel.prototype.setActivePageItem = function (page, val) {
        var item = this.getPageItemByPage(page);
        if (item) {
            item.active = val;
        }
    };
    TestSurveyTabViewModel.prototype.getPageItemByPage = function (page) {
        var model = this.selectPageAction.popupModel.contentComponentData.model;
        if (!model || !Array.isArray(model.actions))
            return undefined;
        var items = model.actions;
        for (var i = 0; i < items.length; i++) {
            if (items[i].data === page)
                return items[i];
        }
        return null;
    };
    TestSurveyTabViewModel.prototype.updateResultsTemplate = function (theme) {
        this.simulator.survey.setCss(theme, false);
        this.simulator.survey.render();
    };
    TestSurveyTabViewModel.prototype.setTheme = function (themeName, themeMapper) {
        var availableThemes = themeMapper.filter(function (item) { return item.name === themeName; });
        var theme = survey_core__WEBPACK_IMPORTED_MODULE_2__["defaultV2Css"];
        if (availableThemes.length > 0) {
            theme = availableThemes[0].theme;
        }
        this.isRunning ? this.updateSimulatorSurvey(this.json, theme) : this.updateResultsTemplate(theme);
    };
    TestSurveyTabViewModel.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (!this.pages.hasActions)
            return;
        if (name === "activePage") {
            this.updatePrevNextPageActionState();
            this.selectPageAction.title = this.getSelectPageTitle();
        }
        if (name === "isRunning" || name === "pageListItems" || name === "showPagesInTestSurveyTab") {
            this.selectPageAction.popupModel.contentComponentData.model.items = this.pageListItems;
            this.selectPageAction.popupModel.contentComponentData.model.selectedItem = this.getCurrentPageItem();
            this.selectPageAction.visible = this.isRunning && this.pageListItems.length > 1 && this.showPagesInTestSurveyTab;
        }
    };
    TestSurveyTabViewModel.prototype.updatePrevNextPageActionState = function () {
        if (!this.prevPageAction || !this.survey)
            return;
        var isPrevEnabled = this.survey.firstPageIsStarted && this.survey.state !== "starting"
            || (!this.survey.firstPageIsStarted && !this.survey.isFirstPage);
        // this.prevPageAction.css = isPrevEnabled ? "sv-action-bar-item--secondary" : "";
        this.prevPageAction.enabled = isPrevEnabled;
        var isNextEnabled = this.survey && this.survey.visiblePages.indexOf(this.activePage) !== this.survey.visiblePages.length - 1;
        // this.nextPageAction.css = isNextEnabled ? "sv-action-bar-item--secondary" : "";
        this.nextPageAction.enabled = isNextEnabled;
    };
    TestSurveyTabViewModel.prototype.onScroll = function () {
        this.survey.onScroll();
        return true;
    };
    TestSurveyTabViewModel.prototype.dispose = function () {
        if (this.selectPageAction) {
            this.selectPageAction.dispose();
        }
        this.simulator.dispose();
        _super.prototype.dispose.call(this);
    };
    TestSurveyTabViewModel.tagRegex = /(<([^>]+)>)/ig;
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: false,
            onSet: function (val, target) {
                target.simulator.survey.showInvisibleElements = val;
            }
        })
    ], TestSurveyTabViewModel.prototype, "showInvisibleElements", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: true })
    ], TestSurveyTabViewModel.prototype, "showPagesInTestSurveyTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: true,
            onSet: function (value, target) {
                if (!!target.simulator)
                    target.simulator.isRunning = value;
            }
        })
    ], TestSurveyTabViewModel.prototype, "isRunning", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["propertyArray"])()
    ], TestSurveyTabViewModel.prototype, "pageListItems", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (val, target) {
                if (!!val) {
                    var survey = target.simulator.survey;
                    if (survey.firstPageIsStarted) {
                        if (val === survey.pages[0]) {
                            survey.clear(false, true);
                        }
                        else {
                            if (survey.state == "starting") {
                                survey.setPropertyValue("isStartedState", false);
                            }
                        }
                    }
                    if (survey.state !== "starting") {
                        survey.currentPage = val;
                    }
                }
                target.updatePrevNextPageActionState();
            }
        })
    ], TestSurveyTabViewModel.prototype, "activePage", void 0);
    return TestSurveyTabViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_2__["Base"]));



/***/ }),

/***/ "./src/components/tabs/theme-builder.scss":
/*!************************************************!*\
  !*** ./src/components/tabs/theme-builder.scss ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/theme-builder.ts":
/*!**********************************************!*\
  !*** ./src/components/tabs/theme-builder.ts ***!
  \**********************************************/
/*! exports provided: ThemeBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeBuilder", function() { return ThemeBuilder; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var _simulator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../simulator */ "./src/components/simulator.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _property_grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../property-grid */ "./src/property-grid/index.ts");
/* harmony import */ var _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../property-grid-theme/property-grid */ "./src/property-grid-theme/property-grid.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theme-custom-questions/font-settings */ "./src/components/tabs/theme-custom-questions/font-settings.ts");
/* harmony import */ var _theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./theme-custom-questions/element-settings */ "./src/components/tabs/theme-custom-questions/element-settings.ts");
/* harmony import */ var _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../plugins/undo-redo/undo-redo-manager */ "./src/plugins/undo-redo/undo-redo-manager.ts");
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./themes */ "./src/components/tabs/themes.ts");












__webpack_require__(/*! ./theme-builder.scss */ "./src/components/tabs/theme-builder.scss");
var ThemeBuilder = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ThemeBuilder, _super);
    function ThemeBuilder(surveyProvider, startThemeClasses) {
        if (startThemeClasses === void 0) { startThemeClasses = survey_core__WEBPACK_IMPORTED_MODULE_2__["defaultV2Css"]; }
        var _this = _super.call(this) || this;
        _this.surveyProvider = surveyProvider;
        _this.startThemeClasses = startThemeClasses;
        _this.pages = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ActionContainer"]();
        _this.themeCssVariablesChanges = {};
        _this.colorCalculator = new _utils_utils__WEBPACK_IMPORTED_MODULE_6__["ColorCalculator"]();
        _this.blockChanges = false;
        _this._availableThemes = _themes__WEBPACK_IMPORTED_MODULE_11__["PredefinedThemes"];
        _this.prevQuestionValues = {};
        _this.onThemeSelected = new survey_core__WEBPACK_IMPORTED_MODULE_2__["EventBase"]();
        _this.onThemeModified = new survey_core__WEBPACK_IMPORTED_MODULE_2__["EventBase"]();
        _this.onCanModifyTheme = new survey_core__WEBPACK_IMPORTED_MODULE_2__["EventBase"]();
        _this.creatorPropertyChanged = function (sender, options) {
            if (options.name === "isMobileView") {
                _this.updateVisibilityOfPropertyGridGroups();
            }
        };
        _this.blockThemeChangedNotifications = 0;
        _this.autoSaveTimerId = null;
        _this.simulator = new _simulator__WEBPACK_IMPORTED_MODULE_1__["SurveySimulatorModel"]();
        _this.themeName = ThemeBuilder.DefaultTheme.themeName || "default";
        _this.themeEditorSurveyValue = _this.createThemeEditorSurvey();
        _this.backgroundImage = _this.surveyProvider.theme.backgroundImage !== undefined ? _this.surveyProvider.theme.backgroundImage : surveyProvider.survey.backgroundImage;
        _this.backgroundImageFit = _this.surveyProvider.theme.backgroundImageFit !== undefined ? _this.surveyProvider.theme.backgroundImageFit : surveyProvider.survey.backgroundImageFit;
        _this.backgroundImageAttachment = _this.surveyProvider.theme.backgroundImageAttachment !== undefined ? _this.surveyProvider.theme.backgroundImageAttachment : surveyProvider.survey.backgroundImageAttachment;
        _this.backgroundOpacity = ((_this.surveyProvider.theme.backgroundOpacity !== undefined ? _this.surveyProvider.theme.backgroundOpacity : surveyProvider.survey.backgroundOpacity) || 1) * 100;
        _this.loadTheme(_this.surveyProvider.theme);
        _this.surveyProvider.isThemeModified = false;
        _this.undoRedoManager = new _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_10__["UndoRedoManager"]();
        _this.surveyProvider.onPropertyChanged.add(_this.creatorPropertyChanged);
        return _this;
    }
    Object.defineProperty(ThemeBuilder.prototype, "themeCssCustomizations", {
        get: function () {
            var customizations = {};
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(customizations, this.themeCssVariablesChanges);
            return customizations;
        },
        enumerable: false,
        configurable: true
    });
    ThemeBuilder.prototype.getFullThemeName = function (_themeName) {
        if (this.themePalette === "light") {
            return _themeName || this.themeName;
        }
        return (_themeName || this.themeName) + "-" + this.themePalette;
    };
    Object.defineProperty(ThemeBuilder.prototype, "activeLanguage", {
        get: function () {
            return this.getPropertyValue("activeLanguage", this.survey.locale || survey_core__WEBPACK_IMPORTED_MODULE_2__["surveyLocalization"].defaultLocale);
        },
        set: function (val) {
            if (val === this.activeLanguage)
                return;
            this.setPropertyValue("activeLanguage", val);
            this.survey.locale = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "survey", {
        get: function () {
            return this.simulator.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "pageActions", {
        get: function () {
            return this.pages.actions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "isPageToolbarVisible", {
        get: function () {
            // return this.pages.visibleActions.length > 0 && !this.surveyProvider.isMobileView;
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "themeEditorSurvey", {
        get: function () {
            return this.themeEditorSurveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "currentTheme", {
        get: function () {
            return this.surveyProvider.theme;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "currentThemeCssVariables", {
        get: function () {
            return this.currentTheme.cssVariables || {};
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "isMobileView", {
        get: function () {
            return this.surveyProvider.isMobileView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThemeBuilder.prototype, "showResults", {
        get: function () {
            return !this.isRunning && !this.isMobileView;
        },
        enumerable: false,
        configurable: true
    });
    ThemeBuilder.prototype.loadTheme = function (theme) {
        this.blockThemeChangedNotifications += 1;
        try {
            this.themeName = theme.themeName || this.themeName;
            this.themePalette = theme.colorPalette || this.themePalette;
            if (theme.isPanelless !== undefined) {
                this.themeMode = theme.isPanelless === true ? "lightweight" : "panels";
            }
            this.backgroundImage = theme.backgroundImage || this.backgroundImage;
            this.backgroundImageFit = theme.backgroundImageFit || this.backgroundImageFit;
            this.backgroundImageAttachment = theme.backgroundImageAttachment || this.backgroundImageAttachment;
            var effectiveThemeCssVariables = {};
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(effectiveThemeCssVariables, ThemeBuilder.DefaultTheme.cssVariables || {}, this.findSuitableTheme(this.themeName).cssVariables || {});
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(effectiveThemeCssVariables, theme.cssVariables || {}, this.themeCssVariablesChanges);
            var effectiveTheme = {
                backgroundImage: this.backgroundImage,
                backgroundImageFit: this.backgroundImageFit,
                backgroundImageAttachment: this.backgroundImageAttachment,
                backgroundOpacity: this.backgroundOpacity / 100,
            };
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(effectiveTheme, theme, { cssVariables: effectiveThemeCssVariables, themeName: this.themeName, colorPalette: this.themePalette, isPanelless: this.themeMode === "lightweight" });
            this.surveyProvider.theme = effectiveTheme;
            this.initializeColorCalculator();
            this.loadThemeIntoPropertyGrid();
        }
        finally {
            this.blockThemeChangedNotifications -= 1;
        }
    };
    ThemeBuilder.prototype.resetTheme = function () {
        this.setTheme({});
    };
    ThemeBuilder.prototype.setTheme = function (theme) {
        this.themeCssVariablesChanges = {};
        this.backgroundImage = "";
        this.backgroundImageFit = "cover";
        this.backgroundImageAttachment = "scroll";
        this.backgroundOpacity = 100;
        this.loadTheme(theme);
        this.themeModified({ theme: theme });
    };
    ThemeBuilder.prototype.selectTheme = function (themeName, themePalette, themeMode) {
        if (themePalette === void 0) { themePalette = "light"; }
        if (themeMode === void 0) { themeMode = "panelless"; }
        this.themeName = themeName;
        this.themePalette = themePalette;
        this.themeMode = themeMode;
        var theme = this.findSuitableTheme(themeName);
        this.setTheme(theme);
    };
    ThemeBuilder.prototype.updateSimulatorSurvey = function (json, theme) {
        var _this = this;
        var newSurvey = this.surveyProvider.createSurvey(json || {}, "theme", this);
        newSurvey.setCss(theme, false);
        newSurvey.fitToContainer = true;
        newSurvey.addLayoutElement({
            id: "complete-customization",
            container: "completePage",
            component: "svc-complete-page",
            data: this
        });
        this.simulator.survey = newSurvey;
        this.updateSimulatorTheme();
        if (this.onSurveyCreatedCallback)
            this.onSurveyCreatedCallback(this.survey);
        var self = this;
        this.survey.onComplete.add(function (sender) {
            self.isRunning = false;
        });
        if (!!this.survey["onNavigateToUrl"]) {
            this.survey["onNavigateToUrl"].add(function (sender, options) {
                var url = options.url;
                options.url = "";
                if (!!url) {
                    var message = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("ed.navigateToMsg") + " '" + url + "'.";
                    if (!!this.surveyProvider) {
                        this.surveyProvider.notify(message);
                    }
                    else {
                        alert(message);
                    }
                }
            });
        }
        this.survey.onStarted.add(function (sender) {
            self.setActivePageItem(self.simulator.survey.activePage, true);
        });
        this.survey.onCurrentPageChanged.add(function (sender, options) {
            self.activePage = options.newCurrentPage;
            self.setActivePageItem(options.oldCurrentPage, false);
            self.setActivePageItem(options.newCurrentPage, true);
        });
        this.survey.onPageVisibleChanged.add(function (sender, options) {
            self.updatePageItem(options.page);
            _this.updatePrevNextPageActionState();
        });
    };
    ThemeBuilder.prototype.setJSON = function (json, currTheme) {
        this.json = json;
        if (json != null) {
            if (json.cookieName) {
                delete json.cookieName;
            }
        }
        this.updateSimulatorSurvey(json, currTheme);
    };
    ThemeBuilder.prototype.initialize = function (json, options) {
        this.blockChanges = true;
        try {
            this.setJSON(json, this.startThemeClasses);
            this.updatePageList();
            this.updatePropertyGridEditors(this.themeEditorSurvey);
            this.updatePropertyGridEditorsAvailability();
            this.buildActions();
            if (options.showPagesInTestSurveyTab !== undefined) {
                this.showPagesInTestSurveyTab = options.showPagesInTestSurveyTab;
            }
        }
        finally {
            this.blockChanges = false;
        }
    };
    ThemeBuilder.prototype.updatePageItem = function (page) {
        var item = this.getPageItemByPage(page);
        if (item) {
            item.enabled = page.isVisible;
        }
    };
    ThemeBuilder.prototype.getCurrentPageItem = function () {
        return this.pageListItems[this.survey.pages.indexOf(this.survey.activePage)];
    };
    ThemeBuilder.prototype.getSelectPageTitle = function () {
        return (this.activePage && this.getPageTitle(this.activePage, "preview-tab:selected-page", "survey-tester-selected")) || Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("ts.selectPage");
    };
    ThemeBuilder.prototype.getPageTitle = function (page, area, reason) {
        if (area === void 0) { area = "preview-tab:page-list"; }
        if (reason === void 0) { reason = "survey-tester"; }
        var title = this.surveyProvider.getObjectDisplayName(page, area, reason, page.title);
        if (title === page.name && title.indexOf("page") === 0) {
            var index = this.survey.pages.indexOf(page);
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.pageTypeName") + " " + (index + 1);
        }
        return title;
    };
    ThemeBuilder.prototype.updatePageList = function () {
        var pages = [];
        for (var i = 0; i < this.survey.pages.length; i++) {
            var page = this.survey.pages[i];
            pages.push({
                id: page.name,
                data: page,
                title: this.getPageTitle(page),
                enabled: page.isVisible,
                visible: true
            });
        }
        this.pageListItems = pages;
    };
    ThemeBuilder.prototype.show = function () {
        this.showInvisibleElements = false;
        this.activePage = this.survey.activePage;
        this.survey.locale = this.activeLanguage;
        this.isRunning = true;
    };
    ThemeBuilder.prototype.testAgain = function () {
        this.setJSON(this.json, this.simulator.survey.css);
        this.updatePageList();
        this.updatePropertyGridEditors(this.themeEditorSurvey);
        this.show();
    };
    ThemeBuilder.prototype.buildActions = function () {
        var _this = this;
        var pageActions = [];
        var setNearPage = function (isNext) {
            var currentIndex = _this.survey.currentPageNo;
            var shift = isNext ? 1 : -1;
            var newIndex = currentIndex + shift;
            if (_this.survey.state === "starting" && isNext) {
                newIndex = 0;
            }
            var nearPage = _this.survey.visiblePages[newIndex];
            if (!isNext && currentIndex === 0 && _this.survey.firstPageIsStarted
                && _this.survey.pages.length > 0) {
                nearPage = _this.survey.pages[0];
            }
            var pageIndex = _this.survey.pages.indexOf(nearPage);
            _this.activePage = _this.survey.pages[pageIndex];
        };
        if (this.prevPageAction) {
            this.prevPageAction.visible = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                var isRunning = _this.survey.state === "running";
                var isActiveTab = _this.surveyProvider.activeTab === "theme";
                return _this.surveyProvider.isMobileView && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["notShortCircuitAnd"])(_this.isRunning, isActiveTab, _this.pageListItems.length > 1) && isRunning;
            });
            this.prevPageAction.iconName = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? "icon-arrow-left" : "icon-arrow-left_16x16";
            });
            this.prevPageAction.iconSize = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? 24 : 16;
            });
            this.prevPageAction.action = function () { return setNearPage(false); };
            pageActions.push(this.prevPageAction);
        }
        if (this.nextPageAction) {
            this.nextPageAction.visible = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                var isRunning = _this.survey.state === "running";
                var isActiveTab = _this.surveyProvider.activeTab === "theme";
                return _this.surveyProvider.isMobileView && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["notShortCircuitAnd"])(_this.isRunning, isActiveTab, _this.pageListItems.length > 1) && isRunning;
            });
            this.nextPageAction.iconName = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? "icon-arrow-right" : "icon-arrow-right_16x16";
            });
            this.nextPageAction.iconSize = new survey_core__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () {
                return _this.surveyProvider.isMobileView ? 24 : 16;
            });
            this.nextPageAction.action = function () { return setNearPage(true); };
            pageActions.push(this.nextPageAction);
        }
        this.pages.actions = pageActions;
        this.pages.containerCss = "sv-action-bar--pages";
        this.updatePrevNextPageActionState();
    };
    ThemeBuilder.prototype.updatePrevNextPageActionState = function () {
        if (!this.prevPageAction || !this.survey)
            return;
        var isPrevEnabled = this.survey.firstPageIsStarted && this.survey.state !== "starting" || (!this.survey.firstPageIsStarted && !this.survey.isFirstPage);
        this.prevPageAction.enabled = isPrevEnabled;
        var isNextEnabled = this.survey && this.survey.visiblePages.indexOf(this.activePage) !== this.survey.visiblePages.length - 1;
        this.nextPageAction.enabled = isNextEnabled;
    };
    Object.defineProperty(ThemeBuilder.prototype, "availableThemes", {
        get: function () {
            return [].concat(this._availableThemes);
        },
        set: function (availebleThemes) {
            this._availableThemes = availebleThemes || [];
            if (this.themeEditorSurvey) {
                var themeChooser = this.themeEditorSurvey.getQuestionByName("themeName");
                themeChooser.choices = availebleThemes.map(function (theme) { return ({ value: theme, text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.names." + theme) }); });
                if (availebleThemes.indexOf(themeChooser.value) === -1) {
                    themeChooser.value = ThemeBuilder.DefaultTheme.themeName;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    ThemeBuilder.prototype.setActivePageItem = function (page, val) {
        var item = this.getPageItemByPage(page);
        if (item) {
            item.active = val;
        }
    };
    ThemeBuilder.prototype.getPageItemByPage = function (page) {
        var items = this.pageListItems;
        for (var i = 0; i < items.length; i++) {
            if (items[i].data === page)
                return items[i];
        }
        return null;
    };
    ThemeBuilder.prototype.getPredefinedColorsItemValues = function () {
        var _this = this;
        return Object.keys(_themes__WEBPACK_IMPORTED_MODULE_11__["PredefinedColors"][this.themePalette]).map(function (colorName) {
            return new survey_core__WEBPACK_IMPORTED_MODULE_2__["ItemValue"](_themes__WEBPACK_IMPORTED_MODULE_11__["PredefinedColors"][_this.themePalette][colorName], Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.colors." + colorName));
        });
    };
    ThemeBuilder.prototype.initializeColorCalculator = function () {
        if (!this.currentTheme.cssVariables["--sjs-primary-backcolor"] ||
            !this.currentTheme.cssVariables["--sjs-primary-backcolor-light"] ||
            !this.currentTheme.cssVariables["--sjs-primary-backcolor-dark"]) {
            return;
        }
        this.colorCalculator.initialize(this.currentTheme.cssVariables["--sjs-primary-backcolor"], this.currentTheme.cssVariables["--sjs-primary-backcolor-light"], this.currentTheme.cssVariables["--sjs-primary-backcolor-dark"]);
    };
    ThemeBuilder.prototype.generalPropertiesChanged = function (options) {
        var _a;
        if (["themeName", "themeMode", "themePalette"].indexOf(options.name) !== -1) {
            if (options.name === "themeName") {
                this.loadTheme(this.findSuitableTheme(options.value) || (_a = {}, _a[options.name] = options.value, _a));
            }
            if (options.name === "themeMode") {
                this.loadTheme({ isPanelless: options.value === "lightweight" });
            }
            if (options.name === "themePalette") {
                this.loadTheme({ colorPalette: options.value });
            }
            this.themeModified({ theme: this.currentTheme });
            return true;
        }
        if (["backgroundImage", "backgroundImageFit", "backgroundImageAttachment", "backgroundOpacity"].indexOf(options.name) !== -1) {
            this[options.name] = options.value;
            this.themeModified(options);
            return true;
        }
        return false;
    };
    ThemeBuilder.prototype.headerViewContainerPropertiesChanged = function (options) {
        var headerSettings = options.value[0];
        this.survey.headerView = headerSettings["headerView"];
        this.surveyProvider.survey.headerView = headerSettings["headerView"];
        if (headerSettings["headerView"] === "basic") {
            this.survey.logoPosition = headerSettings["logoPosition"];
            this.surveyProvider.survey.logoPosition = headerSettings["logoPosition"];
        }
        else {
            this.currentTheme.header = this.getCoverJson(headerSettings);
            this.setCoverCssVariables(headerSettings);
        }
        this.themeModified(options);
    };
    ThemeBuilder.prototype.cssVariablePropertiesChanged = function (options) {
        var _a, _b;
        if (options.name.indexOf("--") === 0) {
            this.setThemeCssVariablesChanges(options.name, options.value, options.question);
        }
        if (options.name == "commonScale") {
            this.survey.triggerResponsiveness(true);
            this.setThemeCssVariablesChanges("--sjs-base-unit", (options.value * 8 / 100) + "px", options.question);
        }
        if (options.name == "commonFontSize") {
            this.setThemeCssVariablesChanges("--sjs-font-size", (options.value * 16 / 100) + "px", options.question);
        }
        if (options.name == "cornerRadius") {
            this.setThemeCssVariablesChanges("--sjs-corner-radius", options.value + "px", options.question);
        }
        if (options.name === "questionBackgroundTransparency" || options.name === "editorPanel") {
            var baseColor = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["parseColor"])(this.themeEditorSurvey.getValue("--sjs-general-backcolor-dim-light")).color;
            var questionBackgroundTransparencyValue = this.themeEditorSurvey.getValue("questionBackgroundTransparency");
            this.setThemeCssVariablesChanges("--sjs-editor-background", Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["ingectAlpha"])(baseColor, questionBackgroundTransparencyValue / 100), options.question);
        }
        if (options.name === "panelBackgroundTransparency" || options.name === "questionPanel") {
            var baseColor = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["parseColor"])(this.themeEditorSurvey.getValue("--sjs-general-backcolor")).color;
            var panelBackgroundTransparencyValue = this.themeEditorSurvey.getValue("panelBackgroundTransparency");
            this.setThemeCssVariablesChanges("--sjs-question-background", Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["ingectAlpha"])(baseColor, panelBackgroundTransparencyValue / 100), options.question);
        }
        if (((_a = options.question) === null || _a === void 0 ? void 0 : _a.getType()) === "fontsettings") {
            Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsToCssVariable"])(options.question, this.themeCssVariablesChanges);
            this.themeModified(options);
        }
        if (((_b = options.question) === null || _b === void 0 ? void 0 : _b.getType()) === "elementsettings") {
            Object(_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_9__["elementSettingsToCssVariable"])(options.question, this.themeCssVariablesChanges);
            this.themeModified(options);
        }
    };
    ThemeBuilder.prototype.updateDependentQuestionValues = function (options) {
        if (options.name === "generalBackcolorDimColor") {
            this.themeEditorSurvey.setValue("--sjs-general-backcolor-dim", options.value);
        }
        if (options.name === "--sjs-general-backcolor-dim") {
            this.themeEditorSurvey.getQuestionByName("generalBackcolorDimColor").value = options.value;
        }
        if (options.name === "generalPrimaryColor") {
            this.themeEditorSurvey.setValue("--sjs-primary-backcolor", options.value);
        }
        if (options.name === "--sjs-primary-backcolor") {
            this.colorCalculator.calculateColors(options.value);
            this.themeEditorSurvey.setValue("--sjs-primary-backcolor-light", this.colorCalculator.colorSettings.newColorLight);
            this.themeEditorSurvey.setValue("--sjs-primary-backcolor-dark", this.colorCalculator.colorSettings.newColorDark);
            this.themeEditorSurvey.getQuestionByName("generalPrimaryColor").value = options.value;
        }
    };
    ThemeBuilder.prototype.setThemeCssVariablesChanges = function (variableName, value, question) {
        this.themeCssVariablesChanges[variableName] = value;
        this.themeModified({ name: variableName, value: value, question: question });
    };
    ThemeBuilder.prototype.createThemeEditorSurvey = function () {
        var _this = this;
        var json = this.getThemeEditorSurveyJSON();
        Object(_property_grid__WEBPACK_IMPORTED_MODULE_4__["setSurveyJSONForPropertyGrid"])(json, true, false);
        var themeEditorSurvey = this.surveyProvider.createSurvey(json, "theme_editor", this);
        themeEditorSurvey.getCss().list = {};
        var themeBuilderCss = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_5__["propertyGridCss"]);
        themeBuilderCss.root += " spg-theme-builder-root";
        themeEditorSurvey.css = themeBuilderCss;
        themeEditorSurvey.enterKeyAction = "loseFocus";
        themeEditorSurvey.onValueChanging.add(function (sender, options) {
            if (_this.blockChanges)
                return;
            _this.prevQuestionValues[options.name] = options.oldValue;
        });
        themeEditorSurvey.onValueChanged.add(function (sender, options) {
            if (_this.blockChanges)
                return;
            if (_this.blockThemeChangedNotifications == 0) {
                _this.undoRedoManager.startTransaction(options.name + " changed");
            }
            _this.undoRedoManager.onPropertyValueChanged("value", _this.prevQuestionValues[options.name], options.value, options.question, undefined);
            if (_this.generalPropertiesChanged(options)) {
                if (_this.blockThemeChangedNotifications == 0) {
                    _this.undoRedoManager.stopTransaction();
                }
                return;
            }
            if (options.name === "headerViewContainer") {
                _this.headerViewContainerPropertiesChanged(options);
            }
            _this.cssVariablePropertiesChanged(options);
            _this.blockThemeChangedNotifications += 1;
            _this.updateDependentQuestionValues(options);
            var newCssVariables = {};
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(newCssVariables, _this.currentTheme.cssVariables, _this.themeCssVariablesChanges);
            _this.setCssVariablesIntoCurrentTheme(newCssVariables);
            _this.updateSimulatorTheme();
            _this.blockThemeChangedNotifications -= 1;
            if (!!_this.undoRedoManager && _this.blockThemeChangedNotifications == 0) {
                _this.undoRedoManager.stopTransaction();
            }
        });
        themeEditorSurvey.onUploadFiles.add(function (_, options) {
            var callback = function (status, data) { return options.callback(status, [{ content: data, file: options.files[0] }]); };
            _this.surveyProvider.uploadFiles(options.files, undefined, callback);
        });
        this.patchFileEditors(themeEditorSurvey);
        themeEditorSurvey.getAllQuestions().forEach(function (q) { return q.allowRootStyle = false; });
        themeEditorSurvey.onQuestionCreated.add(function (_, opt) {
            opt.question.allowRootStyle = false;
        });
        return themeEditorSurvey;
    };
    ThemeBuilder.prototype.findSuitableTheme = function (themeName) {
        var probeThemeFullName = Object(_themes__WEBPACK_IMPORTED_MODULE_11__["getThemeFullName"])({ themeName: themeName, colorPalette: this.themePalette, isPanelless: this.themeMode === "lightweight" });
        return Object(_themes__WEBPACK_IMPORTED_MODULE_11__["findSuitableTheme"])(themeName, probeThemeFullName);
    };
    ThemeBuilder.prototype.patchFileEditors = function (survey) {
        var _this = this;
        var questionsToPatch = survey.getAllQuestions(false, false, true).filter(function (q) { return q.getType() == "fileedit"; });
        questionsToPatch.forEach(function (q) { q.onChooseFilesCallback = function (input, onFilesChosen) { return _this.surveyProvider.chooseFiles(input, onFilesChosen); }; });
    };
    ThemeBuilder.prototype.getCoverJson = function (headerSettings) {
        var result = {};
        survey_core__WEBPACK_IMPORTED_MODULE_2__["Serializer"].getProperties("cover").map(function (pr) { return pr.name; })
            .filter(function (key) { return headerSettings[key] !== undefined && headerSettings[key] !== null; })
            .forEach(function (key) {
            result[key] = headerSettings[key];
        });
        result["backgroundImageOpacity"] = headerSettings["backgroundImageOpacity"] / 100;
        return result;
    };
    ThemeBuilder.prototype.setCoverCssVariables = function (headerSettings) {
        var coverBackgroundColorValue = "trasparent";
        if (headerSettings["backgroundColorSwitch"] === "accentColor") {
            coverBackgroundColorValue = this.currentTheme.cssVariables["--sjs-primary-backcolor"];
        }
        else if (headerSettings["backgroundColorSwitch"] === "custom") {
            coverBackgroundColorValue = headerSettings.backgroundColor;
        }
        this.themeCssVariablesChanges["--sjs-cover-backcolor"] = coverBackgroundColorValue;
        if (!!headerSettings["titleForecolor"]) {
            this.themeCssVariablesChanges["--sjs-cover-title-forecolor"] = headerSettings.titleForecolor;
        }
        if (!!headerSettings["descriptionForecolor"]) {
            this.themeCssVariablesChanges["--sjs-cover-description-forecolor"] = headerSettings.descriptionForecolor;
        }
    };
    ThemeBuilder.prototype.loadThemeIntoPropertyGrid = function () {
        this.blockChanges = true;
        try {
            this.themeEditorSurvey.clear(true);
            this.themeEditorSurvey.mergeData(this.currentTheme.cssVariables);
            this.themeEditorSurvey.setValue("themeName", this.themeName);
            this.themeEditorSurvey.setValue("themeMode", this.themeMode);
            this.themeEditorSurvey.setValue("themePalette", this.themePalette);
            this.updatePropertyGridEditors(this.themeEditorSurvey);
            this.updatePropertyGridEditorsAvailability();
        }
        finally {
            this.blockChanges = false;
        }
    };
    ThemeBuilder.prototype.getBackgroundColorSwitchByValue = function (backgroundColor) {
        if (!backgroundColor || backgroundColor === "trasparent")
            return "none";
        if (backgroundColor === this.currentTheme.cssVariables["--sjs-primary-backcolor"])
            return "accentColor";
        return "custom";
    };
    ThemeBuilder.prototype.updateVisibilityOfPropertyGridGroups = function () {
        var page = this.themeEditorSurvey.pages[0];
        page.getElementByName("groupHeader").visible = this.surveyProvider.isMobileView ? false : _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.allowEditHeaderSettings;
        page.getElementByName("groupAdvanced").visible = !this.surveyProvider.isMobileView;
    };
    ThemeBuilder.prototype.setCoverPropertiesFromSurvey = function (panel) {
        panel.getQuestionByName("headerView").value = this.survey.headerView;
        panel.getQuestionByName("logoPosition").value = this.survey.logoPosition;
        panel.getQuestionByName("logoPositionX").readOnly = !this.survey.logo;
        panel.getQuestionByName("logoPositionY").readOnly = !this.survey.logo;
        panel.getQuestionByName("logoPosition").readOnly = !this.survey.logo;
        panel.getQuestionByName("titlePositionX").readOnly = !this.survey.title;
        panel.getQuestionByName("titlePositionY").readOnly = !this.survey.title;
        panel.getQuestionByName("descriptionPositionX").readOnly = !this.survey.description;
        panel.getQuestionByName("descriptionPositionY").readOnly = !this.survey.description;
    };
    ThemeBuilder.prototype.setCoverColorsFromThemeVariables = function (question, cssVariable) {
        if (!!question && !!cssVariable && cssVariable !== "trasparent") {
            question.value = cssVariable;
        }
    };
    ThemeBuilder.prototype.updateHeaderViewContainerEditors = function (themeCssVariables) {
        var _this = this;
        this.updateVisibilityOfPropertyGridGroups();
        var headerViewContainerQuestion = this.themeEditorSurvey.getQuestionByName("headerViewContainer");
        var panel = headerViewContainerQuestion.panels[0];
        panel.getQuestionByName("backgroundColor").choices = this.getPredefinedColorsItemValues();
        if (!!this.survey) {
            this.setCoverPropertiesFromSurvey(panel);
        }
        if (!!this.currentTheme.header) {
            Object.keys(this.currentTheme.header).forEach(function (key) {
                var question = panel.getQuestionByName(key);
                if (!!question && key === "backgroundImageOpacity") {
                    question.value = _this.currentTheme.header[key] * 100;
                }
                else if (question) {
                    question.value = _this.currentTheme.header[key];
                }
            });
            this.setCoverColorsFromThemeVariables(panel.getQuestionByName("titleForecolor"), themeCssVariables["--sjs-cover-title-forecolor"] || themeCssVariables["--sjs-general-dim-forecolor"]);
            this.setCoverColorsFromThemeVariables(panel.getQuestionByName("descriptionForecolor"), themeCssVariables["--sjs-cover-description-forecolor"] || themeCssVariables["--sjs-general-dim-forecolor-light"]);
            this.setCoverColorsFromThemeVariables(panel.getQuestionByName("backgroundColor"), themeCssVariables["--sjs-cover-backcolor"]);
            var backgroundColorValue = themeCssVariables["--sjs-cover-backcolor"];
            if (!!backgroundColorValue) {
                panel.getQuestionByName("backgroundColorSwitch").value = this.getBackgroundColorSwitchByValue(backgroundColorValue);
            }
        }
    };
    ThemeBuilder.prototype.updatePropertyGridEditorAvailablesFromSurveyElement = function () {
        var pageElements = this.survey.isSinglePage ? this.survey.pages[0].elements : this.survey.pages;
        this.themeEditorSurvey.getQuestionByName("surveyTitle").readOnly = !this.survey.hasTitle;
        this.themeEditorSurvey.getQuestionByName("pageTitle").readOnly = !pageElements.some(function (p) { return !!p.title; });
        this.themeEditorSurvey.getQuestionByName("pageDescription").readOnly = !pageElements.some(function (p) { return !!p.description; });
    };
    ThemeBuilder.prototype.updatePropertyGridEditorsAvailability = function () {
        var isCustomTheme = _themes__WEBPACK_IMPORTED_MODULE_11__["PredefinedThemes"].indexOf(this.themeName) === -1;
        this.themeEditorSurvey.getQuestionByName("themeMode").readOnly = isCustomTheme;
        this.themeEditorSurvey.getQuestionByName("themePalette").readOnly = isCustomTheme;
        var canModify = !this.surveyProvider.readOnly;
        var options = {
            theme: this.currentTheme,
            canModify: canModify
        };
        this.onCanModifyTheme.fire(this, options);
        this.themeEditorSurvey.getAllQuestions().forEach(function (q) {
            if (["themeName", "themePalette", "themeMode"].indexOf(q.name) === -1) {
                q.readOnly = !options.canModify;
            }
        });
        if (!!this.survey) {
            this.updatePropertyGridEditorAvailablesFromSurveyElement();
        }
    };
    ThemeBuilder.prototype.updatePropertyGridEditors = function (themeEditorSurvey) {
        var _this = this;
        var newCssVariables = {};
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assign"])(newCssVariables, this.currentTheme.cssVariables);
        themeEditorSurvey.getQuestionByName("backgroundImage").value = this.backgroundImage;
        themeEditorSurvey.getQuestionByName("backgroundImageFit").value = this.backgroundImageFit;
        themeEditorSurvey.getQuestionByName("backgroundImageAttachment").value = this.backgroundImageAttachment;
        themeEditorSurvey.getQuestionByName("backgroundOpacity").value = this.backgroundOpacity;
        themeEditorSurvey.getQuestionByName("generalPrimaryColor").value = themeEditorSurvey.getQuestionByName("--sjs-primary-backcolor").value;
        themeEditorSurvey.getQuestionByName("generalBackcolorDimColor").value = themeEditorSurvey.getQuestionByName("--sjs-general-backcolor-dim").value;
        this.updateHeaderViewContainerEditors(newCssVariables);
        Object(_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_9__["elementSettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("questionPanel"), newCssVariables, newCssVariables["--sjs-general-backcolor"], newCssVariables["--sjs-general-backcolor-dark"]);
        Object(_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_9__["elementSettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("editorPanel"), newCssVariables, newCssVariables["--sjs-general-backcolor-dim-light"], newCssVariables["--sjs-general-backcolor-dim-dark"]);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("surveyTitle"), newCssVariables);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("pageTitle"), newCssVariables, newCssVariables["--sjs-general-dim-forecolor"]);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("pageDescription"), newCssVariables, newCssVariables["--sjs-general-dim-forecolor-light"]);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("questionTitle"), newCssVariables, newCssVariables["--sjs-general-forecolor"]);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("questionDescription"), newCssVariables, newCssVariables["--sjs-general-forecolor-light"]);
        Object(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["fontsettingsFromCssVariable"])(themeEditorSurvey.getQuestionByName("editorFont"), newCssVariables, newCssVariables["--sjs-general-forecolor"], newCssVariables["--sjs-general-forecolor-light"]);
        if (!!newCssVariables["--sjs-corner-radius"]) {
            themeEditorSurvey.getQuestionByName("cornerRadius").value = parseFloat(newCssVariables["--sjs-corner-radius"]);
        }
        if (!!newCssVariables["--sjs-base-unit"]) {
            themeEditorSurvey.getQuestionByName("commonScale").value = parseFloat(newCssVariables["--sjs-base-unit"]) * 100 / 8;
        }
        if (!!newCssVariables["--sjs-font-size"]) {
            themeEditorSurvey.getQuestionByName("commonFontSize").value = parseFloat(newCssVariables["--sjs-font-size"]) * 100 / 16;
        }
        themeEditorSurvey.getAllQuestions().forEach(function (question) {
            if (["color", "colorsettings"].indexOf(question.getType()) !== -1) {
                question.choices = _this.getPredefinedColorsItemValues();
            }
        });
    };
    ThemeBuilder.prototype.setCssVariablesIntoCurrentTheme = function (newCssVariables) {
        Object.keys(newCssVariables).forEach(function (key) {
            if (newCssVariables[key] === undefined || newCssVariables[key] === null) {
                delete newCssVariables[key];
            }
        });
        this.currentTheme.cssVariables = newCssVariables;
    };
    ThemeBuilder.prototype.updateSimulatorTheme = function () {
        this.survey.applyTheme(this.currentTheme);
    };
    Object.defineProperty(ThemeBuilder.prototype, "saveThemeFunc", {
        /**
         * A function that is called [auto-save](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#isAutoSave) is triggered to save a theme JSON object.
         *
         * For more information, refer to the [Save and Load Custom Themes](/survey-creator/documentation/theme-editor#save-and-load-custom-themes) help topic.
         */
        get: function () {
            return this._saveThemeFuncValue;
        },
        set: function (value) {
            this._saveThemeFuncValue = value;
        },
        enumerable: false,
        configurable: true
    });
    ThemeBuilder.prototype.processAutoSave = function () {
        var _this = this;
        var saveThemeFunc = this.saveThemeFunc;
        if (!saveThemeFunc && this.surveyProvider.saveThemeFunc) {
            saveThemeFunc = function () { return _this.surveyProvider.doSaveTheme(); };
        }
        if (!saveThemeFunc) {
            return;
        }
        if (this.surveyProvider.autoSaveDelay <= 0) {
            saveThemeFunc();
            return;
        }
        if (!!this.autoSaveTimerId) {
            clearTimeout(this.autoSaveTimerId);
        }
        this.autoSaveTimerId = setTimeout(function () {
            clearTimeout(_this.autoSaveTimerId);
            _this.autoSaveTimerId = null;
            saveThemeFunc && saveThemeFunc();
        }, this.surveyProvider.autoSaveDelay);
    };
    ThemeBuilder.prototype.themeModified = function (options) {
        this.updateSimulatorTheme();
        if (this.blockThemeChangedNotifications == 0) {
            if (!!options["theme"]) {
                this.onThemeSelected.fire(this, options);
            }
            else {
                this.surveyProvider.isThemeModified = true;
                this.onThemeModified.fire(this, options);
            }
        }
        if (this.surveyProvider.isAutoSave) {
            this.processAutoSave();
        }
    };
    ThemeBuilder.prototype.getThemeEditorSurveyJSON = function () {
        var themeEditorSurveyJSON = {
            "clearInvisibleValues": "none",
            questionErrorLocation: "bottom",
            elements: [{
                    type: "panel",
                    name: "groupGeneral",
                    state: "expanded",
                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.groupGeneral"),
                    elements: [
                        {
                            type: "panel",
                            elements: [
                                {
                                    type: "dropdown",
                                    name: "themeName",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themeName"),
                                    descriptionLocation: "hidden",
                                    choices: this._availableThemes.map(function (theme) { return ({ value: theme, text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.names." + theme) }); }),
                                    defaultValue: ThemeBuilder.DefaultTheme.themeName || "default",
                                    allowClear: false
                                },
                                {
                                    type: "buttongroup",
                                    name: "themePalette",
                                    titleLocation: "hidden",
                                    choices: [
                                        { value: "light", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themePaletteLight") },
                                        { value: "dark", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themePaletteDark") }
                                    ],
                                    defaultValue: "light"
                                },
                                {
                                    type: "buttongroup",
                                    name: "themeMode",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themeMode"),
                                    choices: [
                                        { value: "panels", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themeModePanels") },
                                        { value: "lightweight", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.themeModeLightweight") }
                                    ],
                                    defaultValue: "panels"
                                }
                            ]
                        }
                    ]
                }, {
                    type: "panel",
                    name: "groupHeader",
                    state: "collapsed",
                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.groupHeader"),
                    elements: [
                        {
                            type: "panel",
                            elements: [
                                {
                                    "type": "paneldynamic",
                                    "name": "headerViewContainer",
                                    "titleLocation": "hidden",
                                    "allowAddPanel": false,
                                    "allowRemovePanel": false,
                                    "panelCount": 1,
                                    "defaultValue": [
                                        {
                                            "headerView": "basic",
                                            "logoPosition": "right",
                                            "inheritWidthFrom": "survey",
                                            "backgroundColorSwitch": "none",
                                            "backgroundImageFit": "cover",
                                            "backgroundImageOpacity": 100,
                                            "overlapEnabled": false,
                                            "logoPositionX": "right",
                                            "logoPositionY": "top",
                                            "titlePositionX": "left",
                                            "titlePositionY": "bottom",
                                            "descriptionPositionX": "left",
                                            "descriptionPositionY": "bottom",
                                            "textAreaWidth": 512,
                                            "height": 256
                                        }
                                    ],
                                    "templateElements": [
                                        {
                                            type: "panel",
                                            questionTitleLocation: "top",
                                            elements: [
                                                {
                                                    type: "buttongroup",
                                                    name: "headerView",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.headerView"),
                                                    choices: [
                                                        { value: "basic", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.headerViewBasic") },
                                                        { value: "advanced", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.headerViewAdvanced") }
                                                    ]
                                                },
                                                {
                                                    type: "buttongroup",
                                                    name: "logoPosition",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.logoPosition"),
                                                    visibleIf: "{panel.headerView} = 'basic'",
                                                    choices: [
                                                        { value: "left", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.horizontalAlignmentLeft") },
                                                        { value: "right", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.horizontalAlignmentRight") }
                                                    ],
                                                },
                                                {
                                                    type: "spinedit",
                                                    name: "height",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("p.height"),
                                                    descriptionLocation: "hidden",
                                                    visibleIf: "{panel.headerView} = 'advanced'",
                                                    unit: "px",
                                                    min: 0
                                                },
                                                {
                                                    type: "buttongroup",
                                                    name: "inheritWidthFrom",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverInheritWidthFrom"),
                                                    choices: [
                                                        { value: "survey", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverInheritWidthFromSurvey") },
                                                        { value: "container", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverInheritWidthFromContainer") }
                                                    ],
                                                    visibleIf: "{panel.headerView} = 'advanced'",
                                                },
                                                {
                                                    type: "spinedit",
                                                    name: "textAreaWidth",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverTextAreaWidth"),
                                                    descriptionLocation: "hidden",
                                                    visibleIf: "{panel.headerView} = 'advanced'",
                                                    unit: "px",
                                                    min: 0
                                                }
                                            ]
                                        }, {
                                            type: "panel",
                                            questionTitleLocation: "top",
                                            visibleIf: "{panel.headerView} = 'advanced'",
                                            elements: [
                                                {
                                                    type: "buttongroup",
                                                    name: "backgroundColorSwitch",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverBackgroundColorSwitch"),
                                                    choices: [
                                                        { value: "none", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverBackgroundColorNone") },
                                                        { value: "accentColor", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverBackgroundColorAccentColor") },
                                                        { value: "custom", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverBackgroundColorCustom") },
                                                    ],
                                                },
                                                {
                                                    type: "color",
                                                    name: "backgroundColor",
                                                    enableIf: "{panel.backgroundColorSwitch} = 'custom'",
                                                    titleLocation: "hidden",
                                                    descriptionLocation: "hidden",
                                                },
                                                {
                                                    type: "panel",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImage"),
                                                    elements: [
                                                        {
                                                            type: "fileedit",
                                                            storeDataAsText: false,
                                                            name: "backgroundImage",
                                                            titleLocation: "hidden",
                                                            acceptedTypes: "image/*",
                                                            placeholder: "Browse..."
                                                        },
                                                        {
                                                            type: "buttongroup",
                                                            name: "backgroundImageFit",
                                                            enableIf: "{panel.backgroundImage} notempty",
                                                            titleLocation: "hidden",
                                                            choices: [
                                                                { value: "cover", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitCover") },
                                                                { value: "fill", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitFill") },
                                                                { value: "contain", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitContain") },
                                                                { value: "tile", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitTile") },
                                                            ],
                                                        },
                                                        {
                                                            type: "spinedit",
                                                            name: "backgroundImageOpacity",
                                                            enableIf: "{panel.backgroundImage} notempty",
                                                            titleLocation: "left",
                                                            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundOpacity"),
                                                            descriptionLocation: "hidden",
                                                            unit: "%",
                                                            min: 0,
                                                            max: 100,
                                                            step: 5
                                                        },
                                                    ]
                                                },
                                                {
                                                    type: "color",
                                                    name: "titleForecolor",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverTitleForecolor"),
                                                    descriptionLocation: "hidden",
                                                },
                                                {
                                                    type: "colorsettings",
                                                    name: "descriptionForecolor",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverDescriptionForecolor"),
                                                    descriptionLocation: "hidden",
                                                },
                                                {
                                                    type: "boolean",
                                                    name: "overlapEnabled",
                                                    renderAs: "checkbox",
                                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverOverlapEnabled"),
                                                    titleLocation: "hidden",
                                                    descriptionLocation: "hidden",
                                                }
                                            ]
                                        }, {
                                            type: "panel",
                                            questionTitleLocation: "top",
                                            visibleIf: "{panel.headerView} = 'advanced'",
                                            elements: [
                                                this.getHorizontalAlignment("logoPositionX", Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.logoPosition"), "right"),
                                                this.getVerticalAlignment("logoPositionY", "top"),
                                                this.getHorizontalAlignment("titlePositionX", Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverTitlePosition"), "left"),
                                                this.getVerticalAlignment("titlePositionY", "bottom"),
                                                this.getHorizontalAlignment("descriptionPositionX", Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.coverDescriptionPosition"), "left"),
                                                this.getVerticalAlignment("descriptionPositionY", "bottom"),
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }, {
                    type: "panel",
                    name: "groupBackground",
                    state: "collapsed",
                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.groupBackground"),
                    elements: [
                        {
                            type: "panel",
                            elements: [
                                {
                                    type: "color",
                                    name: "generalBackcolorDimColor",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundDimColor"),
                                    descriptionLocation: "hidden",
                                },
                                {
                                    type: "panel",
                                    name: "background",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImage"),
                                    elements: [
                                        {
                                            type: "fileedit",
                                            storeDataAsText: false,
                                            name: "backgroundImage",
                                            titleLocation: "hidden",
                                            acceptedTypes: "image/*",
                                            placeholder: "Browse..."
                                        },
                                        {
                                            type: "buttongroup",
                                            name: "backgroundImageFit",
                                            enableIf: "{backgroundImage} notempty",
                                            titleLocation: "hidden",
                                            choices: [
                                                { value: "auto", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitAuto") },
                                                { value: "contain", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitContain") },
                                                { value: "cover", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageFitCover") }
                                            ],
                                            defaultValue: "cover"
                                        },
                                        {
                                            type: "buttongroup",
                                            name: "backgroundImageAttachment",
                                            enableIf: "{backgroundImage} notempty",
                                            titleLocation: "hidden",
                                            choices: [
                                                { value: "fixed", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageAttachmentFixed") },
                                                { value: "scroll", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundImageAttachmentScroll") }
                                            ],
                                            defaultValue: "scroll"
                                        },
                                        {
                                            type: "spinedit",
                                            name: "backgroundOpacity",
                                            enableIf: "{backgroundImage} notempty",
                                            titleLocation: "left",
                                            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundOpacity"),
                                            descriptionLocation: "hidden",
                                            unit: "%",
                                            defaultValue: 100,
                                            min: 0,
                                            max: 100,
                                            step: 5
                                        },
                                    ]
                                }
                            ]
                        }
                    ]
                }, {
                    type: "panel",
                    name: "groupAppearance",
                    state: "collapsed",
                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.groupAppearance"),
                    elements: [
                        {
                            type: "panel",
                            elements: [
                                {
                                    type: "color",
                                    name: "generalPrimaryColor",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryColor"),
                                    descriptionLocation: "hidden",
                                },
                                {
                                    type: "spinedit",
                                    name: "panelBackgroundTransparency",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.panelBackgroundTransparency"),
                                    descriptionLocation: "hidden",
                                    unit: "%",
                                    defaultValue: 100,
                                    min: 0,
                                    max: 100,
                                    step: 5
                                },
                                {
                                    type: "spinedit",
                                    name: "questionBackgroundTransparency",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.questionBackgroundTransparency"),
                                    descriptionLocation: "hidden",
                                    unit: "%",
                                    defaultValue: 100,
                                    min: 0,
                                    max: 100,
                                    step: 5
                                }
                            ]
                        }, {
                            type: "panel",
                            elements: [
                                {
                                    type: "dropdown",
                                    name: "--font-family",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.fontFamily"),
                                    descriptionLocation: "hidden",
                                    choices: [].concat(_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_8__["DefaultFonts"]),
                                    defaultValue: "Open Sans",
                                    allowClear: false
                                },
                                {
                                    type: "spinedit",
                                    name: "commonFontSize",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.fontSize"),
                                    descriptionLocation: "hidden",
                                    unit: "%",
                                    defaultValue: 100,
                                    min: 0,
                                    step: 5
                                },
                            ]
                        }, {
                            type: "panel",
                            elements: [
                                {
                                    type: "spinedit",
                                    name: "commonScale",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.scale"),
                                    descriptionLocation: "hidden",
                                    unit: "%",
                                    defaultValue: 100,
                                    min: 0,
                                    step: 5
                                },
                                {
                                    type: "spinedit",
                                    name: "cornerRadius",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.cornerRadius"),
                                    descriptionLocation: "hidden",
                                    unit: "px",
                                    defaultValue: 4,
                                    min: 0
                                },
                            ]
                        }
                    ]
                }, {
                    type: "panel",
                    name: "groupAdvanced",
                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.groupAdvanced"),
                    state: "collapsed",
                    elements: [
                        {
                            type: "panel",
                            elements: [
                                {
                                    type: "color",
                                    name: "--sjs-general-backcolor-dim",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.backgroundDimColor"),
                                    descriptionLocation: "hidden",
                                }, {
                                    type: "panel",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.accentBackground"),
                                    elements: [
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-primary-backcolor",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryDefaultColor"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        },
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-primary-backcolor-dark",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryDarkColor"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        },
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-primary-backcolor-light",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryLightColor"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        }
                                    ]
                                }, {
                                    type: "panel",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.accentForeground"),
                                    elements: [
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-primary-forecolor",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryForecolor"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        },
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-primary-forecolor-light",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.primaryForecolorLight"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        }
                                    ]
                                }
                            ]
                        }, {
                            type: "panel",
                            elements: [
                                {
                                    type: "fontSettings",
                                    name: "surveyTitle",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.surveyTitle"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        weight: "700",
                                        size: 32
                                    }
                                }, {
                                    type: "fontSettings",
                                    name: "pageTitle",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.pageTitle"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        color: "rgba(0, 0, 0, 0.91)",
                                        weight: "700",
                                        size: 24
                                    }
                                }, {
                                    type: "fontSettings",
                                    name: "pageDescription",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.pageDescription"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        color: "rgba(0, 0, 0, 0.45)",
                                        weight: "400",
                                        size: 16
                                    }
                                }
                            ]
                        }, {
                            type: "panel",
                            elements: [
                                {
                                    type: "elementSettings",
                                    name: "questionPanel",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.questionPanel"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        backcolor: "rgba(255, 255, 255, 1)",
                                        hovercolor: "rgba(248, 248, 248, 1)",
                                        cornerRadius: "4px",
                                        corner: 4
                                    }
                                },
                                {
                                    type: "boxshadowsettings",
                                    name: "--sjs-shadow-small",
                                    descriptionLocation: "hidden",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.questionShadow"),
                                    defaultValue: [
                                        {
                                            x: 0,
                                            y: 1,
                                            blur: 2,
                                            spread: 0,
                                            isInset: false,
                                            color: "rgba(0, 0, 0, 0.15)"
                                        }
                                    ]
                                },
                                {
                                    type: "expression",
                                    name: "--sjs-general-backcolor",
                                    expression: "{questionPanel.backcolor}",
                                    visible: false
                                }, {
                                    type: "fontSettings",
                                    name: "questionTitle",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.questionTitle"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        color: "rgba(0, 0, 0, 0.91)",
                                        weight: "600",
                                        size: 16,
                                    }
                                }, {
                                    type: "fontSettings",
                                    name: "questionDescription",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.questionDescription"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        color: "rgba(0, 0, 0, 0.45)",
                                        weight: "400",
                                        size: 16
                                    }
                                }
                            ]
                        }, {
                            type: "panel",
                            elements: [
                                {
                                    type: "elementSettings",
                                    name: "editorPanel",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.editorPanel"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        backcolor: "rgba(255, 255, 255, 1)",
                                        hovercolor: "rgba(248, 248, 248, 1)",
                                        cornerRadius: "4px",
                                        corner: 4
                                    }
                                },
                                {
                                    type: "boxshadowsettings",
                                    name: "--sjs-shadow-inner",
                                    descriptionLocation: "hidden",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.editorShadow"),
                                    defaultValue: [
                                        {
                                            x: 0,
                                            y: 1,
                                            blur: 2,
                                            spread: 0,
                                            isInset: true,
                                            color: "rgba(0, 0, 0, 0.15)"
                                        }
                                    ]
                                }, {
                                    type: "expression",
                                    name: "--sjs-general-backcolor-dim-light",
                                    expression: "{editorPanel.backcolor}",
                                    visible: false
                                }, {
                                    type: "fontSettings",
                                    name: "editorFont",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.editorFont"),
                                    descriptionLocation: "hidden",
                                    defaultValue: {
                                        family: _creator_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].theme.fontFamily,
                                        color: "rgba(0, 0, 0, 0.91)",
                                        weight: "400",
                                        size: 16
                                    }
                                }
                            ]
                        }, {
                            type: "panel",
                            elements: [{
                                    type: "panel",
                                    title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.linesColors"),
                                    elements: [
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-border-default",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.borderDefault"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        },
                                        {
                                            type: "colorsettings",
                                            name: "--sjs-border-light",
                                            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.borderLight"),
                                            colorTitleLocation: "left",
                                            titleLocation: "hidden",
                                            descriptionLocation: "hidden",
                                        }
                                    ]
                                }]
                        }
                    ]
                }]
        };
        return themeEditorSurveyJSON;
    };
    ThemeBuilder.prototype.getHorizontalAlignment = function (questionName, title, defaultValue) {
        return {
            type: "buttongroup",
            name: questionName,
            title: title,
            choices: [
                { value: "left", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.horizontalAlignmentLeft") },
                { value: "center", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.horizontalAlignmentCenter") },
                { value: "right", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.horizontalAlignmentRight") },
            ],
            defaultValue: defaultValue
        };
    };
    ThemeBuilder.prototype.getVerticalAlignment = function (questionName, defaultValue) {
        return {
            type: "buttongroup",
            name: questionName,
            titleLocation: "hidden",
            choices: [
                { value: "top", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.verticalAlignmentTop") },
                { value: "middle", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.verticalAlignmentMiddle") },
                { value: "bottom", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["getLocString"])("theme.verticalAlignmentBottom") },
            ],
            defaultValue: defaultValue
        };
    };
    ThemeBuilder.prototype.dispose = function () {
        var _a;
        this.surveyProvider.onPropertyChanged.remove(this.creatorPropertyChanged);
        (_a = this.themeEditorSurveyValue) === null || _a === void 0 ? void 0 : _a.dispose();
        this.simulator.dispose();
        _super.prototype.dispose.call(this);
    };
    ThemeBuilder.DefaultTheme = _themes__WEBPACK_IMPORTED_MODULE_11__["Themes"]["default-light"];
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: false,
            onSet: function (val, target) {
                target.simulator.survey.showInvisibleElements = val;
            }
        })
    ], ThemeBuilder.prototype, "showInvisibleElements", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: true })
    ], ThemeBuilder.prototype, "showPagesInTestSurveyTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: true,
            onSet: function (value, target) {
                if (!!target.simulator)
                    target.simulator.isRunning = value;
            }
        })
    ], ThemeBuilder.prototype, "isRunning", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["propertyArray"])()
    ], ThemeBuilder.prototype, "pageListItems", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (val, target) {
                if (!!val) {
                    var survey = target.simulator.survey;
                    if (survey.firstPageIsStarted) {
                        if (val === survey.pages[0]) {
                            survey.clear(false, true);
                        }
                        else {
                            if (survey.state == "starting") {
                                survey.setPropertyValue("isStartedState", false);
                            }
                        }
                    }
                    if (survey.state !== "starting") {
                        survey.currentPage = val;
                    }
                }
                target.updatePrevNextPageActionState();
            }
        })
    ], ThemeBuilder.prototype, "activePage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (newValue, _target) {
                _target.currentTheme.backgroundImage = newValue;
            }
        })
    ], ThemeBuilder.prototype, "backgroundImage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: "cover",
            onSet: function (newValue, _target) {
                _target.currentTheme.backgroundImageFit = newValue;
            }
        })
    ], ThemeBuilder.prototype, "backgroundImageFit", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: "scroll",
            onSet: function (newValue, _target) {
                _target.currentTheme.backgroundImageAttachment = newValue;
            }
        })
    ], ThemeBuilder.prototype, "backgroundImageAttachment", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (newValue, _target) {
                _target.currentTheme.backgroundOpacity = newValue / 100;
            }
        })
    ], ThemeBuilder.prototype, "backgroundOpacity", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "default" })
    ], ThemeBuilder.prototype, "themeName", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "light" })
    ], ThemeBuilder.prototype, "themePalette", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "panels" })
    ], ThemeBuilder.prototype, "themeMode", void 0);
    return ThemeBuilder;
}(survey_core__WEBPACK_IMPORTED_MODULE_2__["Base"]));



/***/ }),

/***/ "./src/components/tabs/theme-custom-questions/boxshadow-settings.ts":
/*!**************************************************************************!*\
  !*** ./src/components/tabs/theme-custom-questions/boxshadow-settings.ts ***!
  \**************************************************************************/
/*! exports provided: createBoxShadow, parseBoxShadow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBoxShadow", function() { return createBoxShadow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBoxShadow", function() { return parseBoxShadow; });
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"].Instance.add({
    name: "boxshadowsettings",
    showInToolbox: false,
    questionJSON: {
        "type": "paneldynamic",
        "minPanelCount": 1,
        "panelAddText": Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowAddRule"),
        "templateElements": [
            {
                "type": "spinedit",
                "name": "x",
                "unit": "px",
                "title": Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowX"),
                "titleLocation": "left",
            },
            {
                "type": "spinedit",
                "name": "y",
                "unit": "px",
                "startWithNewLine": false,
                "title": Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowY"),
                "titleLocation": "left"
            },
            {
                "type": "spinedit",
                "name": "blur",
                "unit": "px",
                "title": Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowBlur"),
                "min": 0,
                "titleLocation": "left"
            },
            {
                "type": "spinedit",
                "name": "spread",
                "unit": "px",
                "min": 0,
                "startWithNewLine": false,
                "title": Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowSpread"),
                "titleLocation": "left"
            },
            {
                "type": "colorsettings",
                "name": "color",
                "titleLocation": "hidden"
            },
            {
                "type": "buttongroup",
                "name": "isInset",
                "titleLocation": "hidden",
                "choices": [{ text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowDrop"), value: false }, { text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_0__["getLocString"])("theme.boxShadowInner"), value: true }]
            }
        ]
    },
    onCreated: function (question) {
        question.valueFromDataCallback = function (value) { return typeof value == "string" ? parseBoxShadow(value) : value; };
        question.valueToDataCallback = function (value) { return !!value ? (typeof value == "string" ? value : createBoxShadow(Array.isArray(value) ? value : [value])) : ""; };
        question.contentQuestion.panels.forEach(function (p) { return p.questions.forEach(function (q) { return q.allowRootStyle = false; }); });
    },
});
function createBoxShadow(value) {
    return value.map((function (val) { var _a, _b, _c, _d, _e; return "" + (val.isInset == true ? "inset " : "") + ((_a = val.x) !== null && _a !== void 0 ? _a : 0) + "px " + ((_b = val.y) !== null && _b !== void 0 ? _b : 0) + "px " + ((_c = val.blur) !== null && _c !== void 0 ? _c : 0) + "px " + ((_d = val.spread) !== null && _d !== void 0 ? _d : 0) + "px " + ((_e = val.color) !== null && _e !== void 0 ? _e : "#000000"); })).join(", ");
}
function parseBoxShadow(value) {
    return value.split(/,(?![^(]*\))/).map(function (value) {
        var color = value.match(/#[a-zA-Z0-9]+|rgba?\(.*?\)/);
        var isInset = value.indexOf("inset") > -1;
        var res = {};
        if (isInset) {
            value = value.replace("inset", "");
        }
        if (!!color) {
            res["color"] = color[0];
        }
        var values = value.replace(/\s+/g, " ").replace(/^\s|\s$/g, "").split(" ");
        res["x"] = parseInt(values[0]) || 0;
        res["y"] = parseInt(values[1]) || 0;
        res["blur"] = parseInt(values[2]) || 0;
        res["spread"] = parseInt(values[3]) || 0;
        res["isInset"] = isInset;
        return res;
    });
}


/***/ }),

/***/ "./src/components/tabs/theme-custom-questions/color-settings.ts":
/*!**********************************************************************!*\
  !*** ./src/components/tabs/theme-custom-questions/color-settings.ts ***!
  \**********************************************************************/
/*! exports provided: createColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createColor", function() { return createColor; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/utils */ "./src/utils/utils.ts");



survey_core__WEBPACK_IMPORTED_MODULE_0__["ComponentCollection"].Instance.add({
    name: "colorsettings",
    showInToolbox: false,
    elementsJSON: [
        {
            name: "color",
            type: "color",
            titleLocation: "hidden",
        },
        {
            name: "opacity",
            startWithNewLine: false,
            type: "spinedit",
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.opacity"),
            min: 0,
            max: 100,
            unit: "%",
            titleLocation: "left"
        }
    ],
    onInit: function () {
        survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperties("colorsettings", [{
                name: "choices:itemvalue[]",
            },
            {
                name: "colorTitleLocation:string",
                default: "hidden",
            },
            {
                name: "colorTitle:string",
            }
        ]);
    },
    onLoaded: function (question) {
        syncPropertiesFromCompositeToColor(question, "colorTitle", question.colorTitle);
        syncPropertiesFromCompositeToColor(question, "colorTitleLocation", question.colorTitleLocation);
        syncPropertiesFromCompositeToColor(question, "choices", question.choices);
    },
    onPropertyChanged: function (question, propertyName, newValue) {
        syncPropertiesFromCompositeToColor(question, propertyName, newValue);
    },
    valueToQuestion: function (value) {
        return !!value ? createColor(value) : "";
    },
    valueFromQuestion: function (value) {
        return typeof value == "string" ? Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["parseColor"])(value) : value;
    },
    onCreated: function (question) {
        question.contentPanel.questions.forEach(function (q) { return q.allowRootStyle = false; });
    }
});
function syncPropertiesFromCompositeToColor(question, propertyName, newValue) {
    var colorQuestion = question.contentPanel.questions[0];
    if (propertyName == "colorTitleLocation") {
        colorQuestion.titleLocation = newValue;
    }
    if (propertyName == "colorTitle") {
        colorQuestion.title = newValue;
    }
    if (propertyName == "choices") {
        colorQuestion.choices = newValue;
    }
}
function createColor(value) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["ingectAlpha"])(value.color, value.opacity / 100);
}


/***/ }),

/***/ "./src/components/tabs/theme-custom-questions/element-settings.ts":
/*!************************************************************************!*\
  !*** ./src/components/tabs/theme-custom-questions/element-settings.ts ***!
  \************************************************************************/
/*! exports provided: elementSettingsToCssVariable, elementSettingsFromCssVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementSettingsToCssVariable", function() { return elementSettingsToCssVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementSettingsFromCssVariable", function() { return elementSettingsFromCssVariable; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../editorLocalization */ "./src/editorLocalization.ts");


survey_core__WEBPACK_IMPORTED_MODULE_0__["ComponentCollection"].Instance.add({
    name: "elementsettings",
    showInToolbox: false,
    elementsJSON: [
        {
            type: "colorsettings",
            name: "backcolor",
            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.backcolor"),
            colorTitleLocation: "left",
            titleLocation: "hidden",
            descriptionLocation: "hidden"
        },
        {
            type: "colorsettings",
            name: "hovercolor",
            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.hovercolor"),
            colorTitleLocation: "left",
            titleLocation: "hidden",
            descriptionLocation: "hidden"
        },
        {
            type: "spinedit",
            name: "corner",
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.cornerRadius"),
            titleLocation: "left",
            descriptionLocation: "hidden",
            unit: "px",
            min: 0
        },
        {
            type: "expression",
            name: "cornerRadius",
            expression: "iif({composite.corner} notempty, {composite.corner} + 'px', '')",
            visible: false
        }
    ],
    onInit: function () {
    },
    onCreated: function (question) {
    },
    onValueChanged: function (question, name, newValue) {
    },
});
function elementSettingsToCssVariable(question, themeCssVariables) {
    Object.keys(question.value).forEach(function (key) {
        if (key === "corner")
            return;
        var propertyName = "--sjs-" + question.name.toLocaleLowerCase() + "-" + key;
        if (question.value[key] !== question.defaultValue[key]) {
            themeCssVariables[propertyName] = question.value[key];
        }
        else {
            themeCssVariables[propertyName] = undefined;
        }
    });
}
function elementSettingsFromCssVariable(question, themeCssVariables, defaultBackcolorVariable, defaultHovercolorVariable) {
    var compositeQuestion = question;
    var elementSettingsFromTheme = Object.keys(themeCssVariables).filter(function (key) { return key.indexOf(question.name.toLocaleLowerCase()) !== -1; });
    elementSettingsFromTheme.forEach(function (key) {
        var propertyName = key.split("-").pop();
        if (propertyName === "cornerRadius" && themeCssVariables[key] !== undefined) {
            compositeQuestion.contentPanel.getQuestionByName("corner").value = parseFloat(themeCssVariables[key].toString());
        }
        else {
            compositeQuestion.contentPanel.getQuestionByName(propertyName).value = themeCssVariables[key];
        }
    });
    if (elementSettingsFromTheme.length === 0) {
        question.contentPanel.getQuestionByName("backcolor").value = defaultBackcolorVariable;
        question.contentPanel.getQuestionByName("hovercolor").value = defaultHovercolorVariable;
    }
}


/***/ }),

/***/ "./src/components/tabs/theme-custom-questions/font-settings.ts":
/*!*********************************************************************!*\
  !*** ./src/components/tabs/theme-custom-questions/font-settings.ts ***!
  \*********************************************************************/
/*! exports provided: DefaultFonts, fontsettingsToCssVariable, fontsettingsFromCssVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultFonts", function() { return DefaultFonts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fontsettingsToCssVariable", function() { return fontsettingsToCssVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fontsettingsFromCssVariable", function() { return fontsettingsFromCssVariable; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../editorLocalization */ "./src/editorLocalization.ts");


var DefaultFonts = [
    "Open Sans",
    "Arial, sans-serif",
    "Brush Script MT, cursive",
    "Courier New, monospace",
    "Garamond, serif",
    "Georgia, serif",
    "Tahoma, sans-serif",
    "Times New Roman, serif",
    "Trebuchet MS, sans-serif",
    "Verdana, sans-serif",
];
survey_core__WEBPACK_IMPORTED_MODULE_0__["ComponentCollection"].Instance.add({
    name: "fontsettings",
    showInToolbox: false,
    elementsJSON: [
        {
            type: "dropdown",
            name: "family",
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.fontFamily"),
            titleLocation: "left",
            descriptionLocation: "hidden",
            choices: [].concat(DefaultFonts),
            allowClear: false
        },
        {
            type: "buttongroup",
            name: "weight",
            titleLocation: "hidden",
            descriptionLocation: "hidden",
            choices: [
                { value: "400", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.fontWeightRegular") },
                { value: "600", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.fontWeightSemiBold") },
                { value: "700", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.fontWeightBold") },
                { value: "800", text: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.fontWeightHeavy") },
            ],
        },
        {
            type: "colorsettings",
            name: "color",
            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.color"),
            colorTitleLocation: "left",
            titleLocation: "hidden",
            descriptionLocation: "hidden"
        },
        {
            type: "colorsettings",
            name: "placeholdercolor",
            colorTitle: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.placeholderColor"),
            colorTitleLocation: "left",
            titleLocation: "hidden",
            descriptionLocation: "hidden"
        },
        {
            type: "spinedit",
            name: "size",
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])("theme.size"),
            titleLocation: "left",
            descriptionLocation: "hidden",
            unit: "px",
            min: 0,
        }
    ],
    onInit: function () {
    },
    onCreated: function (question) {
        var color = question.contentPanel.getQuestionByName("color");
        color.visible = question.name !== "surveyTitle";
        var placeholderColor = question.contentPanel.getQuestionByName("placeholdercolor");
        placeholderColor.visible = question.name === "editorFont";
    },
    onValueChanged: function (question, name, newValue) {
    },
});
function fontsettingsToCssVariable(question, themeCssVariables) {
    Object.keys(question.value).forEach(function (key) {
        var _a;
        var innerQ = question.contentPanel.getQuestionByName(key);
        var propertyName = "--sjs-font-" + question.name.toLocaleLowerCase() + "-" + key;
        if (question.value[key] !== question.defaultValue[key]) {
            themeCssVariables[propertyName] = question.value[key] + (((_a = innerQ.unit) === null || _a === void 0 ? void 0 : _a.toString()) || "");
        }
        else {
            themeCssVariables[propertyName] = undefined;
        }
    });
}
function fontsettingsFromCssVariable(question, themeCssVariables, defaultColorVariable, defaultPlaceholderColorVariable) {
    var compositeQuestion = question;
    var fontSettingsFromTheme = Object.keys(themeCssVariables).filter(function (key) { return key.indexOf(question.name.toLocaleLowerCase()) !== -1; });
    fontSettingsFromTheme.forEach(function (key) {
        var propertyName = key.split("-").pop();
        compositeQuestion.contentPanel.getQuestionByName(propertyName).value = themeCssVariables[key];
    });
    if (fontSettingsFromTheme.length === 0) {
        if (!!defaultColorVariable) {
            compositeQuestion.contentPanel.getQuestionByName("color").value = defaultColorVariable;
        }
        if (!!defaultPlaceholderColorVariable) {
            compositeQuestion.contentPanel.getQuestionByName("placeholdercolor").value = defaultPlaceholderColorVariable;
        }
    }
}


/***/ }),

/***/ "./src/components/tabs/theme-plugin.ts":
/*!*********************************************!*\
  !*** ./src/components/tabs/theme-plugin.ts ***!
  \*********************************************/
/*! exports provided: ThemeTabPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThemeTabPlugin", function() { return ThemeTabPlugin; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _theme_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./theme-builder */ "./src/components/tabs/theme-builder.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./themes */ "./src/components/tabs/themes.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");






function getObjectDiffs(obj1, obj2) {
    if (obj2 === void 0) { obj2 = {}; }
    var result = {};
    Object.keys(obj1).forEach(function (key) {
        if (typeof obj1[key] === "object") {
            result[key] = getObjectDiffs(obj1[key], obj2[key]);
        }
        else {
            if (obj1[key] !== undefined && obj1[key] != obj2[key]) {
                result[key] = obj1[key];
            }
        }
    });
    return result;
}
var ThemeTabPlugin = /** @class */ (function () {
    function ThemeTabPlugin(creator) {
        var _this = this;
        this.creator = creator;
        this.simulatorTheme = survey_core__WEBPACK_IMPORTED_MODULE_0__["surveyCss"][survey_core__WEBPACK_IMPORTED_MODULE_0__["defaultV2ThemeName"]];
        this._availableThemes = [].concat(_themes__WEBPACK_IMPORTED_MODULE_4__["PredefinedThemes"]);
        this.saveToFileHandler = _utils_utils__WEBPACK_IMPORTED_MODULE_5__["saveToFileHandler"];
        this.onThemeSelected = new survey_core__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        this.onThemeModified = new survey_core__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        this.onCanModifyTheme = new survey_core__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        creator.addPluginTab("theme", this, "ed.themeSurvey");
        this.simulatorTheme = survey_core__WEBPACK_IMPORTED_MODULE_0__["surveyCss"][survey_core__WEBPACK_IMPORTED_MODULE_0__["defaultV2ThemeName"]];
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
        this.sidebarTab = this.creator.sidebar.addTab("theme");
        this.sidebarTab.caption = _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.themePropertyGridTitle");
        creator.registerShortcut("undo_theme", {
            name: "undo",
            affectedTab: "theme",
            hotKey: {
                ctrlKey: true,
                keyCode: 90,
            },
            macOsHotkey: {
                keyCode: 90,
            },
            execute: function () { return _this.undo(); }
        });
        creator.registerShortcut("redo_theme", {
            name: "redo",
            affectedTab: "theme",
            hotKey: {
                ctrlKey: true,
                keyCode: 89,
            },
            macOsHotkey: {
                keyCode: 89,
            },
            execute: function () { return _this.redo(); }
        });
    }
    ThemeTabPlugin.prototype.createVisibleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () { return _this.creator.activeTab === "theme"; });
    };
    ThemeTabPlugin.prototype.activate = function () {
        this.model = new _theme_builder__WEBPACK_IMPORTED_MODULE_2__["ThemeBuilder"](this.creator, this.simulatorTheme);
        this.model.availableThemes = this.availableThemes;
        this.model.simulator.landscape = this.creator.previewOrientation != "portrait";
        this.update();
        this.sidebarTab.model = this.model.themeEditorSurvey;
        this.sidebarTab.componentName = "survey-widget";
        this.creator.sidebar.activeTab = this.sidebarTab.id;
    };
    ThemeTabPlugin.prototype.update = function () {
        var _this = this;
        if (!this.model)
            return;
        var options = {
            showPagesInTestSurveyTab: this.creator.showPagesInTestSurveyTab,
        };
        this.model.testAgainAction = this.testAgainAction;
        this.model.availableThemes = this.availableThemes;
        this.model.prevPageAction = this.prevPageAction;
        this.model.nextPageAction = this.nextPageAction;
        this.model.initialize(this.creator.JSON, options);
        if (this.creator.showInvisibleElementsInTestSurveyTab) {
            this.invisibleToggleAction.css = this.model.showInvisibleElements ? "sv-action-bar-item--active" : "";
            this.invisibleToggleAction.visible = this.model.isRunning;
        }
        this.updateUndeRedoActions();
        this.model.undoRedoManager.canUndoRedoCallback = function () {
            _this.updateUndeRedoActions();
        };
        this.model.show();
        this.model.onPropertyChanged.add(function (sender, options) {
            if (options.name === "isRunning") {
                _this.invisibleToggleAction && (_this.invisibleToggleAction.visible = _this.model.isRunning);
                _this.testAgainAction.visible = !_this.model.isRunning;
            }
        });
        this.model.onThemeSelected.add(function (sender, options) {
            _this.onThemeSelected.fire(_this, options);
        });
        this.model.onThemeModified.add(function (sender, options) {
            _this.onThemeModified.fire(_this, options);
        });
        this.model.onCanModifyTheme.add(function (sender, options) {
            _this.onCanModifyTheme.fire(_this, options);
        });
    };
    ThemeTabPlugin.prototype.deactivate = function () {
        if (this.model) {
            this.simulatorTheme = this.model.simulator.survey.css;
            this.model.onPropertyChanged.clear();
            this.model.onThemeSelected.clear();
            this.model.onThemeModified.clear();
            this.model.onCanModifyTheme.clear();
            this.model.onSurveyCreatedCallback = undefined;
            this.model.dispose();
            this.model = undefined;
        }
        this.sidebarTab.visible = false;
        this.testAgainAction.visible = false;
        this.invisibleToggleAction && (this.invisibleToggleAction.visible = false);
        return true;
    };
    ThemeTabPlugin.prototype.exportToFile = function (fileName) {
        var themeData = JSON.stringify(this.creator.theme, null, 4);
        var themeBlob = new Blob([themeData], { type: "application/json" });
        this.saveToFileHandler(fileName, themeBlob);
    };
    ThemeTabPlugin.prototype.importFromFile = function (file, callback) {
        var _this = this;
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            var theme = JSON.parse(fileReader.result);
            _this.addTheme(theme);
            if (_this.model) {
                _this.model.setTheme(theme);
            }
            callback && callback(theme);
        };
        fileReader.readAsText(file);
    };
    ThemeTabPlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        this.designerAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svd-designer",
            iconName: "icon-config",
            action: function () { _this.creator.makeNewViewActive("designer"); },
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.designer",
            showTitle: false
        });
        this.prevPageAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "prevPage",
            iconName: "icon-arrow-left_16x16",
            needSeparator: new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () {
                return _this.creator.isMobileView;
            }),
            visible: false
        });
        this.nextPageAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "nextPage",
            iconName: "icon-arrow-right_16x16",
            visible: false
        });
        this.previewAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svd-preview",
            iconName: "icon-preview",
            active: true,
            visible: this.createVisibleUpdater(),
            locTitleName: "ed.testSurvey",
            showTitle: false,
            action: function () { }
        });
        this.testAgainAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "testSurveyAgain",
            visible: false,
            locTitleName: "ed.testSurveyAgain",
            action: function () {
                _this.model.testAgain();
            }
        });
        this.undoAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "action-undo-theme",
            iconName: "icon-undo",
            locTitleName: "ed.undo",
            showTitle: false,
            visible: this.createVisibleUpdater(),
            action: function () { return _this.undo(); }
        });
        this.redoAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "action-redo-theme",
            iconName: "icon-redo",
            locTitleName: "ed.redo",
            showTitle: false,
            visible: this.createVisibleUpdater(),
            action: function () { return _this.redo(); }
        });
        items.push(this.undoAction);
        items.push(this.redoAction);
        this.resetTheme = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "resetTheme",
            iconName: "icon-reset",
            locTitleName: "ed.themeResetButton",
            locTooltipName: "ed.themeResetButton",
            mode: "small",
            visible: this.createVisibleUpdater(),
            action: function () {
                _this.model.resetTheme();
            }
        });
        items.push(this.resetTheme);
        this.themeSettingsAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svc-theme-settings",
            iconName: "icon-theme",
            action: function () {
                if (!_this.creator.showSidebar) {
                    _this.creator.setShowSidebar(true, true);
                }
            },
            visible: this.createVisibleUpdater(),
            active: new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () { return _this.creator.showSidebar; }),
            pressed: new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () { return _this.creator.showSidebar; }),
            locTitleName: "ed.themeSettings",
            locTooltipName: "ed.themeSettingsTooltip",
            showTitle: false
        });
        items.push(this.themeSettingsAction);
        this.importAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svc-theme-import",
            iconName: "icon-load",
            locTitleName: "ed.themeImportButton",
            locTooltipName: "ed.themeImportButton",
            visible: this.createVisibleUpdater(),
            mode: "small",
            component: "sv-action-bar-item",
            needSeparator: true,
            action: function () {
                if (!document)
                    return;
                if (!_this.inputFileElement) {
                    _this.inputFileElement = document.createElement("input");
                    _this.inputFileElement.type = "file";
                    _this.inputFileElement.style.display = "none";
                    _this.inputFileElement.onchange = function () {
                        if (_this.inputFileElement.files.length < 1)
                            return;
                        _this.importFromFile(_this.inputFileElement.files[0]);
                        _this.inputFileElement.value = "";
                    };
                }
                _this.inputFileElement.click();
            }
        });
        items.push(this.importAction);
        this.exportAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svc-theme-export",
            iconName: "icon-download",
            locTitleName: "ed.themeExportButton",
            locTooltipName: "ed.themeExportButton",
            visible: this.createVisibleUpdater(),
            mode: "small",
            component: "sv-action-bar-item",
            action: function () {
                _this.exportToFile(_creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].theme.exportFileName);
            }
        });
        items.push(this.exportAction);
        if (this.creator.showInvisibleElementsInTestSurveyTab) {
            this.invisibleToggleAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
                id: "showInvisible",
                iconName: "icon-invisible-items",
                mode: "small",
                locTitleName: "ts.showInvisibleElements",
                visible: false,
                action: function () {
                    _this.model.showInvisibleElements = !_this.model.showInvisibleElements;
                    _this.invisibleToggleAction.css = _this.model.showInvisibleElements ? "sv-action-bar-item--active" : "";
                    _this.invisibleToggleAction.title = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"])(!_this.model.showInvisibleElements ? "ts.showInvisibleElements" : "ts.hideInvisibleElements");
                }
            });
        }
        return items;
    };
    ThemeTabPlugin.prototype.undo = function () {
        var _undoRedoManager = this.model && this.model.undoRedoManager;
        if (!_undoRedoManager)
            return;
        _undoRedoManager.suspend();
        if (_undoRedoManager.canUndo()) {
            _undoRedoManager.undo();
        }
        _undoRedoManager.resume();
    };
    ThemeTabPlugin.prototype.redo = function () {
        var _undoRedoManager = this.model && this.model.undoRedoManager;
        if (!_undoRedoManager)
            return;
        _undoRedoManager.suspend();
        if (_undoRedoManager.canRedo()) {
            _undoRedoManager.redo();
        }
        _undoRedoManager.resume();
    };
    ThemeTabPlugin.prototype.updateUndeRedoActions = function () {
        var _undoRedoManager = this.model.undoRedoManager;
        this.undoAction.enabled = _undoRedoManager.canUndo();
        this.redoAction.enabled = _undoRedoManager.canRedo();
    };
    ThemeTabPlugin.prototype.addFooterActions = function () {
        this.creator.footerToolbar.actions.push(this.designerAction);
        this.creator.footerToolbar.actions.push(this.previewAction);
        this.creator.footerToolbar.actions.push(this.prevPageAction);
        this.creator.footerToolbar.actions.push(this.nextPageAction);
        this.invisibleToggleAction && (this.creator.footerToolbar.actions.push(this.invisibleToggleAction));
        this.creator.footerToolbar.actions.push(this.themeSettingsAction);
    };
    Object.defineProperty(ThemeTabPlugin.prototype, "availableThemes", {
        get: function () {
            return [].concat(this._availableThemes);
        },
        set: function (availebleThemes) {
            this._availableThemes = availebleThemes || [];
            if (!!this.model) {
                this.model.availableThemes = availebleThemes;
            }
        },
        enumerable: false,
        configurable: true
    });
    ThemeTabPlugin.prototype.addTheme = function (theme, setAsDefault) {
        if (setAsDefault === void 0) { setAsDefault = false; }
        var fullThemeName = Object(_themes__WEBPACK_IMPORTED_MODULE_4__["getThemeFullName"])(theme);
        _themes__WEBPACK_IMPORTED_MODULE_4__["Themes"][fullThemeName] = theme;
        if (this._availableThemes.indexOf(theme.themeName) === -1) {
            if (setAsDefault) {
                this.availableThemes = [theme.themeName].concat(this.availableThemes);
                _theme_builder__WEBPACK_IMPORTED_MODULE_2__["ThemeBuilder"].DefaultTheme = theme;
            }
            else {
                this.availableThemes = this.availableThemes.concat([theme.themeName]);
            }
        }
        return fullThemeName;
    };
    ThemeTabPlugin.prototype.removeTheme = function (themeAccessor) {
        var themeToDelete = typeof themeAccessor === "string" ? _themes__WEBPACK_IMPORTED_MODULE_4__["Themes"][themeAccessor] : themeAccessor;
        var fullThemeName = typeof themeAccessor === "string" ? themeAccessor : Object(_themes__WEBPACK_IMPORTED_MODULE_4__["getThemeFullName"])(themeToDelete);
        if (!!themeToDelete) {
            delete _themes__WEBPACK_IMPORTED_MODULE_4__["Themes"][fullThemeName];
            if (_theme_builder__WEBPACK_IMPORTED_MODULE_2__["ThemeBuilder"].DefaultTheme === themeToDelete) {
                _theme_builder__WEBPACK_IMPORTED_MODULE_2__["ThemeBuilder"].DefaultTheme = _themes__WEBPACK_IMPORTED_MODULE_4__["Themes"]["default-light"] || _themes__WEBPACK_IMPORTED_MODULE_4__["Themes"][Object.keys(_themes__WEBPACK_IMPORTED_MODULE_4__["Themes"])[0]];
            }
            var registeredThemeNames = Object.keys(_themes__WEBPACK_IMPORTED_MODULE_4__["Themes"]);
            var themeModificationsExist = registeredThemeNames.some(function (themeName) { return themeName.indexOf(themeToDelete.themeName) === 0; });
            if (!themeModificationsExist) {
                var themeIndex = this._availableThemes.indexOf(themeToDelete.themeName);
                if (themeIndex !== -1) {
                    var availableThemes = this.availableThemes;
                    availableThemes.splice(themeIndex, 1);
                    this.availableThemes = availableThemes;
                }
            }
        }
    };
    ThemeTabPlugin.prototype.getCurrentTheme = function (content) {
        if (content === void 0) { content = "full"; }
        if (content === "full") {
            return this.creator.theme;
        }
        return this.getThemeChanges();
    };
    ThemeTabPlugin.prototype.getThemeChanges = function () {
        var fullTheme = this.creator.theme;
        var probeThemeFullName = Object(_themes__WEBPACK_IMPORTED_MODULE_4__["getThemeFullName"])(fullTheme);
        var baseTheme = Object(_themes__WEBPACK_IMPORTED_MODULE_4__["findSuitableTheme"])(fullTheme.themeName, probeThemeFullName);
        var themeChanges = getObjectDiffs(fullTheme, baseTheme);
        Object.keys(themeChanges).forEach(function (propertyName) {
            if (propertyName.toLowerCase().indexOf("background") !== -1) {
                if (themeChanges[propertyName] === "" || themeChanges[propertyName] === survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].findProperty("survey", propertyName).defaultValue) {
                    delete themeChanges[propertyName];
                }
            }
        });
        themeChanges.themeName = fullTheme.themeName || _theme_builder__WEBPACK_IMPORTED_MODULE_2__["ThemeBuilder"].DefaultTheme.themeName || "default";
        themeChanges.colorPalette = fullTheme.colorPalette || "light";
        themeChanges.isPanelless = !!fullTheme.isPanelless;
        return themeChanges;
    };
    Object.defineProperty(ThemeTabPlugin.prototype, "isThemePristine", {
        get: function () {
            var currentThemeChanges = this.getThemeChanges();
            var hasCssModifications = Object.keys(currentThemeChanges.cssVariables).length > 0;
            var hasBackgroundModifications = Object.keys(currentThemeChanges).some(function (propertyName) { return propertyName.toLowerCase().indexOf("background") !== -1; });
            var hasHeaderModifications = !!currentThemeChanges.header && Object.keys(currentThemeChanges.header).length === 0;
            return !(hasCssModifications || hasBackgroundModifications || hasHeaderModifications);
        },
        enumerable: false,
        configurable: true
    });
    return ThemeTabPlugin;
}());



/***/ }),

/***/ "./src/components/tabs/themes.ts":
/*!***************************************!*\
  !*** ./src/components/tabs/themes.ts ***!
  \***************************************/
/*! exports provided: Themes, PredefinedThemes, getThemeFullName, PredefinedColors, findSuitableTheme */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Themes", function() { return Themes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PredefinedThemes", function() { return PredefinedThemes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getThemeFullName", function() { return getThemeFullName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PredefinedColors", function() { return PredefinedColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findSuitableTheme", function() { return findSuitableTheme; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var survey_core_themes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core/themes */ "./node_modules/survey-core/themes/index.js");
/* harmony import */ var survey_core_themes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core_themes__WEBPACK_IMPORTED_MODULE_1__);


var Themes = {};
var PredefinedThemes = ["default", "sharp", "borderless", "flat", "plain", "doubleborder", "layered", "solid", "threedimensional", "contrast"];
function getThemeFullName(theme) {
    var themeName = theme.themeName || "default";
    var fullThemeName = themeName + "-" + (theme.colorPalette || "light");
    if (theme.isPanelless === true) {
        fullThemeName += "-panelless";
    }
    return fullThemeName;
}
Object.keys(survey_core_themes__WEBPACK_IMPORTED_MODULE_1__).forEach(function (libraryThemeName) {
    var libraryTheme = survey_core_themes__WEBPACK_IMPORTED_MODULE_1__[libraryThemeName];
    var creatorThemeVariables = {};
    var creatorTheme = {};
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(creatorThemeVariables, libraryTheme.cssVariables);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(creatorTheme, libraryTheme, { cssVariables: creatorThemeVariables });
    var creatorThemeName = getThemeFullName(libraryTheme);
    Themes[creatorThemeName] = creatorTheme;
});
var PredefinedColors = {
    light: {
        teal: "rgba(11, 128, 128, 1)",
        blue: "rgba(39, 114, 203, 1)",
        purple: "rgba(122, 70, 187, 1)",
        orchid: "rgba(178, 61, 153, 1)",
        tulip: "rgba(191, 76, 97, 1)",
        brown: "rgba(177, 94, 47, 1)",
        green: "rgba(11, 134, 75, 1)"
    },
    dark: {
        teal: "rgba(22, 198, 187, 1)",
        blue: "rgba(109, 183, 252, 1)",
        purple: "rgba(173, 144, 255, 1)",
        orchid: "rgba(232, 113, 220, 1)",
        tulip: "rgba(245, 131, 151, 1)",
        brown: "rgba(252, 187, 89, 1)",
        green: "rgba(140, 204, 90, 1)"
    }
};
function findSuitableTheme(themeName, probeThemeFullName) {
    var suitableTheme = Themes[probeThemeFullName];
    if (!!suitableTheme) {
        return suitableTheme;
    }
    var appropriateThemeNames = Object.keys(Themes).filter(function (fullName) { return fullName.indexOf(themeName) === 0; });
    for (var _i = 0, appropriateThemeNames_1 = appropriateThemeNames; _i < appropriateThemeNames_1.length; _i++) {
        var fullThemeName = appropriateThemeNames_1[_i];
        if (fullThemeName.indexOf(themeName + "-" + this.themePalette) === 0) {
            probeThemeFullName = themeName + "-" + this.themePalette;
        }
        if (fullThemeName.indexOf(themeName + "-" + this.themePalette + (this.themeMode === "lightweight" ? "-panelless" : "")) === 0) {
            probeThemeFullName = themeName + "-" + this.themePalette + (this.themeMode === "lightweight" ? "-panelless" : "");
        }
    }
    return Themes[probeThemeFullName] || Themes[appropriateThemeNames[0]];
}


/***/ }),

/***/ "./src/components/tabs/translation-plugin.ts":
/*!***************************************************!*\
  !*** ./src/components/tabs/translation-plugin.ts ***!
  \***************************************************/
/*! exports provided: TabTranslationPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabTranslationPlugin", function() { return TabTranslationPlugin; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _translation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translation */ "./src/components/tabs/translation.ts");



var TabTranslationPlugin = /** @class */ (function () {
    function TabTranslationPlugin(creator) {
        this.creator = creator;
        creator.addPluginTab("translation", this);
        this.sidebarTab = this.creator.sidebar.addTab("translation");
        this.sidebarTab.caption = _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationPropertyGridTitle");
        this.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
    }
    TabTranslationPlugin.prototype.activate = function () {
        var _this = this;
        this.model = new _translation__WEBPACK_IMPORTED_MODULE_2__["Translation"](this.creator.survey, this.creator);
        this.model.readOnly = this.creator.readOnly;
        this.model.translationStringVisibilityCallback = function (obj, propertyName, visible) {
            var options = { obj: obj, propertyName: propertyName, visible: visible };
            !_this.creator.onTranslationStringVisibility.isEmpty && _this.creator.onTranslationStringVisibility.fire(_this.creator, options);
            return options.visible;
        };
        this.model.localeInitialVisibleCallback = function (locale) {
            var options = { locale: locale, isSelected: true };
            _this.creator.onTranslationLocaleInitiallySelected.fire(_this.creator, options);
            return options.isSelected;
        };
        this.model.importItemCallback = function (name, locale, text) {
            var options = { locale: locale, name: name, text: text };
            _this.creator.onTranslationImportItem.fire(_this.creator, options);
            return options.text;
        };
        this.model.importFinishedCallback = function () {
            _this.creator.onTranslationImported.fire(_this.creator, {});
        };
        this.sidebarTab.model = this.model.settingsSurvey;
        this.sidebarTab.componentName = "survey-widget";
        this.creator.sidebar.activeTab = this.sidebarTab.id;
        this.mergeLocaleWithDefaultAction.title = this.createMergeLocaleWithDefaultActionTitleUpdater();
        this.mergeLocaleWithDefaultAction.tooltip = this.createMergeLocaleWithDefaultActionTitleUpdater();
        this.mergeLocaleWithDefaultAction.visible = this.model.canMergeLocaleWithDefault;
        this.filterPageAction.visible = this.creator.survey.pageCount > 1;
        this.updateFilterPageAction(true);
        this.filterStringsAction.visible = true;
        this.updateFilterStrigsAction(true);
        this.importCsvAction.visible = true;
        this.exportCsvAction.visible = true;
        this.filterPageAction.data.setItems([{ id: null, title: this.showAllPagesText }].concat(this.creator.survey.pages.map(function (page) { return ({
            id: page.name,
            title: _this.getPageDisplayText(page)
        }); })), false);
        this.model.onPropertyChanged.add(function (sender, options) {
            if (options.name === "filteredPage") {
                _this.updateFilterPageAction();
            }
            if (options.name === "showAllStrings") {
                _this.updateFilterStrigsAction();
            }
            if (options.name === "canMergeLocaleWithDefault") {
                _this.mergeLocaleWithDefaultAction.visible = _this.model.canMergeLocaleWithDefault;
            }
            if (options.name === "mergeLocaleWithDefaultText") {
                _this.mergeLocaleWithDefaultAction.title = _this.model.mergeLocaleWithDefaultText;
                _this.mergeLocaleWithDefaultAction.tooltip = _this.model.mergeLocaleWithDefaultText;
            }
        });
        this.model.reset();
    };
    TabTranslationPlugin.prototype.update = function () {
        if (!this.model)
            return;
        this.model.survey = this.creator.survey;
        this.model.filteredPage = null;
        this.updateFilterPageAction(true);
    };
    TabTranslationPlugin.prototype.deactivate = function () {
        if (!!this.model) {
            this.model.dispose();
        }
        this.model = undefined;
        this.sidebarTab.visible = false;
        this.filterStringsAction.visible = false;
        this.filterPageAction.visible = false;
        this.mergeLocaleWithDefaultAction.title = undefined;
        this.mergeLocaleWithDefaultAction.tooltip = undefined;
        this.mergeLocaleWithDefaultAction.visible = false;
        this.importCsvAction.visible = false;
        this.exportCsvAction.visible = false;
        return true;
    };
    TabTranslationPlugin.prototype.createMergeLocaleWithDefaultActionTitleUpdater = function () {
        var _this = this;
        return new survey_core__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () {
            var loc = _this.creator.locale;
            if (!loc)
                loc = "en";
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationMergeLocaleWithDefault")["format"](survey_core__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].defaultLocale);
        });
    };
    Object.defineProperty(TabTranslationPlugin.prototype, "selectLanguageOptionsCaption", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationAddLanguage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabTranslationPlugin.prototype, "showAllStringsText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationShowAllStrings");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabTranslationPlugin.prototype, "showUsedStringsOnlyText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationShowUsedStringsOnly");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabTranslationPlugin.prototype, "showAllPagesText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationShowAllPages");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabTranslationPlugin.prototype, "exportToCSVText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationExportToSCVButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabTranslationPlugin.prototype, "importFromCSVText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.translationImportFromSCVButton");
        },
        enumerable: false,
        configurable: true
    });
    TabTranslationPlugin.prototype.createActions = function () {
        var _this = this;
        var items = [];
        this.createFilterPageAction();
        items.push(this.filterPageAction);
        this.createFilterStringsAction();
        items.push(this.filterStringsAction);
        this.mergeLocaleWithDefaultAction = new survey_core__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: "svd-translation-merge_locale_withdefault",
            visible: false,
            component: "sv-action-bar-item",
            mode: "small",
            needSeparator: true,
            action: function () {
                _this.model.mergeLocaleWithDefault();
            }
        });
        items.push(this.mergeLocaleWithDefaultAction);
        this.importCsvAction = Object(_translation__WEBPACK_IMPORTED_MODULE_2__["createImportCSVAction"])(function () { _this.model.importFromCSVFileDOM(); }, true);
        this.importCsvAction.visible = false;
        items.push(this.importCsvAction);
        this.exportCsvAction = Object(_translation__WEBPACK_IMPORTED_MODULE_2__["createExportCSVAction"])(function () { _this.model.exportToCSVFileUI(); });
        this.exportCsvAction.visible = false;
        items.push(this.exportCsvAction);
        return items;
    };
    TabTranslationPlugin.prototype.createFilterPageAction = function () {
        var _this = this;
        this.filterPageAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_0__["createDropdownActionModel"])({
            id: "svc-translation-filter-page",
            title: this.getFilterPageActionTitle(),
            visible: false,
            mode: "small",
        }, {
            items: [{ id: null, title: this.showAllPagesText }],
            allowSelection: true,
            onSelectionChanged: function (item) {
                _this.model.filteredPage = !!item.id ? _this.creator.survey.getPageByName(item.id) : null;
            },
            horizontalPosition: "center"
        });
    };
    TabTranslationPlugin.prototype.createFilterStringsAction = function () {
        var _this = this;
        this.filterStringsAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_0__["createDropdownActionModel"])({
            id: "svc-translation-show-all-strings",
            title: this.getFilterStringsActionTitle(),
            visible: false,
            mode: "small",
        }, {
            items: [{ id: "show-all-strings", title: this.showAllStringsText }, { id: "show-used-strings-only", title: this.showUsedStringsOnlyText }],
            allowSelection: true,
            onSelectionChanged: function (item) {
                _this.model.showAllStrings = item.id === "show-all-strings";
            },
            horizontalPosition: "center"
        });
    };
    TabTranslationPlugin.prototype.updateFilterStrigsAction = function (updateSelectedItem) {
        if (updateSelectedItem === void 0) { updateSelectedItem = false; }
        var title = this.getFilterStringsActionTitle();
        this.filterStringsAction.title = title;
        if (updateSelectedItem) {
            this.filterStringsAction.needSeparator = this.filterPageAction.visible;
            var list = this.filterStringsAction.data;
            list.selectedItem = list.actions.filter(function (el) { return el.title === title; })[0];
        }
    };
    TabTranslationPlugin.prototype.updateFilterPageAction = function (updateSelectedItem) {
        if (updateSelectedItem === void 0) { updateSelectedItem = false; }
        this.filterPageAction.title = this.getFilterPageActionTitle();
        if (updateSelectedItem) {
            var list = this.filterPageAction.data;
            var id_1 = this.model.filteredPage ? this.model.filteredPage.name : null;
            list.selectedItem = list.actions.filter(function (el) { return el.id === id_1; })[0];
        }
    };
    TabTranslationPlugin.prototype.getFilterPageActionTitle = function () {
        var pageDisplayName = this.model && this.model.filteredPage && this.getPageDisplayText(this.model.filteredPage);
        return pageDisplayName || this.showAllPagesText;
    };
    TabTranslationPlugin.prototype.getFilterStringsActionTitle = function () {
        return (this.model && !this.model.showAllStrings) ? this.showUsedStringsOnlyText : this.showAllStringsText;
    };
    TabTranslationPlugin.prototype.getPageDisplayText = function (page) {
        return this.creator.getObjectDisplayName(page, "translation-tab", "survey-translation", page.title);
    };
    return TabTranslationPlugin;
}());



/***/ }),

/***/ "./src/components/tabs/translation-theme.ts":
/*!**************************************************!*\
  !*** ./src/components/tabs/translation-theme.ts ***!
  \**************************************************/
/*! exports provided: translationCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translationCss", function() { return translationCss; });
var translationCss = {
    root: "st-root-modern",
    container: "st-container-modern",
    header: "st-title st-container-modern__title",
    body: "st-body",
    bodyEmpty: "st-body st-body--empty",
    footer: "st-footer st-body__footer st-clearfix",
    title: "",
    description: "",
    logo: "st-logo",
    logoImage: "st-logo__image",
    headerText: "st-header__text",
    navigationButton: "",
    bodyNavigationButton: "st-navigation-btn",
    completedPage: "st-completedpage",
    navigation: {
        complete: "st-btn st-footer__complete-btn",
        prev: "st-btn st-footer__prev-btn",
        next: "st-btn st-footer__next-btn",
        start: "st-btn st-footer__start-btn",
        preview: "st-btn st-footer__preview-btn",
        edit: "st-btn st-footer__edit-btn"
    },
    panel: {
        title: "st-title st-panel__title",
        titleExpandable: "st-panel__title--expandable",
        titleOnExpand: "st-panel__title--expanded",
        titleOnError: "st-panel__title--error",
        description: "st-description st-panel__description",
        container: "st-element st-panel st-row__panel",
        content: "st-panel__content",
        icon: "st-panel__icon",
        iconExpanded: "st-panel__icon--expanded",
        footer: "st-panel__footer",
        requiredText: "st-panel__required-text"
    },
    paneldynamic: {
        root: "st-paneldynamic",
        navigation: "st-paneldynamic__navigation",
        title: "st-title st-question__title",
        button: "st-btn",
        buttonRemove: "st-paneldynamic__remove-btn",
        buttonAdd: "st-paneldynamic__add-btn",
        progressTop: "st-paneldynamic__progress st-paneldynamic__progress--top",
        progressBottom: "st-paneldynamic__progress st-paneldynamic__progress--bottom",
        buttonPrev: "st-paneldynamic__prev-btn",
        buttonNext: "st-paneldynamic__next-btn",
        progressContainer: "st-paneldynamic__progress-container",
        progress: "st-progress",
        progressBar: "st-progress__bar",
        progressText: "st-paneldynamic__progress-text",
        separator: "st-paneldynamic__separator",
        panelWrapper: "st-paneldynamic__panel-wrapper",
        panelWrapperInRow: "st-paneldynamic__panel-wrapper--in-row"
    },
    progress: "st-progress st-body__progress",
    progressBar: "st-progress__bar",
    progressText: "st-progress__text",
    progressTextInBar: "st-hidden",
    page: {
        root: "st-page st-body__page",
        title: "st-title st-page__title",
        description: "st-description st-page__description"
    },
    pageTitle: "st-title st-page__title",
    pageDescription: "st-description st-page__description",
    row: "st-row st-clearfix",
    question: {
        mainRoot: "st-element st-question st-row__question",
        flowRoot: "st-element st-question st-row__question st-row__question--flow",
        asCell: "st-table__cell",
        header: "st-question__header",
        headerLeft: "st-question__header--location--left",
        headerTop: "st-question__header--location--top",
        headerBottom: "st-question__header--location--bottom",
        content: "st-question__content",
        contentLeft: "st-question__content--left",
        titleLeftRoot: "",
        titleOnAnswer: "st-question__title--answer",
        titleOnError: "st-question__title--error",
        title: "st-title st-question__title",
        requiredText: "st-question__required-text",
        number: "st-question__num",
        description: "st-description st-question__description",
        descriptionUnderInput: "st-description st-question__description",
        comment: "st-comment",
        required: "st-question--required",
        titleRequired: "st-question__title--required",
        indent: 20,
        footer: "st-question__footer",
        formGroup: "st-question__form-group",
        hasError: "",
        disabled: "st-question--disabled"
    },
    image: { root: "st-image", image: "sv_image_image" },
    error: {
        root: "st-question__erbox",
        icon: "",
        item: "",
        locationTop: "st-question__erbox--location--top",
        locationBottom: "st-question__erbox--location--bottom"
    },
    checkbox: {
        root: "st-selectbase",
        item: "st-item st-checkbox st-selectbase__item",
        itemSelectAll: "st-checkbox--selectall",
        itemNone: "st-checkbox--none",
        itemDisabled: "st-item--disabled st-checkbox--disabled",
        itemChecked: "st-item--checked st-checkbox--checked",
        itemHover: "st-item--allowhover st-checkbox--allowhover",
        itemInline: "st-selectbase__item--inline",
        label: "st-selectbase__label",
        labelChecked: "",
        itemControl: "st-visuallyhidden st-item__control st-checkbox__control",
        itemDecorator: "st-item__svg st-checkbox__svg",
        controlLabel: "st-item__control-label",
        materialDecorator: "st-item__decorator st-checkbox__decorator",
        other: "st-comment st-question__other",
        column: "st-selectbase__column"
    },
    radiogroup: {
        root: "st-selectbase",
        item: "st-item st-radio st-selectbase__item",
        itemInline: "st-selectbase__item--inline",
        label: "st-selectbase__label",
        labelChecked: "",
        itemDisabled: "st-item--disabled st-radio--disabled",
        itemChecked: "st-item--checked st-radio--checked",
        itemHover: "st-item--allowhover st-radio--allowhover",
        itemControl: "st-visuallyhidden st-item__control st-radio__control",
        itemDecorator: "st-item__svg st-radio__svg",
        controlLabel: "st-item__control-label",
        materialDecorator: "st-item__decorator st-radio__decorator",
        other: "st-comment st-question__other",
        clearButton: "st-btn st-selectbase__clear-btn",
        column: "st-selectbase__column"
    },
    boolean: {
        mainRoot: "st-question st-row__question st-question--boolean",
        root: "",
        item: "st-boolean",
        control: "st-boolean__control st-visuallyhidden",
        itemChecked: "st-boolean--checked",
        itemIndeterminate: "st-boolean--indeterminate",
        itemDisabled: "st-boolean--disabled",
        label: "st-boolean__label",
        switch: "st-boolean__switch",
        disabledLabel: "st-checkbox__label--disabled",
        itemDecorator: "st-checkbox__hidden",
        materialDecorator: "st-checkbox__rectangle",
        sliderText: "",
        slider: "st-boolean__thumb"
    },
    text: {
        root: "st-input st-text",
        small: "st-row__question--small",
        controlDisabled: "st-input--disabled",
        onError: "st-input--error"
    },
    multipletext: {
        root: "st-multipletext",
        item: "st-multipletext__item",
        itemTitle: "st-multipletext__item-title",
        row: "st-multipletext__row",
        cell: "st-multipletext__cell"
    },
    dropdown: {
        root: "st-selectbase",
        small: "st-row__question--small",
        control: "st-input st-dropdown",
        other: "st-comment st-question__other",
        onError: "st-input--error",
        label: "st-selectbase__label",
        item: "st-item st-radio st-selectbase__item",
        itemDisabled: "st-item--disabled st-radio--disabled",
        itemChecked: "st-item--checked st-radio--checked",
        itemHover: "st-item--allowhover st-radio--allowhover",
        itemControl: "st-visuallyhidden st-item__control st-radio__control",
        itemDecorator: "st-item__svg st-radio__svg",
        controlDisabled: "st-input--disabled",
        controlLabel: "st-item__control-label",
        materialDecorator: "st-item__decorator st-radio__decorator"
    },
    imagepicker: {
        root: "st-imagepicker",
        item: "st-imagepicker__item",
        itemInline: "st-imagepicker__item--inline",
        itemChecked: "st-imagepicker__item--checked",
        itemDisabled: "st-imagepicker__item--disabled",
        itemHover: "st-imagepicker__item--allowhover",
        label: "st-imagepicker__label",
        itemControl: "st-imagepicker__control",
        image: "st-imagepicker__image",
        itemText: "st-imagepicker__text",
        clearButton: "st-btn",
        other: "st-comment st-question__other"
    },
    matrix: {
        mainRoot: "st-question st-row__question st-scrollable",
        tableWrapper: "st-matrix",
        root: "st-table",
        noHeader: "st-table--no-header",
        rowError: "st-matrix__row--error",
        cell: "st-table__cell st-matrix__cell",
        headerCell: "st-table__cell st-table__cell--header",
        rowTextCell: "st-table__cell st-table__cell--row-text",
        label: "st-item st-radio st-matrix__label",
        itemValue: "st-visuallyhidden st-item__control st-radio__control",
        itemChecked: "st-radio--checked",
        itemDisabled: "st-item--disabled st-radio--disabled",
        itemHover: "st-radio--allowhover",
        materialDecorator: "st-item__decorator st-radio__decorator",
        itemDecorator: "st-item__svg st-radio__svg",
        cellText: "st-matrix__text",
        cellTextSelected: "st-matrix__text--checked",
        cellTextDisabled: "st-matrix__text--disabled"
    },
    matrixdropdown: {
        mainRoot: "st-question st-row__question st-scrollable",
        root: "st-table",
        noHeader: "st-table--no-header",
        cell: "st-table__cell",
        headerCell: "st-table__cell st-table__cell--header",
        rowTextCell: "st-table__cell st-table__cell--row-text"
    },
    matrixdynamic: {
        mainRoot: "st-question st-row__question st-scrollable",
        root: "st-table st-matrixdynamic",
        noHeader: "st-table--no-header",
        cell: "st-table__cell",
        headerCell: "st-table__cell st-table__cell--header",
        rowTextCell: "st-table__cell st-table__cell--row-text",
        button: "st-btn",
        detailRow: "st-table__row st-table__row--detail",
        detailButton: "st-table__cell--detail-button",
        detailButtonExpanded: "st-table__cell--detail-button--expanded",
        detailIcon: "st-detail-panel__icon",
        detailIconExpanded: "st-detail-panel__icon--expanded",
        detailPanelCell: "st-table__cell--detail-panel",
        actionsCell: "st-table__cell st-table__cell--actions",
        buttonAdd: "st-matrixdynamic__add-btn",
        buttonRemove: "st-matrixdynamic__remove-btn",
        iconAdd: "",
        iconRemove: ""
    },
    rating: {
        root: "st-rating",
        item: "st-rating__item",
        itemHover: "st-rating__item--allowhover",
        selected: "st-rating__item--selected",
        minText: "st-rating__item-text st-rating__min-text",
        itemText: "st-rating__item-text",
        maxText: "st-rating__item-text st-rating__max-text",
        itemDisabled: "st-rating__item--disabled"
    },
    comment: {
        root: "st-comment",
        small: "st-row__question--small"
    },
    expression: "",
    file: {
        root: "st-file",
        other: "st-comment st-question__other",
        placeholderInput: "st-visuallyhidden",
        preview: "st-file__preview",
        fileSign: "st-hidden",
        fileSignBottom: "st-file__sign",
        fileDecorator: "st-file__decorator",
        fileInput: "st-visuallyhidden",
        noFileChosen: "st-description st-file__no-file-chosen",
        chooseFile: "st-btn st-file__choose-btn",
        disabled: "st-file__choose-btn--disabled",
        removeButton: "st-hidden",
        removeButtonBottom: "st-btn st-file__clean-btn",
        removeFile: "st-hidden",
        removeFileSvg: "st-file__remove-svg",
        wrapper: "st-file__wrapper"
    },
    signaturepad: {
        root: "st-signaturepad sjs_sp_container",
        small: "st-row__question--small",
        controls: "sjs_sp_controls",
        placeholder: "sjs_sp_placeholder",
        clearButton: "sjs_sp_clear"
    },
    saveData: {
        root: "",
        saving: "",
        error: "",
        success: "",
        saveAgainButton: ""
    },
    window: {
        root: "sv_window",
        body: "sv_window_content",
        header: {
            root: "sv_window_title",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: ""
        }
    }
};


/***/ }),

/***/ "./src/components/tabs/translation.scss":
/*!**********************************************!*\
  !*** ./src/components/tabs/translation.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/tabs/translation.ts":
/*!********************************************!*\
  !*** ./src/components/tabs/translation.ts ***!
  \********************************************/
/*! exports provided: TranslationItemBase, TranslationItemString, TranslationItem, TranslationGroup, Translation, TranslationEditor, createImportCSVAction, createExportCSVAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationItemBase", function() { return TranslationItemBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationItemString", function() { return TranslationItemString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationItem", function() { return TranslationItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationGroup", function() { return TranslationGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Translation", function() { return Translation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationEditor", function() { return TranslationEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createImportCSVAction", function() { return createImportCSVAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createExportCSVAction", function() { return createExportCSVAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ "./node_modules/papaparse/papaparse.min.js");
/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _property_grid_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../property-grid/index */ "./src/property-grid/index.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../property-grid-theme/property-grid */ "./src/property-grid-theme/property-grid.ts");
/* harmony import */ var _translation_theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./translation-theme */ "./src/components/tabs/translation-theme.ts");
/* harmony import */ var _utils_actions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/actions */ "./src/utils/actions.ts");






__webpack_require__(/*! ./translation.scss */ "./src/components/tabs/translation.scss");




var isLocaleEnableIfExecuting;
function localeEnableIf(params) {
    if (isLocaleEnableIfExecuting || !this.question || !this.row)
        return false;
    var matrix = this.question.parentQuestion;
    if (!matrix)
        return false;
    isLocaleEnableIfExecuting = true;
    var index = matrix.visibleRows.indexOf(this.row);
    isLocaleEnableIfExecuting = false;
    if (index <= 0)
        return false;
    var val = matrix.value;
    if (!Array.isArray(val))
        return true;
    var rowVal = val[index];
    if (!rowVal || rowVal.isSelected)
        return true;
    var selectedCounter = 0;
    for (var i = 1; i < val.length; i++) {
        if (val[i].isSelected)
            selectedCounter++;
    }
    return selectedCounter < _creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.maximumSelectedLocales;
}
survey_core__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.register("localeEnableIf", localeEnableIf);
var TranslationItemBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TranslationItemBase, _super);
    function TranslationItemBase(name, translation) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.translation = translation;
        return _this;
    }
    Object.defineProperty(TranslationItemBase.prototype, "isGroup", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    TranslationItemBase.prototype.fillLocales = function (locales) { };
    TranslationItemBase.prototype.mergeLocaleWithDefault = function (loc) { };
    TranslationItemBase.prototype.makeObservable = function () {
        this.fireOnObjCreating();
    };
    TranslationItemBase.prototype.deleteLocaleStrings = function (locale) { };
    TranslationItemBase.prototype.applyEditLocale = function (locale) { };
    TranslationItemBase.prototype.fireOnObjCreating = function (obj) {
        if (obj === void 0) { obj = null; }
        if (this.translation) {
            if (!obj)
                obj = this;
            this.translation.fireOnObjCreating(obj);
        }
    };
    return TranslationItemBase;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var TranslationItemString = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TranslationItemString, _super);
    function TranslationItemString(locString, locale) {
        var _this = _super.call(this) || this;
        _this.locString = locString;
        _this.locale = locale;
        _this.text = _this.locString.getLocaleText(_this.locale);
        return _this;
    }
    TranslationItemString.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (!this.isReadOnly && name === "text") {
            this.locString.setLocaleText(this.locale, newValue);
        }
    };
    TranslationItemString.prototype.getType = function () {
        return "translationitemstring";
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TranslationItemString.prototype, "text", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], TranslationItemString.prototype, "placeholder", void 0);
    return TranslationItemString;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var TranslationItem = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TranslationItem, _super);
    function TranslationItem(name, locString, defaultValue, translation, context, property) {
        if (defaultValue === void 0) { defaultValue = ""; }
        if (property === void 0) { property = null; }
        var _this = _super.call(this, name, translation) || this;
        _this.name = name;
        _this.locString = locString;
        _this.defaultValue = defaultValue;
        _this.context = context;
        _this.property = property;
        if (!!_this.translation) {
            _this.readOnly = _this.translation.readOnly;
        }
        _this.hashValues = {};
        var self = _this;
        _this.afterRender = function (el, data) {
            if (!!self.translation) {
                self.translation.translateItemAfterRender(self, el, data.locale);
            }
        };
        _this.fireOnObjCreating();
        return _this;
    }
    Object.defineProperty(TranslationItem.prototype, "maxLength", {
        get: function () {
            return !!this.property ? this.property.maxLength : -1;
        },
        enumerable: false,
        configurable: true
    });
    TranslationItem.prototype.makeObservable = function () {
        _super.prototype.makeObservable.call(this);
        for (var loc in this.hashValues) {
            this.fireOnObjCreating(this.hashValues[loc]);
        }
    };
    TranslationItem.prototype.getType = function () {
        return "translationitem";
    };
    Object.defineProperty(TranslationItem.prototype, "text", {
        get: function () {
            return !!this.customText ? this.customText : this.localizableName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationItem.prototype, "localizableName", {
        get: function () {
            var type = this.context && this.context.getType && this.context.getType();
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getPropertyNameInEditor(type, this.name);
        },
        enumerable: false,
        configurable: true
    });
    TranslationItem.prototype.getLocText = function (loc) {
        return this.locString.getLocaleText(loc);
    };
    TranslationItem.prototype.setLocText = function (loc, newValue) {
        this.locString.setLocaleText(loc, newValue);
        !!this.translation.tranlationChangedCallback &&
            this.translation.tranlationChangedCallback(loc, this.name, newValue, this.context);
    };
    TranslationItem.prototype.applyEditLocale = function (locale) {
        var itemStr = this.values(locale);
        if (!!itemStr && !!itemStr.text) {
            this.setLocText(locale, itemStr.text);
        }
    };
    TranslationItem.prototype.values = function (loc) {
        var _a;
        if (!this.hashValues[loc]) {
            var val = new TranslationItemString(this.locString, loc);
            val.isReadOnly = !!((_a = this.translation) === null || _a === void 0 ? void 0 : _a.getEditLocale());
            if (!loc) {
                val.placeholder = this.defaultValue;
            }
            this.hashValues[loc] = val;
            this.fireOnObjCreating(val);
        }
        return this.hashValues[loc];
    };
    TranslationItem.prototype.fillLocales = function (locales) {
        var keys = this.getKeys();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!!key &&
                locales.indexOf(key) < 0 &&
                key !== survey_core__WEBPACK_IMPORTED_MODULE_1__["LocalizableString"].defaultLocale) {
                locales.push(key);
            }
        }
    };
    TranslationItem.prototype.toJSON = function () {
        var _this = this;
        var json = this.locString.getJson();
        var keys = Object.keys(this.hashValues);
        if (keys.length > 0) {
            keys.forEach(function (loc) {
                var text = _this.hashValues[loc].text;
                if (!!text) {
                    if (!json)
                        json = {};
                    if (typeof json === "string") {
                        json = { default: json };
                    }
                    json[loc] = text;
                }
            });
        }
        json = this.correctJSON(json);
        if (!json || typeof json === "string")
            return { default: json };
        return json;
    };
    TranslationItem.prototype.correctJSON = function (json) {
        if (!json || typeof json === "string")
            return json;
        if (Array.isArray(json))
            return json.join("\n");
        for (var key in json) {
            if (Array.isArray(json[key])) {
                json[key] = json[key].join("\n");
            }
        }
        return json;
    };
    TranslationItem.prototype.getKeys = function () {
        return this.locString.getLocales();
    };
    TranslationItem.prototype.mergeLocaleWithDefault = function (loc) {
        var locText = this.locString.getLocaleText(loc);
        if (!locText)
            return;
        this.locString.setLocaleText("", locText);
        this.locString.setLocaleText(loc, null);
    };
    TranslationItem.prototype.deleteLocaleStrings = function (locale) {
        this.setLocText(locale, undefined);
    };
    TranslationItem.prototype.getDefaultLocaleText = function () {
        var res = this.locString.getLocaleText("");
        if (!res) {
            res = this.getPlaceholder("");
        }
        return res;
    };
    TranslationItem.prototype.getPlaceholder = function (locale) {
        var textLocale = !!locale && locale !== "default" ? locale : survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale;
        var placeholderText = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationPlaceHolder", textLocale);
        if (this.context instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"]) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getString(this.name, locale) || placeholderText;
        }
        if (!(this.context instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["PageModel"]) && this.name === "title") {
            return this.getPlaceholderText(locale) || this.context.name;
        }
        if (this.context.ownerPropertyName === "choices" && this.context.getType() === "itemvalue") {
            return this.getPlaceholderText(locale) || this.getItemValuePlaceholderText() || placeholderText;
        }
        return placeholderText;
    };
    TranslationItem.prototype.getTextForExport = function (loc) {
        var res = this.locString.getLocaleText(loc);
        if (!!res)
            return res;
        var index = loc.indexOf("-");
        if (index < 0)
            return "";
        return this.getPlaceholderText(loc);
    };
    TranslationItem.prototype.getPlaceholderText = function (loc) {
        if (!loc || loc === "default")
            return "";
        var root = this.getRootDialect(loc);
        return this.locString.getLocaleText(root);
    };
    TranslationItem.prototype.getRootDialect = function (loc) {
        var index = loc.indexOf("-");
        if (index < 0)
            return "";
        loc = loc.substring(0, index);
        return loc === survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale ? "" : loc;
    };
    TranslationItem.prototype.getItemValuePlaceholderText = function () {
        var val = this.context.value;
        return !survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(val) ? val.toString() : "";
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], TranslationItem.prototype, "readOnly", void 0);
    return TranslationItem;
}(TranslationItemBase));

var TranslationGroup = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TranslationGroup, _super);
    function TranslationGroup(name, obj, translation, text, hasIndent) {
        if (translation === void 0) { translation = null; }
        if (text === void 0) { text = ""; }
        if (hasIndent === void 0) { hasIndent = false; }
        var _this = _super.call(this, name, translation) || this;
        _this.name = name;
        _this.obj = obj;
        _this.text = text;
        _this.hasIndent = hasIndent;
        _this.isRootValue = false;
        _this.removeLocale = function (loc) {
            _this.translation && _this.translation.removeLocale(loc);
        };
        if (!_this.text) {
            _this.text = name;
        }
        _this.reset();
        _this.fireOnObjCreating();
        return _this;
    }
    TranslationGroup.prototype.getType = function () {
        return "translationgroup";
    };
    Object.defineProperty(TranslationGroup.prototype, "items", {
        get: function () {
            return this.itemValues;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "locItems", {
        get: function () {
            return this.itemValues.filter(function (item) { return item instanceof TranslationItem; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "isRoot", {
        get: function () {
            return this.isRootValue;
        },
        enumerable: false,
        configurable: true
    });
    TranslationGroup.prototype.setAsRoot = function () {
        this.isRootValue = true;
    };
    TranslationGroup.prototype.setParent = function (parent) {
        this.parentValue = parent;
    };
    Object.defineProperty(TranslationGroup.prototype, "parent", {
        get: function () { return this.parentValue; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "fullName", {
        get: function () {
            var propsName = this.obj.name === this.name || this.isRoot ? "_props" : "";
            var name = this.name + propsName;
            if (this.isRoot || !this.parent)
                return name;
            var parentName = this.parent.getNameForChild();
            return (!!parentName ? parentName + "_" : "") + name;
        },
        enumerable: false,
        configurable: true
    });
    TranslationGroup.prototype.getNameForChild = function () {
        if (this.isRoot)
            return "";
        return this.isFinalNameObj ? this.name : this.fullName;
    };
    Object.defineProperty(TranslationGroup.prototype, "isFinalNameObj", {
        get: function () {
            return this.obj.isQuestion || this.obj.isPage || this.obj.isPanel;
        },
        enumerable: false,
        configurable: true
    });
    TranslationGroup.prototype.getItemByName = function (name) {
        for (var i = 0; i < this.itemValues.length; i++) {
            if (this.itemValues[i].name == name)
                return this.itemValues[i];
        }
        return null;
    };
    Object.defineProperty(TranslationGroup.prototype, "groups", {
        get: function () {
            return this.itemValues.filter(function (item) { return item instanceof TranslationGroup; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "isGroup", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "locales", {
        get: function () {
            return !!this.translation ? this.translation.locales : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "removeLocaleText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.remove");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "localeCount", {
        get: function () {
            return !!Array.isArray(this.locales) ? this.locales.length : 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "locWidth", {
        get: function () {
            var count = this.localeCount;
            if (count < 2)
                return "100%";
            return Math.floor(100 / count).toString() + "%";
        },
        enumerable: false,
        configurable: true
    });
    TranslationGroup.prototype.getLocaleName = function (loc) {
        return this.translation
            ? this.translation.getLocaleName(loc)
            : _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getLocaleName(loc);
    };
    TranslationGroup.prototype.reset = function () {
        this.itemValues = [];
        this.fillItems();
    };
    TranslationGroup.prototype.fillLocales = function (locales) {
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].fillLocales(locales);
        }
    };
    TranslationGroup.prototype.makeObservable = function () {
        _super.prototype.makeObservable.call(this);
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].makeObservable();
        }
    };
    Object.defineProperty(TranslationGroup.prototype, "showAllStrings", {
        get: function () {
            return !!this.translation ? this.translation.showAllStrings : true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TranslationGroup.prototype, "hasItems", {
        get: function () {
            if (this.locItems.length > 0)
                return true;
            var groups = this.groups;
            for (var i = 0; i < groups.length; i++) {
                if (groups[i].hasItems)
                    return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    TranslationGroup.prototype.mergeLocaleWithDefault = function (loc) {
        this.itemValues.forEach(function (item) { return item.mergeLocaleWithDefault(loc); });
    };
    TranslationGroup.prototype.deleteLocaleStrings = function (locale) {
        this.items.forEach(function (item) { return item.deleteLocaleStrings(locale); });
    };
    TranslationGroup.prototype.applyEditLocale = function (locale) {
        this.items.forEach(function (item) { return item.applyEditLocale(locale); });
    };
    TranslationGroup.prototype.fillItems = function () {
        if (this.isItemValueArray(this.obj)) {
            this.createItemValuesLocale();
            return;
        }
        if (!this.obj || !this.obj.getType)
            return;
        var properties = this.getLocalizedProperties(this.obj);
        for (var i = 0; i < properties.length; i++) {
            var property = properties[i];
            var item = this.createTranslationItem(this.obj, properties[i]);
            if (!!item) {
                this.itemValues.push(item);
            }
        }
        properties = this.getArrayProperties(this.obj);
        for (var i = 0; i < properties.length; i++) {
            var property = properties[i];
            var value = this.obj[property.name];
            //If ItemValue array?
            if (this.isItemValueArray(value)) {
                if (this.canShowProperty(property, Array.isArray(value) && value.length > 0)) {
                    this.addNewGroup(new TranslationGroup(property.name, value, this.translation, _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getPropertyName(property.name), true));
                }
            }
            else {
                this.createGroups(value, property);
            }
        }
        this.sortItems();
    };
    TranslationGroup.prototype.sortItems = function () {
        if (!_creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.sortByName)
            return;
        this.itemValues.sort(function (a, b) {
            if (!a.name)
                return -1;
            if (!b.name)
                return 1;
            return a.name.localeCompare(b.name);
        });
    };
    TranslationGroup.prototype.getLocalizedProperties = function (obj) {
        var res = [];
        var properties = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getPropertiesByObj(obj);
        for (var i = 0; i < properties.length; i++) {
            var property = properties[i];
            if (!property.isSerializable || !property.isLocalizable || property.type === "url" || property.type === "file")
                continue;
            if (property.readOnly || !property.visible)
                continue;
            res.push(property);
        }
        return res;
    };
    TranslationGroup.prototype.getArrayProperties = function (obj) {
        var res = [];
        var properties = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getPropertiesByObj(obj);
        for (var i = 0; i < properties.length; i++) {
            var property = properties[i];
            if (property.isSerializable === false)
                continue;
            var value = obj[property.name];
            if (!!value && Array.isArray(value) && value.length > 0) {
                res.push(property);
            }
        }
        return res;
    };
    TranslationGroup.prototype.canShowProperty = function (property, isEmpty) {
        if (!!this.translation && !this.translation.canShowProperty(this.obj, property, isEmpty))
            return false;
        return true;
    };
    TranslationGroup.prototype.createTranslationItem = function (obj, property) {
        var _a;
        var defaultValue = this.getDefaultValue(obj, property);
        var locStr = obj[property.serializationProperty];
        if (!locStr)
            return null;
        if (!this.showAllStrings && !defaultValue && locStr.isEmpty)
            return null;
        var editLocale = (_a = this.translation) === null || _a === void 0 ? void 0 : _a.getEditLocale();
        if (!!editLocale && !!locStr.getLocaleText(editLocale))
            return null;
        if (!this.canShowProperty(property, locStr.isEmpty))
            return null;
        return new TranslationItem(property.name, locStr, defaultValue, this.translation, obj, property);
    };
    TranslationGroup.prototype.getDefaultValue = function (obj, property) {
        if (property.name == "title" &&
            property.isLocalizable &&
            !!property.serializationProperty) {
            var locStr = obj[property.serializationProperty];
            if (!!locStr &&
                obj.getType() != "page" &&
                (!!locStr.onGetTextCallback || locStr["onRenderedHtmlCallback"]))
                return obj["name"];
        }
        return "";
    };
    TranslationGroup.prototype.isItemValueArray = function (val) {
        return (!!val &&
            Array.isArray(val) &&
            val.length > 0 &&
            !!val[0] &&
            !!val[0]["getType"] &&
            !!val[0]["setData"] &&
            !!val[0]["setLocText"]);
    };
    TranslationGroup.prototype.createGroups = function (value, property) {
        for (var i = 0; i < value.length; i++) {
            var obj = value[i];
            if (!!obj && obj.getType) {
                var name_1 = obj["name"];
                var text = name_1;
                if (!name_1) {
                    var index = "[" + i.toString() + "]";
                    name_1 = property.name + index;
                    text = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getPropertyName(property.name) + index;
                }
                this.addNewGroup(new TranslationGroup(name_1, obj, this.translation, text));
            }
        }
    };
    TranslationGroup.prototype.addNewGroup = function (group) {
        group.setParent(this);
        if (group.hasItems) {
            this.itemValues.push(group);
        }
    };
    TranslationGroup.prototype.createItemValuesLocale = function () {
        var _a;
        var editMode = (_a = this.translation) === null || _a === void 0 ? void 0 : _a.getEditLocale();
        for (var i = 0; i < this.obj.length; i++) {
            var val = this.obj[i];
            var canAdd = this.showAllStrings || !val.locText.isEmpty || isNaN(val.value);
            if (!!editMode && val.locText.getLocaleText(editMode)) {
                canAdd = false;
            }
            if (!canAdd)
                continue;
            var item = new TranslationItem(val.value, val.locText, val.value, this.translation, val);
            this.itemValues.push(item);
            this.addCustomPropertiesForItemValue(this.obj[i], item);
        }
    };
    TranslationGroup.prototype.addCustomPropertiesForItemValue = function (itemValue, textItem) {
        var locProperties = this.getLocalizedProperties(itemValue);
        for (var i = 0; i < locProperties.length; i++) {
            if (locProperties[i].name == "text")
                continue;
            var item = this.createTranslationItem(itemValue, locProperties[i]);
            if (!!item) {
                item.customText = textItem.text + " (" + item.localizableName + ")";
                item.name = itemValue.value + "." + item.name;
                this.itemValues.push(item);
            }
        }
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], TranslationGroup.prototype, "showHeader", void 0);
    return TranslationGroup;
}(TranslationItemBase));

var Translation = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Translation, _super);
    function Translation(survey, options, hasUI) {
        if (options === void 0) { options = null; }
        if (hasUI === void 0) { hasUI = true; }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.hasUI = hasUI;
        _this.chooseLanguageActions = [];
        if (!_this.options)
            _this.options = new _creator_settings__WEBPACK_IMPORTED_MODULE_4__["EmptySurveyCreatorOptions"]();
        var self = _this;
        _this.exportToCSVFileUI = function () {
            self.exportToSCVFile(_creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.exportFileName);
        };
        _this.importFromCSVFileUI = function (el) {
            if (el.files.length < 1)
                return;
            self.importFromCSVFile(el.files[0]);
            el.value = "";
        };
        _this.settingsSurveyValue = _this.createSettingsSurvey();
        _this.surveyValue = survey;
        _this.setupToolbarItems();
        _this.updateChooseLanguageActions();
        return _this;
    }
    Translation.prototype.getProcessedTranslationItemText = function (locale, locString, newText, context) {
        return this.options.getProcessedTranslationItemText(locale, locString, newText, context);
    };
    Translation.prototype.getType = function () {
        return "translation";
    };
    Translation.prototype.getEditLocale = function () { return this.editLocale; };
    Translation.prototype.setEditMode = function (locale) {
        this.editLocale = locale;
        this.addLocale(locale);
    };
    Object.defineProperty(Translation.prototype, "isEditMode", {
        get: function () { return !!this.editLocale; },
        enumerable: false,
        configurable: true
    });
    Translation.prototype.applyEditLocale = function () {
        if (!this.isEditMode || !this.root)
            return;
        this.root.applyEditLocale(this.editLocale);
    };
    Translation.prototype.makeObservable = function (onBaseObjCreating) {
        this.onBaseObjCreatingCallback = onBaseObjCreating;
        this.fireOnObjCreating(this);
        this.root.makeObservable();
    };
    Translation.prototype.fireOnObjCreating = function (obj) {
        if (!this.onBaseObjCreatingCallback)
            return;
        this.onBaseObjCreatingCallback(obj);
    };
    Object.defineProperty(Translation.prototype, "settingsSurvey", {
        get: function () {
            return this.settingsSurveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Translation.prototype, "localesQuestion", {
        get: function () {
            return (this.settingsSurvey.getQuestionByName("locales"));
        },
        enumerable: false,
        configurable: true
    });
    Translation.prototype.deleteLocaleStrings = function (locale) {
        if (!this.root) {
            this.reset();
        }
        if (!this.root)
            return;
        this.root.deleteLocaleStrings(locale);
        this.removeLocale(locale);
        this.updateChooseLanguageActions();
        this.reset();
    };
    Translation.prototype.createSettingsSurvey = function () {
        var _this = this;
        var json = this.getSettingsSurveyJSON();
        Object(_property_grid_index__WEBPACK_IMPORTED_MODULE_5__["setSurveyJSONForPropertyGrid"])(json);
        var res = this.options.createSurvey(json, "translation_settings", this);
        res.css = _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_7__["propertyGridCss"];
        res.css.root += " st-properties";
        res.rootCss += " st-properties";
        res.onValueChanged.add(function (sender, options) {
            if (options.name == "locales") {
                _this.updateLocales();
            }
        });
        res.onMatrixRenderRemoveButton.add(function (sender, options) {
            options.allow = options.rowIndex > 0;
        });
        res.onMatrixRowRemoving.add(function (sender, options) {
            _this.removingLocale = options.question.value[options.rowIndex].name;
        });
        res.onMatrixRowRemoved.add(function (sender, options) {
            if (!!_this.removingLocale) {
                _this.deleteLocaleStrings(_this.removingLocale);
            }
        });
        res.onGetQuestionTitleActions.add(function (sender, options) {
            options.titleActions = [_this.addLanguageAction];
        });
        res.onGetMatrixRowActions.add(function (sender, options) {
            Object(_utils_actions__WEBPACK_IMPORTED_MODULE_9__["updateMatrixRemoveAction"])(options.question, options.actions, options.row);
            if (_this.options.getHasMachineTranslation() && Object(_utils_actions__WEBPACK_IMPORTED_MODULE_9__["findAction"])(options.actions, "remove-row")) {
                var q = options.question;
                var rowIndex = q.visibleRows.indexOf(options.row);
                var locale_1 = q.value[rowIndex].name;
                options.actions.splice(0, 0, new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                    iconName: "icon-language",
                    locTooltipName: "ed.translateUsigAI",
                    location: "end",
                    action: function () { return _this.showTranslationEditor(locale_1); }
                }));
            }
            Object(_utils_actions__WEBPACK_IMPORTED_MODULE_9__["updateMatixActionsClasses"])(options.actions);
        });
        return res;
    };
    Translation.prototype.calcIsChooseLanguageEnabled = function () {
        this.isChooseLanguageEnabled = this.chooseLanguageActions.filter(function (item) { return item.visible; }).length > 0;
    };
    Translation.prototype.updateLocales = function () {
        var res = [""];
        var val = this.getSelectedLocales();
        if (!Array.isArray(val))
            val = [];
        val.forEach(function (lc) { return res.push(lc); });
        this.locales = res;
        this.canMergeLocaleWithDefault = this.hasLocale(this.defaultLocale);
    };
    Translation.prototype.getSettingsSurveyJSON = function () {
        return {
            elements: [
                {
                    type: "matrixdynamic",
                    name: "locales",
                    title: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationLanguages"),
                    confirmDelete: true,
                    titleLocation: "top",
                    confirmDeleteText: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationDeleteLanguage"),
                    columns: [
                        { name: "isSelected", cellType: "boolean", renderAs: "checkbox", enableIf: "localeEnableIf()" },
                        { name: "displayName", cellType: "expression", expression: "{row.displayName}" }
                    ],
                    showHeader: false,
                    allowAddRows: false,
                    rowCount: 0
                }
            ]
        };
    };
    Translation.prototype.getSurveyLocales = function () {
        var usedLocales = new Array();
        var sLocales = survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].supportedLocales;
        var locales = Array.isArray(sLocales) && sLocales.length > 0
            ? sLocales
            : survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getLocales();
        var addedLocales = {};
        for (var i = 0; i < locales.length; i++) {
            this.addLocaleIntoChoices(locales[i], usedLocales, addedLocales);
        }
        locales = this.getVisibleLocales();
        for (var i = 0; i < locales.length; i++) {
            this.addLocaleIntoChoices(locales[i], usedLocales, addedLocales);
        }
        return [usedLocales, locales];
    };
    Translation.prototype.importFromCSVFileDOM = function () {
        var _this = this;
        if (!document)
            return;
        if (!this.inputFileElement) {
            this.inputFileElement = document.createElement("input");
            this.inputFileElement.type = "file";
            this.inputFileElement.style.display = "none";
            this.inputFileElement.onchange = function () {
                _this.importFromCSVFileUI(_this.inputFileElement);
            };
        }
        this.inputFileElement.click();
    };
    Translation.prototype.updateSettingsSurveyLocales = function () {
        var _a = this.getSurveyLocales(), choices = _a[0], locales = _a[1];
        var selectedLocales = [];
        if (!locales)
            locales = [];
        for (var i = 0; i < locales.length; i++) {
            if (!!this.localeInitialVisibleCallback && !this.localeInitialVisibleCallback(locales[i]))
                continue;
            selectedLocales.push(locales[i]);
        }
        var maxLocales = _creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.maximumSelectedLocales;
        if (maxLocales > 0 && selectedLocales.length > maxLocales) {
            selectedLocales.splice(maxLocales);
        }
        this.setSelectedLocales(selectedLocales);
    };
    Translation.prototype.resetStringsSurvey = function () {
        if (!this.hasUI)
            return;
        this.stringsSurvey = this.createStringsSurvey();
        this.stringsHeaderSurvey = this.createStringsHeaderSurvey();
        this.updateReadOnly();
    };
    Translation.prototype.createStringsSurvey = function () {
        var _this = this;
        var json = { autoGrowComment: true, allowResizeComment: false };
        Object(_property_grid_index__WEBPACK_IMPORTED_MODULE_5__["setSurveyJSONForPropertyGrid"])(json, false);
        var survey = this.options.createSurvey(json, "translation_strings", this);
        survey.lazyRendering = true;
        survey.skeletonComponentName = "sd-translation-line-skeleton";
        survey.startLoadingFromJson();
        survey.css = _translation_theme__WEBPACK_IMPORTED_MODULE_8__["translationCss"];
        survey.addNewPage("page");
        this.addTranslationGroupIntoStringsSurvey(survey.pages[0], this.root);
        survey.data = this.getStringsSurveyData(survey);
        survey.endLoadingFromJson();
        var getTransationItem = function (question, rowName) {
            var itemValue = survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getItemByValue(question.rows, rowName);
            return !!itemValue ? itemValue["translationData"] : null;
        };
        survey.onMatrixCellCreated.add(function (sender, options) {
            if (options.cell.question instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionCommentModel"]) {
                var cellQuestion = options.cell.question;
                var item = getTransationItem(options.question, options.row.name);
                _this.setPlaceHolder(cellQuestion, item, options.columnName);
                var isMultiLine = !!item ? item.locString.getIsMultiple() : false;
                cellQuestion.acceptCarriageReturn = isMultiLine;
                if (!!item) {
                    cellQuestion.maxLength = item.maxLength;
                }
                if (!isMultiLine) {
                    cellQuestion.rows = 1;
                }
            }
        });
        survey.onMatrixCellValueChanging.add(function (_, options) {
            var item = getTransationItem(options.question, options.row.name);
            if (!!item) {
                options.value = _this.getProcessedTranslationItemText(options.columnName, item.locString, options.value, item.context);
            }
        });
        survey.onMatrixCellValueChanged.add(function (sender, options) {
            var item = getTransationItem(options.question, options.row.name);
            if (!!item) {
                item.setLocText(options.columnName, options.value);
                var colName_1 = options.columnName;
                options.row.cells.forEach(function (cell) {
                    if (colName_1 === "default" || cell.column.name.indexOf(colName_1 + "-") === 0)
                        _this.setPlaceHolder(cell.question, item, cell.column.name);
                });
            }
        });
        survey.onUpdatePanelCssClasses.add(function (sender, options) {
            if (options.panel["__translationHasIndent"]) {
                options.cssClasses.panel.content += " st-panel-indent";
            }
        });
        survey.currentPage = survey.pages[0];
        return survey;
    };
    Translation.prototype.setPlaceHolder = function (cellQuestion, item, locale) {
        cellQuestion.placeholder = item.getPlaceholder(locale);
    };
    Translation.prototype.createStringsHeaderSurvey = function () {
        var json = {};
        Object(_property_grid_index__WEBPACK_IMPORTED_MODULE_5__["setSurveyJSONForPropertyGrid"])(json, false);
        var survey = this.options.createSurvey(json, "translation_strings_header", this);
        survey.css = _translation_theme__WEBPACK_IMPORTED_MODULE_8__["translationCss"];
        var newPage = survey.addNewPage("page");
        var matrix = (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("matrixdropdown"));
        matrix.name = "stringsHeader";
        matrix.titleLocation = "hidden";
        this.addLocaleColumns(matrix);
        newPage.addQuestion(matrix);
        survey.currentPage = survey.pages[0];
        return survey;
    };
    Translation.prototype.addTranslationGroupIntoStringsSurvey = function (panel, group) {
        for (var i = 0; i < group.items.length; i++) {
            if (group.items[i].isGroup)
                continue;
            var item = group.items[i];
            var matrix = (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("matrixdropdown"));
            matrix.cellType = "comment";
            matrix.titleLocation = "hidden";
            matrix.name = group.fullName + i;
            matrix.showHeader = false;
            panel.addQuestion(matrix);
            this.addLocaleColumns(matrix);
            // let matrix = <QuestionMatrixDropdownModel>panel.questions[0];
            var itemValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](item.name, item.text);
            itemValue["translationData"] = item;
            matrix.rows.push(itemValue);
        }
        for (var i = 0; i < group.items.length; i++) {
            if (!group.items[i].isGroup)
                continue;
            var item = group.items[i];
            var pnl = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("panel");
            pnl.name = item.name;
            panel.addElement(pnl);
            pnl.title = item.text;
            if (item.hasIndent) {
                pnl["__translationHasIndent"] = true;
            }
            this.addTranslationGroupIntoStringsSurvey(pnl, item);
        }
    };
    Translation.prototype.addLocaleColumns = function (matrix) {
        var locs = this.getSelectedLocales();
        var defaultColumn = matrix.addColumn("default", this.getLocaleName(""));
        defaultColumn.readOnly = this.isEditMode;
        for (var i = 0; i < locs.length; i++) {
            matrix.addColumn(locs[i], this.getLocaleName(locs[i]));
        }
    };
    Translation.prototype.getStringsSurveyData = function (survey) {
        var res = {};
        var questions = survey.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            res[questions[i].name] = this.getStringsQuestionData(questions[i]);
        }
        return res;
    };
    Translation.prototype.updateStringsSurveyData = function () {
        var survey = this.stringsSurvey;
        if (survey) {
            survey.data = this.getStringsSurveyData(survey);
        }
    };
    Translation.prototype.getStringsQuestionData = function (matrix) {
        var res = {};
        for (var i = 0; i < matrix.rows.length; i++) {
            var itemValue = matrix.rows[i];
            var item = itemValue["translationData"];
            var value = item.toJSON();
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(value)) {
                res[itemValue.value] = value;
            }
        }
        return res;
    };
    Translation.prototype.updateHeaderStringsSurveyColumns = function () {
        if (!this.stringsHeaderSurvey)
            return;
        var matrix = (this.stringsHeaderSurvey.getQuestionByName("stringsHeader"));
        matrix.columns = [];
        this.addLocaleColumns(matrix);
    };
    Translation.prototype.updateStringsSurveyColumns = function () {
        if (!this.stringsSurvey)
            return;
        var questions = this.stringsSurvey.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            var matrix = questions[i];
            matrix.beginUpdate();
            matrix.columns = [];
            this.addLocaleColumns(matrix);
            matrix.endUpdate();
        }
    };
    Translation.prototype.addLocaleIntoChoices = function (loc, choices, addedLocales) {
        if (!loc || addedLocales[loc])
            return;
        addedLocales[loc] = true;
        choices.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](loc, this.getLocaleName(loc)));
    };
    Translation.prototype.addLocaleIntoValue = function (loc, updateValue) {
        var visLocs = this.getVisibleLocales();
        if (visLocs.indexOf(loc) < 0) {
            visLocs.push(loc);
            this.setVisibleLocales(visLocs);
        }
        if (updateValue) {
            var selLocs = this.getSelectedLocales();
            if (selLocs.indexOf(loc) < 0 && selLocs.length < _creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.maximumSelectedLocales) {
                selLocs.push(loc);
                this.setSelectedLocales(selLocs);
            }
        }
    };
    Translation.prototype.isLocaleVisible = function (locales, locale) {
        return locale !== survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale && locales.indexOf(locale) < 0;
    };
    Translation.prototype.setupToolbarItems = function () {
        var _this = this;
        this.chooseLanguageActions = this.getSurveyLocales()[0].map(function (locale) { return (new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: locale.value,
            title: _this.getLocaleName(locale.value),
            data: locale
        })); });
        this.addLanguageAction = Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModel"])({
            id: "svc-translation-choose-language",
            iconName: "icon-add",
            enabled: (new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.isChooseLanguageEnabled; })),
        }, {
            items: this.chooseLanguageActions,
            allowSelection: false,
            onSelectionChanged: function (item) {
                _this.addLocale(item.id);
            }
        });
    };
    Translation.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "canMergeLocaleWithDefault") {
            this.mergeLocaleWithDefaultText = this.getMergeLocaleWithDefaultText();
        }
        if (name === "locales") {
            this.updateHeaderStringsSurveyColumns();
            this.updateStringsSurveyColumns();
        }
    };
    Translation.prototype.getMergeLocaleWithDefaultText = function () {
        if (!this.canMergeLocaleWithDefault)
            return "";
        var locText = this.getLocaleName(this.defaultLocale);
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationMergeLocaleWithDefault")["format"](locText);
    };
    Object.defineProperty(Translation.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        set: function (val) {
            this.surveyValue = val;
            this.setVisibleLocales([]);
            this.reset();
        },
        enumerable: false,
        configurable: true
    });
    Translation.prototype.reset = function () {
        var rootObj = !!this.filteredPage ? this.filteredPage : this.survey;
        var rootName = !!this.filteredPage ? rootObj["name"] : "survey";
        this.root = new TranslationGroup(rootName, rootObj, this);
        this.root.setAsRoot();
        this.root.reset();
        this.resetLocales();
        this.isEmpty = !this.root.hasItems;
        this.updateSettingsSurveyLocales();
        this.updateLocales();
        this.resetStringsSurvey();
        this.updateChooseLanguageActions();
    };
    Translation.prototype.updateReadOnly = function () {
        if (this.stringsSurvey) {
            this.stringsSurvey.mode = this.readOnly ? "display" : "edit";
        }
    };
    Translation.prototype.canShowProperty = function (obj, prop, isEmpty) {
        var result = !isEmpty || _survey_helper__WEBPACK_IMPORTED_MODULE_6__["SurveyHelper"].isPropertyVisible(obj, prop, this.options);
        return this.translationStringVisibilityCallback ? this.translationStringVisibilityCallback(obj, prop.name, result) : result;
    };
    Object.defineProperty(Translation.prototype, "defaultLocale", {
        get: function () {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale;
        },
        enumerable: false,
        configurable: true
    });
    Translation.prototype.getLocaleName = function (loc) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getLocaleName(loc, this.defaultLocale);
    };
    Translation.prototype.removeLocale = function (locale) {
        if (this.hasLocale(locale)) {
            var index = this.locales.indexOf(locale);
            var locales = this.locales;
            locales.splice(index, 1);
            this.locales = locales;
            this.canMergeLocaleWithDefault = this.hasLocale(this.defaultLocale);
        }
    };
    Translation.prototype.hasLocale = function (locale) {
        return this.locales.indexOf(locale) > -1;
    };
    Translation.prototype.addLocale = function (locale) {
        if (!this.hasLocale(locale)) {
            this.addLocaleIntoValue(locale, true);
        }
        this.updateChooseLanguageActions();
    };
    Translation.prototype.updateChooseLanguageActions = function () {
        var _this = this;
        var actions = this.chooseLanguageActions;
        var locales = this.getVisibleLocales();
        if (Array.isArray(actions)) {
            actions.forEach(function (item) { return item.visible = _this.isLocaleVisible(locales, item.data.value); });
        }
        this.calcIsChooseLanguageEnabled();
    };
    Translation.prototype.resetLocales = function () {
        var locales = [""];
        this.root.fillLocales(locales);
        this.setSelectedAndVisibleLocales(locales, this.getSelectedLocales(), true);
    };
    Translation.prototype.getSelectedLocales = function () {
        return this.getSelectedLocalesCore(true);
    };
    Translation.prototype.setSelectedLocales = function (selectedLocales) {
        this.setSelectedAndVisibleLocales(this.getVisibleLocales(), selectedLocales, true);
    };
    Translation.prototype.getVisibleLocales = function () {
        return this.getSelectedLocalesCore(false);
    };
    Translation.prototype.setVisibleLocales = function (locales) {
        this.setSelectedAndVisibleLocales(locales, this.getSelectedLocales(), false);
    };
    Translation.prototype.getSelectedLocalesCore = function (isSelected) {
        if (!this.localesQuestion)
            return [];
        var val = this.localesQuestion.value;
        if (!Array.isArray(val) || val.length === 0)
            return [];
        var res = [];
        val.forEach(function (item) { if (!!item.name && (!isSelected || item.isSelected))
            res.push(item.name); });
        return res;
    };
    Translation.prototype.setSelectedAndVisibleLocales = function (locales, selectedLocales, includeSelected) {
        var _this = this;
        if (!this.localesQuestion)
            return;
        if (!Array.isArray(selectedLocales))
            selectedLocales = [];
        var val = [];
        if (includeSelected) {
            selectedLocales.forEach(function (sl) { if (locales.indexOf(sl) < 0)
                locales.push(sl); });
        }
        var locDefault = this.defaultLocale;
        val.push({ isSelected: true, name: "", displayName: this.getLocaleName("") });
        locales.forEach(function (loc) {
            if (!!loc) {
                val.push({ isSelected: loc === locDefault || selectedLocales.indexOf(loc) > -1, name: loc, displayName: _this.getLocaleName(loc) });
            }
        });
        this.localesQuestion.value = val;
    };
    Object.defineProperty(Translation.prototype, "noStringsText", {
        get: function () {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationNoStrings");
        },
        enumerable: false,
        configurable: true
    });
    Translation.prototype.exportToCSV = function () {
        if (!this.root) {
            this.reset();
        }
        var res = [];
        var headerRow = [];
        var visibleLocales = this.locales;
        headerRow.push("description â†“ - language â†’");
        for (var i = 0; i < visibleLocales.length; i++) {
            headerRow.push(!!visibleLocales[i] ? visibleLocales[i] : "default");
        }
        res.push(headerRow);
        var itemsHash = {};
        this.fillItemsHash("", this.root, itemsHash);
        for (var key in itemsHash) {
            var row = [key];
            var item = itemsHash[key];
            for (var i = 0; i < visibleLocales.length; i++) {
                var loc = visibleLocales[i];
                var val = item.getTextForExport(loc);
                val = !val && i == 0 ? item.defaultValue : val;
                val = this.options.getTranslationExportedText(item.context, item.name, item.locString, loc, val);
                row.push(!val && i == 0 ? item.defaultValue : val);
            }
            res.push(row);
        }
        var prefix = _creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].translation.exportPrefix;
        if (!prefix)
            prefix = "";
        return (prefix +
            Object(papaparse__WEBPACK_IMPORTED_MODULE_2__["unparse"])(res, {
                quoteChar: '"',
                escapeChar: '"',
                delimiter: Translation.csvDelimiter,
                header: true,
                newline: Translation.newLineDelimiter,
                skipEmptyLines: false,
                columns: null //or array of strings
            }));
    };
    Translation.prototype.importFromNestedArray = function (rows) {
        var _this = this;
        var locales = rows.shift().slice(1);
        if (locales[0] === "default") {
            locales[0] = "";
        }
        var translation = new Translation(this.survey, this.options, false);
        translation.showAllStrings = true;
        var itemsHash = {};
        this.fillItemsHash("", translation.root, itemsHash);
        rows.forEach(function (row) {
            var name = row.shift().trim();
            if (!name)
                return;
            var item = itemsHash[name];
            if (!item)
                return;
            _this.updateItemWithStrings(name, item, row, locales);
        });
        this.reset();
        if (this.importFinishedCallback)
            this.importFinishedCallback();
    };
    Translation.prototype.exportToSCVFile = function (fileName) {
        if (!window)
            return;
        var data = this.exportToCSV();
        var blob = new Blob([data], { type: "text/csv" });
        if (window.navigator["msSaveOrOpenBlob"]) {
            window.navigator["msSaveBlob"](blob, fileName);
        }
        else {
            var elem = window.document.createElement("a");
            elem.href = window.URL.createObjectURL(blob);
            elem.download = fileName;
            document.body.appendChild(elem);
            elem.click();
            document.body.removeChild(elem);
        }
    };
    Translation.prototype.importFromCSVFile = function (file) {
        var self = this;
        Object(papaparse__WEBPACK_IMPORTED_MODULE_2__["parse"])(file, {
            complete: function (results, file) {
                self.importFromNestedArray(results.data);
            }
        });
    };
    Translation.prototype.mergeLocaleWithDefault = function () {
        if (!this.hasLocale(this.defaultLocale))
            return;
        this.root.mergeLocaleWithDefault(this.defaultLocale);
        this.setVisibleLocales([]);
        this.setSelectedLocales([]);
        this.reset();
    };
    Translation.prototype.createTranslationEditor = function (locale) {
        var _this = this;
        var res = new TranslationEditor(this.survey, locale, this.options);
        res.onApply = function () {
            _this.reset();
        };
        return res;
    };
    Translation.prototype.showTranslationEditor = function (locale) {
        this.createTranslationEditor(locale).showDialog();
    };
    Translation.prototype.translateItemAfterRender = function (item, el, locale) {
        if (!this.translateItemAfterRenderCallback)
            return;
        if (Array.isArray(el)) {
            for (var i = 0; i < el.length; i++) {
                if (el[i].tagName == "TEXTAREA") {
                    el = el[i];
                    break;
                }
            }
        }
        this.translateItemAfterRenderCallback(item, el, locale);
    };
    /**
     * Update a translation item with given values
     */
    Translation.prototype.updateItemWithStrings = function (name, item, values, locales) {
        for (var i = 0; i < values.length && i < locales.length; i++) {
            var val = values[i].trim();
            if (!val)
                continue;
            if (this.importItemCallback) {
                val = this.importItemCallback(name, locales[i], val);
            }
            if (!!val) {
                item.values(locales[i]).text = val;
            }
        }
    };
    Translation.prototype.fillItemsHash = function (parentName, group, itemsHash) {
        var _this = this;
        var name = parentName ? parentName + "." + group.name : group.name;
        group.locItems.forEach(function (item) {
            itemsHash[name + "." + item.name] = item;
        });
        group.groups.forEach(function (group) { return _this.fillItemsHash(name, group, itemsHash); });
    };
    Translation.prototype.dispose = function () {
        this.isEmpty = true;
        if (!!this.stringsSurvey) {
            this.stringsSurvey.dispose();
            this.stringsSurvey = undefined;
        }
        if (!!this.stringsHeaderSurvey) {
            this.stringsHeaderSurvey.dispose();
            this.stringsHeaderSurvey = undefined;
        }
        if (!!this.settingsSurveyValue) {
            this.settingsSurveyValue.dispose();
            this.settingsSurveyValue = undefined;
        }
        this.importFinishedCallback = undefined;
        this.availableTranlationsChangedCallback = undefined;
        this.tranlationChangedCallback = undefined;
        _super.prototype.dispose.call(this);
    };
    Translation.csvDelimiter = ",";
    Translation.newLineDelimiter = "\n";
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], Translation.prototype, "locales", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Translation.prototype, "canMergeLocaleWithDefault", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Translation.prototype, "mergeLocaleWithDefaultText", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (_, target) {
                target.updateReadOnly();
            }
        })
    ], Translation.prototype, "readOnly", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Translation.prototype, "root", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (_, target) {
                target.reset();
            }
        })
    ], Translation.prototype, "showAllStrings", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            onSet: function (_, target) {
                target.reset();
            }
        })
    ], Translation.prototype, "filteredPage", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Translation.prototype, "stringsSurvey", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Translation.prototype, "stringsHeaderSurvey", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], Translation.prototype, "isEmpty", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], Translation.prototype, "isChooseLanguageEnabled", void 0);
    return Translation;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var TranslationEditor = /** @class */ (function () {
    function TranslationEditor(survey, locale, options) {
        this.survey = survey;
        this.locale = locale;
        this.options = options;
        this.translationValue = new Translation(this.survey, options, true);
        this.translation.setEditMode(locale);
        this.translation.reset();
        this.setupNavigationButtons();
    }
    Object.defineProperty(TranslationEditor.prototype, "translation", {
        get: function () { return this.translationValue; },
        enumerable: false,
        configurable: true
    });
    TranslationEditor.prototype.showDialog = function () {
        var _this = this;
        var dialogTitle = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationDialogTitle") + " (" + this.translation.getLocaleName(this.locale) + ")";
        if (this.translation.stringsSurvey.getAllQuestions(true).length === 0) {
            var locStr = new survey_core__WEBPACK_IMPORTED_MODULE_1__["LocalizableString"](this.translation.stringsSurvey);
            locStr.text = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.translationNoStrings");
            var popup = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog({
                componentName: "sv-string-viewer",
                data: { locStr: locStr, locString: locStr, model: locStr },
                onApply: function () { return true; },
                title: dialogTitle,
                displayMode: "popup"
            }, this.options.rootElement);
            var actions = popup.footerToolbar.actions;
            actions.splice(1, actions.length - 1);
            actions[0].title = "OK";
            return;
        }
        var popupModel = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog({
            componentName: "survey",
            data: {
                survey: this.translation.stringsSurvey,
                model: this.translation.stringsSurvey
            },
            onApply: function () {
                _this.apply();
                return true;
            },
            onCancel: function () {
                _this.dispose();
            },
            cssClass: "sv-property-editor st-translation-dialog",
            title: dialogTitle,
            displayMode: this.options.isMobileView ? "overlay" : "popup"
        }, this.options.rootElement);
        popupModel.locale = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].currentLocale;
    };
    TranslationEditor.prototype.doMachineTranslation = function () {
        var _this = this;
        var fromLocale = this.translation.defaultLocale;
        if (!fromLocale)
            fromLocale = "en";
        var items = this.createStringsToTranslate();
        var strings = [];
        items.forEach(function (item) {
            strings.push(item.getDefaultLocaleText());
        });
        var callback = function (translatedStrings) {
            if (!Array.isArray(translatedStrings))
                return;
            for (var i = 0; i < Math.min(items.length, translatedStrings.length); i++) {
                items[i].values(_this.locale).text = translatedStrings[i];
            }
            _this.translation.updateStringsSurveyData();
        };
        this.options.doMachineTranslation(fromLocale, this.locale, strings, callback);
    };
    TranslationEditor.prototype.apply = function () {
        this.translation.applyEditLocale();
        if (this.onApply) {
            this.onApply();
        }
        this.dispose();
    };
    TranslationEditor.prototype.cancel = function () {
        this.dispose();
    };
    TranslationEditor.prototype.dispose = function () {
        this.translationValue.dispose();
    };
    TranslationEditor.prototype.setupNavigationButtons = function () {
        var _this = this;
        var survey = this.translation.stringsSurvey;
        var actions = survey.navigationBar.actions;
        actions.splice(0, actions.length);
        if (this.options.getHasMachineTranslation()) {
            survey.addNavigationItem(new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "svc-translation-machine",
                iconName: "icon-language",
                css: "svc-translation-machine",
                locTitleName: "ed.translateUsigAI",
                component: "sv-action-bar-item",
                action: function () { _this.doMachineTranslation(); }
            }));
        }
        survey.addNavigationItem(createImportCSVAction(function () { _this.translation.importFromCSVFileDOM(); }, false, true));
        survey.addNavigationItem(createExportCSVAction(function () { _this.translation.exportToCSVFileUI(); }, true));
        survey.showNavigationButtons = "top";
    };
    TranslationEditor.prototype.createStringsToTranslate = function () {
        var res = new Array();
        this.addStringsToTranlate(this.translation.root, res);
        return res;
    };
    TranslationEditor.prototype.addStringsToTranlate = function (group, items) {
        var _this = this;
        group.items.forEach(function (item) {
            if (item.isGroup) {
                _this.addStringsToTranlate(item, items);
            }
            else {
                if (!!item.getDefaultLocaleText()) {
                    items.push(item);
                }
            }
        });
    };
    return TranslationEditor;
}());

function createImportCSVAction(action, needSeparator, isInEditor) {
    if (isInEditor === void 0) { isInEditor = false; }
    return new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
        id: "svc-translation-import",
        iconName: "icon-load",
        locTitleName: "ed.translationImportFromSCVButton",
        locTooltipName: "ed.translationImportFromSCVButton",
        mode: isInEditor ? "large" : "small",
        component: "sv-action-bar-item",
        needSeparator: needSeparator,
        action: action
    });
}
function createExportCSVAction(action, isInEditor) {
    if (isInEditor === void 0) { isInEditor = false; }
    return new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
        id: "svc-translation-export",
        iconName: "icon-download",
        locTitleName: "ed.translationExportToSCVButton",
        locTooltipName: "ed.translationExportToSCVButton",
        mode: isInEditor ? "large" : "small",
        component: "sv-action-bar-item",
        action: action
    });
}


/***/ }),

/***/ "./src/components/toolbox/toolbox-tool.scss":
/*!**************************************************!*\
  !*** ./src/components/toolbox/toolbox-tool.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/components/toolbox/toolbox-tool.ts":
/*!************************************************!*\
  !*** ./src/components/toolbox/toolbox-tool.ts ***!
  \************************************************/
/*! exports provided: ToolboxToolViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolboxToolViewModel", function() { return ToolboxToolViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var ToolboxToolViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ToolboxToolViewModel, _super);
    function ToolboxToolViewModel(item, creator) {
        var _this = _super.call(this) || this;
        _this.item = item;
        _this.creator = creator;
        _this.click = function (event) {
            if (!_this.allowAdd)
                return;
            _this.creator.clickToolboxItem(_this.item.json);
        };
        _this.onPointerUp = function (pointerUpEvent) {
            _this._node.classList.remove("svc-toolbox__tool--pressed");
            _this._node = null;
            document.removeEventListener("pointerup", _this.onPointerUp);
        };
        _this.startDragToolboxItem = function (pointerDownEvent, currentTarget) {
            var json = _this.creator.getJSONForNewElement(_this.item.json);
            _this.dragDropHelper.startDragToolboxItem(pointerDownEvent, json, _this.item);
            return true;
        };
        _this.dragOrClickHelper = new survey_core__WEBPACK_IMPORTED_MODULE_1__["DragOrClickHelper"](_this.startDragToolboxItem);
        return _this;
    }
    Object.defineProperty(ToolboxToolViewModel.prototype, "allowAdd", {
        get: function () {
            return !this.creator.readOnly;
        },
        enumerable: false,
        configurable: true
    });
    ToolboxToolViewModel.prototype.onPointerDown = function (pointerDownEvent) {
        var _a;
        if (!this.allowAdd)
            return;
        if (this.item.id.indexOf("dotsItem-id") === 0)
            return true; //toolbox responsive popup
        this.dragOrClickHelper.onPointerDown(pointerDownEvent);
        this._node = pointerDownEvent.currentTarget;
        this._node.classList.add("svc-toolbox__tool--pressed");
        document.addEventListener("pointerup", this.onPointerUp);
        (_a = this.creator) === null || _a === void 0 ? void 0 : _a.onDragDropItemStart();
    };
    Object.defineProperty(ToolboxToolViewModel.prototype, "dragDropHelper", {
        get: function () {
            return this.creator.dragDropSurveyElements;
        },
        enumerable: false,
        configurable: true
    });
    return ToolboxToolViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/components/toolbox/toolbox.scss":
/*!*********************************************!*\
  !*** ./src/components/toolbox/toolbox.scss ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/creator-base.ts":
/*!*****************************!*\
  !*** ./src/creator-base.ts ***!
  \*****************************/
/*! exports provided: CreatorAction, TabbedMenuItem, TabbedMenuContainer, ToolbarActionContainer, CreatorEvent, CreatorBase, SurveyCreatorModel, StylesManager, initializeDesignTimeSurveyModel, editableStringRendererName, getElementWrapperComponentName, getQuestionContentWrapperComponentName, getElementWrapperComponentData, getItemValueWrapperComponentName, getItemValueWrapperComponentData, isStringEditable, isTextInput, registerAdorner, removeAdorners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreatorAction", function() { return CreatorAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedMenuItem", function() { return TabbedMenuItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabbedMenuContainer", function() { return TabbedMenuContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolbarActionContainer", function() { return ToolbarActionContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreatorEvent", function() { return CreatorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreatorBase", function() { return CreatorBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyCreatorModel", function() { return SurveyCreatorModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return StylesManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeDesignTimeSurveyModel", function() { return initializeDesignTimeSurveyModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editableStringRendererName", function() { return editableStringRendererName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementWrapperComponentName", function() { return getElementWrapperComponentName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getQuestionContentWrapperComponentName", function() { return getQuestionContentWrapperComponentName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementWrapperComponentData", function() { return getElementWrapperComponentData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getItemValueWrapperComponentName", function() { return getItemValueWrapperComponentName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getItemValueWrapperComponentData", function() { return getItemValueWrapperComponentData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStringEditable", function() { return isStringEditable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTextInput", function() { return isTextInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerAdorner", function() { return registerAdorner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeAdorners", function() { return removeAdorners; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _json5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./json5 */ "./src/json5.ts");
/* harmony import */ var _questionconverter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./questionconverter */ "./src/questionconverter.ts");
/* harmony import */ var _textWorker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./textWorker */ "./src/textWorker.ts");
/* harmony import */ var _toolbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toolbox */ "./src/toolbox.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _selection_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./selection-history */ "./src/selection-history.ts");
/* harmony import */ var _components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/tabs/json-editor-ace */ "./src/components/tabs/json-editor-ace.ts");
/* harmony import */ var _components_tabs_json_editor_textarea__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/tabs/json-editor-textarea */ "./src/components/tabs/json-editor-textarea.ts");
/* harmony import */ var _components_tabs_test_plugin__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/tabs/test-plugin */ "./src/components/tabs/test-plugin.ts");
/* harmony import */ var _components_tabs_logic__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/tabs/logic */ "./src/components/tabs/logic.ts");
/* harmony import */ var _components_tabs_translation_plugin__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/tabs/translation-plugin */ "./src/components/tabs/translation-plugin.ts");
/* harmony import */ var _components_tabs_logic_plugin__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/tabs/logic-plugin */ "./src/components/tabs/logic-plugin.ts");
/* harmony import */ var _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./plugins/undo-redo */ "./src/plugins/undo-redo/index.ts");
/* harmony import */ var _components_tabs_designer_plugin__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/tabs/designer-plugin */ "./src/components/tabs/designer-plugin.ts");
/* harmony import */ var _creator_responsivity_manager__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./creator-responsivity-manager */ "./src/creator-responsivity-manager.ts");
/* harmony import */ var _components_side_bar_side_bar_model__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/side-bar/side-bar-model */ "./src/components/side-bar/side-bar-model.ts");
/* harmony import */ var _src_components_tabs_translation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../src/components/tabs/translation */ "./src/components/tabs/translation.ts");
/* harmony import */ var _components_string_editor__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/string-editor */ "./src/components/string-editor.ts");
/* harmony import */ var _components_tabs_theme_plugin__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/tabs/theme-plugin */ "./src/components/tabs/theme-plugin.ts");
/* harmony import */ var _survey_elements__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./survey-elements */ "./src/survey-elements.ts");




























__webpack_require__(/*! ./components/creator.scss */ "./src/components/creator.scss");
__webpack_require__(/*! ./components/string-editor.scss */ "./src/components/string-editor.scss");
__webpack_require__(/*! ./creator-theme/creator.scss */ "./src/creator-theme/creator.scss");
//Obsolete
var CreatorAction = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CreatorAction, _super);
    function CreatorAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CreatorAction;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]));

var TabbedMenuItem = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TabbedMenuItem, _super);
    function TabbedMenuItem(item) {
        return _super.call(this, item) || this;
    }
    return TabbedMenuItem;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]));

var TabbedMenuContainer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TabbedMenuContainer, _super);
    function TabbedMenuContainer() {
        var _this = _super.call(this) || this;
        _this.dotsItem.popupModel.horizontalPosition = "center";
        _this.minVisibleItemsCount = 1;
        return _this;
    }
    return TabbedMenuContainer;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["AdaptiveActionContainer"]));

var ToolbarActionContainer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ToolbarActionContainer, _super);
    function ToolbarActionContainer(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        return _this;
    }
    ToolbarActionContainer.prototype.getRenderedActions = function () {
        var actions = this.actions;
        var expandAction = this.creator.sidebar.getExpandAction();
        var index = actions.indexOf(expandAction);
        if (index !== -1) {
            actions.splice(index, 1);
            actions.push(expandAction);
        }
        return actions;
    };
    return ToolbarActionContainer;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["ActionContainer"]));

var CreatorEvent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CreatorEvent, _super);
    function CreatorEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CreatorEvent;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["EventBase"]));

/**
 * Base class for Survey Creator.
 */
var CreatorBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CreatorBase, _super);
    function CreatorBase(options, options2) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.startEditTitleOnQuestionAddedValue = true;
        _this.isRTLValue = false;
        _this.alwaySaveTextInPropertyEditorsValue = false;
        _this.pageEditModeValue = "standard";
        _this.newQuestions = [];
        _this.newPanels = [];
        _this.plugins = {};
        /**
         * An event that is raised before a survey element (a question, panel, or page) is deleted.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.element`: [`Survey.Base`](https://surveyjs.io/form-library/documentation/api-reference/base)\
         * A survey element to be deleted.
         * - `options.elementType`: `"question"` | `"panel"` | `"page"`\
         * The element type.
         * - `options.allowing`: `boolean`\
         * A Boolean property that you can set to `false` if you want to cancel element deletion.
         * @see deleteElement
         */
        _this.onElementDeleting = new CreatorEvent();
        /**
         * The event is called on setting a readOnly property of the property editor. By default the property.readOnly property is used.
         * You may changed it and make the property editor read only or enabled for a particular object.
         *- sender the survey creator object that fires the event
         *- options.obj the survey object, Survey, Page, Panel or Question
         *- options.property the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
         *- options.readOnly a boolean value. It has value equals to options.readOnly property by default. You may change it.
         *- options.parentObj the parent object. It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is a question (dropdown, radigroup, checkbox, matrices and so on).
         *- options.parentProperty the parent property (Survey.JsonObjectProperty object). It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is choices, columns, rows, triggers and so on.
         */
        _this.onGetPropertyReadOnly = new CreatorEvent();
        /**
         * The event is fired when the survey creator creates a survey object (Survey.Survey).
         *- sender the survey creator object that fires the event
         *- options.survey the survey object showing in the creator.
         *- options.reason indicates what component of the creator requests the survey. There are several reason types: "designer" - survey for designer survey, "test" - survey for "Preview" tab and "conditionEditor", "defaultValueEditor", "restfulEditor" - surveys for different property editors.
         */
        _this.onSurveyInstanceCreated = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator obtains a survey element name to display it in the UI.
         *
         * Handle this event to replace survey element names in the UI with custom display texts.
         * If you only want to replace the names with survey element titles, enable the [`showObjectTitles`](https://surveyjs.io/survey-creator/documentation/surveycreator#showObjectTitles) property instead of handling this event.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender`- A Survey Creator instance that raised the event.
         * - `options.obj` - The instance of a survey element (survey, page, question, or panel) whose name has been requested.
         * - `options.area` - A Survey Creator UI element that requests the display name.
         *   - `"page-selector"` - Page selector on the design surface
         *   - `"condition-editor"` - Condition pop-up window or drop-down menus that allow users to select questions in the Logic tab
         *   - `"logic-tab:question-filter"` - Question filter in the Logic tab
         *   - `"logic-tab:question-selector"` - Question selector on editing actions in the Logic tab
         *   - `"preview-tab:page-list"` - Page list in the Preview tab
         *   - `"preview-tab:selected-page"` - Selected page name in the Preview tab
         *   - `"property-grid:property-editor"` - Property editors in the Property Grid
         *   - `"property-grid-header:element-list"` - Survey element list in the header of the Property Grid
         *   - `"property-grid-header:selected-element"` - Selected survey element in the header of the Property Grid
         *   - `"translation-tab"` - Translation tab
         * - `options.displayName` - Modify this property to set a custom display text for the survey element.
         * - `options.reason` - Obsolete. Use the `options.area` property instead.
         *   - `"condition"` - Use the `"condition-editor"` value of `options.area` instead.
         *   - `"survey-tester"` - Use the `"preview-tab:page-list"` value of `options.area` instead.
         *   - `"survey-tester-selected"` - Use the `"preview-tab:selected-page"` value of `options.area` instead.
         *   - `"survey-translation"` - Use the `"translation-tab"` value of `options.area` instead.
         *   - `"property-editor"` - Use the `"property-grid:property-editor"` value of `options.area` instead.
         *   - `"property-grid"` - Use the `"property-grid-header:element-list"` value of `options.area` instead.
         *   - `"property-grid-title"` - Use the `"property-grid-header:selected-element"` value of `options.area` instead.
         */
        _this.onGetObjectDisplayName = new CreatorEvent();
        /**
         * This event is raised after a user has edited a text value on the design surface. This value may include HTML markup. You can handle the `onHtmlToMarkdown` event to convert the HTML markup to Markdown.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.element` - The instance of a survey element (survey, page, panel, question) that the user configures.
         * - `options.name` - The name of a property whose value has been edited.
         * - `options.html` - HTML content. Pass this field's value to an HTML-to-Markdown converter.
         * - `options.text` - A text string that may contain Markdown. Assign the result of the HTML-to-Markdown conversion to this field.
         */
        _this.onHtmlToMarkdown = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator obtains permitted operations for a survey element. Use this event to disable user interactions with a question, panel, or page on the design surface.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.obj`: [`Survey.Base`](https://surveyjs.io/form-library/documentation/api-reference/base)\
         * A survey element (question or panel) for which you can disable user interactions.
         * - `options.allowChangeRequired`: `boolean`\
         * Allows users to mark the survey element as required.
         * - `options.allowChangeType`: `boolean`\
         * Allows users to change the survey element type.
         * - `options.allowChangeInputType`: `boolean`\
         * Allows users to change the [`inputType`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#inputType) property of Single-Line Input questions.
         * - `options.allowCopy`: `boolean`\
         * Allows users to duplicate the survey element.
         * - `options.allowDelete`: `boolean`\
         * Allows users to delete the survey element.
         * - `options.allowDragging`: `boolean`\
         * Allows users to drag and drop the survey element.
         * - `options.allowEdit`: `boolean`\
         * Allows users to edit survey element properties on the design surface. If you disable this property, users can edit the properties only in the Property Grid.
         *
         * To disable a user interaction, set the correponding `allow...` property to `false`.
         *
         * [Specify Adorner Visibility](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#specify-adorner-availability (linkStyle))
         */
        _this.onElementAllowOperations = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator obtains [adorners](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#specify-adorner-availability) for a survey element. Use this event to hide and modify predefined adorners or add a custom adorner.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.obj`: [`Survey.Base`](https://surveyjs.io/form-library/documentation/api-reference/base)\
         * A survey element (question, panel, or page) whose adorners you can customize.
         * - `options.items`: [`IAction[]`](https://surveyjs.io/form-library/documentation/api-reference/iaction#title)\
         * An array of adorner actions. You can add, modify, or remove actions from this array.
         *
         * [View Demo](https://surveyjs.io/survey-creator/examples/create-custom-adorners/ (linkStyle))
         * @see onElementAllowOperations
         * @see onGetPageActions
         */
        _this.onDefineElementMenuItems = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator adds properties to a survey element selected on the design surface. Handle this event if you cancel the addition of certain properties and thus [hide them from the Property Grid](https://surveyjs.io/survey-creator/documentation/property-grid-customization#hide-properties-from-the-property-grid).
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.property`: `JsonObjectProperty`\
         * A property being added.
         * - `options.parentProperty`: `JsonObjectProperty`\
         * A property that nests `options.property` (`choices` for an item value, `columns` for a matrix column, `rows` for a matrix row etc.). `options.parentProperty` has a value only for nested properties.
         * - `options.obj`: `any`\
         * A survey element that contains `options.property`: page, panel, question, the survey itself, item value (choice option), matrix column, etc.
         * - `options.parentObj`: `any`\
         * A survey element that contains `options.parentProperty`. `options.parentObj` has a value only for nested properties.
         * - `options.canShow`: `boolean`\
         * A Boolean property that you can set to `false` if you do not want to add the property.
         *
         * [View Demo](https://surveyjs.io/survey-creator/examples/hide-category-from-property-grid/ (linkStyle))
         */
        _this.onShowingProperty = new CreatorEvent();
        _this.onCanShowProperty = _this.onShowingProperty;
        /**
         * The event is called after a survey that represents the Property Grid is created and all its questions (property editors) are setup.
         * You can use this event to modify this survey to change the property grid behavior
         *- options.obj the survey object that is currently editing in the property grid
         *- options.survey the property grid survey
         */
        _this.onPropertyGridSurveyCreated = new CreatorEvent();
        /**
          * The event is called after a property editor (in fact a survey question) has been created and all it's properties have been assign.
          * You can use this event to modify the property editor properties or set event handlers to customize it's behavior
          *- options.obj the survey object that is currently editing in the property grid
          *- options.property the property that the current property editor is editing
          *- options.editor the property editor. In fact it is a survey question. We are using a heavily customizable survey as a property grid in Creator V2. It means that every property editor is a question.
          */
        _this.onPropertyEditorCreated = new CreatorEvent();
        /**
         * The event is called after a property editor setups its title actions.
         * You can use this event to modify the property editor title actions
         *- options.obj the survey object that is currently editing in the property grid
         *- options.property the property that the current property editor is editing
         *- options.editor the property editor. In fact it is a survey question. We are using a heavily customizable survey as a property grid in Creator V2. It means that every property editor is a question.
         *- options.titleActions the list of title actions.
         */
        _this.onPropertyEditorUpdateTitleActions = new CreatorEvent();
        /**
         * An event that is raised before Survey Creator displays a pop-up window called from the Property Grid. This window allows users to edit choices, conditions, and so on.
         *
         * Use this event to customize the pop-up window, for example, add custom action buttons.
         *
         * Parameters:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.obj` - An instance of a survey element (question or panel) that users are configuring in the Property Grid.
         * - `options.property`- A `JsonObjectProperty` object with metadata about the property being edited.
         * - `options.editor` - A property editor. It is an object of the [`Question`](https://surveyjs.io/form-library/documentation/question) type because the Property Grid is [built upon a regular survey](https://surveyjs.io/survey-creator/documentation/creator-v2-whats-new#survey-creator-ui-elements-are-surveys).
         * - `options.popupEditor` - An editor inside the pop-up window.
         * - `options.popupModel` - A `PopupBaseViewModel` object that describes the pop-up window model. Use `options.popupModel.footerToolbar` to access the actions at the bottom of the window.
         */
        _this.onPropertyGridShowModal = new CreatorEvent();
        _this.onCanDeleteItem = new CreatorEvent();
        _this.onCollectionItemDeleting = new CreatorEvent();
        /**
         * The event is called before rendering a collection item in a property editor. For example: a column in a column editor, or an item in Choices and so on.
         * Use this event to prevent a collection item from being edited or removed from a collection.
         *- sender the survey creator object that fires the event
         *- options.obj the survey object: Question, Panel, Page or Survey
         *- options.property the collection property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties
         *- options.propertyName the collection property name
         *- options.collection a collection where a target item is located. It is can be Columns in Matrices or Choices in Dropdown question and so on.
         *- options.item a target collection item
         *- options.allowDelete a boolean value. It is `true` by default. Set it false to prevent an item from being removed from the collection
         *- options.allowAdd a boolean value. It is `true` by default. Set it false to prevent an item from being added to the collection
         *- options.allowEdit a boolean value. It is `true` by default. Set it `false` to disable editing.
         */
        _this.onCollectionItemAllowOperations = new CreatorEvent();
        /**
          * The event is called on adding a new Survey.ItemValue object. It uses as an element in choices array in Radiogroup, checkbox and dropdown questions or Matrix columns and rows properties.
          * Use this event, to set ItemValue.value and ItemValue.text properties by default or set a value to the custom property.
          *- sender the survey creator object that fires the event
          *- options.obj the object that contains the itemsValues array, for example selector, rating and single choice matrix questions.
          *- options.propertyName  the object property Name. It can be "choices" for selector questions or rateValues for rating question or columns/rows for single choice matrix.
          *- options.newItem a new created Survey.ItemValue object.
          *- options.itemValues an editing Survey.ItemValue array. newItem object is not added yet into this array.
          */
        _this.onItemValueAdded = new CreatorEvent();
        /**
         * The event is called when a user adds a new column into MatrixDropdown or MatrixDynamic questions. Use it to set some properties of Survey.MatrixDropdownColumn by default, for example name or a custom property.
         *- sender the survey creator object that fires the event
         *- options.matrix a matrix question where column is located, matrix.columns.
         *- options.newColumn a new created Survey.MatrixDropdownColumn object.
         *- options.columns editable columns objects. They can be different from options.matrix.columns. options.columns and options.matrix.columns are equal after user press Apply or Cancel and options.columns will be set to options.matrix.columns or reset to initial state.
         */
        _this.onMatrixColumnAdded = new CreatorEvent();
        /**
         * Use this event to control Property Editors UI.
         *- sender the survey creator object that fires the event
         *- options.obj the survey object which property is edited in the Property Editor.
         *- options.propertyName  the name of the edited property.
         *- options.editorOptions  options that can be changed.
         *- options.editorOptions.allowAddRemoveItems a boolean property, true by default. Set it false to disable add/remove items in array properties. For example 'choices', 'columns', 'rows'.
         *- options.editorOptions.allowRemoveAllItems a boolean property, true by default. Set it false to disable remove all items in array properties. For example 'choices', 'columns', 'rows'.
         *- options.editorOptions.allowBatchEdit a boolean property, true by default. Set it false to hide the "Edit" button for the "choices" property.
         *- options.editorOptions.itemsEntryType a string property, 'form' by default. Set it 'fast' to show "Manual Entry" tab for "choices" property by default.
         */
        _this.onSetPropertyEditorOptions = new CreatorEvent();
        /**
         * The event is called on generation a new name for a new created element.
         *- sender the survey creator object that fires the event
         *- options.element a new created survey element. It can be question, panel or page
         *- options.name a new suggested name, that is unique for the current survey. You can suggest your own name. If it is unique, creator will assign it to the element.
         *- options.isUnique a boolean property, set this property to false, if you want to ask Creator to generate another name
         */
        _this.onGenerateNewName = new CreatorEvent();
        /**
         * Use this event to show a custom error in the Question Editor on pressing Apply or OK buttons, if the values are not set correctly. The error will be displayed under the property editor.
         *- sender the survey creator object that fires the event
         *- options.obj the survey object which property is edited in the Property Editor.
         *- options.propertyName  the name of the edited property.
         *- options.value the property value.
         *- options.error the error you want to display. Set the empty string (the default value) or null if there is no errors.
         * @see onPropertyValueChanging
         */
        _this.onPropertyValidationCustomError = new CreatorEvent();
        /**
         * An event that is raised each time a user modifies a survey object property. Use this event to validate or correct a property value while the user enters it.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender`- A Survey Creator instance that raised the event.
         * - `options.obj` - A survey object instance (question or panel) whose property is being edited.
         * - `options.propertyName` - The name of the property.
         * - `options.value` - An old property value.
         * - `options.newValue` - A new property value. Specify this field if you want to override the entered value.
         * @see onPropertyValidationCustomError
         * @see onSurveyPropertyValueChanged
         */
        _this.onPropertyValueChanging = new CreatorEvent();
        /**
         * An event that is raised after a property in a survey object has changed.
         *
         * - `sender`- A Survey Creator instance that raised the event.
         * - `options.obj` - A survey object instance (question or panel) whose property has changed.
         * - `options.propertyName` - The name of the property.
         * - `options.value` - A new property value.
         * @see onPropertyValidationCustomError
         * @see onPropertyValueChanging
         */
        _this.onSurveyPropertyValueChanged = new CreatorEvent();
        /**
          * Use this event to modify the list (name and titles) of the questions available in a condition editor.
          *- sender the survey creator object that fires the event
          *- options.obj the survey object which property is edited in the Property Editor.
          *- options.propertyName  the name of the edited property.
          *- options.editor the instance of Property Editor.
          *- options.list the list of the questions available for condition
          *- options.sortOrder "asc" (default) | "none". Change it to "none", if you don't want to sort your condition list
          */
        _this.onConditionQuestionsGetList = new CreatorEvent();
        /**
         * Use this event to modify the title in a condition editor. The title is changing during editing. In case of empty or incorrect expression it tells that expression is incorrect
         *- sender the survey creator object that fires the event.
         *- options.expression the current expression. If the expression is empty or incorrect then the value is empty.
         *- options.title the default value of the title. You can change the default value.
         */
        _this.onConditionGetTitle = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator populates a condition editor with operators. Use this event to hide individual condition operators.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.questionName`: `String`\
         * The name of a question for which conditions are displayed.
         * - `options.questionName`: `String`\
         * The name of a question for which conditions are displayed.
         * - `options.operator`: `"empty"` | `"notempty"` | `"equal"` | `"notequal"` | `"contains"` | `"notcontains"` | `"anyof"` | `"allof"` | `"greater"` | `"less"` | `"greaterorequal"` | `"lessorequal"`\
         * A condition opeator for which the event is raised.
         * - `options.show`: `Boolean`\
         * A Boolean property that you can set to `false` if you want to hide the condition operator.
         *
         */
        _this.onGetConditionOperator = new CreatorEvent();
        /**
         * Use this event to modify the display text of a logic item in the Logic tab.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.expression` - A logical expression associated with the logic item.
         * - `options.expressionText` - The same expression in a user-friendly format. It may contain question titles instead of question names.
         * - `options.logicItem` - A logic item object. Contains an array of actions and other properties.
         * - `options.text` - The expression and actions in a user-friendly format. Redefine this property if you want to change the display text.
         */
        _this.onLogicItemDisplayText = new CreatorEvent();
        /**
          * An event that is raised when users modify survey or theme settings.
          *
          * Parameters:
          *
          * - `sender`: `CreatorBase`\
          * A Survey Creator instance that raised the event.
          *
          * - `options.type`: `"ADDED_FROM_TOOLBOX"` | `"PAGE_ADDED"` | `"PAGE_MOVED"` | `"QUESTION_CONVERTED"` | `"QUESTION_CHANGED_BY_EDITOR"` | `"PROPERTY_CHANGED"` | `"ELEMENT_REORDERED"` | `"OBJECT_DELETED"` | `"VIEW_TYPE_CHANGED"` | `"DO_DROP"` | `"TRANSLATIONS_CHANGED"` | `"JSON_EDITOR"` | `"THEME_MODIFIED"`\
          * A value that indicates the modification.
          *
          * Depending on the `options.type` value, the `options` object contains parameters listed below:
          *
          * `options.type`: `"ADDED_FROM_TOOLBOX"`
          * - `options.question` - An added question.
          *
          * `options.type`: `"PAGE_ADDED"`
          * - `options.newValue` - An added page.
          *
          * `options.type`: `"PAGE_MOVED"`
          * - `options.page` - A moved page.
          * - `options.indexFrom` - A previous index.
          * - `options.indexTo` - A current index.
          *
          * `options.type`: `"QUESTION_CONVERTED"`
          * - `options.className` - The name of a class to which a question has been converted.
          * - `options.oldValue` - An object of a previous class.
          * - `options.newValue` - An object of a class specified by `options.className`.
          *
          * `options.type`: `"QUESTION_CHANGED_BY_EDITOR"`
          * - `options.question` - A question that has been edited in a pop-up editor.
          *
          * `options.type`: `"PROPERTY_CHANGED"`
          * - `options.name` - The name of the changed property.
          * - `options.target` - An object that contains the changed property.
          * - `options.oldValue` - A previous value of the changed property.
          * - `options.newValue` - A new value of the changed property.
          *
          * `options.type`: `"ELEMENT_REORDERED"`
          * - `options.arrayName` - The name of the changed array.
          * - `options.parent` - An object that contains the changed array.
          * - `options.element` - A reordered element.
          * - `options.indexFrom` - A previous index.
          * - `options.indexTo` - A current index.
          *
          * `options.type`: `"OBJECT_DELETED"`
          * - `options.target` - A deleted object.
          *
          * `options.type`: `"VIEW_TYPE_CHANGED"`
          * - `options.newType` - A current view: `"editor"` or `"designer"`.
          *
          * `options.type`: `"DO_DROP"`
          * - `options.page` - A parent page of the dragged element.
          * - `options.source` - A dragged element.
          * - `options.target` - A drop target.
          * - `options.newElement` - A new element. This parameter is defined only if users drag a question or panel from the Toolbox.
          */
        _this.onModified = new CreatorEvent();
        /**
         * An event that is raised when users add a question to the survey. Use this event to customize the question.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * The question users added.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A page to which the question was added.
         * - `options.reason`: `"DROPPED_FROM_TOOLBOX"` | `"ADDED_FROM_PAGEBUTTON"` | `"ELEMENT_COPIED"`\
         * A value that indicates how the question was added: dragged from the [Toolbox](https://surveyjs.io/survey-creator/documentation/toolbox-customization), created using the Add Question button, or duplicated.
         *
         * [Customize Survey Elements on Creation](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#customize-survey-elements-on-creation (linkStyle))
         */
        _this.onQuestionAdded = new CreatorEvent();
        /**
         * An event that is raised when users add a [Panel](https://surveyjs.io/form-library/documentation/api-reference/panel-model) element to the survey. Use this event to customize the panel.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * The panel users added.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A page to which the panel was added.
         * - `options.reason`: `"DROPPED_FROM_TOOLBOX"` | `"ADDED_FROM_PAGEBUTTON"` | `"ELEMENT_COPIED"`\
         * A value that indicates how the panel was added: dragged from the [Toolbox](https://surveyjs.io/survey-creator/documentation/toolbox-customization), created using the Add Question button, or duplicated.
         *
         * [Customize Survey Elements on Creation](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#customize-survey-elements-on-creation (linkStyle))
         */
        _this.onPanelAdded = new CreatorEvent();
        /**
         * An event that is raised when a new page is added to the survey. Use this event to customize the page.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * The page users added.
         *
         * [Customize Survey Elements on Creation](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#customize-survey-elements-on-creation (linkStyle))
         */
        _this.onPageAdded = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator renders action buttons under each page on the design surface. Use this event to add, remove, or modify the buttons.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.actions`: [`IAction[]`](/form-library/documentation/api-reference/iaction)\
         * An array of actions. You can add, modify, or remove actions from this array.
         * - `options.page`: [`PageModel`](/form-library/documentation/api-reference/page-model)\
         * A page for which the event is raised.
         * - `options.addNewQuestion(type)`: Method\
         * Adds a new question of a specified [`type`](/form-library/documentation/api-reference/question#getType) to the page.
         * @see onDefineElementMenuItems
         */
        _this.onGetPageActions = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator instantiates a survey for the [Designer](https://surveyjs.io/survey-creator/documentation/end-user-guide#designer-tab) tab. Use this event to customize the survey.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.survey`: [`SurveyModel`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model)\
         * A survey to be displayed in the Designer tab.
         *
         * [Design Mode Survey Instance](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#design-mode-survey-instance (linkStyle))
         *
         * > If you want this event raised at startup, assign a survey JSON schema to the [`JSON`](#JSON) property *after* you add a handler to the event. If the JSON schema should be empty, specify the `JSON` property with an empty object.
         */
        _this.onDesignerSurveyCreated = new CreatorEvent();
        /**
         * An event that is raised when Survey Creator instantiates a survey for the [Preview](https://surveyjs.io/survey-creator/documentation/end-user-guide#preview-tab) tab. Use this event to customize the survey.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.survey`: [`SurveyModel`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model)\
         * A survey to be displayed in the Preview tab.
         *
         * [Preview Mode Survey Instance](https://surveyjs.io/survey-creator/documentation/customize-survey-creation-process#preview-mode-survey-instance (linkStyle))
         *
         * > If you want this event raised at startup, assign a survey JSON schema to the [`JSON`](#JSON) property *after* you add a handler to the event. If the JSON schema should be empty, specify the `JSON` property with an empty object.
         */
        _this.onPreviewSurveyCreated = new CreatorEvent();
        _this.onTestSurveyCreated = _this.onPreviewSurveyCreated;
        /**
         * The event is called in case of UI notifications. By default all notifications are done via built-in alert () function.
         * In case of any subscriptions to this event all notifications will be redirected into the event handler.
         *- options.message is a message to show.
         */
        _this.onNotify = new CreatorEvent();
        /**
         * An event that is raised before a survey element (a question, panel, page, or the survey itself) is focused. Use this event to move focus to a different survey element.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.newSelectedElement`: [`Survey.Base`](https://surveyjs.io/form-library/documentation/api-reference/base)\
         * An element that is going to be focused.
         * @see onSelectedElementChanged
         * @see selectedElement
         */
        _this.onSelectedElementChanging = new CreatorEvent();
        /**
         * An event that is raised after a survey element (a question, panel, page, or the survey itself) is focused.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.newSelectedElement`: [`Survey.Base`](https://surveyjs.io/form-library/documentation/api-reference/base)\
         * The [focused element](#selectedElement).
         * @see onSelectedElementChanging
         */
        _this.onSelectedElementChanged = new CreatorEvent();
        /**
         * The event is fired then one need to choose files.
         *
         * - `sender` - the survey creator object that fires the event
         * - `options.input` - file input HTML element
         * - `options.callback` - need to be called after files has been chosen
         * @see uploadFiles
         */
        _this.onOpenFileChooser = new CreatorEvent();
        /**
         * The event is fired on uploading the files.
         *
         * - `sender` - the survey creator object that fires the event
         * - `options.files` - the Javascript File objects array
         * - `options.callback(status, imageLink)` - called on upload complete
         *
         *  [View Demo](https://surveyjs.io/survey-creator/examples/file-upload/ (linkStyle))
         * @see uploadFiles
         */
        _this.onUploadFile = new CreatorEvent();
        /**
         * Use this event to modify the list of the strings available in the Translation tab.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.obj` - A survey object instance (survey, page, panel, question) whose string translations are being edited in the Translation tab.
         * - `options.propertyName` - The name of a property being translated.
         * - `options.visible` - A Boolean value that specifies the property visibility. Set it to `false` to hide the property.
         */
        _this.onTranslationStringVisibility = new CreatorEvent();
        /**
         * Use this event to define is the locale initially selected (default value) and ready for translaion or it is unselected.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.locale` - the locale name, like 'en', 'de' and so on.
         * - `options.isSelected` - it is true by default. Set it to false to make the translation unselected.
         */
        _this.onTranslationLocaleInitiallySelected = new CreatorEvent();
        /**
         * Use this event to modify the imported localizable text. To block importing a particular localization text, set the options.text into undefined.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.locale` - the locale name, like 'en', 'de' and so on.
         * - `options.name` - The full name of the localizable string, it can be: "survey.page1.question2.title"
         * - `options.text` - The imported text for the locale for this item. Set it to undefined or empty string to block importing for this item
         */
        _this.onTranslationImportItem = new CreatorEvent();
        /**
        * The event is called when the translation from csv file is imported.
        * @see translation
        * @see showTranslationTab
        */
        _this.onTranslationImported = new CreatorEvent();
        /**
         * Use this event to modify a translated string before it is exported to CSV.
         *
         * The event handler accepts the following arguments:
         *
         * - `sender` - A Survey Creator instance that raised the event.
         * - `options.obj` - A survey object instance (survey, page, panel, question) whose string translations are being exported to CSV.
         * - `options.locale` - The current locale identifier (`"en"`, `"de"`, etc.). Contains an empty string if the default locale is used.
         * - `options.name` - A full name of the translated string. It is composed of names of all parent elements, for example: `"mySurvey.page1.question2.title"`.
         * - `options.locString` - A `LocalizableString` instance. Call the `options.locString.getLocaleText(locale)` method if you need to get a text string for a specific locale.
         * - `options.text` - A text string to be exported. The string is taken from the current locale. Redefine this property if you want to export a different string.
         */
        _this.onTranslationExportItem = new CreatorEvent();
        /**
         * An event that allows you to integrate a machine translation service, such as Google Translate or Microsoft Translator, into Survey Creator.
         *
         * Within the event handler, you need to pass translation strings and locale information to the translation service API. The service should return an array of translated strings that you need to pass to the `options.callback` function. If the translation failed, pass an empty array or call this function without arguments.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.fromLocale`: `string`\
         * A locale from which you want to translate strings. Contains a locale identifier (`"en"`, `"de"`, etc.).
         * - `options.toLocale`: `string`\
         * A locale to which you want to translate strings. Contains a locale identifier (`"en"`, `"de"`, etc.).
         * - `options.strings`: `Array<string>`\
         * Strings to translate.
         * - `options.callback: (strings: Array<string>)`: `Function`\
         * A callback function that accepts translated strings. If the translation failed, pass an empty array or call this function without arguments.
         *
         * > Survey Creator does not include a machine translation service out of the box. Our component only provides a UI for calling the service API.
         */
        _this.onMachineTranslate = new CreatorEvent();
        /**
         * An event that is raised before a string translation is changed. Use this event to override a new translation value.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.obj`: `any`\
         * A survey object instance (survey, page, panel, question) whose string translation is being changed.
         * - `options.locale`: `String`\
         * The current locale identifier (`"en"`, `"de"`, etc.). Contains an empty string if the default locale is used.
         * - `options.locString`: `LocalizableString`\
         * An object that you can use to manipulate a localization string. Call the `options.locString.getLocaleText(locale)` method if you need to get a text string for a specific locale.
         * - `options.newText`: `String`\
         * A new value for the string translation.
         *
         * Refer to the following help topics for more information on localization:
         *
         * - [Localization & Globalization in SurveyJS Form Library](https://surveyjs.io/form-library/documentation/survey-localization)
         * - [Localization & Globalization in Survey Creator](https://surveyjs.io/survey-creator/documentation/localization)
         */
        _this.onTranslationItemChanging = new CreatorEvent();
        /**
         * An event that is raised when users drag and drop survey elements within the design surface. Use this event to control drag and drop operations.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.target`: `IElement`\
         * A survey element being dragged.
         * - `options.source`: `IElement`\
         * A survey element from which `target` is being dragged. This parameter is `null` if `target` is being dragged from the [Toolbox](https://surveyjs.io/survey-creator/documentation/toolbox).
         * - `options.insertBefore`: `IElement`\
         * A survey element before which the target element will be placed. This parameter is `null` if the parent container (page or panel) has no elements or if the target element will be placed below all other elements within the container.
         * - `options.insertAfter`: `IElement`\
         * A survey element after which `target` will be placed. This parameter is `null` if the parent container (page or panel) has no elements or if `target` will be placed above all other elements within the container.
         * - `options.parent`: `ISurveyElement`\
         * A parent container (page or panel) within which `target` will be placed.
         * - `options.survey`: [`SurveyModel`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model)\
         * A survey within which the drag and drop operation occured.
         * - `options.allow`: `boolean`\
         * A Boolean property that you can set to `false` if you want to cancel the drag and drop operation.
         * @see onDragStart
         * @see onDragEnd
         */
        _this.onDragDropAllow = new CreatorEvent();
        // /**
        //  * You need to set this property to true if you want to use tabs instead of accordion in the popup element's editor.
        //  */
        // public useTabsInElementEditor = false;
        /**
         * Limits the number of items in a logical expression.
         *
         * Default value: -1 (unlimited)
         */
        _this.maxLogicItemsInCondition = -1;
        /**
         * Specifies whether UI elements display survey, page, and question titles instead of their names.
         *
         * Default value: `false`
         *
         * @see onGetObjectDisplayName
         */
        _this.showObjectTitles = false;
        /**
         * Limits the number of visible choices. Users can click "Show more" to view hidden choices.
         *
         * Set this property to -1 if you do not want to hide any choices.
         *
         * Default value: 10
         */
        _this.maxVisibleChoices = 10;
        /**
         * Specifies whether to display question titles instead of names when users edit logical expressions.
         *
         * Default value: `false`
         */
        _this.showTitlesInExpressions = false;
        /**
         * Specifies whether users can edit expressions in the Logic tab as plain text.
         *
         * If you set this property to `false`, users can only use UI elements to edit logical expressions.
         *
         * Default value: `true`
         *
         * @see showLogicTab
         */
        _this.allowEditExpressionsInTextEditor = true;
        /**
         * Limits the number of columns that users can add to [Matrix](https://surveyjs.io/Documentation/Library?id=questionmatrixmodel), [Matrix Dynamic](https://surveyjs.io/Documentation/Library?id=questionmatrixdynamicmodel), and [Matrix Dropdown](https://surveyjs.io/Documentation/Library?id=questionmatrixdropdownmodel) questions.
         *
         * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumColumnsCount`)
         */
        _this.maximumColumnsCount = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.maximumColumnsCount;
        /**
         * Limits the number of choices that users can add to [Checkbox](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel), [Dropdown](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel), and [Radiogroup](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel) questions.
         *
         * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumChoicesCount`)
         */
        _this.maximumChoicesCount = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.maximumChoicesCount;
        /**
         * Limits the minimum number of choices in [Checkbox](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel), [Dropdown](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel), and [Radiogroup](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel) questions. Set this property if users should not delete choices below the specified limit.
         *
         * Default value: 0 (unlimited, taken from `settings.propertyGrid.minimumChoicesCount`)
         */
        _this.minimumChoicesCount = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.minimumChoicesCount;
        /**
         * Limits the number of rows that users can add to [Matrix](https://surveyjs.io/Documentation/Library?id=questionmatrixmodel) and [Matrix Dropdown](https://surveyjs.io/Documentation/Library?id=questionmatrixdropdownmodel) questions.
         *
         * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumRowsCount`)
         */
        _this.maximumRowsCount = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.maximumRowsCount;
        /**
         * Limits the number of rate values that users can add to [Rating](https://surveyjs.io/Documentation/Library?id=questionratingmodel) questions.
         *
         * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumRateValues`)
         */
        _this.maximumRateValues = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.maximumRateValues;
        /**
         * Limits the number of nested panels within a [Panel](/form-library/documentation/api-reference/panel-model) element.
         *
         * Default value: -1 (unlimited)
         */
        _this.maxNestedPanels = -1;
        _this.showPagesInTestSurveyTab = true;
        _this.showSimulatorInTestSurveyTab = true;
        /**
         * A [UI theme](https://surveyjs.io/Documentation/Library?id=get-started-react#configure-styles) used to display the survey in the Preview tab.
         *
         * Accepted values: `"modern"`, `"default"`, `"defaultV2"`
         *
         * Default value: `"defaultV2"`
         * @see allowChangeThemeInPreview
         */
        _this.themeForPreview = "defaultV2";
        _this.isThemeModified = false;
        _this._theme = { cssVariables: {} };
        //#endregion Theme
        _this._allowModifyPages = true;
        _this.showDefaultLanguageInTestSurveyTab = "auto";
        _this.showInvisibleElementsInTestSurveyTab = true;
        /**
         * Set this property to true if you want to show "page selector" in the toolabar instead of "pages editor"
         */
        _this.showPageSelectorInToolbar = false;
        /**
         * Specifies whether users can switch between UI themes in the Preview tab.
         *
         * Default value: `true`
         *
         * [View Demo](https://surveyjs.io/Examples/Creator?id=theme-switcher (linkStyle))
         * @see themeForPreview
         */
        _this.allowChangeThemeInPreview = true;
        /**
         * Specifies whether to show an error message if a survey is not saved in the database.
         *
         * Default value: `true`
         */
        _this.showErrorOnFailedSave = true;
        /**
         * An event that is raised before the [active tab](#activeTab) is switched. Use this event to allow or cancel the switch.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.tabName`: `"designer"` | `"test"` | `"theme"` | `"editor"` | `"logic"` | `"translation"`\
         * A tab that is going to become active.
         * - `options.allow`: `Boolean`\
         * Specifies whether the active tab can be switched. Set this property to `false` if you want to cancel the switch.
         * @see makeNewViewActive
         */
        _this.onActiveTabChanging = new CreatorEvent();
        /**
         * An event that is raised after the [active tab](#activeTab) is switched.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.tabName`: `"designer"` | `"test"` | `"theme"` | `"editor"` | `"logic"` | `"translation"`\
         * A tab that has become active.
         * @see makeNewViewActive
         */
        _this.onActiveTabChanged = new CreatorEvent();
        _this.showSidebarValue = true;
        _this.onShowSidebarVisibilityChanged = new CreatorEvent();
        //#region Obsolete properties and functins
        _this.onShowPropertyGridVisiblityChanged = new CreatorEvent();
        //#endregion Obsolete properties and functions
        //#region Undo/Redo
        /**
         * An event that is raised before an undo operation.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.canUndo`: `boolean`\
         * A Boolean value that you can set to `false` if you want to prevent the undo operation.
         * @see undo
         * @see redo
         * @see onBeforeRedo
         */
        _this.onBeforeUndo = new CreatorEvent();
        /**
         * An event that is raised before an redo operation.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.canRedo`: `boolean`\
         * A Boolean value that you can set to `false` if you want to prevent the redo operation.
         * @see redo
         * @see undo
         * @see onBeforeUndo
         */
        _this.onBeforeRedo = new CreatorEvent();
        /**
         * An event that is raised before a new page is added to the survey.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * An added page.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you do not want to add the page.
         */
        _this.onPageAdding = new CreatorEvent();
        /**
         * An event that is raised when users start to drag a survey element within the design surface.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.draggedElement`: `any`\
         * A survey element being dragged.
         * - `options.fromElement`: `any`\
         * A survey element from which `draggedElement` is being dragged.
         * - `options.toElement`: `any`\
         * A survey element to which `draggedElement` is being dragged.
         * @see onDragEnd
         * @see onDragDropAllow
         */
        _this.onDragStart = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Event"]();
        _this.onBeforeDrop = _this.onDragStart;
        /**
         * An event that is raised when users finish dragging a survey element within the design surface.
         *
         * Parameters:
         *
         * - `sender`: `CreatorBase`\
         * A Survey Creator instance that raised the event.
         * - `options.draggedElement`: `any`\
         * A survey element that was dragged.
         * - `options.fromElement`: `any`\
         * A survey element from which `draggedElement` was dragged.
         * - `options.toElement`: `any`\
         * A survey element to which `draggedElement` was dragged.
         * @see onDragStart
         * @see onDragDropAllow
         */
        _this.onDragEnd = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Event"]();
        _this.onAfterDrop = _this.onDragEnd;
        _this.onStateChanged = new CreatorEvent();
        _this.notifier = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Notifier"]({
            root: "svc-notifier",
            info: "svc-notifier--info",
            error: "svc-notifier--error",
            success: "svc-notifier--success",
            button: "",
            shown: "svc-notifier--shown"
        });
        _this.onKeyDownHandler = function (event) {
            var availableShortcuts = Object.keys(_this.shortcuts || {})
                .map(function (key) { return _this.shortcuts[key]; })
                .filter(function (shortcut) { return !shortcut.affectedTab || shortcut.affectedTab === _this.activeTab; });
            availableShortcuts.forEach(function (shortcut) {
                var hotKey = event.metaKey ? shortcut.macOsHotkey : shortcut.hotKey;
                if (!hotKey)
                    return;
                if (!!hotKey.ctrlKey !== !!event.ctrlKey)
                    return;
                if (!!hotKey.shiftKey !== !!event.shiftKey)
                    return;
                if (hotKey.keyCode !== event.keyCode)
                    return;
                if (hotKey.keyCode < 48 && isTextInput(event.target))
                    return;
                shortcut.execute(_this.selectElement);
            });
        };
        _this.shortcuts = {};
        /**
         * A delay between changing survey settings and saving the survey JSON schema, measured in milliseconds. Applies only when the [`isAutoSave`](#isAutoSave) property is `true`.
         *
         * Default value: 500 (taken from `settings.autoSave.delay`)
         *
         * If a user changes the settings once again during the delay, only the latest version will be saved.
         */
        _this.autoSaveDelay = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].autoSave.delay;
        _this.autoSaveTimerId = null;
        _this.saveNo = 0;
        if (!!options2 ||
            typeof _this.options === "string" ||
            _this.options instanceof String) {
            _this.options = !!options2 ? options2 : {};
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnText("Creator constructor has one parameter, as creator options, in V2.");
        }
        _this.previewOrientation = options.previewOrientation;
        _this.toolbarValue = new ToolbarActionContainer(_this);
        _this.toolbarValue.locOwner = _this;
        _this.tabbedMenu = new TabbedMenuContainer();
        _this.tabbedMenu.locOwner = _this;
        _this.selectionHistoryControllerValue = new _selection_history__WEBPACK_IMPORTED_MODULE_10__["SelectionHistory"](_this);
        _this.sidebar = new _components_side_bar_side_bar_model__WEBPACK_IMPORTED_MODULE_20__["SidebarModel"](_this);
        _this.setOptions(_this.options);
        _this.patchMetadata();
        _this.initSurveyWithJSON(undefined, false);
        _this.toolbox = new _toolbox__WEBPACK_IMPORTED_MODULE_7__["QuestionToolbox"](_this.options && _this.options.questionTypes ? _this.options.questionTypes : null, _this, true);
        _this.updateToolboxIsCompact();
        _this.initTabs();
        _this.initDragDrop();
        _this.isTouch = survey_core__WEBPACK_IMPORTED_MODULE_1__["IsTouch"];
        var expandAction = _this.sidebar.getExpandAction();
        !!expandAction && _this.toolbar.actions.push(expandAction);
        return _this;
    }
    //ILocalizableOwner
    CreatorBase.prototype.getMarkdownHtml = function (text, name) { return null; };
    CreatorBase.prototype.getRenderer = function (name) { return null; };
    CreatorBase.prototype.getRendererContext = function (locStr) { return locStr; };
    CreatorBase.prototype.getProcessedText = function (text) { return text; };
    CreatorBase.prototype.getLocale = function () { return this.locale; };
    Object.defineProperty(CreatorBase.prototype, "showPreviewTab", {
        /**
         * Specifies whether to display the Preview tab.
         *
         * Default value: `true`
         * @see activeTab
         * @see onPreviewSurveyCreated
         */
        get: function () { return this.showTestSurveyTab; },
        set: function (val) { this.showTestSurveyTab = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "allowEditSurveyTitle", {
        get: function () {
            return this.getPropertyValue("allowEditSurveyTitle", true);
        },
        set: function (val) {
            this.setPropertyVisibility("survey", val, "title", "description", "logo", "logoFit", "showTitle", "logoWidth", "logoHeight");
            this.setPropertyValue("allowEditSurveyTitle", val);
            this.designerPropertyGrid && this.designerPropertyGrid.refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showSurveyTitle", {
        /**
         * Specifies whether users can see and edit the survey header and related survey properties.
         *
         * Default value: `true`
         */
        get: function () {
            return this.allowEditSurveyTitle;
        },
        set: function (val) {
            this.allowEditSurveyTitle = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "haveCommercialLicense", {
        get: function () {
            if (!!survey_core__WEBPACK_IMPORTED_MODULE_1__["hasLicense"] && Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["hasLicense"])(1))
                return true;
            return this.getPropertyValue("haveCommercialLicense", false);
        },
        set: function (val) {
            this.setPropertyValue("haveCommercialLicense", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "licenseText", {
        get: function () {
            return this.getLocString("survey.license");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "startEditTitleOnQuestionAdded", {
        get: function () {
            return !this.isMobileView && this.startEditTitleOnQuestionAddedValue;
        },
        set: function (value) {
            this.startEditTitleOnQuestionAddedValue = value;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.changePageModifications = function (allow) {
        if (allow === void 0) { allow = false; }
        this.setPropertyVisibility("survey", allow, "pages");
        this.setPropertyVisibility("question", allow, "page");
        this.setPropertyVisibility("panel", allow, "page");
        this.showJSONEditorTab = (this.options.showJSONEditorTab === true);
    };
    Object.defineProperty(CreatorBase.prototype, "pageEditMode", {
        /**
         * Specifies how Survey Creator users edit survey pages.
         *
         * Accepted values:
         *
         * - `"standard"` (default)
         * Questions and panels are divided between pages. Users can scroll the design surface to reach a required page.
         *
         * - `"single"`
         * All questions and panels belong to a single page. Users cannot add or remove pages.
         *
         * - `"bypage"`
         * Questions and panels are divided between pages. Users can use the page navigator to switch to a required page.
         * @see allowModifyPages
         */
        get: function () {
            return this.pageEditModeValue;
        },
        set: function (val) {
            this.pageEditModeValue = val;
            var allowModifyPages = this.pageEditModeValue !== "single";
            this.changePageModifications(allowModifyPages);
            survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].allowShowEmptyTitleInDesignMode = allowModifyPages;
            survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].allowShowEmptyDescriptionInDesignMode = allowModifyPages;
            if (this.pageEditModeValue === "bypage") {
                this.showPageNavigator = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "toolbarItems", {
        get: function () {
            return this.toolbarValue.actions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "toolbar", {
        get: function () {
            return this.toolbarValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showingViewName", {
        get: function () {
            return this.activeTab;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "isDesignerShowing", {
        get: function () {
            return this.activeTab === "designer";
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.showDesigner = function () {
        this.activeTab = "designer";
    };
    Object.defineProperty(CreatorBase.prototype, "isTestSurveyShowing", {
        get: function () {
            return this.isPreviewShowing;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "isPreviewShowing", {
        get: function () {
            return this.activeTab === "test";
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.showTestSurvey = function () {
        this.showPreview();
    };
    CreatorBase.prototype.showPreview = function () {
        this.activeTab = "test";
    };
    CreatorBase.prototype.addPluginTab = function (name, plugin, title, componentContent, index) {
        var _this = this;
        var locStrName = !title ? "ed." + name : (title.indexOf("ed.") == 0 ? title : "");
        if (!!locStrName) {
            title = undefined;
        }
        var tab = new TabbedMenuItem({
            id: name,
            locTitleName: locStrName,
            title: title,
            componentContent: componentContent ? componentContent : "svc-tab-" + name,
            data: plugin,
            action: function () { _this.makeNewViewActive(name); },
            active: this.viewType === name,
            disableHide: this.viewType === name
        });
        if (index >= 0 && index < this.tabs.length) {
            this.tabs.splice(index, 0, tab);
        }
        else {
            this.tabs.push(tab);
        }
        this.addPlugin(name, plugin);
    };
    CreatorBase.prototype.addPlugin = function (name, plugin) {
        this.plugins[name] = plugin;
    };
    CreatorBase.prototype.getPlugin = function (name) {
        return this.plugins[name];
    };
    Object.defineProperty(CreatorBase.prototype, "showPagesInPreviewTab", {
        /**
         * Specifies whether to show a page selector at the bottom of the Preview tab.
         *
         * Default value: `true`
         */
        get: function () { return this.showPagesInTestSurveyTab; },
        set: function (val) { this.showPagesInTestSurveyTab = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showSimulatorInPreviewTab", {
        /**
         * Specifies whether the Preview tab displays a Device button that allows users to preview the survey on different device types.
         *
         * Default value: `true`
         */
        get: function () { return this.showSimulatorInTestSurveyTab; },
        set: function (val) { this.showSimulatorInTestSurveyTab = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "saveThemeFunc", {
        //#region Theme
        /**
         * A function that is called each time users click the [Save button](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#showSaveButton) or [auto-save](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#isAutoSave) is triggered to save a theme JSON object.
         *
         * For more information, refer to the [Save and Load Custom Themes](/survey-creator/documentation/theme-editor#save-and-load-custom-themes) help topic.
         * @see showThemeTab
         * @see saveSurveyFunc
         */
        get: function () {
            return this.saveThemeFuncValue;
        },
        set: function (value) {
            this.saveThemeFuncValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "theme", {
        get: function () {
            return this._theme;
        },
        set: function (newTheme) {
            this._theme = newTheme;
            this.isThemeModified = true;
            if (this.activeTab !== "theme") {
                this.updatePlugin(this.activeTab);
            }
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.doSaveTheme = function () {
        var _this = this;
        this.setState("saving");
        if (this.saveThemeFunc) {
            this.saveNo++;
            this.saveThemeFunc(this.saveNo, function (no, isSuccess) {
                if (_this.saveNo !== no)
                    return;
                if (isSuccess) {
                    _this.setState("saved");
                    _this.isThemeModified = false;
                }
                else {
                    _this.setState("modified");
                    if (_this.showErrorOnFailedSave) {
                        _this.notify(_this.getLocString("ed.saveError"), "error");
                    }
                }
            });
        }
    };
    Object.defineProperty(CreatorBase.prototype, "allowModifyPages", {
        /**
         * Specifies whether users can add, edit, and delete survey pages.
         *
         * Default value: `true`
         * @see pageEditMode
         */
        get: function () {
            return this._allowModifyPages;
        },
        set: function (val) {
            this._allowModifyPages = val;
            this.changePageModifications(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showDefaultLanguageInPreviewTab", {
        /**
         * Specifies whether the Preview tab displays a language selector.
         *
         * Accepted values:
         *
         * - `"auto"` (default)
         * Display the language selector only if the survey is translated into more than one language.
         *
         * - `true`
         * Always display the language selector regardless of how many languages the survey uses.
         *
         * - `false`
         * Never display the language selector.
         *
         * - `"all"`
         * Always display the language selector with [all supported languages](https://github.com/surveyjs/survey-creator/tree/master/packages/survey-creator-core/src/localization).
         *
         * [Localization & Globalization](https://surveyjs.io/survey-creator/documentation/survey-localization-translate-surveys-to-different-languages (linkStyle))
         */
        get: function () { return this.showDefaultLanguageInTestSurveyTab; },
        set: function (val) { this.showDefaultLanguageInTestSurveyTab = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showInvisibleElementsInPreviewTab", {
        /**
         * Specifies whether the Preview tab displays a toggle that allows users to show or hide invisible survey elements.
         *
         * Default value: `true`
         */
        get: function () { return this.showInvisibleElementsInTestSurveyTab; },
        set: function (val) { this.showInvisibleElementsInTestSurveyTab = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "tabs", {
        get: function () {
            return this.tabbedMenu.actions;
        },
        set: function (val) {
            this.tabbedMenu.actions = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the localized string by its id
     * @param str the string id.
     */
    CreatorBase.prototype.getLocString = function (str) {
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString(str);
    };
    CreatorBase.prototype.onSetReadOnly = function (newVal) { };
    Object.defineProperty(CreatorBase.prototype, "locale", {
        /**
         * Gets or sets the survey locale. The default value it is empty, this means the 'en' locale is used.
         * You can set it to 'de' - German, 'fr' - French and so on.
         */
        get: function () {
            return this.getPropertyValue("locale", _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].currentLocale);
        },
        set: function (value) {
            if (_editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].currentLocale === value)
                return;
            _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].currentLocale = value;
            this.setPropertyValue("locale", value);
            this.toolbox.updateTitles();
            this.refreshPlugin();
            var selEl = this.selectedElement;
            if (!!selEl) {
                this.selectElement(null);
                this.selectElement(selEl);
            }
            this.locStrsChanged();
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.tabbedMenu.locStrsChanged();
        this.toolbar.locStrsChanged();
    };
    CreatorBase.prototype.refreshPlugin = function () {
        var plugin = this.currentPlugin;
        if (!!plugin) {
            if (plugin.deactivate) {
                plugin.deactivate();
            }
            var viewType = this.viewType;
            this.viewType = "";
            plugin.activate();
            this.viewType = viewType;
        }
    };
    Object.defineProperty(CreatorBase.prototype, "readOnly", {
        /**
         * Enables the read-only mode. If you set this property to `true`, users cannot change the initial survey configuration.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("readOnly", false);
            //return this.koReadOnly();
        },
        set: function (newVal) {
            var text = this.text;
            this.setPropertyValue("readOnly", newVal);
            this.onSetReadOnly(newVal);
            this.text = text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "isRTL", {
        /**
         * Specifies whether to enable support for right-to-left languages.
         *
         * Default value: `false`
         */
        get: function () {
            return this.isRTLValue;
        },
        set: function (value) {
            this.isRTLValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "activeTab", {
        /**
         * Gets or sets the currently displayed tab.
         *
         * Possible values:
         *
         * - [`"designer"`](#showDesignerTab)
         * - [`"test"`](#showPreviewTab)
         * - [`"theme"`](#showThemeTab)
         * - [`"editor"`](#showJSONEditorTab)
         * - [`"logic"`](#showLogicTab)
         * - [`"translation"`](#showLogicTab)
         * @see makeNewViewActive
         */
        get: function () {
            return this.viewType;
        },
        set: function (val) {
            this.makeNewViewActive(val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Switches the [active tab](#activeTab). Returns `false` if the tab cannot be switched.
     * @param tabName A tab that you want to make active: `"designer"`, `"test"`, `"theme"`, `"editor"`, `"logic"`, or `"translation"`.
     * @returns `false` if the active tab cannot be switched, `true` otherwise.
     */
    CreatorBase.prototype.makeNewViewActive = function (tabName) {
        var _this = this;
        if (tabName == this.viewType)
            return false;
        var plugin = this.currentPlugin;
        if (!!plugin && !!plugin.canDeactivateAsync) {
            plugin.canDeactivateAsync(function () {
                _this.switchViewType(tabName);
            });
            return undefined;
        }
        return this.switchViewType(tabName);
    };
    CreatorBase.prototype.switchViewType = function (viewName) {
        var _a, _b;
        var allow = true;
        if (!!((_a = this.currentPlugin) === null || _a === void 0 ? void 0 : _a.defaultAllowingDeactivate)) {
            allow = this.currentPlugin.defaultAllowingDeactivate();
            if (allow === undefined)
                return false;
        }
        var chaningOptions = { tabName: viewName, allow: allow, model: (_b = this.currentPlugin) === null || _b === void 0 ? void 0 : _b.model };
        this.onActiveTabChanging.fire(this, chaningOptions);
        if (!chaningOptions.allow)
            return;
        if (!this.canSwitchViewType())
            return false;
        var plugin = this.activatePlugin(viewName);
        this.viewType = viewName;
        this.onActiveTabChanged.fire(this, { tabName: viewName, plugin: plugin, model: !!plugin ? plugin.model : undefined });
        return true;
    };
    CreatorBase.prototype.canSwitchViewType = function () {
        var plugin = this.currentPlugin;
        return !plugin || !plugin.deactivate || plugin.deactivate();
    };
    CreatorBase.prototype.activatePlugin = function (newType) {
        var plugin = this.getPlugin(newType);
        if (!!plugin) {
            plugin.activate();
        }
        return plugin;
    };
    Object.defineProperty(CreatorBase.prototype, "currentPlugin", {
        get: function () {
            return this.getPlugin(this.activeTab);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "toolboxCategories", {
        get: function () {
            return this.toolbox.categories;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.updateToolboxIsCompact = function (newVal) {
        if (!this.toolbox)
            return;
        var hasValue = newVal != undefined && newVal != null;
        if (this.toolbox.forceCompact !== undefined) {
            this.toolbox.isCompact = this.toolbox.forceCompact;
        }
        else if (this.toolboxLocation == "right") {
            this.toolbox.isCompact = this.showSidebar || (hasValue && newVal);
        }
        else if (hasValue) {
            this.toolbox.isCompact = newVal;
        }
    };
    Object.defineProperty(CreatorBase.prototype, "showToolbox", {
        get: function () {
            return this.showToolboxValue;
        },
        set: function (val) {
            if (val !== true && val !== false) {
                _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnText("showToolbox is a boolean property now.");
            }
            if (val === "none" || val === false || val === "top") {
                this.showToolboxValue = false;
            }
            else if (val === true) {
                this.showToolboxValue = true;
            }
            else {
                this.toolboxLocation = val;
                this.showToolboxValue = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "showSidebar", {
        /**
         * Specifies whether to show the sidebar that displays Property Grid.
         *
         * Default value: `true`
         * @see sidebarLocation
         */
        get: function () {
            return this.showSidebarValue;
        },
        set: function (val) {
            if (val !== true && val !== false) {
                _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnText("showSidebar is a boolean property now.");
                return;
            }
            if (this.showSidebar === val)
                return;
            this.setShowSidebar(val, true);
            if (!this.onShowPropertyGridVisiblityChanged.isEmpty) {
                _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("onShowPropertyGridVisiblityChanged", "onShowSidebarVisibilityChanged");
                this.onShowPropertyGridVisiblityChanged.fire(this, { show: val });
            }
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.setShowSidebar = function (value, isManualMode) {
        if (isManualMode === void 0) { isManualMode = false; }
        this.showSidebarValue = value;
        if (isManualMode) {
            if (value) {
                this.sidebar.expandedManually = true;
            }
            else {
                this.sidebar.collapsedManually = true;
            }
        }
        this.updateToolboxIsCompact();
        this.onShowSidebarVisibilityChanged.fire(this, { show: value });
    };
    Object.defineProperty(CreatorBase.prototype, "showPropertyGrid", {
        get: function () {
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("showPropertyGrid", "showSidebar");
            return this.showSidebar;
        },
        set: function (val) {
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("showPropertyGrid", "showSidebar");
            if (val !== true && val !== false) {
                _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnText("showSidebar is a boolean property.");
                return;
            }
            this.showSidebar = val;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.rightContainerActiveItem = function (name) {
        _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("rightContainerActiveItem");
    };
    CreatorBase.prototype.leftContainerActiveItem = function (name) {
        _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("leftContainerActiveItem");
    };
    Object.defineProperty(CreatorBase.prototype, "undoRedoManager", {
        get: function () {
            var plugin = this.getPlugin("undoredo");
            return plugin && plugin.model.undoRedoManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "undoRedoController", {
        get: function () {
            var plugin = this.getPlugin("undoredo");
            return plugin && plugin.model;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.startUndoRedoTransaction = function (name) {
        if (name === void 0) { name = ""; }
        this.undoRedoController && this.undoRedoController.startTransaction(name);
    };
    CreatorBase.prototype.stopUndoRedoTransaction = function () {
        this.undoRedoController && this.undoRedoController.stopTransaction();
    };
    Object.defineProperty(CreatorBase.prototype, "isProcessingUndoRedo", {
        /**
         * Returns `true` if an undo or redo operation is in progress.
         * @see undo
         * @see redo
         */
        get: function () {
            return this.undoRedoManager && this.undoRedoManager.isProcessingUndoRedo;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Cancels the last change if possible.
     * @see redo
     * @see onBeforeUndo
     */
    CreatorBase.prototype.undo = function () {
        this.undoRedoController && this.undoRedoController.undo();
    };
    /**
     * Repeats the last undone action if possible.
     * @see undo
     * @see onBeforeRedo
     */
    CreatorBase.prototype.redo = function () {
        this.undoRedoController && this.undoRedoController.redo();
    };
    Object.defineProperty(CreatorBase.prototype, "selectionHistoryController", {
        //#endregion Undo/Redo
        get: function () {
            return this.selectionHistoryControllerValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "currentPage", {
        get: function () {
            return this.survey.currentPage;
        },
        set: function (value) {
            this.survey.currentPage = value;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.addPage = function (pageToAdd, changeSelection, beforeAdd) {
        if (changeSelection === void 0) { changeSelection = true; }
        var options = {
            page: pageToAdd,
            allow: true
        };
        this.onPageAdding.fire(this, options);
        if (!options.allow) {
            return null;
        }
        if (beforeAdd !== undefined) {
            if (!beforeAdd()) {
                return;
            }
        }
        var page = pageToAdd;
        if (!page) {
            page = this.addNewPageIntoSurvey();
        }
        else {
            this.survey.addPage(page);
        }
        if (changeSelection) {
            this.selectElement(page);
        }
        return page;
    };
    CreatorBase.prototype.addNewPageIntoSurvey = function () {
        var name = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getNewPageName(this.survey.pages);
        return this.survey.addNewPage(name);
    };
    CreatorBase.prototype.initTabs = function () {
        this.initPlugins();
        this.initFooterToolbar();
        if (this.tabs.length > 0) {
            this.makeNewViewActive(this.tabs[0].id);
        }
    };
    CreatorBase.prototype.initPlugins = function () {
        this.addPlugin("undoredo", new _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["UndoRedoPlugin"](this));
        if (this.showDesignerTab) {
            new _components_tabs_designer_plugin__WEBPACK_IMPORTED_MODULE_18__["TabDesignerPlugin"](this);
        }
        if (this.showPreviewTab) {
            new _components_tabs_test_plugin__WEBPACK_IMPORTED_MODULE_13__["TabTestPlugin"](this);
        }
        if (this.showThemeTab) {
            new _components_tabs_theme_plugin__WEBPACK_IMPORTED_MODULE_23__["ThemeTabPlugin"](this);
        }
        if (this.showLogicTab) {
            new _components_tabs_logic_plugin__WEBPACK_IMPORTED_MODULE_16__["TabLogicPlugin"](this);
        }
        if (this.showJSONEditorTab) {
            if (_components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_11__["TabJsonEditorAcePlugin"].hasAceEditor()) {
                new _components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_11__["TabJsonEditorAcePlugin"](this);
            }
            else {
                new _components_tabs_json_editor_textarea__WEBPACK_IMPORTED_MODULE_12__["TabJsonEditorTextareaPlugin"](this);
            }
        }
        if (this.showTranslationTab) {
            new _components_tabs_translation_plugin__WEBPACK_IMPORTED_MODULE_15__["TabTranslationPlugin"](this);
        }
    };
    CreatorBase.prototype.initFooterToolbar = function () {
        var _this = this;
        if (!this.footerToolbar) {
            this.footerToolbar = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ActionContainer"]();
            ["designer", "undoredo", "test", "theme"].forEach(function (pluginKey) {
                var plugin = _this.getPlugin(pluginKey);
                if (!!plugin && !!plugin["addFooterActions"]) {
                    plugin["addFooterActions"]();
                }
            });
        }
    };
    CreatorBase.prototype.getOptions = function () {
        return this.options || {};
    };
    CreatorBase.prototype.setOptions = function (options) {
        if (!options)
            options = {};
        var obsoleteOptions = {};
        obsoleteOptions["showTestSurveyTab"] = "showPreviewTab";
        obsoleteOptions["showDefaultLanguageInTestSurveyTab"] = "showDefaultLanguageInPreviewTab";
        obsoleteOptions["showInvisibleElementsInPreviewTab"] = "showInvisibleElementsInTestSurveyTab";
        for (var key in obsoleteOptions) {
            if (options[key] === undefined)
                continue;
            var newKey = obsoleteOptions[key];
            if (options[newKey] === undefined) {
                options[newKey] = options[key];
                delete options[key];
            }
        }
        this.options = options;
        for (var key in options) {
            this[key] = options[key];
        }
    };
    CreatorBase.prototype.setPropertyPlaceHolder = function (className, propertyName, value) {
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(className, propertyName);
        if (!!prop) {
            prop.placeholder = value;
        }
    };
    CreatorBase.prototype.setPropertyVisibility = function (className, visible) {
        var properties = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            properties[_i - 2] = arguments[_i];
        }
        if (!Array.isArray(properties))
            return;
        for (var i = 0; i < properties.length; i++) {
            var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(className, properties[i]);
            if (!!prop) {
                prop.visible = visible;
            }
        }
    };
    CreatorBase.prototype.patchMetadata = function () {
        this.setPropertyPlaceHolder("survey", "title", "pe.surveyTitlePlaceholder");
        this.setPropertyPlaceHolder("survey", "description", "pe.surveyDescriptionPlaceholder");
        this.setPropertyVisibility("survey", false, "logoPosition");
        if (this.pageEditMode !== "single") {
            this.setPropertyPlaceHolder("page", "title", "pe.pageTitlePlaceholder");
            this.setPropertyPlaceHolder("page", "description", "pe.pageDescriptionPlaceholder");
        }
    };
    CreatorBase.prototype.isCanModifyProperty = function (obj, propertyName) {
        var property = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(obj.getType(), propertyName);
        var parentObj, parentProperty;
        if (obj instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"]) {
            parentObj = obj.locOwner;
            parentProperty = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(parentObj.getType(), obj.ownerPropertyName || propertyName);
            var allowEdit = true;
            if (parentObj instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionSelectBase"])
                allowEdit = parentObj.isItemInList(obj);
            var allowQuestionOperations = this.getElementAllowOperations(parentObj);
            if (allowQuestionOperations.allowEdit === false)
                return false;
            var options = { allowDelete: true, allowEdit: allowEdit, allowAdd: true };
            this.onCollectionItemAllowingCallback(parentObj, property, parentObj.getPropertyValue(parentProperty === null || parentProperty === void 0 ? void 0 : parentProperty.name), obj, options);
            if (options.allowEdit === false) {
                return false;
            }
            if (this.onIsPropertyReadOnlyCallback(parentObj, parentProperty, parentProperty === null || parentProperty === void 0 ? void 0 : parentProperty.readOnly, null, null)) {
                return false;
            }
        }
        if (obj instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyElement"]) {
            var allowElementOperations = this.getElementAllowOperations(obj);
            if (allowElementOperations.allowEdit === false)
                return false;
        }
        return (!property ||
            !this.onIsPropertyReadOnlyCallback(obj, property, property.readOnly, parentObj, parentProperty));
    };
    CreatorBase.prototype.onIsPropertyReadOnlyCallback = function (obj, property, readOnly, parentObj, parentProperty) {
        var proposedValue = this.readOnly || readOnly;
        if (this.onGetPropertyReadOnly.isEmpty)
            return proposedValue;
        var options = {
            obj: obj,
            property: property,
            readOnly: proposedValue,
            propertyName: property.name,
            parentObj: parentObj,
            parentProperty: parentProperty
        };
        this.onGetPropertyReadOnly.fire(this, options);
        return options.readOnly;
    };
    Object.defineProperty(CreatorBase.prototype, "survey", {
        /**
         * The editing survey object (Survey.Survey)
         */
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "isInitialSurveyEmpty", {
        /**
         * Returns true if initial survey was empty. It was not set via JSON property and default new survey is empty as well.
         * @returns true if initial survey doesn't have any elements or properties
         */
        get: function () { return this.isInitialSurveyEmptyValue; },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.initSurveyWithJSON = function (json, clearState) {
        var _this = this;
        if (!json) {
            json = { "logoPosition": "right" };
        }
        // currentPlugin.deactivate && currentPlugin.deactivate();
        this.existingPages = {};
        var survey = this.createSurvey({});
        survey.css = survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2Css"];
        survey.setIsMobile(!!this.isMobileView);
        survey.setDesignMode(true);
        survey.lazyRendering = true;
        survey.setJsonObject(json);
        this.isInitialSurveyEmptyValue = survey.isEmpty;
        if (survey.isEmpty) {
            survey.setJsonObject(this.getDefaultSurveyJson());
        }
        survey.pages.forEach(function (page) {
            _this.existingPages[page.id] = true;
        });
        this.onDesignerSurveyCreated.fire(this, { survey: survey });
        survey.onQuestionAdded.add(function (sender, options) {
            _this.doOnQuestionAdded(options.question, options.parentPanel);
        });
        survey.onPanelAdded.add(function (sender, options) {
            _this.doOnPanelAdded(options.panel, options.parentPanel);
        });
        survey.onPageAdded.add(function (sender, options) {
            if (!!_this.existingPages[options.page.id])
                return;
            _this.existingPages[options.page.id] = true;
            _this.doOnPageAdded(options.page);
        });
        survey.onDragDropAllow.add(function (sender, options) {
            options.survey = sender;
            _this.onDragDropAllow.fire(_this, options);
        });
        this.setSurvey(survey);
        this.updatePlugin(this.activeTab);
        if (this.activeTab !== "designer") {
            this.updatePlugin("designer");
        }
        if (!!this.undoRedoController) {
            this.undoRedoController.updateSurvey();
        }
    };
    CreatorBase.prototype.updatePlugin = function (name) {
        var plugin = this.getPlugin(this.activeTab);
        if (!!plugin && !!plugin.update) {
            plugin.update();
        }
    };
    CreatorBase.prototype.initDragDrop = function () {
        this.initDragDropSurveyElements();
        this.initDragDropChoices();
    };
    CreatorBase.prototype.initDragDropSurveyElements = function () {
        var _this = this;
        _survey_elements__WEBPACK_IMPORTED_MODULE_24__["DragDropSurveyElements"].restrictDragQuestionBetweenPages =
            _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].dragDrop.restrictDragQuestionBetweenPages;
        this.dragDropSurveyElements = new _survey_elements__WEBPACK_IMPORTED_MODULE_24__["DragDropSurveyElements"](null, this);
        var isDraggedFromToolbox = false;
        this.dragDropSurveyElements.onDragStart.add(function (sender, options) {
            _this.dragDropSurveyElements.maxNestedPanels = _this.maxNestedPanels;
            isDraggedFromToolbox = !sender.draggedElement.parent;
            _this.onDragStart.fire(sender, options);
            _this.startUndoRedoTransaction("drag drop");
        });
        this.dragDropSurveyElements.onDragEnd.add(function (sender, options) {
            _this.stopUndoRedoTransaction();
            var editTitle = isDraggedFromToolbox && _this.startEditTitleOnQuestionAdded;
            _this.selectElement(options.draggedElement, undefined, false, editTitle);
            isDraggedFromToolbox = false;
            _this.onDragEnd.fire(sender, options);
        });
    };
    CreatorBase.prototype.initDragDropChoices = function () {
        var _this = this;
        this.dragDropChoices = new survey_core__WEBPACK_IMPORTED_MODULE_1__["DragDropChoices"](null, this);
        this.dragDropChoices.onDragStart.add(function (sender, options) {
            _this.startUndoRedoTransaction("drag drop");
        });
        this.dragDropChoices.onDragEnd.add(function (sender, options) {
            _this.stopUndoRedoTransaction();
            _this.selectElement(options.draggedElement, undefined, false);
        });
    };
    CreatorBase.prototype.updateElementsOnLocaleChanged = function (obj, propertyName) {
        if (obj.getType() !== "survey" || propertyName !== "locale")
            return;
        var pages = this.survey.pages;
        for (var i = 0; i < pages.length; i++) {
            pages[i].locStrsChanged();
        }
    };
    CreatorBase.prototype.updateConditionsOnNameChanged = function (obj, propertyName, oldValue) {
        if (this.isObjQuestion(obj)) {
            if (propertyName === "name" && !obj["valueName"]) {
                this.updateLogicOnQuestionNameChanged(oldValue, obj["name"]);
            }
            if (propertyName === "valueName") {
                var oldName = !!oldValue ? oldValue : obj["name"];
                var newName = !!obj["valueName"] ? obj["valueName"] : obj["name"];
                this.updateLogicOnQuestionNameChanged(oldName, newName);
            }
            if (propertyName === "name" && obj.isDescendantOf("selectbase")) {
                this.updateChoicesFromQuestionOnColumnNameChanged(oldValue, obj["name"]);
            }
        }
        if (propertyName === "name" && obj.isDescendantOf("matrixdropdowncolumn")) {
            this.updateLogicOnColumnNameChanged(obj, oldValue, obj["name"]);
        }
    };
    CreatorBase.prototype.getSurveyLogicForUpdate = function () {
        if (!!this.surveyLogicForUpdate && this.surveyLogicForUpdate.survey !== this.survey) {
            this.surveyLogicForUpdate = undefined;
        }
        if (!this.surveyLogicForUpdate) {
            this.surveyLogicForUpdate = this.createSurveyLogicForUpdate();
        }
        return this.surveyLogicForUpdate;
    };
    CreatorBase.prototype.clearSurveyLogicForUpdate = function (obj, propertyName, value) {
        if (this.surveyLogicRenaming || !this.surveyLogicForUpdate || !obj || !propertyName)
            return;
        if (this.needClearSurveyLogicForUpdate(obj, propertyName, value)) {
            this.surveyLogicForUpdate = undefined;
        }
    };
    CreatorBase.prototype.needClearSurveyLogicForUpdate = function (obj, propertyName, value) {
        if (Array.isArray(value)) {
            return true;
        }
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(obj.getType(), propertyName);
        return !!prop && ["expression", "condition", "questionvalue", "question"].indexOf(prop.type) > -1;
    };
    CreatorBase.prototype.updateSurveyLogicValues = function (obj, propertyName, oldValue) {
        if (!obj || !propertyName || survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(oldValue))
            return;
        if (propertyName === "value" && obj.isDescendantOf("itemvalue")) {
            this.updateSurveyLogicItemValue(obj, oldValue);
        }
    };
    CreatorBase.prototype.updateSurveyLogicItemValue = function (item, oldValue) {
        if (!item.locOwner || !_creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.updateExpressionsOnChanging.choiceValue)
            return;
        if (["choices", "rateValues", "columns", "rows"].indexOf(item.ownerPropertyName) < 0)
            return;
        this.surveyLogicRenaming = true;
        var logicUpdater = this.getSurveyLogicForUpdate();
        if (item.ownerPropertyName === "rows") {
            logicUpdater.renameRowValue(item, oldValue);
        }
        else {
            logicUpdater.renameItemValue(item, oldValue);
        }
        this.surveyLogicRenaming = false;
    };
    CreatorBase.prototype.createSurveyLogicForUpdate = function () {
        return new _components_tabs_logic__WEBPACK_IMPORTED_MODULE_14__["SurveyLogic"](this.survey, this);
    };
    CreatorBase.prototype.updateLogicOnQuestionNameChanged = function (oldName, newName) {
        if (oldName === newName || !_creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.updateExpressionsOnChanging.questionName)
            return;
        this.surveyLogicRenaming = true;
        this.getSurveyLogicForUpdate().renameQuestion(oldName, newName);
        this.surveyLogicRenaming = false;
    };
    CreatorBase.prototype.updateLogicOnColumnNameChanged = function (column, oldName, newName) {
        if (!oldName || oldName === newName || !_creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.updateExpressionsOnChanging.columnName)
            return;
        this.surveyLogicRenaming = true;
        this.getSurveyLogicForUpdate().renameColumn(column, oldName);
        this.surveyLogicRenaming = false;
    };
    CreatorBase.prototype.updateChoicesFromQuestionOnColumnNameChanged = function (oldName, newName) {
        var questions = this.getAllQuestions();
        questions.forEach(function (q) {
            if (q.choicesFromQuestion === oldName) {
                q.choicesFromQuestion = newName;
            }
        });
    };
    CreatorBase.prototype.isObjQuestion = function (obj) {
        return this.isObjThisType(obj, "question");
    };
    CreatorBase.prototype.isObjPage = function (obj) {
        return this.isObjThisType(obj, "page");
    };
    CreatorBase.prototype.isObjThisType = function (obj, typeName) {
        var classInfo = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(obj.getType());
        while (!!classInfo && !!classInfo.parentName) {
            if (classInfo.name === typeName)
                return true;
            classInfo = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(classInfo.parentName);
        }
        return !!classInfo && classInfo.name === typeName;
    };
    CreatorBase.prototype.onDragDropItemStart = function () {
        this.addNewElementReason = "DROPPED_FROM_TOOLBOX";
    };
    CreatorBase.prototype.doOnQuestionAdded = function (question, parentPanel) {
        question.name = this.generateUniqueName(question, question.name);
        var page = this.getPageByElement(question);
        var options = { question: question, page: page, reason: this.addNewElementReason };
        this.addNewElementReason = undefined;
        this.onQuestionAdded.fire(this, options);
    };
    CreatorBase.prototype.doOnPanelAdded = function (panel, parentPanel) {
        var page = this.getPageByElement(panel);
        var options = { panel: panel, page: page, reason: this.addNewElementReason };
        this.onPanelAdded.fire(this, options);
        this.addNewElementReason = undefined;
    };
    CreatorBase.prototype.doOnPageAdded = function (page) {
        var options = { page: page };
        this.onPageAdded.fire(this, options);
        this.setModified({ type: "PAGE_ADDED", newValue: options.page });
    };
    CreatorBase.prototype.getPageByElement = function (obj) {
        return this.survey.getPageByElement(obj);
    };
    CreatorBase.prototype.getDefaultSurveyJson = function () {
        var json = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultNewSurveyJSON;
        if (json["pages"] &&
            json["pages"]["length"] > 0 &&
            json["pages"][0]["name"]) {
            json["pages"][0]["name"] =
                _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("ed.newPageName") + "1";
        }
        return json;
    };
    CreatorBase.prototype.setSurvey = function (survey) {
        if (!!this.surveyValue) {
            this.surveyValue.dispose();
        }
        this.surveyValue = survey;
        this.selectElement(survey);
        this.selectionHistoryController.reset();
    };
    CreatorBase.prototype.getSurveyTextFromDesigner = function () {
        if (!this.survey)
            return "";
        var json = this.survey.toJSON();
        json = this.singlePageJSON(json);
        var indent = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].jsonEditor.indentation;
        if (this.generateValidJSON) {
            return JSON.stringify(json, null, indent);
        }
        return new _json5__WEBPACK_IMPORTED_MODULE_4__["SurveyJSON5"]().stringify(json, null, indent);
    };
    CreatorBase.prototype.setTextValue = function (value) {
        if (!!this.setSurveyJSONTextCallback) {
            this.setSurveyJSONTextCallback(value);
        }
    };
    /**
     * Set JSON as text  into survey. Clear undo/redo states optionally.
     * @param value JSON as text
     * @param clearState default false. Set this parameter to true to clear undo/redo states.
     */
    CreatorBase.prototype.changeText = function (value, clearState) {
        if (clearState === void 0) { clearState = false; }
        this.setTextValue(value);
        if (!value) {
            this.initSurveyWithJSON(undefined, clearState);
        }
        else {
            var textWorker = new _textWorker__WEBPACK_IMPORTED_MODULE_6__["SurveyTextWorker"](value);
            if (textWorker.isJsonCorrect || !!textWorker.survey) {
                this.initSurveyWithJSON(textWorker.survey.toJSON(), clearState);
            }
            else {
                this.viewType = "editor";
            }
        }
    };
    Object.defineProperty(CreatorBase.prototype, "text", {
        /**
         * The Survey JSON as a text. Use it to get Survey JSON or change it.
         * @see JSON
         */
        get: function () {
            if (!!this.getSurveyJSONTextCallback) {
                return this.getSurveyJSONTextCallback().text;
            }
            return this.getSurveyTextFromDesigner();
        },
        set: function (value) {
            this.changeText(value, true);
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.getSurveyJSON = function () {
        if (this.viewType != "editor") {
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(this.survey);
        }
        var surveyJsonText = this.text;
        var textWorker = new _textWorker__WEBPACK_IMPORTED_MODULE_6__["SurveyTextWorker"](surveyJsonText);
        if (textWorker.isJsonCorrect) {
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(textWorker.survey);
        }
        return null;
    };
    CreatorBase.prototype.getObjectDisplayName = function (obj, area, reason, displayName) {
        if (reason === void 0) { reason = undefined; }
        if (displayName === void 0) { displayName = undefined; }
        if (!displayName) {
            displayName = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectName(obj, this.showObjectTitles);
        }
        var options = { obj: obj, displayName: displayName, area: area, reason: reason };
        this.onGetObjectDisplayName.fire(this, options);
        return options.displayName;
    };
    CreatorBase.prototype.createSurvey = function (json, reason, model) {
        var _a;
        if (json === void 0) { json = {}; }
        if (reason === void 0) { reason = "designer"; }
        var survey = this.createSurveyCore(json, reason);
        if (reason === "designer" || reason === "modal-question-editor") {
            initializeDesignTimeSurveyModel(survey, this);
        }
        survey["needRenderIcons"] = false;
        if (reason != "designer" && reason != "test") {
            survey.locale = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].currentLocale;
            if (!json["clearInvisibleValues"]) {
                survey.clearInvisibleValues = "onComplete";
            }
        }
        this.onSurveyInstanceCreated.fire(this, { survey: survey, reason: reason, model: !!model ? model : (_a = this.currentPlugin) === null || _a === void 0 ? void 0 : _a.model });
        return survey;
    };
    CreatorBase.prototype.createSurveyCore = function (json, reason) {
        if (json === void 0) { json = {}; }
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"](json);
    };
    Object.defineProperty(CreatorBase.prototype, "state", {
        /**
         * Returns the creator state. It may return empty string or "saving" and "saved".
         */
        get: function () {
            return !!this._stateValue ? this._stateValue : "";
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.setState = function (value) {
        this._stateValue = value;
        this.onStateChanged.fire(this, { val: value });
        if (!!value) {
            this.notify(this.getLocString("ed." + value));
            var actions = this.toolbarItems.filter(function (a) { return a.id === "svd-save"; });
            if (Array.isArray(actions) && actions.length > 0) {
                actions[0].enabled = this.state === "modified";
                actions[0].active = this.state === "modified";
            }
        }
    };
    CreatorBase.prototype.setModified = function (options) {
        if (options === void 0) { options = null; }
        this.setState("modified");
        this.onModified.fire(this, options);
        this.isAutoSave && this.doAutoSave();
    };
    CreatorBase.prototype.notifySurveyPropertyChanged = function (options) {
        this.clearSurveyLogicForUpdate(options.target, options.name, options.newValue);
        this.updateSurveyLogicValues(options.target, options.name, options.oldValue);
        var plugin = this.currentPlugin;
        if (!!plugin && !!plugin.onDesignerSurveyPropertyChanged) {
            plugin.onDesignerSurveyPropertyChanged(options.target, options.name);
        }
        if (!this.onSurveyPropertyValueChanged.isEmpty) {
            options.propertyName = options.name;
            options.obj = options.target;
            options.value = options.newValue;
            this.onSurveyPropertyValueChanged.fire(this, options);
        }
        options.type = "PROPERTY_CHANGED";
        this.setModified(options);
    };
    CreatorBase.prototype.notifySurveyItemMoved = function (options) {
        options.type = "ELEMENT_REORDERED";
        this.setModified(options);
    };
    /**
     * This function triggers user notification (via the alert() function if no onNotify event handler added).
     * @see onNotify
     */
    CreatorBase.prototype.notify = function (msg, type) {
        if (type === void 0) { type = "info"; }
        if (this.onNotify.isEmpty) {
            this.notifier.notify(msg, type);
            // alert(msg);
        }
        else {
            this.onNotify.fire(this, { message: msg });
        }
    };
    CreatorBase.prototype.convertQuestion = function (obj, className) {
        var newQuestion = _questionconverter__WEBPACK_IMPORTED_MODULE_5__["QuestionConverter"].convertObject(obj, className, this.getDefaultElementJSON(obj.getType()), this.getDefaultElementJSON(className));
        this.setModified({
            type: "QUESTION_CONVERTED",
            className: className,
            oldValue: obj,
            newValue: newQuestion
        });
        return newQuestion;
    };
    CreatorBase.prototype.getDefaultElementJSON = function (elType) {
        var _a;
        if (!this.toolbox)
            return null;
        var json = (_a = this.toolbox.getItemByName(elType)) === null || _a === void 0 ? void 0 : _a.json;
        return !!json ? survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].createCopy(json) : null;
    };
    CreatorBase.prototype.singlePageJSON = function (json) {
        if (this.pageEditMode === "single") {
            var pages = json.pages;
            if (Array.isArray(pages) && pages.length > 0) {
                if (pages[0].elements !== undefined) {
                    json.elements = pages[0].elements;
                }
                delete json.pages;
            }
        }
        return json;
    };
    Object.defineProperty(CreatorBase.prototype, "JSON", {
        /**
         * The Survey JSON. Use it to get Survey JSON or change it.
         * @see text
         */
        get: function () {
            var json = this.survey.toJSON();
            return this.singlePageJSON(json);
        },
        set: function (val) {
            if (this.viewType == "editor") {
                this.setTextValue(JSON.stringify(val));
            }
            else {
                this.initSurveyWithJSON(val, true);
            }
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.loadSurvey = function (surveyId) {
        var _this = this;
        new survey_core__WEBPACK_IMPORTED_MODULE_1__["dxSurveyService"]().loadSurvey(surveyId, function (success, result, response) {
            if (success && result) {
                _this.JSON = result;
            }
        });
    };
    CreatorBase.prototype.doClickQuestionCore = function (element, modifiedType, index, panel) {
        if (modifiedType === void 0) { modifiedType = "ADDED_FROM_TOOLBOX"; }
        if (index === void 0) { index = -1; }
        if (panel === void 0) { panel = null; }
        if (this.survey.pageCount == 0) {
            this.addNewPageIntoSurvey();
        }
        var parent = this.currentPage;
        if (this.pageEditMode === "bypage") {
            var desigerTab = this.getPlugin("designer").model;
            var pagesController = desigerTab.pagesController;
            parent = pagesController.page2Display;
        }
        var selectedElement = this.getSelectedSurveyElement();
        if (selectedElement && selectedElement.parent && selectedElement["page"] == parent &&
            (selectedElement !== panel)) {
            if (!panel) {
                while (!!selectedElement.parent && selectedElement.parent.isPanel) {
                    if (!!selectedElement.parentQuestion) {
                        selectedElement = selectedElement.parentQuestion;
                    }
                    else {
                        selectedElement = selectedElement.parent;
                    }
                }
            }
            parent = selectedElement.parent;
            if (index < 0) {
                index = parent.elements.indexOf(selectedElement);
                if (index > -1)
                    index++;
            }
        }
        if (panel) {
            parent = panel;
        }
        this.addNewElementReason = modifiedType;
        var currentRow = this.findRowByElement(selectedElement, parent);
        element.setVisibleIndex(-1);
        if (currentRow && this.isRowMultiline(currentRow)) {
            this.addElemenMultiline(parent, element, index, currentRow);
        }
        else {
            parent.addElement(element, index);
        }
        this.addNewElementReason = "";
        this.setModified({ type: modifiedType, question: element });
    };
    CreatorBase.prototype.isRowMultiline = function (row) {
        return row.elements.length > 1;
    };
    CreatorBase.prototype.findRowByElement = function (element, parent) {
        if (!element)
            return null;
        if (element.isPage)
            return element.rows[element.rows.length - 1];
        return parent.rows.find(function (row) { return row.elements.indexOf(element) !== -1; });
    };
    CreatorBase.prototype.addElemenMultiline = function (parent, element, index, currentRow) {
        var elsCount = currentRow.elements.length;
        var prevElement = currentRow.elements[elsCount - 1];
        prevElement.startWithNewLine = true;
        parent.addElement(element, index);
        prevElement.startWithNewLine = false;
    };
    CreatorBase.prototype.setNewNames = function (element) {
        this.newQuestions = [];
        this.newPanels = [];
        this.newQuestionChangedNames = {};
        this.setNewNamesCore(element);
        this.updateNewElementExpressions(element);
    };
    CreatorBase.prototype.updateNewElementExpressions = function (element) {
        var survey = this.createSurvey({}, "updateNewElementExpressions");
        survey.setDesignMode(true);
        if (element.isPage) {
            survey.addPage(element);
        }
        else {
            survey.addNewPage("p1");
            survey.pages[0].addElement(element);
        }
        var logic = new _components_tabs_logic__WEBPACK_IMPORTED_MODULE_14__["SurveyLogic"](survey);
        for (var key in this.newQuestionChangedNames) {
            logic.renameQuestion(key, this.newQuestionChangedNames[key]);
        }
    };
    CreatorBase.prototype.getAllQuestions = function (includeNewItems) {
        if (includeNewItems === void 0) { includeNewItems = true; }
        return this.getAllElements(false, includeNewItems);
    };
    CreatorBase.prototype.getAllPanels = function (includeNewItems) {
        if (includeNewItems === void 0) { includeNewItems = true; }
        return this.getAllElements(true, includeNewItems);
    };
    CreatorBase.prototype.getAllElements = function (isPanel, includeNewItems) {
        var result = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getAllElements(this.survey, isPanel);
        if (includeNewItems) {
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].addElements(this.newPanels, isPanel, result);
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].addElements(this.newQuestions, isPanel, result);
        }
        return result;
    };
    CreatorBase.prototype.getNewName = function (type, isPanel) {
        if (type == "page")
            return _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getNewPageName(this.survey.pages);
        if (isPanel)
            return this.getNewPanelName();
        return this.getNewQuestionName();
    };
    CreatorBase.prototype.getNewQuestionName = function () {
        return _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getNewQuestionName(this.getAllQuestions());
    };
    CreatorBase.prototype.getNewPanelName = function () {
        return _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getNewPanelName(this.getAllPanels());
    };
    CreatorBase.prototype.setNewNamesCore = function (element) {
        var _this = this;
        var elType = element["getType"]();
        var newName = this.getNewName(elType, element.isPanel);
        if (newName != element.name) {
            this.newQuestionChangedNames[element.name] = newName;
            element.name = newName;
        }
        if (element.isPanel || elType == "page") {
            if (element.isPanel) {
                this.newPanels.push(element);
            }
            var panel = element;
            panel.elements.forEach(function (el) { return _this.setNewNamesCore(el); });
        }
        else {
            this.newQuestions.push(element);
            var els = Array.isArray(element["templateElements"]) ? element["templateElements"] :
                (Array.isArray(element["detailElements"]) ? element["detailElements"] : undefined);
            if (els) {
                els.forEach(function (el) { return _this.setNewNamesCore(el); });
            }
        }
    };
    CreatorBase.prototype.createNewElement = function (json) {
        var newElement = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(json["type"]);
        new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, newElement);
        this.setNewNames(newElement);
        return newElement;
    };
    CreatorBase.prototype.copyElement = function (element) {
        var json = new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(element);
        json.type = element.getType();
        return this.createNewElement(json);
    };
    /**
     * Copy a question to the active page
     * @param question A copied Survey.Question
     */
    CreatorBase.prototype.fastCopyQuestion = function (question) {
        var newElement = this.copyElement(question);
        var index = !!question["parent"]
            ? question["parent"].elements.indexOf(question) + 1
            : -1;
        this.doClickQuestionCore(newElement, "ELEMENT_COPIED", index, question["parent"]);
        return newElement;
    };
    Object.defineProperty(CreatorBase.prototype, "selectedElement", {
        /**
         * Gets or sets the focused survey element: a question, panel, page, or the survey itself.
         * @see onSelectedElementChanging
         * @see onSelectedElementChanged
         */
        get: function () {
            return this.selectedElementValue;
        },
        set: function (val) {
            this.selectElement(val);
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.deleteCurrentObject = function () {
        this.deleteCurrentElement();
    };
    CreatorBase.prototype.deleteCurrentElement = function () {
        this.deleteObject(this.selectedElement);
    };
    /**
     * Deletes a survey element: a question, panel, or page.
     *
     * If you want to delete the focused element, pass the [`selectedElement`](#selectedElement) property value to this method.
     * @param element A survey element to delete.
     * @see onElementDeleting
     */
    CreatorBase.prototype.deleteElement = function (element) {
        this.deleteObject(element);
    };
    /**
     * Create a new page with the same elements and place it next to the current one. It returns the new created Survey.Page
     * @param page A copied Survey.Page
     */
    CreatorBase.prototype.copyPage = function (page) {
        var _this = this;
        var newPage = this.copyElement(page);
        var index = this.survey.pages.indexOf(page);
        if (index > -1) {
            this.survey.pages.splice(index + 1, 0, newPage);
        }
        else {
            this.survey.pages.push(newPage);
        }
        newPage.questions.forEach(function (q) {
            _this.addNewElementReason = "ELEMENT_COPIED";
            _this.doOnQuestionAdded(q, q.parent);
        });
        var panels = newPage.getPanels();
        if (Array.isArray(panels))
            panels.forEach(function (p) { return _this.doOnPanelAdded(p, p.parent); });
        this.addNewElementReason = "";
        return newPage;
    };
    CreatorBase.prototype.deleteObjectCore = function (obj) {
        if (obj.isPage) {
            var newPage = this.getNextPage(obj);
            this.survey.removePage(obj);
            this.selectElement(!!newPage ? newPage : this.survey);
        }
        else {
            if (this.isInitialSurveyEmpty && this.survey.pageCount === 1) {
                var page = this.survey.pages[0];
                if (page.elements.length === 1 && obj === page.elements[0]) {
                    this.deleteObjectCore(page);
                    return;
                }
            }
            this.deletePanelOrQuestion(obj);
        }
        this.setModified({
            type: "OBJECT_DELETED",
            target: obj
        });
        this.updateConditionsOnRemove(obj);
    };
    CreatorBase.prototype.getNextPage = function (page) {
        var index = this.survey.pages.indexOf(page);
        if (index < 0 || this.survey.pages.length == 1)
            return null;
        if (index == this.survey.pages.length - 1)
            index--;
        else
            index++;
        if (index < 0 || index > this.survey.pages.length - 1)
            return null;
        return this.survey.pages[index];
    };
    CreatorBase.prototype.deleteObject = function (obj) {
        var options = {
            element: obj,
            elementType: _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectType(obj),
            allowing: true
        };
        this.onElementDeleting.fire(this, options);
        if (!options.allowing)
            return;
        this.deleteObjectCore(obj);
    };
    CreatorBase.prototype.updateConditionsOnRemove = function (obj) {
        var objType = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectType(obj);
        var questions;
        if (objType == _survey_helper__WEBPACK_IMPORTED_MODULE_9__["ObjType"].Question) {
            questions = [obj];
        }
        else {
            var questions = obj.questions;
        }
        if (!questions)
            return;
        var logic = new _components_tabs_logic__WEBPACK_IMPORTED_MODULE_14__["SurveyLogic"](this.survey, this);
        for (var i = 0; i < questions.length; i++) {
            logic.removeQuestion(questions[i].getValueName());
        }
    };
    CreatorBase.prototype.isElementSelected = function (element) {
        if (!element || element.isDisposed)
            return false;
        return element.getPropertyValue("isSelectedInDesigner");
    };
    CreatorBase.prototype.selectElement = function (element, propertyName, focus, startEdit) {
        if (focus === void 0) { focus = true; }
        if (startEdit === void 0) { startEdit = false; }
        if (!!element && (element.isDisposed || ((element.isQuestion || element.isPanel) && !element.parent)))
            return;
        var oldValue = this.selectedElement;
        if (oldValue !== element) {
            this.selectedElementValue = this.onSelectingElement(element);
            if (oldValue !== this.selectedElementValue) {
                if (!!oldValue && !oldValue.isDisposed) {
                    oldValue.setPropertyValue("isSelectedInDesigner", false);
                }
                if (!!this.selectedElementValue) {
                    this.selectedElementValue.setPropertyValue("isSelectedInDesigner", true);
                }
            }
        }
        if (oldValue !== element || !!propertyName) {
            this.selectionChanged(this.selectedElement, propertyName, !!focus);
        }
        var selEl = this.getSelectedSurveyElement();
        if (oldValue !== element && !!document && !!selEl) {
            this.focusElement(element, focus, selEl, propertyName, startEdit);
        }
    };
    CreatorBase.prototype.focusElement = function (element, focus, selEl, propertyName, startEdit) {
        if (selEl === void 0) { selEl = null; }
        if (propertyName === void 0) { propertyName = null; }
        if (startEdit === void 0) { startEdit = null; }
        if (!selEl)
            selEl = this.getSelectedSurveyElement();
        setTimeout(function () {
            if (!!selEl && (focus || startEdit && (!selEl.hasTitle || selEl.isPanel))) {
                var el = document.getElementById(selEl.id);
                if (!!el) {
                    el.scrollIntoView({ block: "center" });
                    if (!propertyName && el.parentElement) {
                        var elToFocus = (typeof (focus) === "string") ? el.parentElement.querySelector(focus) : el.parentElement;
                        elToFocus && elToFocus.focus();
                    }
                }
            }
            if (startEdit && !!element) {
                _components_string_editor__WEBPACK_IMPORTED_MODULE_22__["StringEditorConnector"].get(element.locTitle).activateEditor();
            }
        }, 100);
    };
    CreatorBase.prototype.getSelectedSurveyElement = function () {
        var sel = this.selectedElement;
        if (!sel || sel.getType() == "survey")
            return null;
        return sel.isInteractiveDesignElement && sel.id ? sel : null;
    };
    CreatorBase.prototype.onSelectingElement = function (val) {
        var options = { newSelectedElement: val };
        this.onSelectedElementChanging.fire(this, options);
        return options.newSelectedElement;
    };
    Object.defineProperty(CreatorBase.prototype, "designerPropertyGrid", {
        //#region Obsolete designerPropertyGrid
        get: function () {
            var propertyGridTab = this.sidebar.getTabById("propertyGrid");
            if (!propertyGridTab)
                return null;
            return propertyGridTab.model ? propertyGridTab.model.propertyGridModel : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CreatorBase.prototype, "propertyGrid", {
        get: function () {
            return this.designerPropertyGrid.survey;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Collapses a specified category in Property Grid.
     * @param name A [category name](https://surveyjs.io/survey-creator/documentation/property-grid-customization#category).
     * @see expandPropertyGridCategory
     */
    CreatorBase.prototype.collapsePropertyGridCategory = function (name) {
        if (!!this.designerPropertyGrid) {
            this.designerPropertyGrid.collapseCategory(name);
        }
    };
    /**
     * Expands a specified category in Property Grid.
     * @param name A [category name](https://surveyjs.io/survey-creator/documentation/property-grid-customization#category).
     * @see collapsePropertyGridCategory
     */
    CreatorBase.prototype.expandPropertyGridCategory = function (name) {
        if (!!this.designerPropertyGrid) {
            this.designerPropertyGrid.expandCategory(name);
        }
    };
    /**
     * Collapses all categories in Property Grid.
     * @see expandAllPropertyGridCategories
     */
    CreatorBase.prototype.collapseAllPropertyGridCategories = function () {
        if (!!this.designerPropertyGrid) {
            this.designerPropertyGrid.collapseAllCategories();
        }
    };
    /**
     * Expands all categories in Property Grid.
     * @see collapseAllPropertyGridCategories
     */
    CreatorBase.prototype.expandAllPropertyGridCategories = function () {
        if (!!this.designerPropertyGrid) {
            this.designerPropertyGrid.expandAllCategories();
        }
    };
    CreatorBase.prototype.collapseAllPropertyTabs = function () {
        this.collapseAllPropertyGridCategories();
    };
    CreatorBase.prototype.expandAllPropertyTabs = function () {
        this.expandAllPropertyGridCategories();
    };
    CreatorBase.prototype.expandPropertyTab = function (name) {
        this.expandPropertyGridCategory(name);
    };
    CreatorBase.prototype.collapsePropertyTab = function (name) {
        this.collapsePropertyGridCategory(name);
    };
    //#endregion Obsolete designerPropertyGrid
    /**
     * Validates the property values of the [focused element](#selectedElement).
     * @returns `true` if all property values of the focused element are valid or if no element is focused, `false` otherwise.
     * @see onSelectedElementChanging
     * @see onSelectedElementChanged
     */
    CreatorBase.prototype.validateSelectedElement = function () {
        var isValid = true;
        if (!this.selectedElement)
            return isValid;
        if (!!this.designerPropertyGrid) {
            isValid = this.designerPropertyGrid.validate();
        }
        /*
        var options = { errors: [] };
        this.onValidateSelectedElement.fire(this, options);
        return isValid && options.errors.length == 0;
        */
        return isValid;
    };
    /**
     * Deletes all custom translation strings for the passed locale from Survey Creator and from the generated survey JSON schema.
     * @param locale A locale code (for example, "en").
     */
    CreatorBase.prototype.deleteLocaleStrings = function (locale) {
        var translation = new _src_components_tabs_translation__WEBPACK_IMPORTED_MODULE_21__["Translation"](this.survey);
        translation.deleteLocaleStrings(locale);
    };
    CreatorBase.prototype.getPropertyGridExpandedCategory = function () {
        if (!this.designerPropertyGrid)
            return undefined;
        var panels = this.designerPropertyGrid.survey.getAllPanels();
        for (var i = 0; i < panels.length; i++) {
            if (panels[i].isExpanded)
                return panels[i].name;
        }
        return "";
    };
    CreatorBase.prototype.expandCategoryIfNeeded = function () {
        var expandedTabName = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].propertyGrid.defaultExpandedTabName;
        if (!!expandedTabName && !this.getPropertyGridExpandedCategory() && !this.survey.isEmpty) {
            var panel = this.designerPropertyGrid.survey.getPanelByName(expandedTabName);
            if (!!panel) {
                panel.expand();
            }
        }
    };
    CreatorBase.prototype.selectionChanged = function (element, propertyName, focus) {
        if (focus === void 0) { focus = true; }
        this.survey.currentPage = this.getCurrentPageByElement(element);
        this.selectionHistoryController.onObjSelected(element);
        if (this.designerPropertyGrid) {
            this.designerPropertyGrid.obj = element;
            if (!propertyName) {
                propertyName = this.designerPropertyGrid.currentlySelectedProperty;
            }
            if (!!propertyName) {
                this.designerPropertyGrid.selectProperty(propertyName, focus || !this.selectFromStringEditor);
            }
            this.expandCategoryIfNeeded();
            this.selectFromStringEditor = false;
        }
        var options = { newSelectedElement: element };
        this.onSelectedElementChanged.fire(this, options);
    };
    CreatorBase.prototype.getCurrentPageByElement = function (element) {
        if (!element)
            return undefined;
        if (element["isPage"])
            return element;
        if (!!element["page"])
            return element["page"];
        if (!!element["parentQuestion"])
            return this.getCurrentPageByElement(element["parentQuestion"]);
        return undefined;
    };
    CreatorBase.prototype.clickToolboxItem = function (newElement, panel, modifiedType) {
        if (panel === void 0) { panel = null; }
        if (modifiedType === void 0) { modifiedType = "ADDED_FROM_TOOLBOX"; }
        if (!this.readOnly) {
            if (newElement["getType"] === undefined) {
                newElement = this.createNewElement(newElement);
            }
            this.survey.lazyRendering = false;
            this.doClickQuestionCore(newElement, modifiedType, -1, panel);
            this.selectElement(newElement, null, true, this.startEditTitleOnQuestionAdded);
        }
    };
    CreatorBase.prototype.getJSONForNewElement = function (json) {
        var newElement = this.createNewElement(json);
        json = newElement.toJSON();
        json["type"] = newElement.getType();
        return json;
    };
    /**
     * Open file chooser dialog
     * @param input file input element
     * @param onFilesChosen a call back function to process chosen files
     */
    CreatorBase.prototype.chooseFiles = function (input, onFilesChosen) {
        if (this.onOpenFileChooser.isEmpty) {
            if (!window || !window["FileReader"])
                return;
            input.value = "";
            input.onchange = function (event) {
                if (!window["FileReader"])
                    return;
                if (!input || !input.files || input.files.length < 1)
                    return;
                var files = [];
                for (var i = 0; i < input.files.length; i++) {
                    files.push(input.files[i]);
                }
                onFilesChosen(files);
            };
            input.click();
        }
        else {
            this.onOpenFileChooser.fire(this, {
                input: input,
                callback: onFilesChosen
            });
        }
    };
    /**
     * Upload the files on a server
     * @param files files to upload
     * @param uploadingCallback a call back function to get the status on uploading the file and operation result - URI of the uploaded file
     */
    CreatorBase.prototype.uploadFiles = function (files, question, uploadingCallback) {
        if (this.onUploadFile.isEmpty) {
            var fileReader_1 = new FileReader();
            fileReader_1.onload = function (e) {
                uploadingCallback("success", fileReader_1.result);
            };
            fileReader_1.readAsDataURL(files[0]);
        }
        else {
            this.onUploadFile.fire(this, {
                question: question,
                files: files || [],
                callback: uploadingCallback
            });
        }
    };
    Object.defineProperty(CreatorBase.prototype, "rootElement", {
        get: function () {
            return this._rootElementValue;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.setRootElement = function (element) {
        this._rootElementValue = element;
        this.initKeyboardShortcuts(element);
        this.initResponsivityManager(element);
    };
    CreatorBase.prototype.unsubscribeRootElement = function () {
        this.removeKeyboardShortcuts(this._rootElementValue);
        this.resetResponsivityManager();
    };
    CreatorBase.prototype.initKeyboardShortcuts = function (rootNode) {
        if (!!rootNode) {
            rootNode.addEventListener("keydown", this.onKeyDownHandler);
        }
    };
    CreatorBase.prototype.removeKeyboardShortcuts = function (rootNode) {
        if (!!rootNode) {
            rootNode.removeEventListener("keydown", this.onKeyDownHandler);
        }
    };
    CreatorBase.prototype.registerShortcut = function (name, shortcut) {
        this.shortcuts[name] = shortcut;
    };
    CreatorBase.prototype.unRegisterShortcut = function (name) {
        delete this.shortcuts[name];
    };
    CreatorBase.prototype.deletePanelOrQuestion = function (obj) {
        var _this = this;
        var parent = obj["parent"];
        var elements = parent.elements;
        var objIndex = elements.indexOf(obj);
        if (objIndex == elements.length - 1) {
            objIndex--;
        }
        if (this.pageEditMode === "single" && parent.getType() === "page") {
            parent = this.survey;
        }
        if (obj["questions"]) {
            obj["questions"].forEach(function (q) { return _this.updateConditionsOnRemove(q); });
        }
        obj["delete"](false);
        this.selectElement(objIndex > -1 ? elements[objIndex] : parent);
    };
    CreatorBase.prototype.onCanShowObjectProperty = function (object, property, showMode, parentObj, parentProperty) {
        var options = {
            obj: object,
            property: property,
            canShow: true,
            showMode: showMode,
            parentObj: parentObj,
            parentProperty: parentProperty
        };
        this.onCanShowProperty.fire(this, options);
        return options.canShow;
    };
    CreatorBase.prototype.canDeleteItem = function (object, item, allowDelete) {
        var options = { obj: object, item: item, canDelete: allowDelete };
        this.onCanDeleteItem.fire(this, options);
        return options.canDelete;
    };
    CreatorBase.prototype.getErrorOnPropertyChanging = function (obj, propertyName, value) {
        if (propertyName !== "name")
            return null;
        if (_survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectType(obj) === _survey_helper__WEBPACK_IMPORTED_MODULE_9__["ObjType"].Unknown)
            return null;
        var hasError = false;
        if (_survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectType(obj) === _survey_helper__WEBPACK_IMPORTED_MODULE_9__["ObjType"].Column) {
            hasError = !!obj.colOwner
                ? !this.isNameUniqueInArray(obj.colOwner.columns, obj, value)
                : false;
        }
        else {
            hasError = this.generateUniqueName(obj, value) !== value;
        }
        return hasError ? this.getLocString("pe.propertyNameIsNotUnique") : null;
    };
    CreatorBase.prototype.generateUniqueName = function (el, newName) {
        var options = { element: el, name: newName, isUnique: true };
        do {
            if (!options.isUnique) {
                options.name = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].generateNewName(options.name);
            }
            while (!this.isNameUnique(el, options.name, false)) {
                options.name = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].generateNewName(options.name);
            }
            options.isUnique = true;
            var oldName = options.name;
            this.onGenerateNewName.fire(this, options);
            if (oldName != options.name) {
                options.isUnique = this.isNameUnique(el, options.name);
            }
        } while (!options.isUnique);
        return options.name;
    };
    CreatorBase.prototype.isNameUnique = function (el, newName, includeNewItems) {
        if (includeNewItems === void 0) { includeNewItems = true; }
        if (!this.isNameUniqueInArray(this.survey.pages, el, newName))
            return false;
        if (!this.isNameUniqueInArray(this.getAllPanels(includeNewItems), el, newName))
            return false;
        return this.isNameUniqueInArray(this.getAllQuestions(includeNewItems), el, newName);
    };
    CreatorBase.prototype.isNameUniqueInArray = function (elements, el, newName) {
        if (!Array.isArray(elements))
            return true;
        newName = newName.toLowerCase();
        for (var i = 0; i < elements.length; i++) {
            if (elements[i] != el && elements[i].name.toLowerCase() == newName)
                return false;
        }
        return true;
    };
    CreatorBase.prototype.doPropertyGridChanged = function () { };
    Object.defineProperty(CreatorBase.prototype, "alwaySaveTextInPropertyEditors", {
        //implements ISurveyCreatorOptions
        get: function () {
            return this.alwaySaveTextInPropertyEditorsValue;
        },
        set: function (value) {
            this.alwaySaveTextInPropertyEditorsValue = value;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.onCanShowPropertyCallback = function (object, property, showMode, parentObj, parentProperty) {
        if (showMode === void 0) { showMode = null; }
        return this.onCanShowObjectProperty(object, property, showMode, parentObj, parentProperty);
    };
    CreatorBase.prototype.onPropertyGridSurveyCreatedCallback = function (object, survey) {
        var options = { obj: object, survey: survey };
        this.onPropertyGridSurveyCreated.fire(this, options);
    };
    CreatorBase.prototype.onPropertyEditorCreatedCallback = function (object, property, editor) {
        var options = { obj: object, property: property, editor: editor };
        this.onPropertyEditorCreated.fire(this, options);
    };
    CreatorBase.prototype.onPropertyEditorUpdateTitleActionsCallback = function (object, property, editor, titleActions) {
        var options = { obj: object, property: property, editor: editor, titleActions: titleActions };
        this.onPropertyEditorUpdateTitleActions.fire(this, options);
    };
    CreatorBase.prototype.onPropertyGridShowModalCallback = function (object, property, editor, popupEditor, popupModel) {
        var options = { obj: object, property: property, editor: editor, popupEditor: popupEditor, popupModel: popupModel };
        this.onPropertyGridShowModal.fire(this, options);
    };
    CreatorBase.prototype.onCanDeleteItemCallback = function (object, item, allowDelete) {
        return this.canDeleteItem(object, item, allowDelete);
    };
    CreatorBase.prototype.onCollectionItemDeletingCallback = function (obj, property, collection, item) {
        if (this.onCollectionItemDeleting.isEmpty)
            return true;
        var options = {
            obj: obj,
            property: property,
            propertyName: property.name,
            collection: collection,
            item: item,
            allowDelete: true
        };
        this.onCollectionItemDeleting.fire(this, options);
        return options.allowDelete;
    };
    CreatorBase.prototype.onCollectionItemAllowingCallback = function (obj, property, collection, item, itemOptions) {
        if (this.onCollectionItemAllowOperations.isEmpty)
            return;
        var options = {
            obj: obj,
            property: property,
            propertyName: property && property.name,
            collection: collection,
            item: item,
            allowEdit: itemOptions.allowEdit,
            allowDelete: itemOptions.allowDelete,
            allowAdd: itemOptions.allowAdd
        };
        this.onCollectionItemAllowOperations.fire(this, options);
        itemOptions.allowEdit = options.allowEdit;
        itemOptions.allowDelete = options.allowDelete;
        itemOptions.allowAdd = options.allowAdd;
    };
    CreatorBase.prototype.onItemValueAddedCallback = function (obj, propertyName, itemValue, itemValues) {
        var options = {
            obj: obj,
            propertyName: propertyName,
            newItem: itemValue,
            itemValues: itemValues
        };
        this.onItemValueAdded.fire(this, options);
    };
    CreatorBase.prototype.onMatrixDropdownColumnAddedCallback = function (matrix, column, columns) {
        var options = { newColumn: column, matrix: matrix, columns: columns };
        this.onMatrixColumnAdded.fire(this, options);
    };
    CreatorBase.prototype.onSetPropertyEditorOptionsCallback = function (propertyName, obj, editorOptions) {
        var options = {
            propertyName: propertyName,
            obj: obj,
            editorOptions: editorOptions
        };
        this.onSetPropertyEditorOptions.fire(this, options);
    };
    CreatorBase.prototype.onGetErrorTextOnValidationCallback = function (propertyName, obj, value) {
        var error = this.getErrorOnPropertyChanging(obj, propertyName, value);
        if (!!error)
            return error;
        var options = {
            propertyName: propertyName,
            obj: obj,
            value: value,
            error: ""
        };
        this.onPropertyValidationCustomError.fire(this, options);
        return options.error;
    };
    CreatorBase.prototype.onValueChangingCallback = function (options) {
        this.onPropertyValueChanging.fire(this, options);
    };
    CreatorBase.prototype.onGetElementEditorTitleCallback = function (obj, title) {
        return title;
    };
    CreatorBase.prototype.onConditionQuestionsGetListCallback = function (propertyName, obj, editor, list) {
        if (this.onConditionQuestionsGetList.isEmpty)
            return "asc";
        var options = {
            propertyName: propertyName,
            obj: obj,
            editor: editor,
            sortOrder: "asc",
            list: list
        };
        this.onConditionQuestionsGetList.fire(this, options);
        if (options.list !== list) {
            list.splice(0, list.length);
            for (var i = 0; i < options.list.length; i++) {
                list.push(options.list[i]);
            }
        }
        return options.sortOrder;
    };
    CreatorBase.prototype.onConditionGetTitleCallback = function (expression, title) {
        var options = {
            expression: expression,
            title: title,
        };
        this.onConditionGetTitle.fire(this, options);
        return options.title;
    };
    CreatorBase.prototype.isConditionOperatorEnabled = function (questionName, question, operator, isEnabled) {
        if (this.onGetConditionOperator.isEmpty)
            return isEnabled;
        var options = {
            questionName: questionName,
            question: question,
            questionType: !!question ? question.getType() : "",
            operator: operator,
            show: isEnabled
        };
        this.onGetConditionOperator.fire(this, options);
        return options.show;
    };
    CreatorBase.prototype.onLogicGetTitleCallback = function (expression, expressionText, text, logicItem) {
        if (this.onLogicItemDisplayText.isEmpty)
            return text;
        var options = {
            expression: expression,
            expressionText: expressionText,
            text: text,
            logicItem: logicItem
        };
        this.onLogicItemDisplayText.fire(this, options);
        return options.text;
    };
    CreatorBase.prototype.getProcessedTranslationItemText = function (locale, locString, newText, obj) {
        if (this.onTranslationItemChanging.isEmpty)
            return newText;
        var options = {
            locale: locale,
            obj: obj,
            locString: locString,
            newText: newText
        };
        this.onTranslationItemChanging.fire(this, options);
        return options.newText;
    };
    CreatorBase.prototype.getTranslationExportedText = function (obj, name, locString, locale, text) {
        if (this.onTranslationExportItem.isEmpty)
            return text;
        var options = {
            obj: obj,
            locString: locString,
            locale: locale,
            text: text
        };
        this.onTranslationExportItem.fire(this, options);
        return options.text;
    };
    CreatorBase.prototype.getHasMachineTranslation = function () {
        return !this.onMachineTranslate.isEmpty;
    };
    CreatorBase.prototype.doMachineTranslation = function (fromLocale, toLocale, strings, callback) {
        if (!this.getHasMachineTranslation()) {
            callback(undefined);
        }
        else {
            this.onMachineTranslate.fire(this, { fromLocale: fromLocale, toLocale: toLocale, strings: strings, callback: callback });
        }
    };
    CreatorBase.prototype.doAutoSave = function () {
        var _this = this;
        var saveFunc = function () { return _this.doSave(); };
        if (this.autoSaveDelay <= 0) {
            saveFunc();
            return;
        }
        if (!!this.autoSaveTimerId) {
            clearTimeout(this.autoSaveTimerId);
        }
        var self = this;
        this.autoSaveTimerId = setTimeout(function () {
            clearTimeout(self.autoSaveTimerId);
            self.autoSaveTimerId = null;
            saveFunc();
        }, this.autoSaveDelay);
    };
    CreatorBase.prototype.doSave = function () {
        var _this = this;
        this.setState("saving");
        if (this.saveSurveyFunc) {
            this.saveNo++;
            this.saveSurveyFunc(this.saveNo, function (no, isSuccess) {
                if (_this.saveNo !== no)
                    return;
                if (isSuccess) {
                    _this.setState("saved");
                }
                else {
                    _this.setState("modified");
                    if (_this.showErrorOnFailedSave) {
                        _this.notify(_this.getLocString("ed.saveError"), "error");
                    }
                }
            });
        }
    };
    Object.defineProperty(CreatorBase.prototype, "saveSurveyFunc", {
        /**
         * A function that is called each time users click the [Save button](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#showSaveButton) or [auto-save](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#isAutoSave) is triggered to save a survey JSON schema.
         *
         * For more information, refer to the Save and Load Survey Model Schemas help topic for your framework: [Angular](https://surveyjs.io/survey-creator/documentation/get-started-angular#save-and-load-survey-model-schemas) | [Vue](https://surveyjs.io/survey-creator/documentation/get-started-vue#save-and-load-survey-model-schemas) | [React](https://surveyjs.io/survey-creator/documentation/get-started-react#save-and-load-survey-model-schemas) | [Knockout / jQuery](https://surveyjs.io/survey-creator/documentation/get-started-knockout-jquery).
         * @see saveThemeFunc
         */
        get: function () {
            return this.saveSurveyFuncValue;
        },
        set: function (value) {
            this.saveSurveyFuncValue = value;
            this.showSaveButton = value != null && !this.isAutoSave;
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.convertCurrentQuestion = function (newType) {
        var el = this.selectedElement;
        if (!el || el.getType() === newType)
            return;
        var objType = _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getObjectType(el);
        if (objType !== _survey_helper__WEBPACK_IMPORTED_MODULE_9__["ObjType"].Question && objType !== _survey_helper__WEBPACK_IMPORTED_MODULE_9__["ObjType"].Panel)
            return;
        el = this.convertQuestion(el, newType);
        this.selectElement(el, null, "#convertTo button");
    };
    CreatorBase.prototype.getAddNewQuestionText = function (currentAddQuestionType) {
        if (currentAddQuestionType === void 0) { currentAddQuestionType = null; }
        if (!currentAddQuestionType)
            currentAddQuestionType = this.currentAddQuestionType;
        if (!!currentAddQuestionType) {
            var str = this.getLocString("ed.addNewTypeQuestion");
            if (!!str && !!str["format"])
                return str["format"](this.toolbox.items.filter(function (item) { return item.name == currentAddQuestionType; })[0].title);
        }
        return this.getLocString("ed.addNewQuestion");
    };
    Object.defineProperty(CreatorBase.prototype, "addNewQuestionText", {
        get: function () {
            return this.getAddNewQuestionText();
        },
        enumerable: false,
        configurable: true
    });
    CreatorBase.prototype.getAvailableToolboxItems = function (element, isAddNew) {
        if (isAddNew === void 0) { isAddNew = true; }
        var res = [].concat(this.toolbox.items);
        if (!element || this.maxNestedPanels < 0)
            return res;
        if (!isAddNew && element.isPanel)
            return res;
        if (this.maxNestedPanels < _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].getElementDeepLength(element)) {
            for (var i = res.length - 1; i >= 0; i--) {
                if (res[i].isPanel) {
                    res.splice(i, 1);
                }
            }
        }
        return res;
    };
    CreatorBase.prototype.getQuestionTypeSelectorModel = function (beforeAdd, element) {
        var _this = this;
        var panel = !!element && element.isPanel ? element : null;
        var availableTypes = this.getAvailableToolboxItems(element).map(function (item) {
            return _this.createIActionBarItemByClass(item.name, item.title, item.iconName, item.needSeparator);
        });
        var listModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ListModel"](availableTypes, function (item) {
            _this.currentAddQuestionType = item.id;
            _this.addNewQuestionInPage(beforeAdd, panel);
            popupModel.toggleVisibility();
        }, false);
        listModel.locOwner = this;
        var popupModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["PopupModel"]("sv-list", { model: listModel }, "bottom", "center");
        popupModel.displayMode = this.isTouch ? "overlay" : "popup";
        return {
            iconName: "icon-more",
            title: this.getLocString("ed.addNewQuestion"),
            action: function () {
                popupModel.toggleVisibility();
            },
            popupModel: popupModel
        };
    };
    CreatorBase.prototype.getUpdatedPageAdornerFooterActions = function (pageAdorner, actions) {
        var options = {
            page: pageAdorner.page,
            addNewQuestion: function (type) { pageAdorner.addNewQuestion(pageAdorner, undefined, type); },
            actions: actions
        };
        this.onGetPageActions.fire(this, options);
        return options.actions;
    };
    CreatorBase.prototype.addNewQuestionInPage = function (beforeAdd, panel, type) {
        if (panel === void 0) { panel = null; }
        if (type === void 0) { type = null; }
        if (!type)
            type = this.currentAddQuestionType;
        if (!type)
            type = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].designer.defaultAddQuestionType;
        beforeAdd(type);
        var json = { type: type };
        var toolboxItem = this.toolbox.getItemByName(type);
        if (!!toolboxItem && !!toolboxItem.json) {
            json = toolboxItem.json;
        }
        var newElement = this.createNewElement(json);
        this.clickToolboxItem(newElement, panel, "ADDED_FROM_PAGEBUTTON");
    };
    CreatorBase.prototype.createIActionBarItemByClass = function (className, title, iconName, needSeparator) {
        var action = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            title: title,
            id: className,
            iconName: iconName,
        });
        action.needSeparator = needSeparator;
        return action;
    };
    CreatorBase.prototype.onElementMenuItemsChanged = function (element, items) {
        this.onDefineElementMenuItems.fire(this, {
            obj: element,
            items: items
        });
    };
    CreatorBase.prototype.getElementAllowOperations = function (element) {
        var options = {
            obj: element,
            element: element,
            allowDelete: true,
            allowCopy: true,
            allowDragging: true,
            allowChangeType: true,
            allowChangeInputType: true,
            allowChangeRequired: true,
            allowEdit: undefined
        };
        this.onElementAllowOperations.fire(this, options);
        return options;
    };
    CreatorBase.prototype.getChoicesItemBaseTitle = function () {
        return this.getLocString("ed.choices_Item") || survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getString("choices_Item");
    };
    CreatorBase.prototype.getNextItemValue = function (question) {
        var itemText = this.getChoicesItemBaseTitle();
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["getNextItemValue"])(itemText, question.choices);
    };
    CreatorBase.prototype.createNewItemValue = function (question, callEvent, callback) {
        if (callEvent === void 0) { callEvent = true; }
        var nextValue = this.getNextItemValue(question);
        var res = question.createItemValue(nextValue);
        res.text = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["getNextItemText"])(question.choices);
        question.choices.push(res);
        if (callback) {
            callback(res);
        }
        if (callEvent) {
            var propName = !!res.ownerPropertyName ? res.ownerPropertyName : "choices";
            this.onItemValueAddedCallback(question, propName, res, question.choices);
        }
        return res;
    };
    CreatorBase.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        var _this = this;
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "viewType") {
            this.tabs.forEach(function (tab) {
                var isActive = _this.viewType === tab.id;
                tab.active = isActive;
                tab.disableHide = isActive;
            });
        }
    };
    CreatorBase.prototype.initResponsivityManager = function (container) {
        this.responsivityManager = new _creator_responsivity_manager__WEBPACK_IMPORTED_MODULE_19__["CreatorResponsivityManager"](container, this);
    };
    CreatorBase.prototype.resetResponsivityManager = function () {
        if (!!this.responsivityManager) {
            this.responsivityManager.dispose();
            this.responsivityManager = undefined;
        }
    };
    CreatorBase.prototype.dispose = function () {
        var _this = this;
        this.isCreatorDisposed = true;
        this.tabs = [];
        Object.keys(this.plugins).forEach(function (pluginName) {
            var plugin = _this.plugins[pluginName];
            if (typeof plugin.deactivate === "function") {
                plugin.deactivate();
            }
            if (typeof plugin.dispose === "function") {
                plugin.dispose();
            }
        });
        _super.prototype.dispose.call(this);
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "showDesignerTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "showJSONEditorTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "showTestSurveyTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showThemeTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showTranslationTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showLogicTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "useTableViewInLogicTab", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: 200 })
    ], CreatorBase.prototype, "pageHoverDelay", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "inplaceEditForValues", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "isAutoSave", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], CreatorBase.prototype, "showOptions", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showSearch", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "generateValidJSON", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "" })
    ], CreatorBase.prototype, "currentAddQuestionType", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "landscape" })
    ], CreatorBase.prototype, "previewOrientation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], CreatorBase.prototype, "surveyValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], CreatorBase.prototype, "viewType", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "showToolboxValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], CreatorBase.prototype, "showSidebarValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["undoRedoTransaction"])()
    ], CreatorBase.prototype, "addPage", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["ignoreUndoRedo"])()
    ], CreatorBase.prototype, "doOnQuestionAdded", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["ignoreUndoRedo"])()
    ], CreatorBase.prototype, "doOnPanelAdded", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["ignoreUndoRedo"])()
    ], CreatorBase.prototype, "doOnPageAdded", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["undoRedoTransaction"])()
    ], CreatorBase.prototype, "deleteObject", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showSaveButton", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["undoRedoTransaction"])()
    ], CreatorBase.prototype, "convertCurrentQuestion", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(_plugins_undo_redo__WEBPACK_IMPORTED_MODULE_17__["undoRedoTransaction"])()
    ], CreatorBase.prototype, "addNewQuestionInPage", null);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "showHeaderInEmptySurvey", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "showPageNavigator", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ getDefaultValue: function () { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].layout.showTabs; } })
    ], CreatorBase.prototype, "showTabs", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ getDefaultValue: function () { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].layout.showToolbar; } })
    ], CreatorBase.prototype, "showToolbar", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ getDefaultValue: function () { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].layout.allowCollapseSidebar; } })
    ], CreatorBase.prototype, "allowCollapseSidebar", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (val, creator) {
                creator.survey.setIsMobile(!!val);
            }
        })
    ], CreatorBase.prototype, "isMobileView", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], CreatorBase.prototype, "isTouch", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: "left",
            onSet: function (newValue, target) {
                if (!target.toolbox)
                    return;
                target.toolbox.setLocation(newValue);
                target.updateToolboxIsCompact();
            }
        })
    ], CreatorBase.prototype, "toolboxLocation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "right" })
    ], CreatorBase.prototype, "sidebarLocation", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (newValue, target) {
                if (!newValue) {
                    throw new Error("Creator is disposed");
                }
            }
        })
    ], CreatorBase.prototype, "isCreatorDisposed", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], CreatorBase.prototype, "enableLinkFileEditor", void 0);
    return CreatorBase;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var SurveyCreatorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyCreatorModel, _super);
    function SurveyCreatorModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SurveyCreatorModel;
}(CreatorBase));

var StylesManager = /** @class */ (function () {
    function StylesManager() {
    }
    Object.defineProperty(StylesManager, "currentTheme", {
        get: function () {
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("StylesManager");
            return undefined;
        },
        set: function (val) {
            _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("StylesManager");
        },
        enumerable: false,
        configurable: true
    });
    StylesManager.applyTheme = function (name) {
        _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("StylesManager");
    };
    return StylesManager;
}());

function initializeDesignTimeSurveyModel(model, creator) {
    model.creator = creator;
    model.isPopupEditorContent = false;
    var getElementWrapperComponentNamePrev = model.getElementWrapperComponentName;
    model.getElementWrapperComponentName = function (element, reason) {
        var componentName = getElementWrapperComponentName(element, reason, model.isPopupEditorContent);
        return componentName || getElementWrapperComponentNamePrev.call(model, element, reason);
    };
    var getQuestionContentWrapperComponentNamePrev = model.getQuestionContentWrapperComponentName;
    model.getQuestionContentWrapperComponentName = function (element, reason) {
        var componentName = getQuestionContentWrapperComponentName(element);
        return (componentName || getQuestionContentWrapperComponentNamePrev.call(model, element, reason));
    };
    var getElementWrapperComponentDataPrev = model.getElementWrapperComponentData;
    model.getElementWrapperComponentData = function (element, reason) {
        var data = getElementWrapperComponentData(element, reason, creator);
        return data || getElementWrapperComponentDataPrev.call(model, element, reason);
    };
    model.getRowWrapperComponentName = function (row) {
        return "svc-row";
    };
    model.getRowWrapperComponentData = function (row) {
        return {
            creator: creator,
            row: row
        };
    };
    model.getItemValueWrapperComponentName = function (item, question) {
        return getItemValueWrapperComponentName(item, question);
    };
    model.getItemValueWrapperComponentData = function (item, question) {
        return getItemValueWrapperComponentData(item, question, creator);
    };
    model.getRendererForString = function (element, name) {
        if (!creator.readOnly && isStringEditable(element, name)) {
            return editableStringRendererName;
        }
        return undefined;
    };
    model.getRendererContextForString = function (element, locStr) {
        if (!creator.readOnly && isStringEditable(element, locStr.name)) {
            return {
                creator: creator,
                element: element,
                locStr: locStr
            };
        }
        return locStr;
    };
}
function isContentElement(element) {
    var current = element;
    while (!!current) {
        if (current.isContentElement) {
            return true;
        }
        current = current.parentQuestion;
    }
    return false;
}
var editableStringRendererName = "svc-string-editor";
function getElementWrapperComponentName(element, reason, isPopupEditorContent) {
    if (reason === "logo-image") {
        return "svc-logo-image";
    }
    if (reason === "cell" || reason === "column-header" || reason === "row-header") {
        return "svc-matrix-cell";
    }
    if (!isContentElement(element)) {
        if (element instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["Question"]) {
            var isDropdown = element.isDescendantOf("dropdown") || element.isDescendantOf("tagbox");
            if (isPopupEditorContent) {
                return isDropdown ? "svc-cell-dropdown-question" : "svc-cell-question";
            }
            if (element.customWidget) {
                return "svc-widget-question";
            }
            if (isDropdown) {
                return "svc-dropdown-question";
            }
            if (element.isDescendantOf("image")) {
                return "svc-image-question";
            }
            return "svc-question";
        }
        if (element instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["PanelModel"]) {
            return "svc-panel";
        }
    }
    return undefined;
}
function getQuestionContentWrapperComponentName(element) {
    if (element.isDescendantOf("rating") && !isContentElement(element)) {
        return "svc-rating-question-content";
    }
    return undefined;
}
function getElementWrapperComponentData(element, reason, creator) {
    if (reason === "logo-image")
        return creator;
    if (reason === "cell" ||
        reason === "column-header" ||
        reason === "row-header") {
        return {
            creator: creator,
            element: element,
            question: element.question,
            row: element.row,
            column: element.column
        };
    }
    var hasWrapper = getElementWrapperComponentName(element, reason, false);
    if (!hasWrapper)
        return undefined;
    if (element instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["Question"])
        return creator;
    if (element instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["PanelModel"])
        return creator;
    return null;
}
function getItemValueWrapperComponentName(item, question) {
    if (isContentElement(question)) {
        return survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"].TemplateRendererComponentName;
    }
    if (question.isDescendantOf("imagepicker")) {
        return "svc-image-item-value";
    }
    return "svc-item-value";
}
function getItemValueWrapperComponentData(item, question, creator) {
    if (question.isContentElement) {
        return item;
    }
    return {
        creator: creator,
        question: question,
        item: item
    };
}
function isStringEditable(element, name) {
    var parentIsMatrix = !!element.data && element.parentQuestion instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionMatrixDropdownModelBase"];
    return !parentIsMatrix && (!isContentElement(element) || element.isEditableTemplateElement);
}
function isTextInput(target) {
    if (!target.tagName)
        return false;
    var tagName = target.tagName.toLowerCase();
    if (["input", "textarea"].indexOf(tagName) !== -1)
        return true;
    if (["span", "div"].indexOf(tagName) !== -1) {
        return target.isContentEditable;
    }
    return false;
}
function registerAdorner(name, adorner) {
    _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("registerAdorner", "This functionality is no longer supported.");
}
function removeAdorners(names) {
    if (names === void 0) { names = undefined; }
    _survey_helper__WEBPACK_IMPORTED_MODULE_9__["SurveyHelper"].warnNonSupported("removeAdorners", "This functionality is no longer supported.");
}


/***/ }),

/***/ "./src/creator-responsivity-manager.ts":
/*!*********************************************!*\
  !*** ./src/creator-responsivity-manager.ts ***!
  \*********************************************/
/*! exports provided: CreatorResponsivityManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreatorResponsivityManager", function() { return CreatorResponsivityManager; });
__webpack_require__(/*! ./responsivity.scss */ "./src/responsivity.scss");
var CreatorResponsivityManager = /** @class */ (function () {
    function CreatorResponsivityManager(container, creator) {
        var _this = this;
        this.container = container;
        this.creator = creator;
        this.resizeObserver = undefined;
        if (typeof ResizeObserver !== "undefined") {
            this.resizeObserver = new ResizeObserver(function (_) { return _this.process(); });
            this.resizeObserver.observe(this.findCorrectParent(this.container));
            this.process();
            if (this.currentWidth == "xs" || this.currentWidth == "s" || this.currentWidth === "m") {
                this.creator.setShowSidebar(false);
            }
        }
    }
    CreatorResponsivityManager.prototype.getScreenWidth = function () {
        var _this = this;
        var res;
        Object.keys(CreatorResponsivityManager.screenSizeBreakpoints).forEach(function (mode) {
            var breakpoint = CreatorResponsivityManager.screenSizeBreakpoints[mode];
            if (!res && _this.container && !!breakpoint && _this.container.offsetWidth >= breakpoint) {
                res = mode;
            }
        });
        return res || "xs";
    };
    CreatorResponsivityManager.prototype.initMobileView = function () {
        this.creator.showTabs = false;
        this.creator.showToolbar = false;
        this.creator.isMobileView = true;
    };
    CreatorResponsivityManager.prototype.resetMobileView = function () {
        this.creator.showTabs = undefined;
        this.creator.showToolbar = undefined;
        this.creator.isMobileView = undefined;
    };
    CreatorResponsivityManager.prototype.procesShowToolbox = function (toolboxVisible) {
        if (toolboxVisible && !this.creator.showToolbox && this.prevShowToolbox !== undefined) {
            this.creator.showToolbox = this.prevShowToolbox;
            this.prevShowToolbox = undefined;
        }
        else if (!toolboxVisible && this.creator.showToolbox && this.prevShowToolbox === undefined) {
            this.prevShowToolbox = this.creator.showToolbox;
            this.creator.showToolbox = false;
        }
    };
    CreatorResponsivityManager.prototype.procesShowPageNavigator = function (pageNavigatorVisibility) {
        if (this.creator.pageEditMode === "bypage") {
            this.creator.showPageNavigator = true;
            return;
        }
        if (pageNavigatorVisibility && !this.creator.showPageNavigator && this.prevShowPageNavigator !== undefined) {
            this.creator.showPageNavigator = this.prevShowPageNavigator;
            this.prevShowPageNavigator = undefined;
        }
        else if (!pageNavigatorVisibility && this.creator.showPageNavigator && this.prevShowPageNavigator === undefined) {
            this.prevShowPageNavigator = this.creator.showPageNavigator;
            this.creator.showPageNavigator = false;
        }
    };
    CreatorResponsivityManager.prototype.findCorrectParent = function (container) {
        if (!!(window === null || window === void 0 ? void 0 : window.getComputedStyle)) {
            if (window.getComputedStyle(container.parentElement).display === "inline") {
                return this.findCorrectParent(container.parentElement);
            }
        }
        return container.parentElement;
    };
    CreatorResponsivityManager.prototype._process = function (toolboxIsCompact, toolboxVisible, flyoutSidebar) {
        this.creator.updateToolboxIsCompact(toolboxIsCompact);
        this.procesShowToolbox(toolboxVisible);
        this.procesShowPageNavigator(toolboxVisible);
        this.creator.sidebar.flyoutMode = flyoutSidebar;
        if (this.creator.sidebar.visible && !flyoutSidebar) {
            this.creator.sidebar.collapsedManually = false;
        }
        if (this.creator.sidebar.visible && !this.creator.sidebar.expandedManually && flyoutSidebar && this.creator.toolboxLocation != "right") {
            this.creator.sidebar.collapseSidebar();
        }
        if (!this.creator.sidebar.visible && !this.creator.sidebar.collapsedManually && !flyoutSidebar && this.creator.toolboxLocation != "right") {
            this.creator.sidebar.expandSidebar();
        }
    };
    CreatorResponsivityManager.prototype.process = function () {
        this.currentWidth = this.getScreenWidth();
        if (this.currentWidth === "xl" || this.currentWidth === "xxl") {
            this._process(false, true, false);
        }
        else if (this.currentWidth === "l") {
            this._process(true, true, false);
        }
        else if (this.currentWidth === "m") {
            this._process(true, true, true);
        }
        else {
            this._process(true, false, true);
        }
        if (this.currentWidth == "xs") {
            this.initMobileView();
        }
        else {
            this.resetMobileView();
        }
    };
    CreatorResponsivityManager.prototype.dispose = function () {
        if (!!this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    };
    CreatorResponsivityManager.screenSizeBreakpoints = {
        "xxl": 1800,
        "xl": 1500,
        "l": 1200,
        "m": 900,
        "s": 600,
    };
    return CreatorResponsivityManager;
}());



/***/ }),

/***/ "./src/creator-settings.ts":
/*!*********************************!*\
  !*** ./src/creator-settings.ts ***!
  \*********************************/
/*! exports provided: QuestionConvertMode, settings, EmptySurveyCreatorOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionConvertMode", function() { return QuestionConvertMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return settings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmptySurveyCreatorOptions", function() { return EmptySurveyCreatorOptions; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

/**
 * List available question convert modes
 */
var QuestionConvertMode;
(function (QuestionConvertMode) {
    QuestionConvertMode[QuestionConvertMode["AllTypes"] = 0] = "AllTypes";
    QuestionConvertMode[QuestionConvertMode["CompatibleTypes"] = 1] = "CompatibleTypes";
})(QuestionConvertMode || (QuestionConvertMode = {}));
var settings = {
    translation: {
        sortByName: false,
        //Set it to \xef\xbb\xbf; to tell system that it is UTF8 file. You can use other prefix as well
        exportPrefix: "",
        /**
         * The maximum number of locales that user can select at once for translation
         */
        maximumSelectedLocales: 7,
        /**
         * The name of the translation export file in csv format
         */
        exportFileName: "survey_translation.csv"
    },
    theme: {
        exportFileName: "survey_theme.json",
        fontFamily: "Open Sans",
        allowEditHeaderSettings: false,
    },
    operators: {
        empty: [],
        notempty: [],
        equal: ["!file"],
        notequal: ["!file"],
        contains: ["checkbox", "text", "comment"],
        notcontains: ["checkbox", "text", "comment"],
        anyof: ["selectbase"],
        allof: ["checkbox"],
        greater: ["!checkbox", "!imagepicker", "!boolean", "!file"],
        less: ["!checkbox", "!imagepicker", "!boolean", "!file"],
        greaterorequal: ["!checkbox", "!imagepicker", "!boolean", "!file"],
        lessorequal: ["!checkbox", "!imagepicker", "!boolean", "!file"]
    },
    defaultNewSurveyJSON: {},
    designer: {
        /**
         * The default question type on clicking Add Question button.
         */
        defaultAddQuestionType: "text",
        /**
         * Set this property to false, to hide "Add Question" button on designer surface
         */
        showAddQuestionButton: true
    },
    logic: {
        get defaultOperator() { return settings.logic.defaultOperators.default; },
        set defaultOperator(val) { settings.logic.defaultOperators.default = val; },
        defaultOperators: {
            default: "equal",
            checkbox: "allof",
            tagbox: "allof"
        },
        visibleActions: [],
        logicItemTitleMaxChars: 50,
        openBracket: "{",
        closeBracket: "}",
        /**
         * Set these properties to false if you don't want to update expressions on changing question and column names and on changing choices values
         */
        updateExpressionsOnChanging: {
            questionName: true,
            columnName: true,
            choiceValue: true
        }
    },
    /**
     * Determines which types of questions the conversion will be available for.
     */
    questionConvertMode: QuestionConvertMode.AllTypes,
    propertyGrid: {
        useButtonGroup: true,
        maxCharsInButtonGroup: 25,
        showNavigationButtons: false,
        maximumColumnsCount: 0,
        minimumChoicesCount: 0,
        maximumChoicesCount: 0,
        maximumRowsCount: 0,
        maximumRateValues: 0,
        generalTabName: "general",
        defaultExpandedTabName: "general"
    },
    toolbox: {
        /**
         * Use it to change the default question JSON on dropping it into designer or converting questions
         */
        defaultJSON: {
            dropdown: {
                choices: ["Item 1", "Item 2", "Item 3"]
            },
            tagbox: {
                choices: ["Item 1", "Item 2", "Item 3"]
            },
            checkbox: {
                choices: ["Item 1", "Item 2", "Item 3"]
            },
            radiogroup: {
                choices: ["Item 1", "Item 2", "Item 3"]
            },
            ranking: {
                choices: ["Item 1", "Item 2", "Item 3"]
            },
            imagepicker: {
                imageFit: "cover",
                choices: [
                    {
                        value: "Image 1",
                        imageLink: "https://surveyjs.io/Content/Images/examples/image-picker/lion.jpg"
                    },
                    {
                        value: "Image 2",
                        imageLink: "https://surveyjs.io/Content/Images/examples/image-picker/giraffe.jpg"
                    },
                    {
                        value: "Image 3",
                        imageLink: "https://surveyjs.io/Content/Images/examples/image-picker/panda.jpg"
                    },
                    {
                        value: "Image 4",
                        imageLink: "https://surveyjs.io/Content/Images/examples/image-picker/camel.jpg"
                    }
                ]
            },
            image: {
                imageFit: "cover",
                imageHeight: "auto",
                imageWidth: "100%"
            }
        }
    },
    /**
     * Notification settings
     */
    notifications: {
        lifetime: 2000
    },
    /**
     * Auto save parameters
     */
    autoSave: {
        delay: 500
    },
    /**
     * Drag Drop Settings
     */
    dragDrop: {
        restrictDragQuestionBetweenPages: false,
        allowDragToTheSameLine: true
    },
    /**
     * Creator layout settings
     */
    layout: {
        showTabs: true,
        showToolbar: true,
        allowCollapseSidebar: true
    },
    jsonEditor: {
        indentation: 1,
        exportFileName: "survey.json"
    }
};
var EmptySurveyCreatorOptions = /** @class */ (function () {
    function EmptySurveyCreatorOptions() {
        this.isMobileView = false;
        this.allowEditExpressionsInTextEditor = true;
        this.maximumColumnsCount = settings.propertyGrid.maximumColumnsCount;
        this.minimumChoicesCount = settings.propertyGrid.minimumChoicesCount;
        this.maximumChoicesCount = settings.propertyGrid.maximumChoicesCount;
        this.maximumRowsCount = settings.propertyGrid.maximumRowsCount;
        this.maximumRateValues = settings.propertyGrid.maximumRateValues;
        this.machineTranslationValue = false;
        this.inplaceEditForValues = false;
        this.maxNestedPanels = -1;
    }
    EmptySurveyCreatorOptions.prototype.getProcessedTranslationItemText = function (locale, locString, newText, obj) {
        return newText;
    };
    EmptySurveyCreatorOptions.prototype.getObjectDisplayName = function (obj, area, reason, displayName) {
        return displayName;
    };
    EmptySurveyCreatorOptions.prototype.onCanShowPropertyCallback = function (object, property, showMode, parentObj, parentProperty) {
        return true;
    };
    EmptySurveyCreatorOptions.prototype.onPropertyGridSurveyCreatedCallback = function (object, survey) { };
    EmptySurveyCreatorOptions.prototype.onPropertyEditorCreatedCallback = function (object, property, editor) { };
    EmptySurveyCreatorOptions.prototype.onPropertyEditorUpdateTitleActionsCallback = function (object, property, editor, titleActions) { };
    EmptySurveyCreatorOptions.prototype.onPropertyGridShowModalCallback = function (object, property, editor, popupEditor, popupModel) { };
    EmptySurveyCreatorOptions.prototype.onIsPropertyReadOnlyCallback = function (obj, property, readOnly, parentObj, parentProperty) {
        return readOnly;
    };
    EmptySurveyCreatorOptions.prototype.onCanDeleteItemCallback = function (object, item, allowDelete) {
        return allowDelete;
    };
    EmptySurveyCreatorOptions.prototype.onCollectionItemDeletingCallback = function (obj, property, collection, item) {
        return true;
    };
    EmptySurveyCreatorOptions.prototype.onCollectionItemAllowingCallback = function (obj, property, collection, item, options) { };
    EmptySurveyCreatorOptions.prototype.onItemValueAddedCallback = function (obj, propertyName, itemValue, itemValues) { };
    EmptySurveyCreatorOptions.prototype.onMatrixDropdownColumnAddedCallback = function (matrix, column, columns) { };
    EmptySurveyCreatorOptions.prototype.onSetPropertyEditorOptionsCallback = function (propertyName, obj, editorOptions) { };
    EmptySurveyCreatorOptions.prototype.onGetErrorTextOnValidationCallback = function (propertyName, obj, value) {
        return null;
    };
    EmptySurveyCreatorOptions.prototype.onValueChangingCallback = function (options) { };
    EmptySurveyCreatorOptions.prototype.onGetElementEditorTitleCallback = function (obj, title) {
        return title;
    };
    EmptySurveyCreatorOptions.prototype.startUndoRedoTransaction = function () { };
    EmptySurveyCreatorOptions.prototype.stopUndoRedoTransaction = function () { };
    EmptySurveyCreatorOptions.prototype.createSurvey = function (json, reason, model) {
        return new survey_core__WEBPACK_IMPORTED_MODULE_0__["SurveyModel"](json);
    };
    EmptySurveyCreatorOptions.prototype.onConditionQuestionsGetListCallback = function (propertyName, obj, editor, list) { return "asc"; };
    EmptySurveyCreatorOptions.prototype.onConditionGetTitleCallback = function (expression, title) {
        return title;
    };
    EmptySurveyCreatorOptions.prototype.isConditionOperatorEnabled = function (questionName, question, operator, isEnabled) { return isEnabled; };
    EmptySurveyCreatorOptions.prototype.onLogicGetTitleCallback = function (expression, displayExpression, text, logicItem) { return text; };
    EmptySurveyCreatorOptions.prototype.getTranslationExportedText = function (obj, name, locString, locale, text) { return text; };
    EmptySurveyCreatorOptions.prototype.uploadFiles = function (files, question, uploadingCallback) { };
    EmptySurveyCreatorOptions.prototype.getHasMachineTranslation = function () { return this.machineTranslationValue; };
    EmptySurveyCreatorOptions.prototype.doMachineTranslation = function (fromLocale, toLocale, strings, callback) { };
    EmptySurveyCreatorOptions.prototype.chooseFiles = function (input, onFilesChosen) { };
    return EmptySurveyCreatorOptions;
}());

survey_core__WEBPACK_IMPORTED_MODULE_0__["StylesManager"].applyTheme("defaultV2");


/***/ }),

/***/ "./src/creator-theme/creator.scss":
/*!****************************************!*\
  !*** ./src/creator-theme/creator.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/custom-questions/question-color.ts":
/*!************************************************!*\
  !*** ./src/custom-questions/question-color.ts ***!
  \************************************************/
/*! exports provided: QuestionColorModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionColorModel", function() { return QuestionColorModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");



var DEFAULT_COLOR = "#000000";
var DEFAULT_SWATCH_COLOR = "#FFFFFF";
var QuestionColorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionColorModel, _super);
    function QuestionColorModel(name) {
        var _this = _super.call(this, name) || this;
        _this.allowEmptyValue = false;
        _this.createItemValues("choices");
        _this.registerFunctionOnPropertyValueChanged("choices", function () {
            _this.updateChoices();
        });
        return _this;
    }
    QuestionColorModel.prototype.getCorrectedValue = function (newValue) {
        if (newValue == undefined || newValue == null || (this.allowEmptyValue && !newValue))
            return newValue;
        newValue = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["parseColor"])(newValue !== null && newValue !== void 0 ? newValue : "").color;
        if (newValue.indexOf("#") < 0) {
            newValue = "#" + newValue;
        }
        newValue = (newValue.match(/#([0-9a-fA-F]){1,6}/) || [DEFAULT_COLOR])[0];
        if (newValue.length === 4) {
            for (var i = 1; i < 4; i++) {
                newValue += newValue[i];
            }
        }
        if (newValue.length < 7) {
            var length_1 = newValue.length;
            for (var i = 0; i < 7 - length_1; i++) {
                newValue += "0";
            }
        }
        return newValue;
    };
    QuestionColorModel.prototype.setNewValue = function (newValue) {
        this.resetRenderedValue();
        _super.prototype.setNewValue.call(this, this.getCorrectedValue(newValue));
        this.updateRenderedValue();
    };
    QuestionColorModel.prototype.onBeforeInput = function (event) {
        if (!!event.data && !/[\d\w(),#]/.test(event.data)) {
            event.preventDefault();
        }
    };
    QuestionColorModel.prototype.onColorInputChange = function (event) {
        this.value = event.target.value;
    };
    QuestionColorModel.prototype.getType = function () {
        return "color";
    };
    QuestionColorModel.prototype.resetRenderedValue = function () {
        this._renderedValue = undefined;
    };
    QuestionColorModel.prototype.updateRenderedValue = function () {
        if (this.value) {
            var color = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["parseColor"])(this.value || "");
            this._renderedValue = color.color;
        }
        else if (this.allowEmptyValue) {
            this._renderedValue = "";
        }
        else {
            this._renderedValue = DEFAULT_COLOR;
        }
    };
    Object.defineProperty(QuestionColorModel.prototype, "renderedValue", {
        get: function () {
            if (!this._renderedValue && this._renderedValue !== "") {
                this.updateRenderedValue();
            }
            return this._renderedValue.toUpperCase();
        },
        enumerable: false,
        configurable: true
    });
    QuestionColorModel.prototype.getSwatchCss = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(this.cssClasses.swatch)
            .append(this.cssClasses.swatchDefault, !this.renderedValue)
            .append(this.cssClasses.swatchDisabled, this.isInputReadOnly)
            .toString();
    };
    QuestionColorModel.prototype.getSwatchStyle = function () {
        return { backgroundColor: this.renderedValue || DEFAULT_SWATCH_COLOR };
    };
    Object.defineProperty(QuestionColorModel.prototype, "renderedColorValue", {
        get: function () {
            return this.renderedValue || DEFAULT_SWATCH_COLOR;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionColorModel.prototype, "isInputTextUpdate", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionColorModel.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        this.updateRenderedValue();
    };
    Object.defineProperty(QuestionColorModel.prototype, "dropdownAction", {
        get: function () {
            if (!this._dropdownAction) {
                this._dropdownAction = this.createDropdownAction();
            }
            return this._dropdownAction;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionColorModel.prototype, "choices", {
        get: function () {
            return this.getPropertyValue("choices");
        },
        set: function (newValue) {
            this.setPropertyValue("choices", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionColorModel.prototype, "showDropdownAction", {
        get: function () {
            return !this.isValueEmpty(this.choices);
        },
        enumerable: false,
        configurable: true
    });
    QuestionColorModel.prototype.createDropdownAction = function () {
        var _this = this;
        var action = Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModelAdvanced"])({ enabled: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return !_this.isInputReadOnly; }) }, {
            onSelectionChanged: function (item) {
                _this.value = item.value;
            },
            items: this.choices
        }, {
            showPointer: false,
            verticalPosition: "bottom",
            horizontalPosition: "center"
        });
        var popupModel = action.popupModel;
        var listModel = popupModel.contentComponentData.model;
        popupModel.setWidthByTarget = true;
        popupModel.positionMode = "fixed";
        listModel.isItemSelected = function (itemValue) { return itemValue.value == _this.value; };
        return action;
    };
    QuestionColorModel.prototype.calcCssClasses = function (css) {
        var classes = _super.prototype.calcCssClasses.call(this, css);
        var dropdownAction = this.dropdownAction;
        dropdownAction.cssClasses = { item: classes.colorDropdown };
        dropdownAction.iconName = classes.colorDropdownIcon;
        var listModel = dropdownAction.popupModel.contentComponentData.model;
        listModel.cssClasses = {};
        listModel.cssClasses = {
            itemBody: listModel.cssClasses.itemBody + " " + classes.colorItem
        };
        return classes;
    };
    QuestionColorModel.prototype.updateChoices = function () {
        this.dropdownAction.popupModel.contentComponentData.model.setItems(this.choices);
    };
    Object.defineProperty(QuestionColorModel.prototype, "itemComponent", {
        get: function () {
            return "color-item";
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionColorModel.prototype, "allowEmptyValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionColorModel.prototype, "_renderedValue", void 0);
    return QuestionColorModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionTextModel"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("color", [
    {
        name: "allowEmptyValue:boolean",
        default: false
    },
    "choices:itemvalue[]"
], function () { return new QuestionColorModel(""); }, "text");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("color", function (name) {
    return new QuestionColorModel(name);
});


/***/ }),

/***/ "./src/custom-questions/question-file.ts":
/*!***********************************************!*\
  !*** ./src/custom-questions/question-file.ts ***!
  \***********************************************/
/*! exports provided: QuestionFileEditorModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionFileEditorModel", function() { return QuestionFileEditorModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var QuestionFileEditorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionFileEditorModel, _super);
    function QuestionFileEditorModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._renderedValue = "";
        _this.placeholder = "";
        _this.onKeyDown = function (event) {
            _this.onTextKeyDownHandler(event);
        };
        _this.onFileInputChange = function (event) {
            if (!_this.onChooseFilesCallback) {
                _this.doChange(event);
                return true;
            }
        };
        return _this;
    }
    QuestionFileEditorModel.prototype.onChangeQuestionValue = function (newValue) { };
    QuestionFileEditorModel.prototype.setNewValue = function (newValue) {
        if (typeof newValue === "object") {
            this.stateChanged(this.isEmpty() ? "empty" : "loaded");
            if (!this.isLoadingFromJson) {
                this.loadPreview(newValue);
            }
            this.loadedFilesValue = newValue;
            newValue = this.previewValue[0].content;
        }
        this.updateRenderedValue(newValue);
        _super.prototype.setNewValue.call(this, newValue);
    };
    QuestionFileEditorModel.prototype.loadPreview = function (newValue) {
        if (typeof newValue !== "string") {
            _super.prototype.loadPreview.call(this, newValue);
        }
    };
    Object.defineProperty(QuestionFileEditorModel.prototype, "allowMultiple", {
        get: function () {
            return false;
        },
        set: function (val) { },
        enumerable: false,
        configurable: true
    });
    QuestionFileEditorModel.prototype.clear = function (doneCallback, shouldClearValue) {
        var _this = this;
        if (shouldClearValue === void 0) { shouldClearValue = true; }
        if (!this.survey)
            return;
        var callback = function () {
            if (shouldClearValue) {
                _this.value = undefined;
            }
            _this.errors = [];
            !!doneCallback && doneCallback();
        };
        if (!!this.loadedFilesValue) {
            this.containsMultiplyFiles = false;
            this.survey.clearFiles(this.loadedFilesValue, this.name, this.previewValue, null, function (status, data) {
                if (status === "success") {
                    callback();
                }
            });
        }
        else {
            callback();
        }
    };
    QuestionFileEditorModel.prototype.updateRenderedValue = function (value) {
        var matchBase64 = !!value ? value.match(/^data:((?:\w+\/(?:(?!;).)+)?)((?:;[\w\W]*?[^;])*),/) : null;
        if (matchBase64) {
            this.placeholder = matchBase64[0] + "...";
            this._renderedValue = "";
        }
        else {
            this.placeholder = "";
            this._renderedValue = value;
        }
    };
    Object.defineProperty(QuestionFileEditorModel.prototype, "renderedValue", {
        get: function () {
            return this._renderedValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileEditorModel.prototype.updateValueFromInputEvent = function (event) {
        if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isTwoValueEquals(event.target.value, this.value)) {
            this.clear(undefined, false);
            this.loadedFilesValue = undefined;
            this.value = event.target.value;
        }
    };
    QuestionFileEditorModel.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        this.updateRenderedValue(newValue);
    };
    QuestionFileEditorModel.prototype.onInputChange = function (event) {
        if (event.target !== document.activeElement) {
            this.updateValueFromInputEvent(event);
        }
    };
    QuestionFileEditorModel.prototype.onInputBlur = function (event) {
        this.updateValueFromInputEvent(event);
    };
    QuestionFileEditorModel.prototype.getType = function () {
        return "fileedit";
    };
    QuestionFileEditorModel.prototype.getIsClearButtonDisabled = function () {
        return !this.value || this.isInputReadOnly;
    };
    QuestionFileEditorModel.prototype.getChooseButtonCss = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]().append(this.cssClasses.chooseButton).append(this.cssClasses.chooseButtonDisabled, this.isInputReadOnly).toString();
    };
    QuestionFileEditorModel.prototype.chooseFiles = function (event) {
        var _this = this;
        if (this.isInputReadOnly || !this.onChooseFilesCallback) {
            return true;
        }
        else {
            event.preventDefault();
            event.stopPropagation();
            var input = this["rootElement"].querySelectorAll("input[type='file']")[0];
            this.onChooseFilesCallback(input, function (files) {
                _this.loadFiles(files);
            });
        }
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionFileEditorModel.prototype, "_renderedValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionFileEditorModel.prototype, "placeholder", void 0);
    return QuestionFileEditorModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFileModel"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("fileedit", [], function () { return new QuestionFileEditorModel(""); }, "file");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("fileedit", function (name) {
    return new QuestionFileEditorModel(name);
});


/***/ }),

/***/ "./src/custom-questions/question-spin-editor.ts":
/*!******************************************************!*\
  !*** ./src/custom-questions/question-spin-editor.ts ***!
  \******************************************************/
/*! exports provided: QuestionSpinEditorModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionSpinEditorModel", function() { return QuestionSpinEditorModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var QuestionSpinEditorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionSpinEditorModel, _super);
    function QuestionSpinEditorModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._showUnitsInEditor = true;
        _this.onUpButtonMouseDown = function () {
            _this.increase();
            _this.increaseTimer = setTimeout(_this.onUpButtonMouseDown, 200);
        };
        _this.onDownButtonMouseDown = function () {
            _this.decrease();
            _this.decreaseTimer = setTimeout(_this.onDownButtonMouseDown, 200);
        };
        _this.onButtonMouseLeave = function () {
            _this.onButtonMouseUp();
        };
        _this.onButtonMouseUp = function () {
            clearTimeout(_this.decreaseTimer);
            clearTimeout(_this.increaseTimer);
        };
        _this.onKeyDown = function (event) {
            switch (event.key) {
                case "ArrowUp":
                    _this.increase();
                    event.stopPropagation();
                    event.preventDefault();
                    break;
                case "ArrowDown":
                    _this.decrease();
                    event.stopPropagation();
                    event.preventDefault();
                    break;
            }
            _this.onTextKeyDownHandler(event);
        };
        _this.onInputKeyDown = function (event) {
            if (event.key == "ArrowUp" || event.key == "ArrowDown")
                _this["updateValueOnEvent"](event);
        };
        _this.onFocus = function (event) {
            _this._showUnitsInEditor = false;
        };
        _this.onBlur = function (event) {
            _this._showUnitsInEditor = true;
            if (event.target.tagName == "INPUT") {
                _this["updateValueOnEvent"](event);
            }
        };
        return _this;
    }
    QuestionSpinEditorModel.prototype.parseValue = function (val) {
        var value = parseFloat(val.toString());
        var unit = val.toString().replace(/[^A-Za-z]/g, "");
        return { value: value, unit: unit };
    };
    QuestionSpinEditorModel.prototype.changeValue = function (increase) {
        var parsedValue = this.parseValue(this.renderedValue);
        var step = Number(this.renderedStep || 1);
        var result = parsedValue.value;
        if (increase) {
            result += step;
        }
        else {
            result -= step;
        }
        this.value = result;
    };
    Object.defineProperty(QuestionSpinEditorModel.prototype, "showUnitsInEditor", {
        get: function () {
            return !!this.unit && this._showUnitsInEditor;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSpinEditorModel.prototype.correctValue = function (newValue) {
        if (newValue == undefined || newValue == null)
            return newValue;
        var renderedMax = Number(this.renderedMax);
        var renderedMin = Number(this.renderedMin);
        newValue = typeof newValue === "string" ? parseFloat(newValue) : newValue;
        if (isNaN(newValue)) {
            newValue = isNaN(renderedMin) ? 0 : renderedMin;
        }
        else if (newValue > renderedMax) {
            newValue = renderedMax;
        }
        else if (newValue < renderedMin) {
            newValue = renderedMin;
        }
        newValue = Math.round(newValue * 1000) / 1000;
        return newValue;
    };
    QuestionSpinEditorModel.prototype.setNewValue = function (newValue) {
        _super.prototype.setNewValue.call(this, this.correctValue(newValue));
    };
    Object.defineProperty(QuestionSpinEditorModel.prototype, "renderedValue", {
        get: function () {
            var _a, _b;
            var renderedValue = ((_b = (_a = this.value) !== null && _a !== void 0 ? _a : this.renderedMin) !== null && _b !== void 0 ? _b : 0).toString();
            if (this.showUnitsInEditor) {
                renderedValue += this.unit;
            }
            return renderedValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSpinEditorModel.prototype.increase = function () {
        this.changeValue(true);
    };
    QuestionSpinEditorModel.prototype.decrease = function () {
        this.changeValue(false);
    };
    QuestionSpinEditorModel.prototype.onBeforeInput = function (event) {
        var target = event.target;
        var regex = target.selectionStart == 0 ? /[\d.-]/ : /[\d.]/;
        if (!!event.data && !regex.test(event.data)) {
            event.preventDefault();
        }
    };
    QuestionSpinEditorModel.prototype.getType = function () {
        return "spinedit";
    };
    Object.defineProperty(QuestionSpinEditorModel.prototype, "isInputTextUpdate", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionSpinEditorModel.prototype, "unit", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionSpinEditorModel.prototype, "_showUnitsInEditor", void 0);
    return QuestionSpinEditorModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionTextModel"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("spinedit", [
    "unit"
], function () { return new QuestionSpinEditorModel(""); }, "text");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("spinedit", function (name) {
    return new QuestionSpinEditorModel(name);
});


/***/ }),

/***/ "./src/custom-questions/question-text-with-reset.ts":
/*!**********************************************************!*\
  !*** ./src/custom-questions/question-text-with-reset.ts ***!
  \**********************************************************/
/*! exports provided: ResetValueAdorner, QuestionTextWithResetModel, QuestionCommentWithResetModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResetValueAdorner", function() { return ResetValueAdorner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionTextWithResetModel", function() { return QuestionTextWithResetModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentWithResetModel", function() { return QuestionCommentWithResetModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var ResetValueAdorner = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ResetValueAdorner, _super);
    function ResetValueAdorner(question) {
        var _this = _super.call(this) || this;
        _this.question = question;
        return _this;
    }
    ResetValueAdorner.prototype.resetValue = function () {
        if (this.resetValueCallback) {
            this.resetValueCallback();
        }
    };
    Object.defineProperty(ResetValueAdorner.prototype, "isDisabled", {
        get: function () {
            return this.question.isInputReadOnly || !this.allowResetValue;
        },
        enumerable: false,
        configurable: true
    });
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], ResetValueAdorner.prototype, "allowResetValue", void 0);
    return ResetValueAdorner;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var QuestionTextWithResetModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionTextWithResetModel, _super);
    function QuestionTextWithResetModel(name) {
        var _this = _super.call(this, name) || this;
        _this.resetValueAdorner = _this.createResetValueAdorner();
        return _this;
    }
    QuestionTextWithResetModel.prototype.createResetValueAdorner = function () {
        return new ResetValueAdorner(this);
    };
    QuestionTextWithResetModel.prototype.getType = function () {
        return "textwithreset";
    };
    QuestionTextWithResetModel.prototype.getRootClass = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.onError, this.errors.length > 0)
            .toString();
    };
    QuestionTextWithResetModel.prototype.getControlClass = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(this.cssClasses.control)
            .toString();
    };
    Object.defineProperty(QuestionTextWithResetModel.prototype, "wrappedQuestionTemplate", {
        get: function () {
            return "text";
        },
        enumerable: false,
        configurable: true
    });
    return QuestionTextWithResetModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionTextModel"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("textwithreset", [], function () { return new QuestionTextWithResetModel(""); }, "text");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("textwithreset", function (name) {
    return new QuestionTextWithResetModel(name);
});
var QuestionCommentWithResetModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionCommentWithResetModel, _super);
    function QuestionCommentWithResetModel(name) {
        var _this = _super.call(this, name) || this;
        _this.resetValueAdorner = _this.createResetValueAdorner();
        return _this;
    }
    QuestionCommentWithResetModel.prototype.createResetValueAdorner = function () {
        return new ResetValueAdorner(this);
    };
    QuestionCommentWithResetModel.prototype.getType = function () {
        return "commentwithreset";
    };
    QuestionCommentWithResetModel.prototype.getCssType = function () {
        return "textwithreset";
    };
    QuestionCommentWithResetModel.prototype.getRootClass = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.rootMultiline)
            .append(this.cssClasses.onError, this.errors.length > 0)
            .toString();
    };
    QuestionCommentWithResetModel.prototype.getControlClass = function () {
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
            .append(this.cssClasses.control)
            .append(this.cssClasses.controlMultiline)
            .toString();
    };
    Object.defineProperty(QuestionCommentWithResetModel.prototype, "wrappedQuestionTemplate", {
        get: function () {
            return "comment";
        },
        enumerable: false,
        configurable: true
    });
    return QuestionCommentWithResetModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionCommentModel"]));

survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("commentwithreset", [{ name: "allowResize:boolean", default: false }], function () { return new QuestionCommentWithResetModel(""); }, "comment");
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("commentwithreset", function (name) {
    return new QuestionCommentWithResetModel(name);
});


/***/ }),

/***/ "./src/editable-object.ts":
/*!********************************!*\
  !*** ./src/editable-object.ts ***!
  \********************************/
/*! exports provided: EditableObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditableObject", function() { return EditableObject; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

var EditableObject = /** @class */ (function () {
    function EditableObject(obj) {
        this.objValue = obj;
        this.editableObjValue = this.createEditableObj();
    }
    EditableObject.isCopyObject = function (obj) {
        return !!obj && obj["isCopy"];
    };
    EditableObject.getSurvey = function (object) {
        if (object instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["SurveyModel"] ||
            (!!object && !!object.getType && object.getType() == "survey")) {
            return EditableObject.getOriginalSurvey(object);
        }
        if (object instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownColumn"] && !!object.colOwner)
            return object.colOwner["survey"];
        if (!!object) {
            if (!!object.survey)
                return EditableObject.getOriginalSurvey(object.survey);
            if (!!object.owner)
                return EditableObject.getSurvey(object.owner);
            if (!!object.errorOwner)
                return EditableObject.getSurvey(object.errorOwner);
            if (!!object.locOwner)
                return EditableObject.getSurvey(object.locOwner);
        }
        var original = EditableObject.getOriginalObject(object);
        if (!!original && original !== object)
            return EditableObject.getSurvey(original);
        return null;
    };
    EditableObject.getOriginalObject = function (object) {
        return !!object && !!object["originalObj"] ? object["originalObj"] : object;
    };
    EditableObject.getOriginalSurvey = function (survey) {
        return EditableObject.getOriginalObject(survey);
    };
    Object.defineProperty(EditableObject.prototype, "obj", {
        get: function () {
            return this.objValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditableObject.prototype, "editableObj", {
        get: function () {
            return this.editableObjValue;
        },
        enumerable: false,
        configurable: true
    });
    EditableObject.prototype.isPropertyChanged = function (propertyName) {
        if (propertyName == "pages")
            return false; //TODO could not find a better way yet
        return !survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(this.obj[propertyName], this.editableObj[propertyName]);
    };
    EditableObject.prototype.apply = function (propertyName) {
        if (!this.isPropertyChanged(propertyName))
            return;
        this.obj[propertyName] = this.editableObj[propertyName];
    };
    EditableObject.prototype.reset = function () {
        this.assignProperties(this.editableObj);
    };
    EditableObject.prototype.applyAll = function (excludedProps) {
        if (excludedProps === void 0) { excludedProps = []; }
        var props = this.getProperties(excludedProps);
        for (var i = 0; i < props.length; i++) {
            this.apply(props[i]);
        }
    };
    EditableObject.prototype.getProperties = function (excludedProps) {
        var props = [];
        var newJSON = this.getObjJson(this.editableObj);
        var oldJSON = this.getObjJson(this.obj);
        for (var key in newJSON) {
            if (excludedProps.indexOf(key) > -1)
                continue;
            props.push(key);
        }
        for (var key in oldJSON) {
            if (excludedProps.indexOf(key) > -1 || props.indexOf(key) > -1)
                continue;
            props.push(key);
        }
        return props;
    };
    EditableObject.prototype.createEditableObj = function () {
        var type = this.obj.getType();
        var res = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(type);
        if (res == null && type == "survey") {
            res = new survey_core__WEBPACK_IMPORTED_MODULE_0__["SurveyModel"](); // TODO: Create Survey via platform Provider/Factory
        }
        this.assignProperties(res);
        if (type == "matrixdropdowncolumn") {
            res["colOwner"] = this.obj["colOwner"];
        }
        if (type != "survey") {
            if (!!res["setSurveyImpl"]) {
                res["setSurveyImpl"](this.obj["survey"]);
            }
            else {
                if (!!this.obj["survey"] && !res["survey"]) {
                    res["survey"] = this.obj["survey"];
                }
            }
        }
        if (!!this.obj["parent"]) {
            res["parent"] = this.obj["parent"];
        }
        res["isCopy"] = true;
        res["originalObj"] = this.obj;
        return res;
    };
    EditableObject.prototype.assignProperties = function (obj) {
        new survey_core__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]().toObject(this.getObjJson(), obj);
    };
    EditableObject.prototype.getObjJson = function (obj) {
        if (obj === void 0) { obj = null; }
        if (!obj)
            obj = this.obj;
        var jsonObj = new survey_core__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]();
        jsonObj.lightSerializing = true;
        return jsonObj.toJsonObject(obj);
    };
    return EditableObject;
}());



/***/ }),

/***/ "./src/editorLocalization.ts":
/*!***********************************!*\
  !*** ./src/editorLocalization.ts ***!
  \***********************************/
/*! exports provided: EditorLocalization, editorLocalization, getLocString, defaultStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditorLocalization", function() { return EditorLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editorLocalization", function() { return editorLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocString", function() { return getLocString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStrings", function() { return defaultStrings; });
/* harmony import */ var _localization_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization/english */ "./src/localization/english.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_2__);



var EditorLocalization = /** @class */ (function () {
    function EditorLocalization() {
        this.camelCaseBreaking = true;
        this.currentLocale = "";
        this.locales = {};
        this.peByClass = {};
        this.peHelpByClass = {};
    }
    EditorLocalization.prototype.reset = function () {
        this.peByClass = {};
        this.peHelpByClass = {};
    };
    EditorLocalization.prototype.getString = function (strName, locale) {
        if (locale === void 0) { locale = null; }
        if (!locale)
            locale = this.currentLocale;
        var loc = this.getLocale(locale);
        var defaultLocale = this.getLocale("en");
        var locs = [];
        if (!!loc)
            locs.push(loc);
        if (!!locale && locale.indexOf("-") > -1) {
            var baseLocale = this.getLocale(locale.substring(0, locale.indexOf("-")));
            if (!!baseLocale)
                locs.push(baseLocale);
        }
        if (locs.length === 0 || locs[locs.length - 1] !== defaultLocale) {
            locs.push(defaultLocale);
        }
        for (var i = 0; i < locs.length; i++) {
            var res = this.getStringByLocale(strName, locs[i]);
            if (!!res || res === "")
                return res;
        }
        var path = strName.split(".");
        return path[path.length - 1];
    };
    EditorLocalization.prototype.hasString = function (strName, locale) {
        if (locale === void 0) { locale = null; }
        return this.getStringByLocale(strName, this.getLocale(locale)) !== undefined;
    };
    EditorLocalization.prototype.getStringByLocale = function (strName, loc) {
        var path = strName.split(".");
        var obj = loc;
        for (var i = 0; i < path.length; i++) {
            if (typeof obj === "string")
                return undefined;
            obj = obj[path[i]];
            if (!obj && obj !== "")
                return undefined;
        }
        return obj;
    };
    EditorLocalization.prototype.getLocaleName = function (loc, defaultLocale) {
        if (defaultLocale === void 0) { defaultLocale = null; }
        var localeNames = survey_core__WEBPACK_IMPORTED_MODULE_2__["surveyLocalization"]["localeNames"];
        if (!defaultLocale) {
            defaultLocale = survey_core__WEBPACK_IMPORTED_MODULE_2__["surveyLocalization"].defaultLocale;
        }
        var res = !!loc
            ? Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["capitalize"])(localeNames[loc])
            : editorLocalization
                .getString("ed.defaultLocale")["format"](Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["capitalize"])(localeNames[defaultLocale]));
        return !!res ? res : loc;
    };
    EditorLocalization.prototype.getPropertyName = function (strName, defaultName) {
        if (defaultName === void 0) { defaultName = null; }
        var obj = this.getProperty(strName, defaultName);
        var name = obj["name"];
        if (!!name) {
            if (this.stringsDiff(name, strName))
                return name;
            return this.getAutoPropertyName(name, defaultName);
        }
        return obj;
    };
    EditorLocalization.prototype.getPropertyTitle = function (strName) {
        var obj = this.getProperty(strName);
        if (obj["title"])
            return obj["title"];
        return "";
    };
    EditorLocalization.prototype.getPropertyNameInEditor = function (typeName, propName, defaultName) {
        if (defaultName === void 0) { defaultName = null; }
        var obj = this.getPropertyInfoInEditorByType(typeName, propName, this.peByClass, "pe");
        if (!obj) {
            obj = this.getString("pe." + propName);
        }
        if (this.stringsDiff(obj, propName))
            return obj;
        return this.getPropertyName(propName, defaultName);
    };
    EditorLocalization.prototype.getPropertyHelpInEditor = function (typeName, propName, propType) {
        if (propType === void 0) { propType = undefined; }
        var helpStr = this.getPropertyInfoInEditorByType(typeName, propName, this.peHelpByClass, "pehelp");
        if (!!helpStr)
            return (helpStr === " ") ? null : helpStr;
        var loc = this.getLocale();
        if (!!loc && !!loc.pehelp) {
            helpStr = loc.pehelp[propName];
        }
        if (!!helpStr)
            return helpStr;
        if (!!propType && !!loc.pe)
            return loc.pe[propType + "Help"];
        return undefined;
    };
    EditorLocalization.prototype.getPropertyInfoInEditorByType = function (typeName, propName, peInfoByClass, postFix) {
        if (!typeName)
            return undefined;
        var peClass = peInfoByClass[typeName];
        if (peClass === undefined) {
            peClass = this.getObjInEditorByType(typeName, peInfoByClass, postFix);
        }
        while (!!peClass) {
            var res = peClass.props[propName];
            if (!!res && typeof res !== "function")
                return peClass.props[propName];
            peClass = peClass.parent;
        }
        return undefined;
    };
    EditorLocalization.prototype.getObjInEditorByType = function (typeName, peInfoByClass, postFix) {
        if (!typeName)
            return undefined;
        var peClass = peInfoByClass[typeName];
        if (peClass !== undefined)
            peClass;
        var loc = this.getLocale();
        var pe = !!loc ? loc[postFix] : undefined;
        if (!pe)
            return undefined;
        var classInfo = survey_core__WEBPACK_IMPORTED_MODULE_2__["Serializer"].findClass(typeName);
        var classNames = [];
        var res = undefined;
        while (!!classInfo) {
            var tName = classInfo.name;
            res = peInfoByClass[typeName];
            if (!!res)
                break;
            classNames.push(tName);
            if (pe[tName]) {
                res = { props: pe[tName], parent: this.getObjInEditorByType(classInfo.parentName, peInfoByClass, postFix) };
                break;
            }
            if (!classInfo.parentName)
                break;
            classInfo = survey_core__WEBPACK_IMPORTED_MODULE_2__["Serializer"].findClass(classInfo.parentName);
        }
        for (var i = 0; i < classNames.length; i++) {
            peInfoByClass[classNames[i]] = res;
        }
        return res;
    };
    EditorLocalization.prototype.getProperty = function (strName, defaultName) {
        if (defaultName === void 0) { defaultName = null; }
        var obj = this.getString("p." + strName);
        if (this.stringsDiff(obj, strName))
            return obj;
        var pos = strName.indexOf("_");
        if (pos < -1)
            return this.getAutoPropertyName(obj, defaultName);
        strName = strName.substring(pos + 1);
        obj = this.getString("p." + strName);
        if (this.stringsDiff(obj, strName))
            return obj;
        return this.getAutoPropertyName(obj, defaultName);
    };
    EditorLocalization.prototype.convertToCamelCase = function (value, toLowCase) {
        if (toLowCase === void 0) { toLowCase = false; }
        if (!value)
            return value;
        value = value.trim();
        if (value.indexOf(" ") > -1)
            return value;
        var hasLowCase = false;
        for (var i = 0; i < value.length; i++) {
            if (value[i] !== value[i].toUpperCase()) {
                hasLowCase = true;
                break;
            }
        }
        if (!hasLowCase)
            return value;
        var res = value[0].toUpperCase();
        var isPrevUpperCase = false;
        var isUpperCase = function (index) {
            if (index >= value.length)
                return false;
            return value[index].toUpperCase() === value[index];
        };
        for (var i = 1; i < value.length; i++) {
            if (!isPrevUpperCase && isUpperCase(i)) {
                res += " ";
            }
            var requireConvert = !isPrevUpperCase && !isUpperCase(i + 1);
            res += requireConvert ? value[i].toLowerCase() : value[i];
            isPrevUpperCase = isUpperCase(i);
        }
        if (toLowCase) {
            res = res.toLowerCase();
        }
        return res;
    };
    EditorLocalization.prototype.getAutoPropertyName = function (propName, defaultName) {
        if (defaultName === void 0) { defaultName = null; }
        if (!!defaultName)
            return defaultName;
        if (!propName || !this.camelCaseBreaking)
            return propName;
        return this.convertToCamelCase(propName);
    };
    EditorLocalization.prototype.getPropertyValueInEditor = function (propName, value) {
        var loc = this.getLocale();
        if (!!loc && !!loc.pv && !!loc.pv[propName]) {
            var res = loc.pv[propName][value];
            if (!!res)
                return res;
        }
        return this.getPropertyValue(value);
    };
    EditorLocalization.prototype.getPropertyValue = function (value, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(value, "pv", locale);
    };
    EditorLocalization.prototype.getValidatorName = function (name, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(name, "validators", locale);
    };
    EditorLocalization.prototype.getTriggerName = function (name, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(name, "triggers", locale);
    };
    EditorLocalization.prototype.getLocale = function (locale) {
        if (!locale)
            locale = this.currentLocale;
        var loc = locale ? this.locales[locale] : defaultStrings;
        if (!loc)
            loc = defaultStrings;
        return loc;
    };
    EditorLocalization.prototype.getValueInternal = function (value, prefix, locale) {
        if (locale === void 0) { locale = null; }
        if (value === "" || value === null || value === undefined)
            return "";
        value = value.toString();
        var res = this.getString(prefix + "." + value, locale);
        if (!!res)
            return res;
        return this.camelCaseBreaking
            ? this.convertToCamelCase(value, false)
            : value;
    };
    EditorLocalization.prototype.getLocales = function () {
        var res = [];
        res.push("");
        for (var key in this.locales) {
            res.push(key);
        }
        return res;
    };
    EditorLocalization.prototype.stringsDiff = function (str1, str2) {
        if (typeof str1 === "function" || typeof str2 === "function")
            return false;
        return str1 !== str2;
    };
    return EditorLocalization;
}());

var editorLocalization = new EditorLocalization();
survey_core__WEBPACK_IMPORTED_MODULE_2__["surveyLocalization"].onGetExternalString = function (name, locale) {
    var res = editorLocalization.getString(name, locale);
    return res !== name ? res : "";
};
function getLocString(strName, locale) {
    if (locale === void 0) { locale = null; }
    return editorLocalization.getString(strName, locale);
}
var defaultStrings = _localization_english__WEBPACK_IMPORTED_MODULE_0__["enStrings"];


/***/ }),

/***/ "./src/entries/helpers.ts":
/*!********************************!*\
  !*** ./src/entries/helpers.ts ***!
  \********************************/
/*! exports provided: __decorate, __assign, __extends, __spreadArrays, __spreadArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArray", function() { return __spreadArray; });
var __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3
        ? target
        : desc === null
            ? (desc = Object.getOwnPropertyDescriptor(target, key))
            : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i]))
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __assign = Object["assign"] ||
    function (target) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    target[p] = s[p];
        }
        return target;
    };
function __extends(thisClass, baseClass) {
    for (var p in baseClass)
        if (baseClass.hasOwnProperty(p))
            thisClass[p] = baseClass[p];
    function __() {
        this.constructor = thisClass;
    }
    thisClass.prototype =
        baseClass === null
            ? Object.create(baseClass)
            : ((__.prototype = baseClass.prototype), new __());
}
var __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __spreadArray = function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};


/***/ }),

/***/ "./src/entries/index.ts":
/*!******************************!*\
  !*** ./src/entries/index.ts ***!
  \******************************/
/*! exports provided: Version, enStrings, editorLocalization, defaultStrings, localization, QuestionConvertMode, settings, EmptySurveyCreatorOptions, CreatorAction, TabbedMenuItem, TabbedMenuContainer, ToolbarActionContainer, CreatorEvent, CreatorBase, SurveyCreatorModel, StylesManager, initializeDesignTimeSurveyModel, editableStringRendererName, getElementWrapperComponentName, getQuestionContentWrapperComponentName, getElementWrapperComponentData, getItemValueWrapperComponentName, getItemValueWrapperComponentData, isStringEditable, isTextInput, registerAdorner, removeAdorners, CreatorResponsivityManager, AceJsonEditorModel, TabJsonEditorAcePlugin, JsonEditorBaseModel, TabJsonEditorBasePlugin, TextareaJsonEditorModel, TabJsonEditorTextareaPlugin, TestSurveyTabViewModel, TabTestPlugin, createColor, createBoxShadow, parseBoxShadow, DefaultFonts, fontsettingsToCssVariable, fontsettingsFromCssVariable, elementSettingsToCssVariable, elementSettingsFromCssVariable, Themes, PredefinedThemes, getThemeFullName, PredefinedColors, findSuitableTheme, ThemeBuilder, ThemeTabPlugin, initLogicOperator, LogicEvent, SurveyLogic, TranslationItemBase, TranslationItemString, TranslationItem, TranslationGroup, Translation, TranslationEditor, createImportCSVAction, createExportCSVAction, translationCss, TabTranslationPlugin, initialSettingsAllowShowEmptyTitleInDesignMode, TabDesignerViewModel, TabDesignerPlugin, SurveyLogicUI, TabLogicPlugin, logicCss, ToolboxToolViewModel, PageNavigatorViewModel, PageAdorner, RowViewModel, QuestionAdornerViewModel, QuestionDropdownAdornerViewModel, QuestionImageAdornerViewModel, QuestionRatingAdornerViewModel, ItemValueWrapperViewModel, ImageItemValueWrapperViewModel, MatrixCellWrapperEditSurvey, MatrixCellWrapperViewModel, SurveySimulatorModel, DEFAULT_MONITOR_DPI, simulatorDevices, SurveyResultsItemModel, SurveyResultsModel, LogoImageViewModel, StringItemsNavigatorBase, StringEditorConnector, StringEditorViewModelBase, QuestionEmbeddedSurveyModel, QuestionLinkValueModel, EditorLocalization, getLocString, SurveyJSON5, QuestionSpinEditorModel, QuestionColorModel, QuestionFileEditorModel, ResetValueAdorner, QuestionTextWithResetModel, QuestionCommentWithResetModel, setSurveyJSONForPropertyGrid, PropertyEditorSetupValue, PropertyGridEditorCollection, PropertyGridTitleActionsCreator, PropertyJSONGenerator, PropertyGridModel, PropertyGridEditor, PropertyGridEditorBoolean, PropertyGridEditorStringBase, PropertyGridEditorString, PropertyGridLinkEditor, PropertyGridEditorColor, PropertyGridEditorNumber, PropertyGridEditorImageSize, PropertyGridEditorText, PropertyGridEditorHtml, PropertyGridEditorStringArray, PropertyGridEditorDropdown, PropertyGridEditorSet, PropertyGridEditorPage, PropertyGridEditorQuestion, PropertyGridEditorQuestionSelectBase, PropertyGridEditorQuestionCarryForward, PropertyGridEditorQuestionValue, PropertyGridEditorExpression, PropertyGridEditorCondition, PropertyGridEditorMatrix, PropertyGridEditorMatrixItemValues, PropertyGridEditorMatrixRateValues, PropertyGridEditorMatrixColumns, PropertyGridEditorMatrixPages, PropertyGridEditorMatrixCalculatedValues, PropertyGridEditorMatrixHtmlConditions, PropertyGridEditorMatrixUrlConditions, PropertyGridEditorMatrixMutlipleTextItems, PropertyGridEditorMatrixMultipleTypes, PropertyGridEditorMatrixValidators, PropertyGridEditorMatrixTriggers, PropertyGridEditorBindings, PropertyGridViewModel, ObjectSelectorItem, ObjectSelector, ObjectSelectorModel, PropertyGridEditorQuestionRestfull, PropertyGridValueEditorBase, PropertyGridCellsEditor, PropertyGridValueEditor, PropertyGridRowValueEditor, PropertyGridPanelValueEditor, PropertyGridTriggerValueEditor, PropertyGridTriggerValueInLogicEditor, propertyGridCss, QuestionConverter, svgBundle, SurveyTextWorkerError, SurveyTextWorkerParserError, SurveyTextWorkerJsonError, SurveyTextWorker, JsonDuplicateNameError, QuestionToolboxCategory, QuestionToolboxItem, QuestionToolbox, SidebarModel, SidebarTabModel, getNextItemValue, getNextItemText, getNextValue, findParentNode, focusFirstControl, getFirstNonTextElement, getNodesFromKoComponentInfo, propertyExists, isPropertyVisible, toggleHovered, clearNewLines, select, copyObject, copyCssClasses, assignDefaultV2Classes, wrapTextByCurlyBraces, capitalize, notShortCircuitAnd, imageMimeTypes, getAcceptedTypesByContentMode, getQuestionFromObj, ingectAlpha, convertRgbaToString, parseRgbaFromString, parseColor, HSBToRGB, RGBToHSB, assign, ColorCalculator, saveToFileHandler, SurveyQuestionEditorDefinition, ObjType, SurveyHelper, ResizeManager, UndoRedoPlugin, undoRedoTransaction, ignoreUndoRedo, UndoRedoManager, Transaction, UndoRedoAction, UndoRedoArrayAction, PagesController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
/* harmony import */ var _localization_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localization/english */ "./src/localization/english.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enStrings", function() { return _localization_english__WEBPACK_IMPORTED_MODULE_0__["enStrings"]; });

/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "editorLocalization", function() { return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStrings", function() { return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["defaultStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "localization", function() { return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"]; });

/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionConvertMode", function() { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["QuestionConvertMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmptySurveyCreatorOptions", function() { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["EmptySurveyCreatorOptions"]; });

/* harmony import */ var _creator_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../creator-base */ "./src/creator-base.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreatorAction", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["CreatorAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabbedMenuItem", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["TabbedMenuItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabbedMenuContainer", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["TabbedMenuContainer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ToolbarActionContainer", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["ToolbarActionContainer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreatorEvent", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["CreatorEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreatorBase", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["CreatorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyCreatorModel", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["SurveyCreatorModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["StylesManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initializeDesignTimeSurveyModel", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["initializeDesignTimeSurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "editableStringRendererName", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["editableStringRendererName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getElementWrapperComponentName", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["getElementWrapperComponentName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getQuestionContentWrapperComponentName", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["getQuestionContentWrapperComponentName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getElementWrapperComponentData", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["getElementWrapperComponentData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getItemValueWrapperComponentName", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["getItemValueWrapperComponentName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getItemValueWrapperComponentData", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["getItemValueWrapperComponentData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isStringEditable", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["isStringEditable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTextInput", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["isTextInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerAdorner", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["registerAdorner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeAdorners", function() { return _creator_base__WEBPACK_IMPORTED_MODULE_3__["removeAdorners"]; });

/* harmony import */ var _creator_responsivity_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../creator-responsivity-manager */ "./src/creator-responsivity-manager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreatorResponsivityManager", function() { return _creator_responsivity_manager__WEBPACK_IMPORTED_MODULE_4__["CreatorResponsivityManager"]; });

/* harmony import */ var _components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/tabs/json-editor-ace */ "./src/components/tabs/json-editor-ace.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AceJsonEditorModel", function() { return _components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_5__["AceJsonEditorModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorAcePlugin", function() { return _components_tabs_json_editor_ace__WEBPACK_IMPORTED_MODULE_5__["TabJsonEditorAcePlugin"]; });

/* harmony import */ var _components_tabs_json_editor_plugin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/tabs/json-editor-plugin */ "./src/components/tabs/json-editor-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonEditorBaseModel", function() { return _components_tabs_json_editor_plugin__WEBPACK_IMPORTED_MODULE_6__["JsonEditorBaseModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorBasePlugin", function() { return _components_tabs_json_editor_plugin__WEBPACK_IMPORTED_MODULE_6__["TabJsonEditorBasePlugin"]; });

/* harmony import */ var _components_tabs_json_editor_textarea__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/tabs/json-editor-textarea */ "./src/components/tabs/json-editor-textarea.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextareaJsonEditorModel", function() { return _components_tabs_json_editor_textarea__WEBPACK_IMPORTED_MODULE_7__["TextareaJsonEditorModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabJsonEditorTextareaPlugin", function() { return _components_tabs_json_editor_textarea__WEBPACK_IMPORTED_MODULE_7__["TabJsonEditorTextareaPlugin"]; });

/* harmony import */ var _components_tabs_test__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/tabs/test */ "./src/components/tabs/test.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TestSurveyTabViewModel", function() { return _components_tabs_test__WEBPACK_IMPORTED_MODULE_8__["TestSurveyTabViewModel"]; });

/* harmony import */ var _components_tabs_test_plugin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/tabs/test-plugin */ "./src/components/tabs/test-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabTestPlugin", function() { return _components_tabs_test_plugin__WEBPACK_IMPORTED_MODULE_9__["TabTestPlugin"]; });

/* harmony import */ var _components_tabs_theme_custom_questions_color_settings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/tabs/theme-custom-questions/color-settings */ "./src/components/tabs/theme-custom-questions/color-settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createColor", function() { return _components_tabs_theme_custom_questions_color_settings__WEBPACK_IMPORTED_MODULE_10__["createColor"]; });

/* harmony import */ var _components_tabs_theme_custom_questions_boxshadow_settings__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/tabs/theme-custom-questions/boxshadow-settings */ "./src/components/tabs/theme-custom-questions/boxshadow-settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createBoxShadow", function() { return _components_tabs_theme_custom_questions_boxshadow_settings__WEBPACK_IMPORTED_MODULE_11__["createBoxShadow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseBoxShadow", function() { return _components_tabs_theme_custom_questions_boxshadow_settings__WEBPACK_IMPORTED_MODULE_11__["parseBoxShadow"]; });

/* harmony import */ var _components_tabs_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/tabs/theme-custom-questions/font-settings */ "./src/components/tabs/theme-custom-questions/font-settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultFonts", function() { return _components_tabs_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_12__["DefaultFonts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fontsettingsToCssVariable", function() { return _components_tabs_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_12__["fontsettingsToCssVariable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fontsettingsFromCssVariable", function() { return _components_tabs_theme_custom_questions_font_settings__WEBPACK_IMPORTED_MODULE_12__["fontsettingsFromCssVariable"]; });

/* harmony import */ var _components_tabs_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/tabs/theme-custom-questions/element-settings */ "./src/components/tabs/theme-custom-questions/element-settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elementSettingsToCssVariable", function() { return _components_tabs_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_13__["elementSettingsToCssVariable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elementSettingsFromCssVariable", function() { return _components_tabs_theme_custom_questions_element_settings__WEBPACK_IMPORTED_MODULE_13__["elementSettingsFromCssVariable"]; });

/* harmony import */ var _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/tabs/themes */ "./src/components/tabs/themes.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Themes", function() { return _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__["Themes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PredefinedThemes", function() { return _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__["PredefinedThemes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getThemeFullName", function() { return _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__["getThemeFullName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PredefinedColors", function() { return _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__["PredefinedColors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findSuitableTheme", function() { return _components_tabs_themes__WEBPACK_IMPORTED_MODULE_14__["findSuitableTheme"]; });

/* harmony import */ var _components_tabs_theme_builder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../components/tabs/theme-builder */ "./src/components/tabs/theme-builder.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ThemeBuilder", function() { return _components_tabs_theme_builder__WEBPACK_IMPORTED_MODULE_15__["ThemeBuilder"]; });

/* harmony import */ var _components_tabs_theme_plugin__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../components/tabs/theme-plugin */ "./src/components/tabs/theme-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ThemeTabPlugin", function() { return _components_tabs_theme_plugin__WEBPACK_IMPORTED_MODULE_16__["ThemeTabPlugin"]; });

/* harmony import */ var _components_tabs_logic__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../components/tabs/logic */ "./src/components/tabs/logic.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initLogicOperator", function() { return _components_tabs_logic__WEBPACK_IMPORTED_MODULE_17__["initLogicOperator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogicEvent", function() { return _components_tabs_logic__WEBPACK_IMPORTED_MODULE_17__["LogicEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyLogic", function() { return _components_tabs_logic__WEBPACK_IMPORTED_MODULE_17__["SurveyLogic"]; });

/* harmony import */ var _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../components/tabs/translation */ "./src/components/tabs/translation.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationItemBase", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["TranslationItemBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationItemString", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["TranslationItemString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationItem", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["TranslationItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationGroup", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["TranslationGroup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Translation", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["Translation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationEditor", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["TranslationEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createImportCSVAction", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["createImportCSVAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createExportCSVAction", function() { return _components_tabs_translation__WEBPACK_IMPORTED_MODULE_18__["createExportCSVAction"]; });

/* harmony import */ var _components_tabs_translation_theme__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../components/tabs/translation-theme */ "./src/components/tabs/translation-theme.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translationCss", function() { return _components_tabs_translation_theme__WEBPACK_IMPORTED_MODULE_19__["translationCss"]; });

/* harmony import */ var _components_tabs_translation_plugin__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../components/tabs/translation-plugin */ "./src/components/tabs/translation-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabTranslationPlugin", function() { return _components_tabs_translation_plugin__WEBPACK_IMPORTED_MODULE_20__["TabTranslationPlugin"]; });

/* harmony import */ var _components_tabs_designer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../components/tabs/designer */ "./src/components/tabs/designer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initialSettingsAllowShowEmptyTitleInDesignMode", function() { return _components_tabs_designer__WEBPACK_IMPORTED_MODULE_21__["initialSettingsAllowShowEmptyTitleInDesignMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabDesignerViewModel", function() { return _components_tabs_designer__WEBPACK_IMPORTED_MODULE_21__["TabDesignerViewModel"]; });

/* harmony import */ var _components_tabs_designer_plugin__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../components/tabs/designer-plugin */ "./src/components/tabs/designer-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabDesignerPlugin", function() { return _components_tabs_designer_plugin__WEBPACK_IMPORTED_MODULE_22__["TabDesignerPlugin"]; });

/* harmony import */ var _components_tabs_logic_ui__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../components/tabs/logic-ui */ "./src/components/tabs/logic-ui.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyLogicUI", function() { return _components_tabs_logic_ui__WEBPACK_IMPORTED_MODULE_23__["SurveyLogicUI"]; });

/* harmony import */ var _components_tabs_logic_plugin__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../components/tabs/logic-plugin */ "./src/components/tabs/logic-plugin.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TabLogicPlugin", function() { return _components_tabs_logic_plugin__WEBPACK_IMPORTED_MODULE_24__["TabLogicPlugin"]; });

/* harmony import */ var _components_tabs_logic_theme__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../components/tabs/logic-theme */ "./src/components/tabs/logic-theme.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logicCss", function() { return _components_tabs_logic_theme__WEBPACK_IMPORTED_MODULE_25__["logicCss"]; });

/* harmony import */ var _components_toolbox_toolbox_tool__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../components/toolbox/toolbox-tool */ "./src/components/toolbox/toolbox-tool.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ToolboxToolViewModel", function() { return _components_toolbox_toolbox_tool__WEBPACK_IMPORTED_MODULE_26__["ToolboxToolViewModel"]; });

/* harmony import */ var _components_page_navigator_page_navigator__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../components/page-navigator/page-navigator */ "./src/components/page-navigator/page-navigator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageNavigatorViewModel", function() { return _components_page_navigator_page_navigator__WEBPACK_IMPORTED_MODULE_27__["PageNavigatorViewModel"]; });

/* harmony import */ var _components_page__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../components/page */ "./src/components/page.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageAdorner", function() { return _components_page__WEBPACK_IMPORTED_MODULE_28__["PageAdorner"]; });

/* harmony import */ var _components_row__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../components/row */ "./src/components/row.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RowViewModel", function() { return _components_row__WEBPACK_IMPORTED_MODULE_29__["RowViewModel"]; });

/* harmony import */ var _components_question__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../components/question */ "./src/components/question.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionAdornerViewModel", function() { return _components_question__WEBPACK_IMPORTED_MODULE_30__["QuestionAdornerViewModel"]; });

/* harmony import */ var _components_question_dropdown__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../components/question-dropdown */ "./src/components/question-dropdown.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownAdornerViewModel", function() { return _components_question_dropdown__WEBPACK_IMPORTED_MODULE_31__["QuestionDropdownAdornerViewModel"]; });

/* harmony import */ var _components_question_image__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../components/question-image */ "./src/components/question-image.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImageAdornerViewModel", function() { return _components_question_image__WEBPACK_IMPORTED_MODULE_32__["QuestionImageAdornerViewModel"]; });

/* harmony import */ var _components_question_rating__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../components/question-rating */ "./src/components/question-rating.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingAdornerViewModel", function() { return _components_question_rating__WEBPACK_IMPORTED_MODULE_33__["QuestionRatingAdornerViewModel"]; });

/* harmony import */ var _components_item_value__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../components/item-value */ "./src/components/item-value.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ItemValueWrapperViewModel", function() { return _components_item_value__WEBPACK_IMPORTED_MODULE_34__["ItemValueWrapperViewModel"]; });

/* harmony import */ var _components_image_item_value__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../components/image-item-value */ "./src/components/image-item-value.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageItemValueWrapperViewModel", function() { return _components_image_item_value__WEBPACK_IMPORTED_MODULE_35__["ImageItemValueWrapperViewModel"]; });

/* harmony import */ var _components_matrix_cell__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../components/matrix-cell */ "./src/components/matrix-cell.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixCellWrapperEditSurvey", function() { return _components_matrix_cell__WEBPACK_IMPORTED_MODULE_36__["MatrixCellWrapperEditSurvey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixCellWrapperViewModel", function() { return _components_matrix_cell__WEBPACK_IMPORTED_MODULE_36__["MatrixCellWrapperViewModel"]; });

/* harmony import */ var _components_simulator__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../components/simulator */ "./src/components/simulator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveySimulatorModel", function() { return _components_simulator__WEBPACK_IMPORTED_MODULE_37__["SurveySimulatorModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MONITOR_DPI", function() { return _components_simulator__WEBPACK_IMPORTED_MODULE_37__["DEFAULT_MONITOR_DPI"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "simulatorDevices", function() { return _components_simulator__WEBPACK_IMPORTED_MODULE_37__["simulatorDevices"]; });

/* harmony import */ var _components_results__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../components/results */ "./src/components/results.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyResultsItemModel", function() { return _components_results__WEBPACK_IMPORTED_MODULE_38__["SurveyResultsItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyResultsModel", function() { return _components_results__WEBPACK_IMPORTED_MODULE_38__["SurveyResultsModel"]; });

/* harmony import */ var _components_header_logo_image__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../components/header/logo-image */ "./src/components/header/logo-image.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogoImageViewModel", function() { return _components_header_logo_image__WEBPACK_IMPORTED_MODULE_39__["LogoImageViewModel"]; });

/* harmony import */ var _components_string_editor__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../components/string-editor */ "./src/components/string-editor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StringItemsNavigatorBase", function() { return _components_string_editor__WEBPACK_IMPORTED_MODULE_40__["StringItemsNavigatorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StringEditorConnector", function() { return _components_string_editor__WEBPACK_IMPORTED_MODULE_40__["StringEditorConnector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StringEditorViewModelBase", function() { return _components_string_editor__WEBPACK_IMPORTED_MODULE_40__["StringEditorViewModelBase"]; });

/* harmony import */ var _components_embedded_survey__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../components/embedded-survey */ "./src/components/embedded-survey.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionEmbeddedSurveyModel", function() { return _components_embedded_survey__WEBPACK_IMPORTED_MODULE_41__["QuestionEmbeddedSurveyModel"]; });

/* harmony import */ var _components_link_value__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../components/link-value */ "./src/components/link-value.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionLinkValueModel", function() { return _components_link_value__WEBPACK_IMPORTED_MODULE_42__["QuestionLinkValueModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EditorLocalization", function() { return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["EditorLocalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getLocString", function() { return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["getLocString"]; });

/* harmony import */ var _json5__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../json5 */ "./src/json5.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyJSON5", function() { return _json5__WEBPACK_IMPORTED_MODULE_43__["SurveyJSON5"]; });

/* harmony import */ var _custom_questions_question_spin_editor__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../custom-questions/question-spin-editor */ "./src/custom-questions/question-spin-editor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSpinEditorModel", function() { return _custom_questions_question_spin_editor__WEBPACK_IMPORTED_MODULE_44__["QuestionSpinEditorModel"]; });

/* harmony import */ var _custom_questions_question_color__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../custom-questions/question-color */ "./src/custom-questions/question-color.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionColorModel", function() { return _custom_questions_question_color__WEBPACK_IMPORTED_MODULE_45__["QuestionColorModel"]; });

/* harmony import */ var _custom_questions_question_file__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../custom-questions/question-file */ "./src/custom-questions/question-file.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFileEditorModel", function() { return _custom_questions_question_file__WEBPACK_IMPORTED_MODULE_46__["QuestionFileEditorModel"]; });

/* harmony import */ var _custom_questions_question_text_with_reset__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../custom-questions/question-text-with-reset */ "./src/custom-questions/question-text-with-reset.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResetValueAdorner", function() { return _custom_questions_question_text_with_reset__WEBPACK_IMPORTED_MODULE_47__["ResetValueAdorner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextWithResetModel", function() { return _custom_questions_question_text_with_reset__WEBPACK_IMPORTED_MODULE_47__["QuestionTextWithResetModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentWithResetModel", function() { return _custom_questions_question_text_with_reset__WEBPACK_IMPORTED_MODULE_47__["QuestionCommentWithResetModel"]; });

/* harmony import */ var _property_grid__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../property-grid */ "./src/property-grid/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setSurveyJSONForPropertyGrid", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["setSurveyJSONForPropertyGrid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyEditorSetupValue", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyEditorSetupValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorCollection", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTitleActionsCreator", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridTitleActionsCreator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyJSONGenerator", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyJSONGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridModel", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditor", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorBoolean", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorBoolean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorStringBase", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorStringBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorString", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridLinkEditor", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridLinkEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorColor", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorColor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorNumber", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorImageSize", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorImageSize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorText", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorText"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorHtml", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorHtml"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorStringArray", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorStringArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorDropdown", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorDropdown"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorSet", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorSet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorPage", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorPage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestion", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorQuestion"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionSelectBase", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorQuestionSelectBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionCarryForward", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorQuestionCarryForward"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionValue", function() { return _property_grid__WEBPACK_IMPORTED_MODULE_48__["PropertyGridEditorQuestionValue"]; });

/* harmony import */ var _property_grid_condition__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../property-grid/condition */ "./src/property-grid/condition.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorExpression", function() { return _property_grid_condition__WEBPACK_IMPORTED_MODULE_49__["PropertyGridEditorExpression"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorCondition", function() { return _property_grid_condition__WEBPACK_IMPORTED_MODULE_49__["PropertyGridEditorCondition"]; });

/* harmony import */ var _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../property-grid/matrices */ "./src/property-grid/matrices.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrix", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrix"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixItemValues", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixItemValues"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixRateValues", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixRateValues"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixColumns", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixColumns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixPages", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixPages"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixCalculatedValues", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixCalculatedValues"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixHtmlConditions", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixHtmlConditions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixUrlConditions", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixUrlConditions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixMutlipleTextItems", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixMutlipleTextItems"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixMultipleTypes", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixMultipleTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixValidators", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixValidators"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixTriggers", function() { return _property_grid_matrices__WEBPACK_IMPORTED_MODULE_50__["PropertyGridEditorMatrixTriggers"]; });

/* harmony import */ var _property_grid_bindings__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../property-grid/bindings */ "./src/property-grid/bindings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorBindings", function() { return _property_grid_bindings__WEBPACK_IMPORTED_MODULE_51__["PropertyGridEditorBindings"]; });

/* harmony import */ var _property_grid_property_grid_view_model__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../property-grid/property-grid-view-model */ "./src/property-grid/property-grid-view-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridViewModel", function() { return _property_grid_property_grid_view_model__WEBPACK_IMPORTED_MODULE_52__["PropertyGridViewModel"]; });

/* harmony import */ var _property_grid_object_selector__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../property-grid/object-selector */ "./src/property-grid/object-selector.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectSelectorItem", function() { return _property_grid_object_selector__WEBPACK_IMPORTED_MODULE_53__["ObjectSelectorItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectSelector", function() { return _property_grid_object_selector__WEBPACK_IMPORTED_MODULE_53__["ObjectSelector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectSelectorModel", function() { return _property_grid_object_selector__WEBPACK_IMPORTED_MODULE_53__["ObjectSelectorModel"]; });

/* harmony import */ var _property_grid_restfull__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../property-grid/restfull */ "./src/property-grid/restfull.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionRestfull", function() { return _property_grid_restfull__WEBPACK_IMPORTED_MODULE_54__["PropertyGridEditorQuestionRestfull"]; });

/* harmony import */ var _property_grid_values__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../property-grid/values */ "./src/property-grid/values.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridValueEditorBase", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridValueEditorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridCellsEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridCellsEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridValueEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridValueEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridRowValueEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridRowValueEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridPanelValueEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridPanelValueEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTriggerValueEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridTriggerValueEditor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTriggerValueInLogicEditor", function() { return _property_grid_values__WEBPACK_IMPORTED_MODULE_55__["PropertyGridTriggerValueInLogicEditor"]; });

/* harmony import */ var _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../property-grid-theme/property-grid */ "./src/property-grid-theme/property-grid.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propertyGridCss", function() { return _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_56__["propertyGridCss"]; });

/* harmony import */ var _questionconverter__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../questionconverter */ "./src/questionconverter.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionConverter", function() { return _questionconverter__WEBPACK_IMPORTED_MODULE_57__["QuestionConverter"]; });

/* harmony import */ var _svgbundle__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../svgbundle */ "./src/svgbundle.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "svgBundle", function() { return _svgbundle__WEBPACK_IMPORTED_MODULE_58__["svgBundle"]; });

/* harmony import */ var _textWorker__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../textWorker */ "./src/textWorker.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerError", function() { return _textWorker__WEBPACK_IMPORTED_MODULE_59__["SurveyTextWorkerError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerParserError", function() { return _textWorker__WEBPACK_IMPORTED_MODULE_59__["SurveyTextWorkerParserError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerJsonError", function() { return _textWorker__WEBPACK_IMPORTED_MODULE_59__["SurveyTextWorkerJsonError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorker", function() { return _textWorker__WEBPACK_IMPORTED_MODULE_59__["SurveyTextWorker"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonDuplicateNameError", function() { return _textWorker__WEBPACK_IMPORTED_MODULE_59__["JsonDuplicateNameError"]; });

/* harmony import */ var _toolbox__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../toolbox */ "./src/toolbox.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionToolboxCategory", function() { return _toolbox__WEBPACK_IMPORTED_MODULE_60__["QuestionToolboxCategory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionToolboxItem", function() { return _toolbox__WEBPACK_IMPORTED_MODULE_60__["QuestionToolboxItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionToolbox", function() { return _toolbox__WEBPACK_IMPORTED_MODULE_60__["QuestionToolbox"]; });

/* harmony import */ var _components_side_bar_side_bar_model__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../components/side-bar/side-bar-model */ "./src/components/side-bar/side-bar-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SidebarModel", function() { return _components_side_bar_side_bar_model__WEBPACK_IMPORTED_MODULE_61__["SidebarModel"]; });

/* harmony import */ var _components_side_bar_side_bar_tab_model__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../components/side-bar/side-bar-tab-model */ "./src/components/side-bar/side-bar-tab-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SidebarTabModel", function() { return _components_side_bar_side_bar_tab_model__WEBPACK_IMPORTED_MODULE_62__["SidebarTabModel"]; });

/* harmony import */ var _utils_events__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../utils/events */ "./src/utils/events.ts");
/* empty/unused harmony star reexport *//* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNextItemValue", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getNextItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNextItemText", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getNextItemText"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNextValue", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getNextValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findParentNode", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["findParentNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "focusFirstControl", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["focusFirstControl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFirstNonTextElement", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getFirstNonTextElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNodesFromKoComponentInfo", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getNodesFromKoComponentInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propertyExists", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["propertyExists"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPropertyVisible", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["isPropertyVisible"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toggleHovered", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["toggleHovered"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clearNewLines", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["clearNewLines"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "select", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["select"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyObject", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["copyObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyCssClasses", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["copyCssClasses"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assignDefaultV2Classes", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["assignDefaultV2Classes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wrapTextByCurlyBraces", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["wrapTextByCurlyBraces"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["capitalize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "notShortCircuitAnd", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["notShortCircuitAnd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "imageMimeTypes", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["imageMimeTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getAcceptedTypesByContentMode", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getAcceptedTypesByContentMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getQuestionFromObj", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["getQuestionFromObj"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ingectAlpha", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["ingectAlpha"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "convertRgbaToString", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["convertRgbaToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseRgbaFromString", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["parseRgbaFromString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseColor", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["parseColor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HSBToRGB", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["HSBToRGB"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RGBToHSB", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["RGBToHSB"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assign", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["assign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorCalculator", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["ColorCalculator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "saveToFileHandler", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_64__["saveToFileHandler"]; });

/* harmony import */ var _question_editor_definition__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../question-editor/definition */ "./src/question-editor/definition.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorDefinition", function() { return _question_editor_definition__WEBPACK_IMPORTED_MODULE_65__["SurveyQuestionEditorDefinition"]; });

/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjType", function() { return _survey_helper__WEBPACK_IMPORTED_MODULE_66__["ObjType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyHelper", function() { return _survey_helper__WEBPACK_IMPORTED_MODULE_66__["SurveyHelper"]; });

/* harmony import */ var _utils_resizer__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../utils/resizer */ "./src/utils/resizer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResizeManager", function() { return _utils_resizer__WEBPACK_IMPORTED_MODULE_67__["ResizeManager"]; });

/* harmony import */ var _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../plugins/undo-redo */ "./src/plugins/undo-redo/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UndoRedoPlugin", function() { return _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_68__["UndoRedoPlugin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "undoRedoTransaction", function() { return _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_68__["undoRedoTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ignoreUndoRedo", function() { return _plugins_undo_redo__WEBPACK_IMPORTED_MODULE_68__["ignoreUndoRedo"]; });

/* harmony import */ var _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../plugins/undo-redo/undo-redo-manager */ "./src/plugins/undo-redo/undo-redo-manager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UndoRedoManager", function() { return _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_69__["UndoRedoManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_69__["Transaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UndoRedoAction", function() { return _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_69__["UndoRedoAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UndoRedoArrayAction", function() { return _plugins_undo_redo_undo_redo_manager__WEBPACK_IMPORTED_MODULE_69__["UndoRedoArrayAction"]; });

/* harmony import */ var _pages_controller__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../pages-controller */ "./src/pages-controller.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PagesController", function() { return _pages_controller__WEBPACK_IMPORTED_MODULE_70__["PagesController"]; });

/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_71___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_71__);
var Version;
Version = "" + "1.9.113";
//should be loaded before other styles for easier override 
__webpack_require__(/*! ../utils/context-button.scss */ "./src/utils/context-button.scss");














































//custom questions for property grid



























__webpack_require__(/*! ../components/property-panel/property-panel-item.scss */ "./src/components/property-panel/property-panel-item.scss");
__webpack_require__(/*! ../components/property-panel/property-panel.scss */ "./src/components/property-panel/property-panel.scss");
__webpack_require__(/*! ../components/tabbed-menu/tabbed-menu-item.scss */ "./src/components/tabbed-menu/tabbed-menu-item.scss");
__webpack_require__(/*! ../components/tabbed-menu/tabbed-menu.scss */ "./src/components/tabbed-menu/tabbed-menu.scss");
__webpack_require__(/*! ../components/toolbox/toolbox-tool.scss */ "./src/components/toolbox/toolbox-tool.scss");
__webpack_require__(/*! ../components/question-dropdown.scss */ "./src/components/question-dropdown.scss");
__webpack_require__(/*! ../components/toolbox/toolbox.scss */ "./src/components/toolbox/toolbox.scss");
__webpack_require__(/*! ../components/side-bar/side-bar.scss */ "./src/components/side-bar/side-bar.scss");
__webpack_require__(/*! ../property-grid-theme/property-grid.scss */ "./src/property-grid-theme/property-grid.scss");
__webpack_require__(/*! ../utils/design.scss */ "./src/utils/design.scss");
__webpack_require__(/*! ../utils/layout.scss */ "./src/utils/layout.scss");

survey_core__WEBPACK_IMPORTED_MODULE_71__["settings"].supportCreatorV2 = true;
Object(survey_core__WEBPACK_IMPORTED_MODULE_71__["checkLibraryVersion"])("" + "1.9.113", "survey-creator-core");


/***/ }),

/***/ "./src/expressionToDisplayText.ts":
/*!****************************************!*\
  !*** ./src/expressionToDisplayText.ts ***!
  \****************************************/
/*! exports provided: ExpressionToDisplayText, ExpressionRemoveVariable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionToDisplayText", function() { return ExpressionToDisplayText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionRemoveVariable", function() { return ExpressionRemoveVariable; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");



var ExpressionToDisplayText = /** @class */ (function () {
    function ExpressionToDisplayText(survey, options) {
        if (options === void 0) { options = null; }
        this.survey = survey;
        this.options = options;
    }
    ExpressionToDisplayText.prototype.toDisplayText = function (expression) {
        if (!this.survey)
            return expression;
        this.showTitles =
            !!this.options && this.options.showTitlesInExpressions == true;
        var parser = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ConditionsParser"]();
        var node = parser.parseExpression(expression);
        if (!node)
            return expression;
        if (!!node["getType"])
            return this.toDisplayTextCore(node);
        if (!this.showTitles)
            return expression;
        var variables = [];
        node.setVariables(variables);
        return this.replaceVariables(expression, variables);
    };
    ExpressionToDisplayText.prototype.toExpression = function (node) {
        return this.toDisplayTextCore(node);
    };
    ExpressionToDisplayText.prototype.toDisplayTextCore = function (node) {
        this.currentQuestion = null;
        var self = this;
        var isRoot = true;
        var strFunc = function (op) {
            var locIsRoot = isRoot;
            isRoot = false;
            if (self.showTitles && op.getType() == "variable") {
                return self.getQuestionText(op);
            }
            if (self.showTitles && op.getType() == "const") {
                return self.getDisplayText(op);
            }
            if (op.getType() == "binary") {
                self.proceedBinary(op);
                return self.getDisplayBinary(op, locIsRoot, strFunc);
            }
            if (op.getType() == "unary") {
                return self.getDisplayUnary(op, strFunc);
            }
            return undefined;
        };
        return node.toString(strFunc);
    };
    ExpressionToDisplayText.prototype.getQuestionText = function (op) {
        var question = this.getQuestionByName(op.variable);
        if (!question || !question.title)
            return op.variable;
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["wrapTextByCurlyBraces"])(question.title);
    };
    ExpressionToDisplayText.prototype.getDisplayText = function (op) {
        if (!this.currentQuestion)
            return undefined;
        var res = this.currentQuestion.getDisplayValue(true, op.correctValue);
        return !!res ? new survey_core__WEBPACK_IMPORTED_MODULE_0__["Const"](res).toString() : undefined;
    };
    ExpressionToDisplayText.prototype.getDisplayOperand = function (op, func) {
        return !!op ? op.toString(func) : "";
    };
    ExpressionToDisplayText.prototype.getDisplayOperator = function (operator) {
        var res = ExpressionToDisplayText.operatorText[operator];
        if (!!res)
            return res;
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("op." + operator);
    };
    ExpressionToDisplayText.prototype.getDisplayBinary = function (op, isRoot, func) {
        return ((isRoot ? "" : "(") +
            this.getDisplayOperand(op.leftOperand, func) +
            " " +
            this.getDisplayOperator(op.operator) +
            " " +
            this.getDisplayOperand(op.rightOperand, func) +
            (isRoot ? "" : ")"));
    };
    ExpressionToDisplayText.prototype.getDisplayUnary = function (op, func) {
        var exp = op.expression.toString(func);
        var operator = this.getDisplayOperator(op.operator);
        if (op.operator == "empty" || op.operator == "notempty")
            return exp + " " + operator;
        return operator + " " + exp;
    };
    ExpressionToDisplayText.prototype.proceedBinary = function (op) {
        if (op.isArithmetic || op.isConjunction) {
            this.currentQuestion = null;
            return;
        }
        this.currentQuestion = this.getQuestionFromOperands(op.leftOperand, op.rightOperand);
        if (!this.currentQuestion) {
            this.currentQuestion = this.getQuestionFromOperands(op.rightOperand, op.leftOperand);
        }
    };
    ExpressionToDisplayText.prototype.getQuestionFromOperands = function (op1, op2) {
        if (!op1 || !op2)
            return null;
        if (op1.getType() != "variable")
            return null;
        var op2Type = op2.getType();
        if (op2Type != "const" && op2Type != "function" && op2Type != "array")
            return null;
        return this.getQuestionByName(op1.variable);
    };
    ExpressionToDisplayText.prototype.replaceVariables = function (expression, variables) {
        for (var i = 0; i < variables.length; i++) {
            expression = this.replaceVariable(expression, variables[i]);
        }
        return expression;
    };
    ExpressionToDisplayText.prototype.replaceVariable = function (expression, variable) {
        var question = this.getQuestionByName(variable);
        if (!question || !question.title)
            return expression;
        return expression.replace(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["wrapTextByCurlyBraces"])(variable), Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["wrapTextByCurlyBraces"])(question.title));
    };
    ExpressionToDisplayText.prototype.getQuestionByName = function (name) {
        if (!this.survey)
            return null;
        return this.survey.getQuestionByValueName(name);
    };
    ExpressionToDisplayText.operatorText = {
        less: "<",
        lessorequal: "<=",
        greater: ">",
        greaterorequal: ">=",
        equal: "==",
        notequal: "!=",
        plus: "+",
        minus: "-",
        mul: "*",
        div: "/",
        power: "^",
        mod: "%",
        negate: "!",
    };
    return ExpressionToDisplayText;
}());

var ExpressionRemoveVariable = /** @class */ (function () {
    function ExpressionRemoveVariable() {
    }
    ExpressionRemoveVariable.prototype.remove = function (expression, variable) {
        var parser = new survey_core__WEBPACK_IMPORTED_MODULE_0__["ConditionsParser"]();
        var node = parser.parseExpression(expression);
        if (!node)
            return expression;
        this.wasRemoved = false;
        if (!!node["getType"]) {
            var op = this.processOperand(node, variable);
            if (!this.wasRemoved)
                return expression;
            return !!op ? op.toString() : "";
        }
        return expression;
    };
    ExpressionRemoveVariable.prototype.processOperand = function (op, variable) {
        if (!op)
            return null;
        if (op.getType() == "variable") {
            return this.processVariable(op, variable);
        }
        if (op.getType() == "unary") {
            return this.processUnary(op, variable);
        }
        if (op.getType() == "binary") {
            return this.proceedBinary(op, variable);
        }
        return op;
    };
    ExpressionRemoveVariable.prototype.processVariable = function (op, variable) {
        if (op.variable !== variable)
            return op;
        this.wasRemoved = true;
        return null;
    };
    ExpressionRemoveVariable.prototype.processUnary = function (op, variable) {
        var expression = this.processOperand(op.expression, variable);
        if (!!expression)
            return op;
        this.wasRemoved = true;
        return null;
    };
    ExpressionRemoveVariable.prototype.proceedBinary = function (op, variable) {
        var left = this.processOperand(op.leftOperand, variable);
        var right = this.processOperand(op.rightOperand, variable);
        if (!!left && !!right) {
            if (left !== op.leftOperand || right !== op.rightOperand)
                return new survey_core__WEBPACK_IMPORTED_MODULE_0__["BinaryOperand"](op.operator, left, right, op.isArithmetic);
            return op;
        }
        if (!left && !right)
            return null;
        var res = !!left ? left : right;
        return res.getType() == "binary" ? res : null;
    };
    return ExpressionRemoveVariable;
}());



/***/ }),

/***/ "./src/images sync \\.svg$":
/*!*********************************************!*\
  !*** ./src/images sync nonrecursive \.svg$ ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./add-lg.svg": "./src/images/add-lg.svg",
	"./add.svg": "./src/images/add.svg",
	"./add_16x16.svg": "./src/images/add_16x16.svg",
	"./apply.svg": "./src/images/apply.svg",
	"./arrow-down.svg": "./src/images/arrow-down.svg",
	"./arrow-left.svg": "./src/images/arrow-left.svg",
	"./arrow-left_16x16.svg": "./src/images/arrow-left_16x16.svg",
	"./arrow-right.svg": "./src/images/arrow-right.svg",
	"./arrow-right_16x16.svg": "./src/images/arrow-right_16x16.svg",
	"./arrow-up.svg": "./src/images/arrow-up.svg",
	"./boolean.svg": "./src/images/boolean.svg",
	"./change-question-type_16x16.svg": "./src/images/change-question-type_16x16.svg",
	"./checkbox.svg": "./src/images/checkbox.svg",
	"./checked.svg": "./src/images/checked.svg",
	"./clear.svg": "./src/images/clear.svg",
	"./clear_16x16.svg": "./src/images/clear_16x16.svg",
	"./collapse-detail-light_16x16.svg": "./src/images/collapse-detail-light_16x16.svg",
	"./collapse-detail_16x16.svg": "./src/images/collapse-detail_16x16.svg",
	"./collapse-panel.svg": "./src/images/collapse-panel.svg",
	"./collapse_16x16.svg": "./src/images/collapse_16x16.svg",
	"./color-picker.svg": "./src/images/color-picker.svg",
	"./comment.svg": "./src/images/comment.svg",
	"./config.svg": "./src/images/config.svg",
	"./copy.svg": "./src/images/copy.svg",
	"./default.svg": "./src/images/default.svg",
	"./delete_16x16.svg": "./src/images/delete_16x16.svg",
	"./description-hide.svg": "./src/images/description-hide.svg",
	"./description.svg": "./src/images/description.svg",
	"./device-desktop.svg": "./src/images/device-desktop.svg",
	"./device-phone.svg": "./src/images/device-phone.svg",
	"./device-rotate.svg": "./src/images/device-rotate.svg",
	"./device-tablet.svg": "./src/images/device-tablet.svg",
	"./download.svg": "./src/images/download.svg",
	"./drag-area-indicator.svg": "./src/images/drag-area-indicator.svg",
	"./drag-area-indicator_24x16.svg": "./src/images/drag-area-indicator_24x16.svg",
	"./drop-down-arrow.svg": "./src/images/drop-down-arrow.svg",
	"./drop-down-arrow_16x16.svg": "./src/images/drop-down-arrow_16x16.svg",
	"./dropdown.svg": "./src/images/dropdown.svg",
	"./duplicate_16x16.svg": "./src/images/duplicate_16x16.svg",
	"./edit.svg": "./src/images/edit.svg",
	"./edit_16x16.svg": "./src/images/edit_16x16.svg",
	"./editing-finish.svg": "./src/images/editing-finish.svg",
	"./error.svg": "./src/images/error.svg",
	"./expand-detail-light_16x16.svg": "./src/images/expand-detail-light_16x16.svg",
	"./expand-detail_16x16.svg": "./src/images/expand-detail_16x16.svg",
	"./expand-panel.svg": "./src/images/expand-panel.svg",
	"./expand_16x16.svg": "./src/images/expand_16x16.svg",
	"./export.svg": "./src/images/export.svg",
	"./expression.svg": "./src/images/expression.svg",
	"./fast-entry.svg": "./src/images/fast-entry.svg",
	"./file.svg": "./src/images/file.svg",
	"./fix.svg": "./src/images/fix.svg",
	"./html.svg": "./src/images/html.svg",
	"./image.svg": "./src/images/image.svg",
	"./imagepicker.svg": "./src/images/imagepicker.svg",
	"./import.svg": "./src/images/import.svg",
	"./invisible-items.svg": "./src/images/invisible-items.svg",
	"./keyboard-dragging.svg": "./src/images/keyboard-dragging.svg",
	"./language.svg": "./src/images/language.svg",
	"./load.svg": "./src/images/load.svg",
	"./logic-collapse.svg": "./src/images/logic-collapse.svg",
	"./logic-expand.svg": "./src/images/logic-expand.svg",
	"./logo.svg": "./src/images/logo.svg",
	"./matrix.svg": "./src/images/matrix.svg",
	"./matrixdropdown.svg": "./src/images/matrixdropdown.svg",
	"./matrixdynamic.svg": "./src/images/matrixdynamic.svg",
	"./multipletext.svg": "./src/images/multipletext.svg",
	"./next_16x16.svg": "./src/images/next_16x16.svg",
	"./panel.svg": "./src/images/panel.svg",
	"./paneldynamic.svg": "./src/images/paneldynamic.svg",
	"./preview.svg": "./src/images/preview.svg",
	"./previous_16x16.svg": "./src/images/previous_16x16.svg",
	"./radiogroup.svg": "./src/images/radiogroup.svg",
	"./ranking.svg": "./src/images/ranking.svg",
	"./rating.svg": "./src/images/rating.svg",
	"./redo.svg": "./src/images/redo.svg",
	"./remove_16x16.svg": "./src/images/remove_16x16.svg",
	"./required.svg": "./src/images/required.svg",
	"./reset.svg": "./src/images/reset.svg",
	"./save.svg": "./src/images/save.svg",
	"./select-page.svg": "./src/images/select-page.svg",
	"./settings.svg": "./src/images/settings.svg",
	"./settings_16x16.svg": "./src/images/settings_16x16.svg",
	"./signaturepad.svg": "./src/images/signaturepad.svg",
	"./switch-active_16x16.svg": "./src/images/switch-active_16x16.svg",
	"./switch-inactive_16x16.svg": "./src/images/switch-inactive_16x16.svg",
	"./tagbox.svg": "./src/images/tagbox.svg",
	"./text.svg": "./src/images/text.svg",
	"./theme.svg": "./src/images/theme.svg",
	"./toolbox.svg": "./src/images/toolbox.svg",
	"./undo.svg": "./src/images/undo.svg",
	"./visible.svg": "./src/images/visible.svg",
	"./wizard.svg": "./src/images/wizard.svg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/images sync \\.svg$";

/***/ }),

/***/ "./src/images/add-lg.svg":
/*!*******************************!*\
  !*** ./src/images/add-lg.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 11H17V13H13V17H11V13H7V11H11V7H13V11ZM24 12C24 18.6 18.6 24 12 24C5.4 24 0 18.6 0 12C0 5.4 5.4 0 12 0C18.6 0 24 5.4 24 12ZM22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12Z\"></path></svg>"

/***/ }),

/***/ "./src/images/add.svg":
/*!****************************!*\
  !*** ./src/images/add.svg ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 11H17V13H13V17H11V13H7V11H11V7H13V11ZM23 12C23 18.1 18.1 23 12 23C5.9 23 1 18.1 1 12C1 5.9 5.9 1 12 1C18.1 1 23 5.9 23 12ZM21 12C21 7 17 3 12 3C7 3 3 7 3 12C3 17 7 21 12 21C17 21 21 17 21 12Z\"></path></svg>"

/***/ }),

/***/ "./src/images/add_16x16.svg":
/*!**********************************!*\
  !*** ./src/images/add_16x16.svg ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 7H12V9H9V12H7V9H4V7H7V4H9V7ZM16 8C16 12.4 12.4 16 8 16C3.6 16 0 12.4 0 8C0 3.6 3.6 0 8 0C12.4 0 16 3.6 16 8ZM14 8C14 4.7 11.3 2 8 2C4.7 2 2 4.7 2 8C2 11.3 4.7 14 8 14C11.3 14 14 11.3 14 8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/apply.svg":
/*!******************************!*\
  !*** ./src/images/apply.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 1C5.9 1 1 5.9 1 12C1 18.1 5.9 23 12 23C18.1 23 23 18.1 23 12C23 5.9 18.1 1 12 1ZM12 21C7 21 3 17 3 12C3 7 7 3 12 3C17 3 21 7 21 12C21 17 17 21 12 21ZM16.3 8L17.7 9.4L10 17.1L6.3 13.4L7.7 12L10 14.3L16.3 8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-down.svg":
/*!***********************************!*\
  !*** ./src/images/arrow-down.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.01 11.59L13.01 15.59V6H11.01V15.59L7.00998 11.59L5.59998 13L12.01 19.41L18.43 13L17.01 11.59Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-left.svg":
/*!***********************************!*\
  !*** ./src/images/arrow-left.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.4 2.60001L11.8 4.00001L4.8 11H22V13H4.8L11.8 20L10.4 21.4L1 12L10.4 2.60001Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-left_16x16.svg":
/*!*****************************************!*\
  !*** ./src/images/arrow-left_16x16.svg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 8.99999H4.39998L8.69998 13.3L7.29998 14.7L0.599976 7.99999L7.29998 1.29999L8.69998 2.69999L4.39998 6.99999H15V8.99999V8.99999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-right.svg":
/*!************************************!*\
  !*** ./src/images/arrow-right.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.6 2.60001L12.2 4.00001L19.2 11H2V13H19.2L12.2 20L13.6 21.4L23 12L13.6 2.60001Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-right_16x16.svg":
/*!******************************************!*\
  !*** ./src/images/arrow-right_16x16.svg ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1 6.99999H11.6L7.3 2.69999L8.7 1.29999L15.4 7.99999L8.7 14.7L7.3 13.3L11.6 8.99999H1V6.99999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/arrow-up.svg":
/*!*********************************!*\
  !*** ./src/images/arrow-up.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.43 11.01L12.01 4.60001L5.59998 11.01L7.00998 12.43L11.01 8.43001V18.01H13.01V8.43001L17.01 12.43L18.43 11.01Z\"></path></svg>"

/***/ }),

/***/ "./src/images/boolean.svg":
/*!********************************!*\
  !*** ./src/images/boolean.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 11H17C19.8 11 22 8.8 22 6C22 3.2 19.8 1 17 1H7C4.2 1 2 3.2 2 6C2 8.8 4.2 11 7 11ZM7 3H17C18.7 3 20 4.3 20 6C20 7.7 18.7 9 17 9H7C5.3 9 4 7.7 4 6C4 4.3 5.3 3 7 3ZM5 6C5 4.9 5.9 4 7 4C8.1 4 9 4.9 9 6C9 7.1 8.1 8 7 8C5.9 8 5 7.1 5 6ZM19 18C19 19.1 18.1 20 17 20C15.9 20 15 19.1 15 18C15 16.9 15.9 16 17 16C18.1 16 19 16.9 19 18ZM17 13H7C4.2 13 2 15.2 2 18C2 20.8 4.2 23 7 23H17C19.8 23 22 20.8 22 18C22 15.2 19.8 13 17 13ZM17 21H7C5.3 21 4 19.7 4 18C4 16.3 5.3 15 7 15H17C18.7 15 20 16.3 20 18C20 19.7 18.7 21 17 21Z\"></path></svg>"

/***/ }),

/***/ "./src/images/change-question-type_16x16.svg":
/*!***************************************************!*\
  !*** ./src/images/change-question-type_16x16.svg ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 2V7H10L12 5C11.1 3.8 9.6 3 8 3C5.2 3 3 5.2 3 8H1C1 4.1 4.1 1 8 1C10.2 1 12.1 2 13.4 3.6L15 2ZM8 13C6.4 13 4.9 12.2 4 11L6 9H1V14L2.6 12.4C3.9 14 5.8 15 8 15C11.9 15 15 11.9 15 8H13C13 10.8 10.8 13 8 13Z\"></path></svg>"

/***/ }),

/***/ "./src/images/checkbox.svg":
/*!*********************************!*\
  !*** ./src/images/checkbox.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19 8.90001L21 6.10001V19C21 20.1 20.1 21 19 21H5C3.9 21 3 20.1 3 19V5.00001C3 3.90001 3.9 3.00001 5 3.00001H19C19 3.00001 19 3.00001 19.1 3.00001L20.8 0.600006L22.4 1.80001L11.1 17.5L6.6 13L8 11.6L10.9 14.5L17.7 5.00001H5V19H19V8.90001Z\"></path></svg>"

/***/ }),

/***/ "./src/images/checked.svg":
/*!********************************!*\
  !*** ./src/images/checked.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 20.1L1 12L3.1 9.9L9 15.9L20.9 4L23 6.1L9 20.1Z\"></path></svg>"

/***/ }),

/***/ "./src/images/clear.svg":
/*!******************************!*\
  !*** ./src/images/clear.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22.6 8.6L16.4 2.4C16 2 15.5 1.8 15 1.8C14.5 1.8 14 2 13.6 2.4L1.4 14.6C0.600003 15.4 0.600003 16.6 1.4 17.4L6 22H12L22.6 11.4C23.3 10.6 23.3 9.3 22.6 8.6ZM11.1 20H6.8L2.8 16L6.2 12.6L12.4 18.8L11.1 20ZM13.8 17.4L7.6 11.2L15 3.8L21.2 10L13.8 17.4ZM16 20H23V22H14L16 20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/clear_16x16.svg":
/*!************************************!*\
  !*** ./src/images/clear_16x16.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.35 3.34999L12.65 2.64999L8.05002 7.24999L3.35002 2.64999L2.65002 3.34999L7.25002 8.04999L2.65002 12.65L3.35002 13.35L8.05002 8.74999L12.65 13.35L13.35 12.65L8.75002 8.04999L13.35 3.34999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/collapse-detail-light_16x16.svg":
/*!****************************************************!*\
  !*** ./src/images/collapse-detail-light_16x16.svg ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 7H3V9H13V7Z\"></path></svg>"

/***/ }),

/***/ "./src/images/collapse-detail_16x16.svg":
/*!**********************************************!*\
  !*** ./src/images/collapse-detail_16x16.svg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 9H4V7H12V9ZM16 0V16H0V0H16ZM14 2H2V14H14V2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/collapse-panel.svg":
/*!***************************************!*\
  !*** ./src/images/collapse-panel.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 5.6L19.4 12L13 18.4L11.6 17L15.6 13H2V11H15.6L11.6 7L13 5.6ZM20 2V22H22V2H20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/collapse_16x16.svg":
/*!***************************************!*\
  !*** ./src/images/collapse_16x16.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2 6L3 5L8 10L13 5L14 6L8 12L2 6Z\"></path></svg>"

/***/ }),

/***/ "./src/images/color-picker.svg":
/*!*************************************!*\
  !*** ./src/images/color-picker.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3.31 15.0002C2.69 15.0002 2.11 14.7602 1.68 14.3202C0.780005 13.4202 0.780005 11.9502 1.68 11.0502L2.45 10.2802C2.45 10.1802 2.44 10.0802 2.44 9.98023C2.44 9.02023 2.81 8.12023 3.49 7.44023L5.6 5.33023C5.37 5.04023 5.25 4.68023 5.25 4.31023C5.25 3.86023 5.42 3.44023 5.74 3.12023C6.06 2.80023 6.48 2.63023 6.92 2.63023C7.29 2.63023 7.65 2.75023 7.94 2.98023L8.88 2.04023C9.56 1.36023 10.46 0.990234 11.41 0.990234C12.36 0.990234 13.27 1.36023 13.95 2.04023C14.63 2.72023 15 3.62023 15 4.58023C15 5.54023 14.63 6.44023 13.95 7.12023L12.94 8.13023C13.04 8.34023 13.09 8.58023 13.09 8.82023C13.09 9.27023 12.92 9.69023 12.6 10.0002C12.28 10.3102 11.86 10.4902 11.42 10.4902C11.18 10.4902 10.94 10.4402 10.73 10.3402L8.56 12.5102C7.88 13.1902 6.98 13.5602 6.03 13.5602C5.93 13.5602 5.83 13.5602 5.73 13.5402L4.97 14.3002C4.53 14.7402 3.95 14.9802 3.34 14.9802L3.31 15.0002Z\" fill=\"black\" fill-opacity=\"0.15\"></path><path d=\"M14.0001 4.57969C14.0001 3.88969 13.7301 3.23969 13.2401 2.74969C12.2301 1.73969 10.5901 1.73969 9.58006 2.74969L7.94006 4.38969L7.39006 3.83969C7.13006 3.57969 6.70006 3.57969 6.44006 3.83969C6.18006 4.09969 6.18006 4.52969 6.44006 4.78969L6.99006 5.33969L4.18006 8.14969C3.69006 8.63969 3.42006 9.28969 3.42006 9.97969C3.42006 10.1997 3.46006 10.4097 3.51006 10.6197L2.38006 11.7497C1.87006 12.2597 1.87006 13.0897 2.38006 13.6097C2.64006 13.8697 2.97006 13.9897 3.31006 13.9897C3.65006 13.9897 3.98006 13.8597 4.24006 13.6097L5.37006 12.4797C5.58006 12.5297 5.79006 12.5697 6.01006 12.5697C6.70006 12.5697 7.35006 12.2997 7.84006 11.8097L10.6501 8.99969L10.9401 9.28969C11.0701 9.41969 11.2401 9.48969 11.4201 9.48969C11.6001 9.48969 11.7701 9.41969 11.9001 9.28969C12.1601 9.02969 12.1601 8.59969 11.9001 8.33969L11.6101 8.04969L13.2501 6.40969C13.7401 5.91969 14.0101 5.26969 14.0101 4.57969H14.0001ZM6.89006 10.8597C6.42006 11.3297 5.61006 11.3297 5.14006 10.8597C4.91006 10.6297 4.78006 10.3197 4.78006 9.98969C4.78006 9.65969 4.91006 9.34969 5.14006 9.11969L7.95006 6.30969L9.70006 8.05969L6.89006 10.8697V10.8597Z\"></path></svg>"

/***/ }),

/***/ "./src/images/comment.svg":
/*!********************************!*\
  !*** ./src/images/comment.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 3H4C2.9 3 2 3.9 2 5V19C2 20.1 2.9 21 4 21H20C21.1 21 22 20.1 22 19V5C22 3.9 21.1 3 20 3ZM20 19H4V5H20V19ZM18 9H6V7H18V9ZM18 13H6V11H18V13ZM12 17H6V15H12V17Z\"></path></svg>"

/***/ }),

/***/ "./src/images/config.svg":
/*!*******************************!*\
  !*** ./src/images/config.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 25 24\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_19827_2206)\"><path d=\"M15.13 2.02C15.74 2.02 16.33 2.11 16.9 2.25L13.63 5.52C12.25 6.9 12.25 9.14 13.63 10.52C14.32 11.21 15.23 11.56 16.13 11.56C17.03 11.56 17.94 11.21 18.63 10.52L21.9 7.25C22.05 7.82 22.13 8.41 22.13 9.02C22.13 12.89 19 16.02 15.13 16.02C13.97 16.02 12.88 15.73 11.92 15.23L6.13 21.02C5.72 21.43 5.17 21.64 4.63 21.64C4.09 21.64 3.54 21.43 3.13 21.02C2.3 20.19 2.3 18.85 3.13 18.02L8.92 12.23C8.42 11.27 8.13 10.18 8.13 9.02C8.13 5.15 11.26 2.02 15.13 2.02ZM15.13 0.02C10.17 0.02 6.13 4.06 6.13 9.02C6.13 9.95 6.28 10.88 6.56 11.76L1.71 16.61C0.93 17.39 0.5 18.42 0.5 19.52C0.5 20.62 0.93 21.66 1.71 22.43C2.49 23.21 3.52 23.64 4.62 23.64C5.72 23.64 6.76 23.21 7.53 22.43L12.38 17.58C13.27 17.86 14.19 18.01 15.12 18.01C20.08 18.01 24.12 13.97 24.12 9.01C24.12 8.26 24.02 7.5 23.82 6.74C23.64 6.05 23.1 5.5 22.41 5.31C22.24 5.26 22.06 5.24 21.89 5.24C21.37 5.24 20.86 5.45 20.48 5.83L17.21 9.1C16.92 9.39 16.53 9.55 16.12 9.55C15.71 9.55 15.32 9.39 15.03 9.1C14.74 8.81 14.58 8.42 14.58 8.01C14.58 7.6 14.74 7.21 15.03 6.92L18.3 3.65C18.81 3.14 19 2.4 18.82 1.71C18.63 1.02 18.09 0.48 17.39 0.3C16.63 0.1 15.87 0 15.12 0L15.13 0.02Z\"></path></g><defs><clipPath id=\"clip0_19827_2206\"><rect width=\"24\" height=\"24\" transform=\"translate(0.5)\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/copy.svg":
/*!*****************************!*\
  !*** ./src/images/copy.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 1H9C7.9 1 7 1.9 7 3V7H3C1.9 7 1 7.9 1 9V21C1 22.1 1.9 23 3 23H15C16.1 23 17 22.1 17 21V17H21C22.1 17 23 16.1 23 15V3C23 1.9 22.1 1 21 1ZM15 21H3V9H15V21ZM21 15H17V9C17 7.9 16.1 7 15 7H9V3H21V15Z\" fill=\"black\" fill-opacity=\"0.45\"></path></svg>"

/***/ }),

/***/ "./src/images/default.svg":
/*!********************************!*\
  !*** ./src/images/default.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 4C16.41 4 20 7.14 20 11C19.9901 11.928 19.7826 12.8433 19.3911 13.6847C18.9997 14.5262 18.4334 15.2746 17.73 15.88C17.5103 16.0801 17.338 16.3266 17.2256 16.6017C17.1132 16.8767 17.0634 17.1733 17.08 17.47C16.7752 17.2972 16.4304 17.2076 16.08 17.21C15.8237 17.212 15.5698 17.2594 15.33 17.35C14.2722 17.7789 13.1415 17.9996 12 18C7.59 18 4 14.86 4 11C4 7.14 7.59 4 12 4ZM12 2C6.48 2 2 6 2 11C2 16 6.48 20 12 20C13.4012 19.9996 14.7894 19.7314 16.09 19.21L20 22L19.07 17.36C19.9796 16.5667 20.711 15.5899 21.216 14.4937C21.721 13.3975 21.9882 12.2069 22 11C22 6 17.52 2 12 2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/delete_16x16.svg":
/*!*************************************!*\
  !*** ./src/images/delete_16x16.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 2H14H11V1C11 0.4 10.6 0 10 0H7C6.4 0 6 0.4 6 1V2H3H2V4H3V14C3 15.1 3.9 16 5 16H12C13.1 16 14 15.1 14 14V4H15V2ZM7 1H10V2H7V1ZM12 14H5V4H12V14ZM7 13H6V5H7V13ZM9 13H8V5H9V13ZM11 13H10V5H11V13Z\"></path></svg>"

/***/ }),

/***/ "./src/images/description-hide.svg":
/*!*****************************************!*\
  !*** ./src/images/description-hide.svg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.3 3.7L3.6 5C2 6.9 1 9.3 1 12C1 18.1 5.9 23 12 23C14.7 23 17.1 22 19 20.4L20.3 21.7L21.7 20.3L3.7 2.3L2.3 3.7ZM12 21C7 21 3 17 3 12C3 9.9 3.7 7.9 5 6.4L10.8 12.2C10.7 12.3 10.6 12.4 10.6 12.5C10.5 12.7 10.4 13 10.4 13.3C10.4 13.6 10.5 13.9 10.6 14.1C10.7 14.3 10.8 14.5 10.9 14.8C11 15 11.2 15.1 11.4 15.1C11.5 15.1 11.5 15.1 11.6 15.1H11.7C11.8 15.1 11.9 15.1 12.1 15C12.4 14.9 12.6 14.7 12.6 14.5V14.4V14.1L17.5 19C16.1 20.3 14.1 21 12 21ZM7.8 4.1L6.3 2.6C8 1.6 9.9 1 12 1C18.1 1 23 5.9 23 12C23 14.1 22.4 16 21.4 17.7L19.9 16.2C20.6 15 21 13.5 21 12C21 7 17 3 12 3C10.5 3 9 3.4 7.8 4.1ZM13.5 9.8C13.5 9.7 13.6 9.6 13.6 9.4C13.6 9 13.5 8.6 13.2 8.4C12.8 8 12.4 7.9 12 7.9C11.9 7.9 11.8 7.9 11.6 7.9L10.1 6.4C10.2 6.4 10.2 6.3 10.3 6.3C11.5 5.9 12.7 5.9 13.6 6.1C14.1 6.2 14.5 6.4 14.9 6.6C15.6 7.3 16 8.1 16 9.3C16 10.1 15.7 10.8 15.2 11.4L13.5 9.8ZM11.8 15.9C12.5 15.9 13 16.2 13.3 16.8C13.4 17 13.4 17.2 13.4 17.4C13.4 17.8 13.2 18.2 13 18.5C12.7 18.8 12.3 18.9 11.9 18.9C11.5 18.9 11.1 18.7 10.8 18.5C10.5 18.2 10.4 17.8 10.4 17.4C10.4 17 10.6 16.6 10.8 16.3C11 16 11.4 15.9 11.8 15.9Z\"></path></svg>"

/***/ }),

/***/ "./src/images/description.svg":
/*!************************************!*\
  !*** ./src/images/description.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 1C5.9 1 1 5.9 1 12C1 18.1 5.9 23 12 23C18.1 23 23 18.1 23 12C23 5.9 18.1 1 12 1ZM12 21C7 21 3 17 3 12C3 7 7 3 12 3C17 3 21 7 21 12C21 17 17 21 12 21ZM13.3 16.8C13.4 17 13.4 17.2 13.4 17.4C13.4 17.8 13.2 18.2 13 18.5C12.7 18.8 12.3 18.9 11.9 18.9C11.5 18.9 11.1 18.7 10.8 18.5C10.5 18.2 10.4 17.8 10.4 17.4C10.4 17 10.6 16.6 10.8 16.3C11.1 16 11.5 15.8 11.9 15.8C12.5 15.9 13 16.2 13.3 16.8ZM16 9.3C16 10.4 15.5 11.2 14.6 11.9C14.4 12.1 14.1 12.2 13.9 12.4L13.3 12.8C13 13 12.9 13.1 12.9 13.1C12.8 13.2 12.8 13.3 12.8 13.4C12.8 13.6 12.7 13.8 12.7 14.1V14.4V14.5C12.6 14.7 12.4 14.9 12.2 15C12 15.1 11.9 15.1 11.8 15.1H11.7C11.6 15.1 11.6 15.1 11.5 15.1C11.3 15 11.1 14.9 11 14.8C10.9 14.6 10.7 14.4 10.7 14.1C10.6 13.8 10.5 13.6 10.5 13.3C10.5 13 10.6 12.7 10.7 12.5C10.8 12.3 11 12.1 11.2 11.9C11.4 11.7 11.6 11.6 11.8 11.5L12.4 11.2C13 10.9 13.2 10.7 13.3 10.6C13.6 10.3 13.7 9.9 13.7 9.5C13.7 9.1 13.6 8.7 13.3 8.5C12.8 8 12.4 7.9 12 7.9C10.9 7.9 10.6 8.4 10.6 8.8C10.4 9.3 10.4 9.4 10.4 9.4V9.6C10.4 9.7 10.4 9.7 10.4 9.8L10.5 10.2L10.2 10.3C9.6 10.6 9.1 10.6 8.7 10.4C8.6 10.3 8.4 10.1 8.3 10C8.1 9.7 8 9.4 8 9C8 8.6 8.1 8.3 8.2 8C8.3 7.7 8.5 7.5 8.7 7.3C8.9 7.1 9.1 6.9 9.4 6.7C9.7 6.6 10 6.4 10.3 6.3C11.5 5.9 12.7 5.9 13.6 6.1C14.1 6.2 14.5 6.4 14.9 6.6C15.6 7.3 16 8.1 16 9.3Z\"></path></svg>"

/***/ }),

/***/ "./src/images/device-desktop.svg":
/*!***************************************!*\
  !*** ./src/images/device-desktop.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 17V2H2V17H10V19C10 19.7956 9.68393 20.5587 9.12132 21.1213C8.55871 21.6839 7.79565 22 7 22H17C16.2044 22 15.4413 21.6839 14.8787 21.1213C14.3161 20.5587 14 19.7956 14 19V17H22ZM4 4H20V15H4V4Z\"></path></svg>"

/***/ }),

/***/ "./src/images/device-phone.svg":
/*!*************************************!*\
  !*** ./src/images/device-phone.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 18H8V6H16V18ZM16 2H8C7.46957 2 6.96086 2.21071 6.58579 2.58579C6.21071 2.96086 6 3.46957 6 4V20C6 20.5304 6.21071 21.0391 6.58579 21.4142C6.96086 21.7893 7.46957 22 8 22H16C16.5304 22 17.0391 21.7893 17.4142 21.4142C17.7893 21.0391 18 20.5304 18 20V4C18 3.46957 17.7893 2.96086 17.4142 2.58579C17.0391 2.21071 16.5304 2 16 2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/device-rotate.svg":
/*!**************************************!*\
  !*** ./src/images/device-rotate.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23.41 5.99591L18 11.4059L16.59 9.99591L19.59 6.99591H17C13.5522 6.99591 10.2456 8.36555 7.80761 10.8035C5.36964 13.2415 4 16.5481 4 19.9959V21.9959H2V19.9959C2 16.0177 3.58035 12.2024 6.3934 9.38931C9.20644 6.57626 13.0218 4.99591 17 4.99591H19.59L16.59 1.99591L18 0.585907L23.41 5.99591Z\"></path></svg>"

/***/ }),

/***/ "./src/images/device-tablet.svg":
/*!**************************************!*\
  !*** ./src/images/device-tablet.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 18H4V6H20V18ZM21 4H3C2.46957 4 1.96086 4.21071 1.58579 4.58579C1.21071 4.96086 1 5.46957 1 6V18C1 18.5304 1.21071 19.0391 1.58579 19.4142C1.96086 19.7893 2.46957 20 3 20H21C21.5304 20 22.0391 19.7893 22.4142 19.4142C22.7893 19.0391 23 18.5304 23 18V6C23 5.46957 22.7893 4.96086 22.4142 4.58579C22.0391 4.21071 21.5304 4 21 4Z\"></path></svg>"

/***/ }),

/***/ "./src/images/download.svg":
/*!*********************************!*\
  !*** ./src/images/download.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 18.41L4.59 11L6 9.59L11 14.59V2H13V14.59L18 9.59L19.41 11L12 18.41ZM2 20V22H22V20H2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/drag-area-indicator.svg":
/*!********************************************!*\
  !*** ./src/images/drag-area-indicator.svg ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 6C13 4.9 13.9 4 15 4C16.1 4 17 4.9 17 6C17 7.1 16.1 8 15 8C13.9 8 13 7.1 13 6ZM9 4C7.9 4 7 4.9 7 6C7 7.1 7.9 8 9 8C10.1 8 11 7.1 11 6C11 4.9 10.1 4 9 4ZM15 10C13.9 10 13 10.9 13 12C13 13.1 13.9 14 15 14C16.1 14 17 13.1 17 12C17 10.9 16.1 10 15 10ZM9 10C7.9 10 7 10.9 7 12C7 13.1 7.9 14 9 14C10.1 14 11 13.1 11 12C11 10.9 10.1 10 9 10ZM15 16C13.9 16 13 16.9 13 18C13 19.1 13.9 20 15 20C16.1 20 17 19.1 17 18C17 16.9 16.1 16 15 16ZM9 16C7.9 16 7 16.9 7 18C7 19.1 7.9 20 9 20C10.1 20 11 19.1 11 18C11 16.9 10.1 16 9 16Z\"></path></svg>"

/***/ }),

/***/ "./src/images/drag-area-indicator_24x16.svg":
/*!**************************************************!*\
  !*** ./src/images/drag-area-indicator_24x16.svg ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18 9C19.1 9 20 9.9 20 11C20 12.1 19.1 13 18 13C16.9 13 16 12.1 16 11C16 9.9 16.9 9 18 9ZM20 5C20 3.9 19.1 3 18 3C16.9 3 16 3.9 16 5C16 6.1 16.9 7 18 7C19.1 7 20 6.1 20 5ZM14 11C14 9.9 13.1 9 12 9C10.9 9 10 9.9 10 11C10 12.1 10.9 13 12 13C13.1 13 14 12.1 14 11ZM14 5C14 3.9 13.1 3 12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5ZM8 11C8 9.9 7.1 9 6 9C4.9 9 4 9.9 4 11C4 12.1 4.9 13 6 13C7.1 13 8 12.1 8 11ZM8 5C8 3.9 7.1 3 6 3C4.9 3 4 3.9 4 5C4 6.1 4.9 7 6 7C7.1 7 8 6.1 8 5Z\"></path></svg>"

/***/ }),

/***/ "./src/images/drop-down-arrow.svg":
/*!****************************************!*\
  !*** ./src/images/drop-down-arrow.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 15L17 10H7L12 15Z\"></path></svg>"

/***/ }),

/***/ "./src/images/drop-down-arrow_16x16.svg":
/*!**********************************************!*\
  !*** ./src/images/drop-down-arrow_16x16.svg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8 11L13 6H3L8 11Z\"></path></svg>"

/***/ }),

/***/ "./src/images/dropdown.svg":
/*!*********************************!*\
  !*** ./src/images/dropdown.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2H4C2.9 2 2 2.9 2 4V6C2 7.1 2.9 8 4 8V20C4 21.1 4.9 22 6 22H20C21.1 22 22 21.1 22 20V8V6V4C22 2.9 21.1 2 20 2ZM20 20H6V8H20V20ZM4 6V4H20V6H4ZM18 12H8V10H18V12ZM18 16H8V14H18V16Z\"></path></svg>"

/***/ }),

/***/ "./src/images/duplicate_16x16.svg":
/*!****************************************!*\
  !*** ./src/images/duplicate_16x16.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_9500_71113)\"><path d=\"M14 0H6C5.46957 0 4.96086 0.210714 4.58579 0.585786C4.21071 0.960859 4 1.46957 4 2V4H2C1.46957 4 0.960859 4.21071 0.585786 4.58579C0.210714 4.96086 0 5.46957 0 6L0 14C0 14.5304 0.210714 15.0391 0.585786 15.4142C0.960859 15.7893 1.46957 16 2 16H10C10.5304 16 11.0391 15.7893 11.4142 15.4142C11.7893 15.0391 12 14.5304 12 14V12H14C14.5304 12 15.0391 11.7893 15.4142 11.4142C15.7893 11.0391 16 10.5304 16 10V2C16 1.46957 15.7893 0.960859 15.4142 0.585786C15.0391 0.210714 14.5304 0 14 0V0ZM10 14H2V6H10V14ZM14 10H12V6C12 5.46957 11.7893 4.96086 11.4142 4.58579C11.0391 4.21071 10.5304 4 10 4H6V2H14V10Z\"></path></g><defs><clipPath id=\"clip0_9500_71113\"><rect width=\"16\" height=\"16\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/edit.svg":
/*!*****************************!*\
  !*** ./src/images/edit.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21.9 4.8L19.1 2C18.5 1.5 17.8 1.2 17 1.2C16.2 1.2 15.5 1.5 14.9 2.1L4.6 12.3C2.9 14 2 16.3 2 18.7V21C2 21.6 2.4 22 3 22H5.3C7.7 22 10 21.1 11.7 19.4L21.9 9.1C23.1 7.9 23.1 6 21.9 4.8ZM10.2 17.9C8.9 19.2 7.1 20 5.3 20H4V18.7C4 16.8 4.7 15.1 6.1 13.8L12.3 7.6L16.5 11.8L10.2 17.9ZM20.5 7.7L17.8 10.4L13.6 6.2L16.3 3.5C16.5 3.2 16.8 3.2 17 3.2C17.2 3.2 17.5 3.2 17.7 3.5L20.5 6.3C20.9 6.6 20.9 7.3 20.5 7.7Z\"></path></svg>"

/***/ }),

/***/ "./src/images/edit_16x16.svg":
/*!***********************************!*\
  !*** ./src/images/edit_16x16.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_2693_58208)\"><path d=\"M15.3 2.8L13.2 0.7C12.7 0.2 12.2 0 11.6 0C11 0 10.4 0.2 10 0.7L2 8.6C0.7 9.9 0 11.7 0 13.5V15.3C0 15.7 0.3 16 0.8 16H2.6C4.4 16 6.2 15.3 7.5 14L15.4 6.1C16.2 5.2 16.2 3.7 15.3 2.8ZM6 12.6C5.1 13.5 3.8 14 2.5 14H2V13.5C2 12.2 2.5 10.9 3.4 10L8 5.4L10.6 8L6 12.6ZM13.9 4.7L12 6.6L9.4 4L11.3 2.1C11.4 2 11.5 2 11.6 2C11.7 2 11.7 2 11.8 2.1L13.9 4.2C14 4.3 14 4.5 13.9 4.7Z\"></path></g><defs><clipPath id=\"clip0_2693_58208\"><rect width=\"16\" height=\"16\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/editing-finish.svg":
/*!***************************************!*\
  !*** ./src/images/editing-finish.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.3 3.7L7.8 9.2L4.6 12.4C2.9 14.1 2 16.4 2 18.8V21.1C2 21.7 2.4 22.1 3 22.1H5.3C7.7 22.1 10 21.2 11.7 19.5L14.9 16.3L20.4 21.8L21.8 20.4L3.8 2.4L2.3 3.7ZM10.2 17.9C8.9 19.2 7.1 20 5.3 20H4V18.7C4 16.8 4.7 15.1 6.1 13.8L9.3 10.6L13.5 14.8L10.2 17.9ZM21.9 9.1L17.2 13.8L15.8 12.4L20.5 7.7C20.9 7.3 20.9 6.7 20.5 6.3L17.7 3.5C17.5 3.2 17.2 3.2 17 3.2C16.8 3.2 16.5 3.2 16.3 3.5L11.6 8.2L10.2 6.8L14.9 2.1C15.5 1.5 16.2 1.2 17 1.2C17.8 1.2 18.5 1.5 19.1 2.1L21.9 4.9C23.1 6 23.1 7.9 21.9 9.1Z\"></path></svg>"

/***/ }),

/***/ "./src/images/error.svg":
/*!******************************!*\
  !*** ./src/images/error.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_19289_560924)\"><path d=\"M8 0C3.58 0 0 3.58 0 8C0 12.42 3.58 16 8 16C12.42 16 16 12.42 16 8C16 3.58 12.42 0 8 0ZM8 14C4.69 14 2 11.31 2 8C2 4.69 4.69 2 8 2C11.31 2 14 4.69 14 8C14 11.31 11.31 14 8 14ZM11.41 6L9.41 8L11.41 10L10 11.41L8 9.41L6 11.41L4.59 10L6.59 8L4.59 6L6 4.59L8 6.59L10 4.59L11.41 6Z\"></path></g><defs><clipPath id=\"clip0_19289_560924\"><rect width=\"16\" height=\"16\" fill=\"transparent\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/expand-detail-light_16x16.svg":
/*!**************************************************!*\
  !*** ./src/images/expand-detail-light_16x16.svg ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 7H9V3H7V7H3V9H7V13H9V9H13V7Z\"></path></svg>"

/***/ }),

/***/ "./src/images/expand-detail_16x16.svg":
/*!********************************************!*\
  !*** ./src/images/expand-detail_16x16.svg ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 9H4V7H7V4H9V7H12V9H9V12H7V9ZM16 0V16H0V0H16ZM14 2H2V14H14V2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/expand-panel.svg":
/*!*************************************!*\
  !*** ./src/images/expand-panel.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19.9959 2H14.9959V22H21.9959V2H19.9959ZM19.9959 20H16.9959V4H19.9959V20ZM4.40588 11H12.9959V13H4.40588L8.40588 17L6.99588 18.41L0.585876 12L6.99588 5.59L8.40588 7L4.40588 11Z\"></path></svg>"

/***/ }),

/***/ "./src/images/expand_16x16.svg":
/*!*************************************!*\
  !*** ./src/images/expand_16x16.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 14L5 13L10 8L5 3L6 2L12 8L6 14Z\"></path></svg>"

/***/ }),

/***/ "./src/images/export.svg":
/*!*******************************!*\
  !*** ./src/images/export.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 10.4059L4.59 8.99591L12 1.58591L19.41 8.99591L18 10.4059L13 5.40591V17.9959H11V5.40591L6 10.4059ZM2 19.9959V21.9959H22V19.9959H2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/expression.svg":
/*!***********************************!*\
  !*** ./src/images/expression.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 0.5C19.4 0.2 18.7 0 17.8 0C15.9 0 14.3 0.8 13 2.3C11.5 4.1 10.1 7.1 9 11.5H6.2L5.8 13H8.5L8.3 14C8.2 14.4 8.1 14.9 7.9 15.7C7.7 16.4 7.6 17.1 7.5 17.6C6.8 20.6 6.1 21.9 5.6 22.4C5.6 22.1 5.5 21.8 5.2 21.6C4.7 21.3 3.8 21.2 3.3 21.8C3.1 22 3 22.4 3 22.7C3 23.1 3.1 23.4 3.4 23.6C3.7 23.9 4.2 24 4.8 24C5.4 24 6 23.9 6.5 23.6C7.9 23 9 21.7 9.8 19.6C10.2 18.5 10.8 16.7 11.4 14.1L11.7 12.9H15.1L15.5 11.4H12.1C13.1 7.2 14.2 4.2 15.3 2.7C15.6 2.3 15.9 2 16.2 1.8C16.6 1.5 16.8 1.5 17 1.5C17.2 1.5 17.4 1.5 17.7 1.6C17.5 1.9 17.5 2.2 17.5 2.5C17.5 2.9 17.7 3.3 18 3.6C18.7 4.1 19.8 4.1 20.5 3.6C20.8 3.2 21 2.8 21 2.3C21 1.5 20.7 0.9 20 0.5Z\"></path></svg>"

/***/ }),

/***/ "./src/images/fast-entry.svg":
/*!***********************************!*\
  !*** ./src/images/fast-entry.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 5H2V3H13V5ZM10 7H2V9H10V7ZM2 17H10V15H2V17ZM13 11H2V13H13V11ZM23.4 14.9L17 21.3C16 22.4 14.5 23 13 23H11.6C11.3 23 11 22.7 11 22.4V21C11 19.5 11.6 18.1 12.7 17L19.1 10.6C19.4 10.2 19.9 10 20.4 10C20.9 10 21.4 10.2 21.7 10.6L23.4 12.3C24.2 13 24.2 14.2 23.4 14.9ZM21.9 13.6L20.3 12L14 18.3C13.4 19.1 13 20 13 21C14 21 14.9 20.6 15.6 19.9L21.9 13.6Z\"></path></svg>"

/***/ }),

/***/ "./src/images/file.svg":
/*!*****************************!*\
  !*** ./src/images/file.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 9V7C22 5.9 21.1 5 20 5H12L10 3H4C2.9 3 2 3.9 2 5V9V10V21H22L24 9H22ZM4 5H9.2L10.6 6.4L11.2 7H12H20V9H4V5ZM20.3 19H4V11H21.6L20.3 19Z\"></path></svg>"

/***/ }),

/***/ "./src/images/fix.svg":
/*!****************************!*\
  !*** ./src/images/fix.svg ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_506_606)\"><path opacity=\"0.75\" d=\"M8.71 11.29L5.71 8.29C5.32 7.9 4.69 7.9 4.3 8.29C3.91 8.68 3.91 9.31 4.3 9.7L5.59 10.99H1C0.45 10.99 0 11.44 0 11.99C0 12.54 0.45 12.99 1 12.99H5.59L4.3 14.28C3.91 14.67 3.91 15.3 4.3 15.69C4.5 15.89 4.75 15.98 5.01 15.98C5.27 15.98 5.52 15.88 5.72 15.69L8.72 12.69C8.81 12.6 8.89 12.49 8.94 12.36C9.04 12.12 9.04 11.84 8.94 11.6C8.89 11.48 8.82 11.37 8.72 11.27L8.71 11.29Z\" fill=\"black\" fill-opacity=\"0.45\"></path><path opacity=\"0.75\" d=\"M15.71 10.29C15.32 9.89999 14.69 9.89999 14.3 10.29C13.91 10.68 13.91 11.31 14.3 11.7L16.3 13.7C16.5 13.9 16.75 13.99 17.01 13.99C17.27 13.99 17.52 13.89 17.72 13.7L23.72 7.69999C24.11 7.30999 24.11 6.67999 23.72 6.28999C23.33 5.89999 22.7 5.89999 22.31 6.28999L21.05 7.54999C19.99 6.57999 18.57 5.98999 17.02 5.98999C13.71 5.98999 11.02 8.67999 11.02 11.99C11.02 15.3 13.71 17.99 17.02 17.99C20.33 17.99 23.02 15.3 23.02 11.99C23.02 11.5 22.96 11.03 22.85 10.58L20.98 12.45C20.75 14.44 19.07 15.99 17.03 15.99C14.82 15.99 13.03 14.2 13.03 11.99C13.03 9.77999 14.82 7.98999 17.03 7.98999C18.03 7.98999 18.93 8.36999 19.63 8.97999L17.03 11.58L15.74 10.29H15.71Z\"></path></g><defs><clipPath id=\"clip0_506_606\"><rect width=\"24\" height=\"24\" fill=\"white\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/html.svg":
/*!*****************************!*\
  !*** ./src/images/html.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.85 6.64999L3.35 11.95L7.85 17.35L6.25 18.65L0.75 11.95L6.25 5.34999L7.85 6.64999ZM17.85 5.34999L16.25 6.64999L20.75 11.95L16.25 17.35L17.75 18.65L23.25 12.05L17.85 5.34999ZM8.15 20.65L10.05 21.25L16.05 3.24999L14.15 2.64999L8.15 20.65Z\"></path></svg>"

/***/ }),

/***/ "./src/images/image.svg":
/*!******************************!*\
  !*** ./src/images/image.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2H4C2.9 2 2 2.9 2 4V20C2 21.1 2.9 22 4 22H20C21.1 22 22 21.1 22 20V4C22 2.9 21.1 2 20 2ZM20 20H4V4H20V20ZM7 8C7 6.9 7.9 6 9 6C10.1 6 11 6.9 11 8C11 9.1 10.1 10 9 10C7.9 10 7 9.1 7 8ZM19 19H5L9 14L11 15L14 12L19 19Z\"></path></svg>"

/***/ }),

/***/ "./src/images/imagepicker.svg":
/*!************************************!*\
  !*** ./src/images/imagepicker.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 5H4C2.9 5 2 5.9 2 7V20C2 21.1 2.9 22 4 22H17C18.1 22 19 21.1 19 20V7C19 5.9 18.1 5 17 5ZM17 20H4V7H17V20ZM6 11C6 9.9 6.9 9 8 9C9.1 9 10 9.9 10 11C10 12.1 9.1 13 8 13C6.9 13 6 12.1 6 11ZM16 19H5L16 14V19ZM22 4V17C22 18.1 21.1 19 20 19V17V4H7H5C5 2.9 5.9 2 7 2H20C21.1 2 22 2.9 22 4Z\"></path></svg>"

/***/ }),

/***/ "./src/images/import.svg":
/*!*******************************!*\
  !*** ./src/images/import.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 18.41L4.59 11L6 9.59L11 14.59V2H13V14.59L18 9.59L19.41 11L12 18.41ZM2 20V22H22V20H2Z\"></path></svg>"

/***/ }),

/***/ "./src/images/invisible-items.svg":
/*!****************************************!*\
  !*** ./src/images/invisible-items.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 7.003C12.4641 7.01107 12.9249 7.08171 13.37 7.213L11.54 9.053C10.9155 9.15262 10.3384 9.44704 9.89125 9.89423C9.44406 10.3414 9.14964 10.9185 9.05002 11.543L7.21002 13.373C7.07873 12.9279 7.00809 12.467 7.00002 12.003C7.00002 10.6769 7.5268 9.40515 8.46449 8.46747C9.40217 7.52978 10.6739 7.003 12 7.003ZM5.40002 15.183C4.39516 14.2466 3.52369 13.1766 2.81002 12.003C5.10002 8.223 8.47002 6.003 12 6.003C12.765 6.0082 13.5255 6.11925 14.26 6.333L15.86 4.733C14.6291 4.25486 13.3206 4.0074 12 4.003C7.24002 4.003 3.05002 7.173 0.52002 12.003C1.41557 13.7255 2.59165 15.2868 4.00002 16.623L5.40002 15.183ZM23.48 12.003C21 16.833 16.76 20.003 12 20.003C10.1707 19.9916 8.37315 19.5242 6.77002 18.643L2.71002 22.713L1.29002 21.293L21.29 1.293L22.71 2.713L18.94 6.473C20.8367 7.96509 22.3858 9.8521 23.48 12.003ZM14.7 10.723L10.7 14.723C11.1058 14.9158 11.5508 15.0116 12 15.003C12.7957 15.003 13.5587 14.6869 14.1213 14.1243C14.6839 13.5617 15 12.7986 15 12.003C14.9993 11.559 14.8967 11.1211 14.7 10.723ZM21.19 12.003C20.243 10.4087 18.9887 9.01851 17.5 7.913L16.16 9.263C16.7052 10.073 16.9975 11.0266 17 12.003C17 13.3291 16.4732 14.6009 15.5356 15.5385C14.5979 16.4762 13.3261 17.003 12 17.003C11.0237 17.0005 10.07 16.7081 9.26002 16.163L8.26002 17.163C9.43056 17.7122 10.707 17.9989 12 18.003C15.53 18.003 18.9 15.783 21.19 12.003Z\"></path></svg>"

/***/ }),

/***/ "./src/images/keyboard-dragging.svg":
/*!******************************************!*\
  !*** ./src/images/keyboard-dragging.svg ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 5L12 0L7 5H11V9H13V5H17Z\"></path><path d=\"M13 19V15H11V19H7L12 24L17 19H13Z\"></path></svg>"

/***/ }),

/***/ "./src/images/language.svg":
/*!*********************************!*\
  !*** ./src/images/language.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.75 8H15.25L13.35 13.08C12.2029 12.2588 11.2439 11.2027 10.537 9.98187C9.83 8.76107 9.39127 7.40364 9.25 6H14V4H9V2H7V4H2V6H6.91C6.73189 7.75797 6.09115 9.43736 5.05302 10.8672C4.01489 12.2971 2.61643 13.4263 1 14.14C1.32315 14.7296 1.69441 15.2915 2.11 15.82C4.82764 14.5445 6.96846 12.2966 8.11 9.52C9.02641 11.7596 10.5985 13.6698 12.62 15L10 22H12.42L13.79 18.13H19.16L20.56 22H23L17.75 8ZM14.46 16.16L15.73 12.53C16.0406 11.7049 16.2945 10.8596 16.49 10C16.55 10.26 16.67 10.66 16.84 11.21C17.01 11.76 17.14 12.15 17.24 12.41L18.55 16.2L14.46 16.16Z\"></path></svg>"

/***/ }),

/***/ "./src/images/load.svg":
/*!*****************************!*\
  !*** ./src/images/load.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21.93 9H21V7C21 6.46957 20.7893 5.96086 20.4142 5.58579C20.0391 5.21071 19.5304 5 19 5H10L8 3H4C3.46957 3 2.96086 3.21071 2.58579 3.58579C2.21071 3.96086 2 4.46957 2 5L2 21H21L23.89 11.63C23.9916 11.3244 24.0179 10.9988 23.9667 10.6809C23.9155 10.363 23.7882 10.0621 23.5958 9.80392C23.4034 9.54571 23.1514 9.33779 22.8614 9.19782C22.5714 9.05786 22.2519 8.99 21.93 9ZM4 5H7.17L8.59 6.41L9.17 7H19V9H6L4 15V5ZM22 11L19.54 19H4.77L7.44 11H22Z\"></path></svg>"

/***/ }),

/***/ "./src/images/logic-collapse.svg":
/*!***************************************!*\
  !*** ./src/images/logic-collapse.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_252_57732)\"><path d=\"M19 29.2996L20.4 30.6996L22.7 28.3996V33.9996H24.7V28.3996L27 30.6996L28.4 29.2996L23.7 24.5996L19 29.2996Z\"></path><path d=\"M24.7 19.6V14H22.7V19.6L20.4 17.3L19 18.7L23.7 23.4L28.4 18.7L27 17.3L24.7 19.6Z\"></path></g><defs><clipPath id=\"clip0_252_57732\"><rect width=\"9.4\" height=\"20\" fill=\"white\" transform=\"translate(19 14)\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/logic-expand.svg":
/*!*************************************!*\
  !*** ./src/images/logic-expand.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_252_57727)\"><path d=\"M19 17.7L20.4 19.1L22.7 16.8V22.4H24.7V16.8L27 19.1L28.4 17.7L23.7 13L19 17.7Z\"></path><path d=\"M24.7 32.0004V26.4004H22.7V32.0004L20.4 29.7004L19 31.1004L23.7 35.8004L28.4 31.1004L27 29.7004L24.7 32.0004Z\"></path></g><defs><clipPath id=\"clip0_252_57727\"><rect width=\"9.4\" height=\"22.8\" fill=\"white\" transform=\"translate(19 13)\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/logo.svg":
/*!*****************************!*\
  !*** ./src/images/logo.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M28 0H4C1.79 0 0 1.79 0 4V28C0 30.21 1.79 32 4 32H28C30.21 32 32 30.21 32 28V4C32 1.79 30.21 0 28 0ZM30 28C30 29.1 29.1 30 28 30H4C2.9 30 2 29.1 2 28V4C2 2.9 2.9 2 4 2H28C29.1 2 30 2.9 30 4V28ZM6 9C6 7.34 7.34 6 9 6C10.66 6 12 7.34 12 9C12 10.66 10.66 12 9 12C7.34 12 6 10.66 6 9ZM19 16L28 28H4L11 19L15 21L19 16Z\"></path></svg>"

/***/ }),

/***/ "./src/images/matrix.svg":
/*!*******************************!*\
  !*** ./src/images/matrix.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 1C3.2 1 1 3.2 1 6C1 8.8 3.2 11 6 11C8.8 11 11 8.8 11 6C11 3.2 8.8 1 6 1ZM6 9C4.3 9 3 7.7 3 6C3 4.3 4.3 3 6 3C7.7 3 9 4.3 9 6C9 7.7 7.7 9 6 9ZM8 6C8 7.1 7.1 8 6 8C4.9 8 4 7.1 4 6C4 4.9 4.9 4 6 4C7.1 4 8 4.9 8 6ZM20 18C20 19.1 19.1 20 18 20C16.9 20 16 19.1 16 18C16 16.9 16.9 16 18 16C19.1 16 20 16.9 20 18ZM6 13C3.2 13 1 15.2 1 18C1 20.8 3.2 23 6 23C8.8 23 11 20.8 11 18C11 15.2 8.8 13 6 13ZM6 21C4.3 21 3 19.7 3 18C3 16.3 4.3 15 6 15C7.7 15 9 16.3 9 18C9 19.7 7.7 21 6 21ZM18 11C20.8 11 23 8.8 23 6C23 3.2 20.8 1 18 1C15.2 1 13 3.2 13 6C13 8.8 15.2 11 18 11ZM18 3C19.7 3 21 4.3 21 6C21 7.7 19.7 9 18 9C16.3 9 15 7.7 15 6C15 4.3 16.3 3 18 3ZM18 13C15.2 13 13 15.2 13 18C13 20.8 15.2 23 18 23C20.8 23 23 20.8 23 18C23 15.2 20.8 13 18 13ZM18 21C16.3 21 15 19.7 15 18C15 16.3 16.3 15 18 15C19.7 15 21 16.3 21 18C21 19.7 19.7 21 18 21Z\"></path></svg>"

/***/ }),

/***/ "./src/images/matrixdropdown.svg":
/*!***************************************!*\
  !*** ./src/images/matrixdropdown.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 4C7 5.7 5.7 7 4 7C2.3 7 1 5.7 1 4C1 2.3 2.3 1 4 1C5.7 1 7 2.3 7 4ZM15 4C15 5.7 13.7 7 12 7C10.3 7 9 5.7 9 4C9 2.3 10.3 1 12 1C13.7 1 15 2.3 15 4ZM13 4C13 3.4 12.6 3 12 3C11.4 3 11 3.4 11 4C11 4.6 11.4 5 12 5C12.6 5 13 4.6 13 4ZM17 4C17 2.3 18.3 1 20 1C21.7 1 23 2.3 23 4C23 5.7 21.7 7 20 7C18.3 7 17 5.7 17 4ZM19 4C19 4.6 19.4 5 20 5C20.6 5 21 4.6 21 4C21 3.4 20.6 3 20 3C19.4 3 19 3.4 19 4ZM7 12C7 13.7 5.7 15 4 15C2.3 15 1 13.7 1 12C1 10.3 2.3 9 4 9C5.7 9 7 10.3 7 12ZM5 12C5 11.4 4.6 11 4 11C3.4 11 3 11.4 3 12C3 12.6 3.4 13 4 13C4.6 13 5 12.6 5 12ZM12 9C10.3 9 9 10.3 9 12C9 13.7 10.3 15 12 15C13.7 15 15 13.7 15 12C15 10.3 13.7 9 12 9ZM20 9C18.3 9 17 10.3 17 12C17 13.7 18.3 15 20 15C21.7 15 23 13.7 23 12C23 10.3 21.7 9 20 9ZM4 17C2.3 17 1 18.3 1 20C1 21.7 2.3 23 4 23C5.7 23 7 21.7 7 20C7 18.3 5.7 17 4 17ZM12 17C10.3 17 9 18.3 9 20C9 21.7 10.3 23 12 23C13.7 23 15 21.7 15 20C15 18.3 13.7 17 12 17ZM23 20C23 21.7 21.7 23 20 23C18.3 23 17 21.7 17 20C17 18.3 18.3 17 20 17C21.7 17 23 18.3 23 20ZM21 20C21 19.4 20.6 19 20 19C19.4 19 19 19.4 19 20C19 20.6 19.4 21 20 21C20.6 21 21 20.6 21 20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/matrixdynamic.svg":
/*!**************************************!*\
  !*** ./src/images/matrixdynamic.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 4C7 5.7 5.7 7 4 7C2.3 7 1 5.7 1 4C1 2.3 2.3 1 4 1C5.7 1 7 2.3 7 4ZM15 4C15 5.7 13.7 7 12 7C10.3 7 9 5.7 9 4C9 2.3 10.3 1 12 1C13.7 1 15 2.3 15 4ZM13 4C13 3.4 12.6 3 12 3C11.4 3 11 3.4 11 4C11 4.6 11.4 5 12 5C12.6 5 13 4.6 13 4ZM17 4C17 2.3 18.3 1 20 1C21.7 1 23 2.3 23 4C23 5.7 21.7 7 20 7C18.3 7 17 5.7 17 4ZM19 4C19 4.6 19.4 5 20 5C20.6 5 21 4.6 21 4C21 3.4 20.6 3 20 3C19.4 3 19 3.4 19 4ZM7 12C7 13.7 5.7 15 4 15C2.3 15 1 13.7 1 12C1 10.3 2.3 9 4 9C5.7 9 7 10.3 7 12ZM5 12C5 11.4 4.6 11 4 11C3.4 11 3 11.4 3 12C3 12.6 3.4 13 4 13C4.6 13 5 12.6 5 12ZM12 9C10.3 9 9 10.3 9 12C9 13.7 10.3 15 12 15C13.7 15 15 13.7 15 12C15 10.3 13.7 9 12 9ZM20 9C18.3 9 17 10.3 17 12C17 13.7 18.3 15 20 15C21.7 15 23 13.7 23 12C23 10.3 21.7 9 20 9ZM5 17H3V19H1V21H3V23H5V21H7V19H5V17Z\"></path></svg>"

/***/ }),

/***/ "./src/images/multipletext.svg":
/*!*************************************!*\
  !*** ./src/images/multipletext.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 1H4C2.9 1 2 1.9 2 3V9C2 10.1 2.9 11 4 11H20C21.1 11 22 10.1 22 9V3C22 1.9 21.1 1 20 1ZM20 9H4V3H20V9ZM14 7H6V5H14V7ZM20 13H4C2.9 13 2 13.9 2 15V21C2 22.1 2.9 23 4 23H20C21.1 23 22 22.1 22 21V15C22 13.9 21.1 13 20 13ZM20 21H4V15H20V21ZM14 19H6V17H14V19Z\"></path></svg>"

/***/ }),

/***/ "./src/images/next_16x16.svg":
/*!***********************************!*\
  !*** ./src/images/next_16x16.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.64648 12.6465L6.34648 13.3465L11.7465 8.04648L6.34648 2.64648L5.64648 3.34648L10.2465 8.04648L5.64648 12.6465Z\"></path></svg>"

/***/ }),

/***/ "./src/images/panel.svg":
/*!******************************!*\
  !*** ./src/images/panel.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 2V4H4V9H2V4C2 2.9 2.9 2 4 2H9ZM20 2H15V4H20V9H22V4C22 2.9 21.1 2 20 2ZM4 20V15H2V20C2 21.1 2.9 22 4 22H9V20H4ZM20 20H15V22H20C21.1 22 22 21.1 22 20V15H20V20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/paneldynamic.svg":
/*!*************************************!*\
  !*** ./src/images/paneldynamic.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 2V4H4V9H2V4C2 3.46957 2.21071 2.96086 2.58579 2.58579C2.96086 2.21071 3.46957 2 4 2H9ZM20 2H15V4H20V9H22V4C22 3.46957 21.7893 2.96086 21.4142 2.58579C21.0391 2.21071 20.5304 2 20 2ZM4 20V15H2V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H9V20H4ZM20 20H15V22H20C20.5304 22 21.0391 21.7893 21.4142 21.4142C21.7893 21.0391 22 20.5304 22 20V15H20V20ZM17 13H15V11H13V13H11V15H13V17H15V15H17V13Z\"></path></svg>"

/***/ }),

/***/ "./src/images/preview.svg":
/*!********************************!*\
  !*** ./src/images/preview.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 25 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.5 1C6.42 1 1.5 5.92 1.5 12C1.5 18.08 6.42 23 12.5 23C18.58 23 23.5 18.08 23.5 12C23.5 5.92 18.58 1 12.5 1ZM12.5 21C7.54 21 3.5 16.96 3.5 12C3.5 7.04 7.54 3 12.5 3C17.46 3 21.5 7.04 21.5 12C21.5 16.96 17.46 21 12.5 21ZM17.41 10.25L11.47 6.95C10.85 6.6 10.1 6.61 9.49 6.97C8.87 7.33 8.5 7.98 8.5 8.69V15.29C8.5 16.01 8.87 16.65 9.49 17.01C9.81 17.2 10.15 17.29 10.5 17.29C10.85 17.29 11.17 17.21 11.47 17.04L17.41 13.74C18.04 13.39 18.44 12.72 18.44 11.99C18.44 11.26 18.05 10.59 17.41 10.24V10.25ZM10.5 15.3V8.7L16.44 12L10.5 15.3Z\"></path></svg>"

/***/ }),

/***/ "./src/images/previous_16x16.svg":
/*!***************************************!*\
  !*** ./src/images/previous_16x16.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.393 12.6465L5.69297 8.04651L10.393 3.34651L9.69297 2.64651L4.29297 8.04651L9.69297 13.3465L10.393 12.6465Z\"></path></svg>"

/***/ }),

/***/ "./src/images/radiogroup.svg":
/*!***********************************!*\
  !*** ./src/images/radiogroup.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 4C16.4 4 20 7.6 20 12C20 16.4 16.4 20 12 20C7.6 20 4 16.4 4 12C4 7.6 7.6 4 12 4ZM12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2ZM12 10C13.1 10 14 10.9 14 12C14 13.1 13.1 14 12 14C10.9 14 10 13.1 10 12C10 10.9 10.9 10 12 10ZM12 8C9.8 8 8 9.8 8 12C8 14.2 9.8 16 12 16C14.2 16 16 14.2 16 12C16 9.8 14.2 8 12 8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/ranking.svg":
/*!********************************!*\
  !*** ./src/images/ranking.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 4H2V21H14V16H18V11H22V4ZM12 19H4V16H12V19ZM16 14H4V11H16V14ZM20 9H4V6H20V9Z\"></path></svg>"

/***/ }),

/***/ "./src/images/rating.svg":
/*!*******************************!*\
  !*** ./src/images/rating.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0)\"><path d=\"M12 6.8L12.9 9.7L13.3 11.1H14.8H17.8L15.4 12.9L14.2 13.8L14.6 15.2L15.5 18.1L13.1 16.3L12 15.3L10.8 16.2L8.4 18L9.3 15.1L9.7 13.7L8.5 12.8L6.1 11H9.1H10.6L11 9.6L12 6.8ZM12 0.300003L9.2 9H0L7.4 14.4L4.6 23.1L12 17.7L19.4 23.1L16.6 14.4L24 9H14.8L12 0.300003Z\"></path></g><defs><clipPath id=\"clip0\"><rect width=\"24\" height=\"24\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/redo.svg":
/*!*****************************!*\
  !*** ./src/images/redo.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 8.00001H19.6L15.6 4.00001L17 2.60001L23.4 9.00001L17 15.4L15.6 14L19.6 10H7C4.8 10 3 11.8 3 14C3 16.2 4.8 18 7 18H8V20H7C3.7 20 1 17.3 1 14C1 10.7 3.7 8.00001 7 8.00001Z\"></path></svg>"

/***/ }),

/***/ "./src/images/remove_16x16.svg":
/*!*************************************!*\
  !*** ./src/images/remove_16x16.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 7V9H4V7H12ZM16 8C16 12.4 12.4 16 8 16C3.6 16 0 12.4 0 8C0 3.6 3.6 0 8 0C12.4 0 16 3.6 16 8ZM14 8C14 4.7 11.3 2 8 2C4.7 2 2 4.7 2 8C2 11.3 4.7 14 8 14C11.3 14 14 11.3 14 8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/required.svg":
/*!*********************************!*\
  !*** ./src/images/required.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_1564_16728)\"><path d=\"M2.77 14.1393L6.09 9.03927L0 9.18927L0.06 6.51927L6.15 6.88927L2.96 1.68927L5.29 0.379272L8.02 5.81927L10.96 0.489272L13.23 1.84927L9.91 6.94927L16 6.79927L15.94 9.46927L9.85 9.09927L13.04 14.2993L10.71 15.6093L7.98 10.1693L5.04 15.4993L2.77 14.1393Z\"></path></g><defs><clipPath id=\"clip0_1564_16728\"><rect width=\"16\" height=\"16\" fill=\"white\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/reset.svg":
/*!******************************!*\
  !*** ./src/images/reset.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12.01 2.993C11.8 2.993 11.59 3.023 11.37 3.043L12.71 1.703L11.3 0.292999L7.59 4.003L11.3 7.713L12.71 6.303L11.46 5.053C11.64 5.043 11.82 5.013 12 5.013C15.86 5.013 19 8.153 19 12.013C19 15.873 15.86 19.013 12 19.013C8.14 19.013 5 15.873 5 12.013C5 11.463 4.55 11.013 4 11.013C3.45 11.013 3 11.463 3 12.013C3 16.973 7.04 21.013 12 21.013C16.96 21.013 21 16.973 21 12.013C21 7.053 16.97 2.993 12.01 2.993Z\"></path></svg>"

/***/ }),

/***/ "./src/images/save.svg":
/*!*****************************!*\
  !*** ./src/images/save.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2H4L2 4V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H20C20.5304 22 21.0391 21.7893 21.4142 21.4142C21.7893 21.0391 22 20.5304 22 20V4C22 3.46957 21.7893 2.96086 21.4142 2.58579C21.0391 2.21071 20.5304 2 20 2ZM15 4V6H9V4H15ZM8 20V15H16V20H8ZM20 20H18V13H6V20H4V4.83L4.83 4H7V8H17V4H20V20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/select-page.svg":
/*!************************************!*\
  !*** ./src/images/select-page.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M23 11H19.9C19.4 7.4 16.6 4.5 13 4.1V1H11V4.1C7.4 4.5 4.5 7.4 4.1 11H1V13H4.1C4.6 16.6 7.4 19.5 11 19.9V23H13V19.9C16.6 19.4 19.5 16.6 19.9 13H23V11ZM12 18C8.7 18 6 15.3 6 12C6 8.7 8.7 6 12 6C15.3 6 18 8.7 18 12C18 15.3 15.3 18 12 18Z\"></path></svg>"

/***/ }),

/***/ "./src/images/settings.svg":
/*!*********************************!*\
  !*** ./src/images/settings.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.9 4C9.4 2.3 7.9 1 6 1C3.8 1 2 2.8 2 5C2 7.2 3.8 9 6 9C7.9 9 9.4 7.7 9.9 6H22V4H9.9ZM6 7C4.9 7 4 6.1 4 5C4 3.9 4.9 3 6 3C7.1 3 8 3.9 8 5C8 6.1 7.1 7 6 7ZM9 15C7.1 15 5.6 16.3 5.1 18H2V20H5.1C5.5 21.7 7.1 23 9 23C10.9 23 12.4 21.7 12.9 20H22V18H12.9C12.4 16.3 10.9 15 9 15ZM9 21C7.9 21 7 20.1 7 19C7 17.9 7.9 17 9 17C10.1 17 11 17.9 11 19C11 20.1 10.1 21 9 21ZM18 8C16.1 8 14.6 9.3 14.1 11H2V13H14.1C14.5 14.7 16.1 16 18 16C20.2 16 22 14.2 22 12C22 9.8 20.2 8 18 8ZM18 14C16.9 14 16 13.1 16 12C16 10.9 16.9 10 18 10C19.1 10 20 10.9 20 12C20 13.1 19.1 14 18 14Z\"></path></svg>"

/***/ }),

/***/ "./src/images/settings_16x16.svg":
/*!***************************************!*\
  !*** ./src/images/settings_16x16.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.8 2C6.4 0.8 5.3 0 4 0C2.3 0 1 1.3 1 3C1 4.7 2.3 6 4 6C5.3 6 6.4 5.2 6.8 4H15V2H6.8ZM4 4C3.4 4 3 3.6 3 3C3 2.4 3.4 2 4 2C4.6 2 5 2.4 5 3C5 3.6 4.6 4 4 4ZM12 5C10.7 5 9.6 5.8 9.2 7H1V9H9.2C9.6 10.2 10.7 11 12 11C13.7 11 15 9.7 15 8C15 6.3 13.7 5 12 5ZM12 9C11.4 9 11 8.6 11 8C11 7.4 11.4 7 12 7C12.6 7 13 7.4 13 8C13 8.6 12.6 9 12 9ZM6 10C4.7 10 3.6 10.8 3.2 12H1V14H3.2C3.6 15.2 4.7 16 6 16C7.3 16 8.4 15.2 8.8 14H15V12H8.8C8.4 10.8 7.3 10 6 10ZM6 14C5.4 14 5 13.6 5 13C5 12.4 5.4 12 6 12C6.6 12 7 12.4 7 13C7 13.6 6.6 14 6 14Z\"></path></svg>"

/***/ }),

/***/ "./src/images/signaturepad.svg":
/*!*************************************!*\
  !*** ./src/images/signaturepad.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 17V19H9.1C9.5 18.4 9.9 17.7 10.2 17H24ZM11.9 9.00001C11 13.7 8.6 19.6 5 22.6C3.8 23.6 2 22.6 2 21.1C2 20.4 2.1 19.7 2.2 19H0V17H2.8C4.3 12.9 7.6 9.10001 10.2 7.60001C10.4 6.10001 10.4 4.80001 10.2 3.90001C9.9 3.30001 9.7 3.00001 9.6 3.00001C9.4 3.00001 7.8 2.90001 3.8 8.70001L2.2 7.60001C5.5 2.80001 7.9 0.700007 9.9 1.00001C12 1.20001 12.5 4.60001 12.2 6.90001C14.3 7.00001 14.8 8.20001 14.9 10.3C16.2 9.10001 18.1 7.90001 19.2 9.20001C20.8 8.90001 22.1 10.4 22.9 11.5L21.3 12.7C20.4 11.4 19.8 11.2 19.6 11.2C19.5 11.2 19.5 11.3 19.4 11.4C19 12 18.6 12.8 18 13.7C17.7 14.1 17.2 14.3 16.7 14.1C15.5 13.5 16.5 12.1 16.8 11.2C15.8 12 14.4 13.4 13.9 14.8C13.8 15.5 13.3 16.3 12.5 16.1C11.6 15.9 11.7 14.9 12 14.2C13.3 9.80001 12.5 9.00001 12.5 9.00001C12.5 8.90001 12.2 8.80001 11.9 9.00001ZM9.5 10.4C6.9 12.8 4.1 17.1 4 20.8C6.6 18.5 8.5 14.3 9.5 10.4Z\"></path></svg>"

/***/ }),

/***/ "./src/images/switch-active_16x16.svg":
/*!********************************************!*\
  !*** ./src/images/switch-active_16x16.svg ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11 5C12.7 5 14 6.3 14 8C14 9.7 12.7 11 11 11H5C3.3 11 2 9.7 2 8C2 6.3 3.3 5 5 5H11ZM11 3H5C2.2 3 0 5.2 0 8C0 10.8 2.2 13 5 13H11C13.8 13 16 10.8 16 8C16 5.2 13.8 3 11 3ZM11 6C9.9 6 9 6.9 9 8C9 9.1 9.9 10 11 10C12.1 10 13 9.1 13 8C13 6.9 12.1 6 11 6Z\"></path></svg>"

/***/ }),

/***/ "./src/images/switch-inactive_16x16.svg":
/*!**********************************************!*\
  !*** ./src/images/switch-inactive_16x16.svg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11 5C12.7 5 14 6.3 14 8C14 9.7 12.7 11 11 11H5C3.3 11 2 9.7 2 8C2 6.3 3.3 5 5 5H11ZM11 3H5C2.2 3 0 5.2 0 8C0 10.8 2.2 13 5 13H11C13.8 13 16 10.8 16 8C16 5.2 13.8 3 11 3ZM5 6C3.9 6 3 6.9 3 8C3 9.1 3.9 10 5 10C6.1 10 7 9.1 7 8C7 6.9 6.1 6 5 6Z\"></path></svg>"

/***/ }),

/***/ "./src/images/tagbox.svg":
/*!*******************************!*\
  !*** ./src/images/tagbox.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 7V6C22 4.9 21.1 4 20 4H16C14.9 4 14 4.9 14 6V7C14 8.1 14.9 9 16 9H20C21.1 9 22 8.1 22 7ZM20 7H16V6H20V7ZM2 6V7C2 8.1 2.9 9 4 9H11C12.1 9 13 8.1 13 7V6C13 4.9 12.1 4 11 4H4C2.9 4 2 4.9 2 6ZM4 6H11V7H4V6ZM9 12V13C9 14.1 9.9 15 11 15H20C21.1 15 22 14.1 22 13V12C22 10.9 21.1 10 20 10H11C9.9 10 9 10.9 9 12ZM11 12H20V13H11V12ZM2 18V19C2 20.1 2.9 21 4 21H15C16.1 21 17 20.1 17 19V18C17 16.9 16.1 16 15 16H4C2.9 16 2 16.9 2 18ZM4 18H15V19H4V18ZM2 12V13C2 14.1 2.9 15 4 15H6C7.1 15 8 14.1 8 13V12C8 10.9 7.1 10 6 10H4C2.9 10 2 10.9 2 12ZM4 12H6V13H4V12Z\"></path></svg>"

/***/ }),

/***/ "./src/images/text.svg":
/*!*****************************!*\
  !*** ./src/images/text.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 6H4C2.9 6 2 6.9 2 8V16C2 17.1 2.9 18 4 18H20C21.1 18 22 17.1 22 16V8C22 6.9 21.1 6 20 6ZM20 16H4V8H20V16ZM14 13H6V11H14V13Z\"></path></svg>"

/***/ }),

/***/ "./src/images/theme.svg":
/*!******************************!*\
  !*** ./src/images/theme.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M24 21.4201C23.9387 22.1566 23.5894 22.8394 23.0278 23.3202C22.4662 23.8011 21.7376 24.0413 21 23.9888C20.2624 24.0413 19.5338 23.8011 18.9722 23.3202C18.4106 22.8394 18.0613 22.1566 18 21.4201C18 18.8513 21 16.2826 21 14.9932C21 16.2826 24 18.8513 24 21.4201ZM22 12.9942L11 1.99951L8.71 4.2884L10.12 5.70771L11 4.82814L18.17 11.9946L5.64 15.8028L2.83 12.9942L7.71 8.11653L9.29 9.70576C9.38296 9.79944 9.49356 9.8738 9.61542 9.92455C9.73728 9.97529 9.86799 10.0014 10 10.0014C10.132 10.0014 10.2627 9.97529 10.3846 9.92455C10.5064 9.8738 10.617 9.79944 10.71 9.70576C10.8037 9.61284 10.8781 9.5023 10.9289 9.3805C10.9797 9.2587 11.0058 9.12805 11.0058 8.99611C11.0058 8.86416 10.9797 8.73352 10.9289 8.61172C10.8781 8.48992 10.8037 8.37937 10.71 8.28645L3.71 1.28986C3.5217 1.10165 3.2663 0.995911 3 0.995911C2.7337 0.995911 2.4783 1.10165 2.29 1.28986C2.1017 1.47807 1.99591 1.73334 1.99591 1.99951C1.99591 2.26569 2.1017 2.52096 2.29 2.70917L6.29 6.70722L0 12.9942L10 22.9893L18 14.9932L22 12.9942Z\"></path></svg>"

/***/ }),

/***/ "./src/images/toolbox.svg":
/*!********************************!*\
  !*** ./src/images/toolbox.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 4H16V2C16 1.46957 15.7893 0.960859 15.4142 0.585786C15.0391 0.210714 14.5304 0 14 0L10 0C9.46957 0 8.96086 0.210714 8.58579 0.585786C8.21071 0.960859 8 1.46957 8 2V4H3C2.46957 4 1.96086 4.21071 1.58579 4.58579C1.21071 4.96086 1 5.46957 1 6V12H2V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H20C20.5304 22 21.0391 21.7893 21.4142 21.4142C21.7893 21.0391 22 20.5304 22 20V12H23V6C23 5.46957 22.7893 4.96086 22.4142 4.58579C22.0391 4.21071 21.5304 4 21 4ZM10 2H14V4H10V2ZM20 20H4V12H9V16H15V12H20V20ZM11 14V10H13V14H11ZM21 10H15V8H9V10H3V6H21V10Z\"></path></svg>"

/***/ }),

/***/ "./src/images/undo.svg":
/*!*****************************!*\
  !*** ./src/images/undo.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 8.00001H4.40001L8.40001 4.00001L7.00001 2.60001L0.600006 9.00001L7.00001 15.4L8.40001 14L4.40001 10H17C19.2 10 21 11.8 21 14C21 16.2 19.2 18 17 18H16V20H17C20.3 20 23 17.3 23 14C23 10.7 20.3 8.00001 17 8.00001Z\"></path></svg>"

/***/ }),

/***/ "./src/images/visible.svg":
/*!********************************!*\
  !*** ./src/images/visible.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 4C7.2 4 3 7.2 0.5 12C3 16.8 7.2 20 12 20C16.8 20 20.9 16.8 23.5 12C20.9 7.2 16.7 4 12 4ZM12 18C8.5 18 5.1 15.8 2.8 12C5.1 8.2 8.5 6 12 6C15.5 6 18.9 8.2 21.2 12C18.9 15.8 15.5 18 12 18ZM12 7C9.2 7 7 9.2 7 12C7 14.8 9.2 17 12 17C14.8 17 17 14.8 17 12C17 9.2 14.7 7 12 7ZM12 15C10.3 15 9 13.7 9 12C9 11.7 9 11.5 9.1 11.3L12 12L10.3 9.5C10.8 9.2 11.3 9 12 9C13.7 9 15 10.3 15 12C15 13.7 13.6 15 12 15Z\"></path></svg>"

/***/ }),

/***/ "./src/images/wizard.svg":
/*!*******************************!*\
  !*** ./src/images/wizard.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.7 16.3C8.1 16.7 8.1 17.3 7.7 17.7L3.7 21.7C3.5 21.9 3.3 22 3 22C2.7 22 2.5 21.9 2.3 21.7C1.9 21.3 1.9 20.7 2.3 20.3L6.3 16.3C6.7 15.9 7.3 15.9 7.7 16.3ZM20.5 10L23 13.7L18.6 14.6L17.7 19L14 16.5L10.3 19L9.4 14.6L5 13.7L7.5 10L5 6.3L9.4 5.4L10.3 1L14 3.5L17.7 1L18.6 5.4L23 6.3L20.5 10ZM18.1 10L18.8 8.9L19.6 7.7L18.1 7.4L16.8 7.1L16.5 5.8L16.2 4.3L15 5.1L14 5.9L12.9 5.2L11.7 4.3L11.4 5.8L11.1 7.1L9.8 7.4L8.3 7.7L9.1 8.9L9.9 10L9.2 11.1L8.4 12.3L9.9 12.6L11.2 12.9L11.5 14.2L11.8 15.7L13 14.9L14.1 14.2L15.2 14.9L16.4 15.7L16.7 14.2L17 12.9L18.3 12.6L19.8 12.3L19 11.1L18.1 10Z\"></path></svg>"

/***/ }),

/***/ "./src/json5.ts":
/*!**********************!*\
  !*** ./src/json5.ts ***!
  \**********************/
/*! exports provided: SurveyJSON5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyJSON5", function() { return SurveyJSON5; });
// This file is based on JSON5, http://json5.org/
// The modification for getting object and properties location 'at' were maden.
var SurveyJSON5 = /** @class */ (function () {
    function SurveyJSON5(parseType) {
        if (parseType === void 0) { parseType = 0; }
        this.parseType = parseType;
    }
    SurveyJSON5.prototype.parse = function (source, reviver, startFrom, endAt) {
        if (reviver === void 0) { reviver = null; }
        if (startFrom === void 0) { startFrom = 0; }
        if (endAt === void 0) { endAt = -1; }
        var result;
        this.text = String(source);
        this.at = startFrom;
        this.endAt = endAt;
        this.ch = " ";
        result = this.value();
        this.white();
        if (this.ch) {
            this.error("Syntax error");
        }
        // If there is a reviver function, we recursively walk the new structure,
        // passing each name/value pair to the reviver function for possible
        // transformation, starting with a temporary root object that holds the result
        // in an empty key. If there is not a reviver function, we simply return the
        // result.
        return typeof reviver === "function"
            ? (function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            }
                            else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            })({ "": result }, "")
            : result;
    };
    SurveyJSON5.prototype.error = function (m) {
        // Call error when something is wrong.
        var error = new SyntaxError();
        error.message = m;
        error["at"] = this.at;
        throw error;
    };
    SurveyJSON5.prototype.next = function (c) {
        if (c === void 0) { c = null; }
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== this.ch) {
            this.error("Expected '" + c + "' instead of '" + this.ch + "'");
        }
        // Get the this.next character. When there are no more characters,
        // return the empty string.
        this.ch = this.chartAt();
        this.at += 1;
        return this.ch;
    };
    SurveyJSON5.prototype.peek = function () {
        // Get the this.next character without consuming it or
        // assigning it to the this.ch varaible.
        return this.chartAt();
    };
    SurveyJSON5.prototype.chartAt = function () {
        if (this.endAt > -1 && this.at >= this.endAt)
            return "";
        return this.text.charAt(this.at);
    };
    SurveyJSON5.prototype.identifier = function () {
        // Parse an identifier. Normally, reserved words are disallowed here, but we
        // only use this for unquoted object keys, where reserved words are allowed,
        // so we don't check for those here. References:
        // - http://es5.github.com/#x7.6
        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
        // TODO Identifiers can have Unicode "letters" in them; add support for those.
        var key = this.ch;
        // Identifiers must start with a letter, _ or $.
        if (this.ch !== "_" &&
            this.ch !== "$" &&
            (this.ch < "a" || this.ch > "z") &&
            (this.ch < "A" || this.ch > "Z")) {
            this.error("Bad identifier");
        }
        // Subsequent characters can contain digits.
        while (this.next() &&
            (this.ch === "_" ||
                this.ch === "$" ||
                (this.ch >= "a" && this.ch <= "z") ||
                (this.ch >= "A" && this.ch <= "Z") ||
                (this.ch >= "0" && this.ch <= "9"))) {
            key += this.ch;
        }
        return key;
    };
    SurveyJSON5.prototype.number = function () {
        // Parse a number value.
        var number, sign = "", string = "", base = 10;
        if (this.ch === "-" || this.ch === "+") {
            sign = this.ch;
            this.next(this.ch);
        }
        // support for Infinity (could tweak to allow other words):
        if (this.ch === "I") {
            number = this.word();
            if (typeof number !== "number" || isNaN(number)) {
                this.error("Unexpected word for number");
            }
            return sign === "-" ? -number : number;
        }
        // support for NaN
        if (this.ch === "N") {
            number = this.word();
            if (!isNaN(number)) {
                this.error("expected word to be NaN");
            }
            // ignore sign as -NaN also is NaN
            return number;
        }
        if (this.ch === "0") {
            string += this.ch;
            this.next();
            if (this.ch === "x" || this.ch === "X") {
                string += this.ch;
                this.next();
                base = 16;
            }
            else if (this.ch >= "0" && this.ch <= "9") {
                this.error("Octal literal");
            }
        }
        switch (base) {
            case 10:
                while (this.ch >= "0" && this.ch <= "9") {
                    string += this.ch;
                    this.next();
                }
                if (this.ch === ".") {
                    string += ".";
                    while (this.next() && this.ch >= "0" && this.ch <= "9") {
                        string += this.ch;
                    }
                }
                if (this.ch === "e" || this.ch === "E") {
                    string += this.ch;
                    this.next();
                    if (this.ch === "-" || this.ch === "+") {
                        string += this.ch;
                        this.next();
                    }
                    while (this.ch >= "0" && this.ch <= "9") {
                        string += this.ch;
                        this.next();
                    }
                }
                break;
            case 16:
                while ((this.ch >= "0" && this.ch <= "9") ||
                    (this.ch >= "A" && this.ch <= "F") ||
                    (this.ch >= "a" && this.ch <= "f")) {
                    string += this.ch;
                    this.next();
                }
                break;
        }
        if (sign === "-") {
            number = -string;
        }
        else {
            number = +string;
        }
        if (!isFinite(number)) {
            this.error("Bad number");
        }
        else {
            return number;
        }
    };
    SurveyJSON5.prototype.string = function () {
        // Parse a string value.
        var hex, i, string = "", delim, // double quote or single quote
        uffff;
        // When parsing for string values, we must look for ' or " and \ characters.
        if (this.ch === '"' || this.ch === "'") {
            delim = this.ch;
            while (this.next()) {
                if (this.ch === delim) {
                    this.next();
                    return string;
                }
                else if (this.ch === "\\") {
                    this.next();
                    if (this.ch === "u") {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(this.next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    }
                    else if (this.ch === "\r") {
                        if (this.peek() === "\n") {
                            this.next();
                        }
                    }
                    else if (typeof SurveyJSON5.escapee[this.ch] === "string") {
                        string += SurveyJSON5.escapee[this.ch];
                    }
                    else {
                        break;
                    }
                }
                else if (this.ch === "\n") {
                    // unescaped newlines are invalid; see:
                    // https://github.com/aseemk/json5/issues/24
                    // TODO this feels special-cased; are there other
                    // invalid unescaped chars?
                    break;
                }
                else {
                    string += this.ch;
                }
            }
        }
        this.error("Bad string");
    };
    SurveyJSON5.prototype.inlineComment = function () {
        // Skip an inline comment, assuming this is one. The current character should
        // be the second / character in the // pair that begins this inline comment.
        // To finish the inline comment, we look for a newline or the end of the text.
        if (this.ch !== "/") {
            this.error("Not an inline comment");
        }
        do {
            this.next();
            if (this.ch === "\n" || this.ch === "\r") {
                this.next();
                return;
            }
        } while (this.ch);
    };
    SurveyJSON5.prototype.blockComment = function () {
        // Skip a block comment, assuming this is one. The current character should be
        // the * character in the /* pair that begins this block comment.
        // To finish the block comment, we look for an ending */ pair of characters,
        // but we also watch for the end of text before the comment is terminated.
        if (this.ch !== "*") {
            this.error("Not a block comment");
        }
        do {
            this.next();
            while (this.ch === "*") {
                this.next("*");
                if (this.ch === "/") {
                    this.next("/");
                    return;
                }
            }
        } while (this.ch);
        this.error("Unterminated block comment");
    };
    SurveyJSON5.prototype.comment = function () {
        // Skip a comment, whether inline or block-level, assuming this is one.
        // Comments always begin with a / character.
        if (this.ch !== "/") {
            this.error("Not a comment");
        }
        this.next("/");
        if (this.ch === "/") {
            this.inlineComment();
        }
        else if (this.ch === "*") {
            this.blockComment();
        }
        else {
            this.error("Unrecognized comment");
        }
    };
    SurveyJSON5.prototype.white = function () {
        // Skip whitespace and comments.
        // Note that we're detecting comments by only a single / character.
        // This works since regular expressions are not valid JSON(5), but this will
        // break if there are other valid values that begin with a / character!
        while (this.ch) {
            if (this.ch === "/") {
                this.comment();
            }
            else if (SurveyJSON5.ws.indexOf(this.ch) >= 0) {
                this.next();
            }
            else {
                return;
            }
        }
    };
    SurveyJSON5.prototype.word = function () {
        // true, false, or null.
        switch (this.ch) {
            case "t":
                this.next("t");
                this.next("r");
                this.next("u");
                this.next("e");
                return true;
            case "f":
                this.next("f");
                this.next("a");
                this.next("l");
                this.next("s");
                this.next("e");
                return false;
            case "n":
                this.next("n");
                this.next("u");
                this.next("l");
                this.next("l");
                return null;
            case "I":
                this.next("I");
                this.next("n");
                this.next("f");
                this.next("i");
                this.next("n");
                this.next("i");
                this.next("t");
                this.next("y");
                return Infinity;
            case "N":
                this.next("N");
                this.next("a");
                this.next("N");
                return NaN;
        }
        this.error("Unexpected '" + this.ch + "'");
    };
    SurveyJSON5.prototype.array = function () {
        // Parse an array value.
        var array = [];
        if (this.ch === "[") {
            this.next("[");
            this.white();
            while (this.ch) {
                if (this.ch === "]") {
                    this.next("]");
                    return array; // Potentially empty array
                }
                // ES5 allows omitting elements in arrays, e.g. [,] and
                // [,null]. We don't allow this in JSON5.
                if (this.ch === ",") {
                    this.error("Missing array element");
                }
                else {
                    array.push(this.value());
                }
                this.white();
                // If there's no comma after this value, this needs to
                // be the end of the array.
                if (this.ch !== ",") {
                    this.next("]");
                    return array;
                }
                this.next(",");
                this.white();
            }
        }
        this.error("Bad array");
    };
    SurveyJSON5.prototype.object = function () {
        // Parse an object value.
        var key, start, isFirstProperty = true, object = {};
        if (this.parseType > 0) {
            object[SurveyJSON5.positionName] = { start: this.at - 1 };
        }
        if (this.ch === "{") {
            this.next("{");
            this.white();
            start = this.at - 1;
            while (this.ch) {
                if (this.ch === "}") {
                    if (this.parseType > 0) {
                        object[SurveyJSON5.positionName].end = start;
                    }
                    this.next("}");
                    return object; // Potentially empty object
                }
                // Keys can be unquoted. If they are, they need to be
                // valid JS identifiers.
                if (this.ch === '"' || this.ch === "'") {
                    key = this.string();
                }
                else {
                    key = this.identifier();
                }
                this.white();
                if (this.parseType > 1) {
                    object[SurveyJSON5.positionName][key] = {
                        start: start,
                        valueStart: this.at
                    };
                }
                this.next(":");
                object[key] = this.value();
                if (this.parseType > 1) {
                    start = this.at - 1;
                    object[SurveyJSON5.positionName][key].valueEnd = start;
                    object[SurveyJSON5.positionName][key].end = start;
                }
                this.white();
                // If there's no comma after this pair, this needs to be
                // the end of the object.
                if (this.ch !== ",") {
                    if (this.parseType > 1) {
                        object[SurveyJSON5.positionName][key].valueEnd--;
                        object[SurveyJSON5.positionName][key].end--;
                    }
                    if (this.parseType > 0) {
                        object[SurveyJSON5.positionName].end = this.at - 1;
                    }
                    this.next("}");
                    return object;
                }
                if (this.parseType > 1) {
                    object[SurveyJSON5.positionName][key].valueEnd--;
                    if (!isFirstProperty) {
                        object[SurveyJSON5.positionName][key].end--;
                    }
                }
                this.next(",");
                this.white();
                isFirstProperty = false;
            }
        }
        this.error("Bad object");
    };
    SurveyJSON5.prototype.value = function () {
        // Parse a JSON value. It could be an object, an array, a string, a number,
        // or a word.
        this.white();
        switch (this.ch) {
            case "{":
                return this.object();
            case "[":
                return this.array();
            case '"':
            case "'":
                return this.string();
            case "-":
            case "+":
            case ".":
                return this.number();
            default:
                return this.ch >= "0" && this.ch <= "9" ? this.number() : this.word();
        }
    };
    SurveyJSON5.prototype.stringify = function (obj, replacer, space) {
        if (replacer === void 0) { replacer = null; }
        if (space === void 0) { space = null; }
        if (replacer &&
            (typeof replacer !== "function" && !this.isArray(replacer))) {
            throw new Error("Replacer must be a function or an array");
        }
        this.replacer = replacer;
        this.indentStr = this.getIndent(space);
        this.objStack = [];
        // special case...when undefined is used inside of
        // a compound object/array, return null.
        // but when top-level, return undefined
        var topLevelHolder = { "": obj };
        if (obj === undefined) {
            return this.getReplacedValueOrUndefined(topLevelHolder, "", true);
        }
        return this.internalStringify(topLevelHolder, "", true);
    };
    SurveyJSON5.prototype.getIndent = function (space) {
        if (space) {
            if (typeof space === "string") {
                return space;
            }
            else if (typeof space === "number" && space >= 0) {
                return this.makeIndent(" ", space, true);
            }
        }
        return "";
    };
    SurveyJSON5.prototype.getReplacedValueOrUndefined = function (holder, key, isTopLevel) {
        var value = holder[key];
        // Replace the value with its toJSON value first, if possible
        if (value && value.toJSON && typeof value.toJSON === "function") {
            value = value.toJSON();
        }
        // If the user-supplied replacer if a function, call it. If its an array, check objects' string keys for
        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
        if (typeof this.replacer === "function") {
            return this.replacer.call(holder, key, value);
        }
        else if (this.replacer) {
            if (isTopLevel ||
                this.isArray(holder) ||
                this.replacer.indexOf(key) >= 0) {
                return value;
            }
            else {
                return undefined;
            }
        }
        else {
            return value;
        }
    };
    SurveyJSON5.prototype.isWordChar = function (char) {
        return ((char >= "a" && char <= "z") ||
            (char >= "A" && char <= "Z") ||
            (char >= "0" && char <= "9") ||
            char === "_" ||
            char === "$");
    };
    SurveyJSON5.prototype.isWordStart = function (char) {
        return ((char >= "a" && char <= "z") ||
            (char >= "A" && char <= "Z") ||
            char === "_" ||
            char === "$");
    };
    SurveyJSON5.prototype.isWord = function (key) {
        if (typeof key !== "string") {
            return false;
        }
        if (!this.isWordStart(key[0])) {
            return false;
        }
        var i = 1, length = key.length;
        while (i < length) {
            if (!this.isWordChar(key[i])) {
                return false;
            }
            i++;
        }
        return true;
    };
    // polyfills
    SurveyJSON5.prototype.isArray = function (obj) {
        if (Array.isArray) {
            return Array.isArray(obj);
        }
        else {
            return Object.prototype.toString.call(obj) === "[object Array]";
        }
    };
    SurveyJSON5.prototype.isDate = function (obj) {
        return Object.prototype.toString.call(obj) === "[object Date]";
    };
    SurveyJSON5.prototype.isNaN = function (val) {
        return typeof val === "number" && val !== val;
    };
    SurveyJSON5.prototype.checkForCircular = function (obj) {
        for (var i = 0; i < this.objStack.length; i++) {
            if (this.objStack[i] === obj) {
                throw new TypeError("Converting circular structure to JSON");
            }
        }
    };
    SurveyJSON5.prototype.makeIndent = function (str, num, noNewLine) {
        if (noNewLine === void 0) { noNewLine = false; }
        if (!str) {
            return "";
        }
        // indentation no more than 10 chars
        if (str.length > 10) {
            str = str.substring(0, 10);
        }
        var indent = noNewLine ? "" : "\n";
        for (var i = 0; i < num; i++) {
            indent += str;
        }
        return indent;
    };
    SurveyJSON5.prototype.escapeString = function (str) {
        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.
        SurveyJSON5.escapable.lastIndex = 0;
        return SurveyJSON5.escapable.test(str)
            ? '"' +
                str.replace(SurveyJSON5.escapable, function (a) {
                    var c = SurveyJSON5.meta[a];
                    return typeof c === "string"
                        ? c
                        : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                }) +
                '"'
            : '"' + str + '"';
    };
    // End
    SurveyJSON5.prototype.internalStringify = function (holder, key, isTopLevel) {
        var buffer, res;
        // Replace the value, if necessary
        var obj_part = this.getReplacedValueOrUndefined(holder, key, isTopLevel);
        if (obj_part && !this.isDate(obj_part)) {
            // unbox objects
            // don't unbox dates, since will turn it into number
            obj_part = obj_part.valueOf();
        }
        switch (typeof obj_part) {
            case "boolean":
                return obj_part.toString();
            case "number":
                if (isNaN(obj_part) || !isFinite(obj_part)) {
                    return "null";
                }
                return obj_part.toString();
            case "string":
                return this.escapeString(obj_part.toString());
            case "object":
                if (obj_part === null) {
                    return "null";
                }
                else if (this.isArray(obj_part)) {
                    this.checkForCircular(obj_part);
                    buffer = "[";
                    this.objStack.push(obj_part);
                    for (var i = 0; i < obj_part.length; i++) {
                        res = this.internalStringify(obj_part, i, false);
                        buffer += this.makeIndent(this.indentStr, this.objStack.length);
                        if (res === null || typeof res === "undefined") {
                            buffer += "null";
                        }
                        else {
                            buffer += res;
                        }
                        if (i < obj_part.length - 1) {
                            buffer += ",";
                        }
                        else if (this.indentStr) {
                            buffer += "\n";
                        }
                    }
                    this.objStack.pop();
                    buffer +=
                        this.makeIndent(this.indentStr, this.objStack.length, true) + "]";
                }
                else {
                    this.checkForCircular(obj_part);
                    buffer = "{";
                    var nonEmpty = false;
                    this.objStack.push(obj_part);
                    for (var prop in obj_part) {
                        if (obj_part.hasOwnProperty(prop)) {
                            var value = this.internalStringify(obj_part, prop, false);
                            isTopLevel = false;
                            if (typeof value !== "undefined" && value !== null) {
                                buffer += this.makeIndent(this.indentStr, this.objStack.length);
                                nonEmpty = true;
                                var propKey = this.isWord(prop)
                                    ? prop
                                    : this.escapeString(prop);
                                buffer +=
                                    propKey + ":" + (this.indentStr ? " " : "") + value + ",";
                            }
                        }
                    }
                    this.objStack.pop();
                    if (nonEmpty) {
                        buffer =
                            buffer.substring(0, buffer.length - 1) +
                                this.makeIndent(this.indentStr, this.objStack.length) +
                                "}";
                    }
                    else {
                        buffer = "{}";
                    }
                }
                return buffer;
            default:
                // functions and undefined should be ignored
                return undefined;
        }
    };
    SurveyJSON5.positionName = "pos";
    SurveyJSON5.escapee = {
        "'": "'",
        '"': '"',
        "\\": "\\",
        "/": "/",
        "\n": "",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "\t"
    };
    SurveyJSON5.ws = [" ", "\t", "\r", "\n", "\v", "\f", "\xA0", "\uFEFF"];
    // Copied from Crokford's implementation of JSON
    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
    // Begin
    // eslint-disable-next-line
    SurveyJSON5.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    // eslint-disable-next-line
    SurveyJSON5.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    SurveyJSON5.meta = {
        // table of character substitutions
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    };
    return SurveyJSON5;
}());



/***/ }),

/***/ "./src/localization/english.ts":
/*!*************************************!*\
  !*** ./src/localization/english.ts ***!
  \*************************************/
/*! exports provided: enStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enStrings", function() { return enStrings; });
// Please, uncomment the line below if you create a custom dictionary
// import { editorLocalization } from "survey-creator-core";
var enStrings = {
    // survey templates
    survey: {
        edit: "Edit",
        externalHelpLink: "Watch and learn how to create surveys",
        externalHelpLinkUrl: "https://www.youtube.com/channel/UCH2ru9okIcooNZfpIbyq4qQ?view_as=subscriber",
        dropQuestion: "Please drop a question here from the Toolbox.",
        addLogicItem: "Create a rule to customize the flow of the survey.",
        copy: "Copy",
        duplicate: "Duplicate",
        addToToolbox: "Add to toolbox",
        deletePanel: "Delete Panel",
        deleteQuestion: "Delete Question",
        convertTo: "Convert to",
        drag: "Drag element",
        license: "PLEASE PURCHASE A DEVELOPER LICENSE TO BE ABLE TO USE SURVEY CREATOR IN YOUR APP"
    },
    // Question types
    qt: {
        default: "Default",
        checkbox: "Checkboxes",
        comment: "Long Text",
        imagepicker: "Image Picker",
        ranking: "Ranking",
        image: "Image",
        dropdown: "Dropdown",
        tagbox: "Multi-Select Dropdown",
        file: "File Upload",
        html: "HTML",
        matrix: "Single-Select Matrix",
        matrixdropdown: "Multi-Select Matrix",
        matrixdynamic: "Dynamic Matrix",
        multipletext: "Multiple Textboxes",
        panel: "Panel",
        paneldynamic: "Dynamic Panel",
        radiogroup: "Radio Button Group",
        rating: "Rating Scale",
        text: "Single-Line Input",
        boolean: "Yes/No (Boolean)",
        expression: "Expression (read-only)",
        signaturepad: "Signature",
        buttongroup: "Button Group"
    },
    // Strings in SurveyJS Creator
    ed: {
        defaultLocale: "Default ({0})",
        survey: "Survey",
        settings: "Settings",
        settingsTooltip: "Open settings",
        surveySettings: "Survey Settings",
        surveySettingsTooltip: "Open survey settings",
        themeSettings: "Theme Settings",
        themeSettingsTooltip: "Open theme settings",
        showPanel: "Show Panel",
        hidePanel: "Hide Panel",
        prevSelected: "Select previous",
        nextSelected: "Select next",
        surveyTypeName: "Survey",
        pageTypeName: "Page",
        panelTypeName: "Panel",
        questionTypeName: "Question",
        columnTypeName: "Column",
        addNewPage: "Add New Page",
        moveRight: "Scroll to the Right",
        moveLeft: "Scroll to the Left",
        deletePage: "Delete Page",
        editPage: "Edit Page",
        edit: "Edit",
        newPageName: "page",
        newQuestionName: "question",
        newPanelName: "panel",
        newTextItemName: "text",
        testSurvey: "Preview",
        themeSurvey: "Themes",
        defaultV2Theme: "Default",
        modernTheme: "Modern",
        defaultTheme: "Default (legacy)",
        testSurveyAgain: "Preview Survey Again",
        testSurveyWidth: "Survey width: ",
        navigateToMsg: "You had to navigate to",
        logic: "Logic",
        embedSurvey: "Embed Survey",
        translation: "Translation",
        saveSurvey: "Save Survey",
        saveSurveyTooltip: "Save Survey",
        designer: "Designer",
        jsonEditor: "JSON Editor",
        jsonHideErrors: "Hide errors",
        jsonShowErrors: "Show errors",
        undo: "Undo",
        redo: "Redo",
        undoTooltip: "Undo last change",
        redoTooltip: "Redo the change",
        showMoreChoices: "Show more",
        showLessChoices: "Show less",
        copy: "Copy",
        cut: "Cut",
        paste: "Paste",
        copyTooltip: "Copy selection to clipboard",
        cutTooltip: "Cut selection to clipboard",
        pasteTooltip: "Paste from clipboard",
        options: "Options",
        generateValidJSON: "Generate Valid JSON",
        generateReadableJSON: "Generate Readable JSON",
        toolbox: "Toolbox",
        "property-grid": "Properties",
        propertyGridFilteredTextPlaceholder: "Type to search...",
        toolboxGeneralCategory: "General",
        toolboxChoiceCategory: "Choice Questions",
        toolboxTextCategory: "Text Input Questions",
        toolboxContainersCategory: "Containers",
        toolboxMatrixCategory: "Matrix Questions",
        toolboxMiscCategory: "Misc",
        correctJSON: "Please correct JSON.",
        surveyResults: "Survey Results ",
        surveyResultsTable: "As Table",
        surveyResultsJson: "As JSON",
        resultsTitle: "Question Title",
        resultsName: "Question Name",
        resultsValue: "Answer Value",
        resultsDisplayValue: "Display Value",
        modified: "Modified",
        saving: "Saving",
        saved: "Saved",
        propertyEditorError: "Error",
        saveError: "Error! Editor content is not saved.",
        translationPropertyGridTitle: "Language Settings",
        themePropertyGridTitle: "Theme Settings",
        translationLanguages: "Languages",
        translationDeleteLanguage: "Are you certain you wish to delete all strings for this language?",
        translationAddLanguage: "Select language to translate",
        translationShowAllStrings: "All Strings",
        translationShowUsedStringsOnly: "Used Strings Only",
        translationShowAllPages: "All Pages",
        translationNoStrings: "No strings to translate. Please, change the filter.",
        translationExportToSCVButton: "Export to CSV",
        translationImportFromSCVButton: "Import from CSV",
        translateUsigAI: "Auto-translate All",
        translationDialogTitle: "Untranslated strings",
        translationMergeLocaleWithDefault: "Merge {0} with default locale",
        translationPlaceHolder: "Translation...",
        themeExportButton: "Export",
        themeImportButton: "Import",
        surveyJsonExportButton: "Export",
        surveyJsonImportButton: "Import",
        surveyJsonCopyButton: "Copy to clipboard",
        themeResetButton: "Reset theme settings to default",
        bold: "Bold",
        italic: "Italic",
        underline: "Underline",
        addNewQuestion: "Add Question",
        selectPage: "Select page...",
        carryForwardChoicesCopied: "Choices are copied from",
        htmlPlaceHolder: "HTML content will be here.",
        panelPlaceHolder: "Drop a question from the toolbox here.",
        surveyPlaceHolder: "The survey is empty. Drag an element from the toolbox or click the button below.",
        imagePlaceHolder: "Drag and drop an image here or click the button below and choose an image to upload",
        imageChooseImage: "Choose Image",
        addNewTypeQuestion: "Add {0}",
        chooseLogoPlaceholder: "[LOGO]",
        auto: "auto",
        choices_Item: "Item ",
        lg: {
            addNewItem: "Add New Rule",
            empty_tab: "Create a rule to customize the flow of the survey.",
            page_visibilityName: "Show (hide) page",
            page_enableName: "Enable (disable) page",
            panel_visibilityName: "Show (hide) panel",
            panel_enableName: "Enable (disable) panel",
            question_visibilityName: "Show (hide) question",
            question_enableName: "Enable (disable) question",
            question_requireName: "Make question required",
            question_resetValueName: "Reset question value",
            question_setValueName: "Set question value",
            column_visibilityName: "Show (hide) column",
            column_enableName: "Enable (disable) column",
            column_requireName: "Make column required",
            column_resetValueName: "Reset column value",
            column_setValueName: "Set column value",
            trigger_completeName: "Complete survey",
            trigger_setvalueName: "Set answer",
            trigger_copyvalueName: "Copy answer",
            trigger_skipName: "Skip to question",
            trigger_runExpressionName: "Run expression",
            completedHtmlOnConditionName: "Set \"Survey Complete\" page markup",
            page_visibilityDescription: "Make the page visible when the logic expression returns true. Otherwise keep it invisible.",
            panel_visibilityDescription: "Make the panel visible when the logic expression returns true. Otherwise keep it invisible.",
            panel_enableDescription: "Make the panel, and all elements inside it, enable when the logic expression returns true. Otherwise keep them disabled.",
            question_visibilityDescription: "Make the question visible when the logic expression returns true. Otherwise keep it invisible.",
            question_enableDescription: "Make the question enable when the logic expression returns true. Otherwise keep it disabled.",
            question_requireDescription: "Question becomes required when the logic expression returns true.",
            trigger_completeDescription: "When the logic expression returns true then the survey becomes completed and an end-user see the 'Thank you page'.",
            trigger_setvalueDescription: "When question values, that are used in the logic expression, are changed and the logic expression returns true, then the value is set to the selected question.",
            trigger_copyvalueDescription: "When question values, that are used in the logic expression, are changed and the logic expression returns true, then the value of one selected question is copied to another selected question.",
            trigger_skipDescription: "When the logic expression returns true then the survey skip to / focus the selected question.",
            trigger_runExpressionDescription: "When the logic expression returns true, then the custom expression is performed. You may optionally set this expression result into the selected question",
            completedHtmlOnConditionDescription: "If the logic expression returns true, then the default text for the 'Thank you page' is changed to the given one.",
            itemExpressionText: "When expression: '{0}' returns true",
            itemEmptyExpressionText: "New rule",
            page_visibilityText: "make page {0} visible",
            panel_visibilityText: "make panel {0} visible",
            panel_enableText: "make panel {0} enable",
            question_visibilityText: "make question {0} visible",
            question_enableText: "make question {0} enable",
            question_requireText: "make question {0} required",
            question_resetValueText: "reset value for question: {0}",
            question_setValueText: "assign value: {1} to question: {0}",
            column_visibilityText: "make column {0} of question {1} visible",
            column_enableText: "make column {0} of question {1} enable",
            column_requireText: "make column {0} of question {1} required",
            column_resetValueText: "reset cell value for column: {0}",
            column_setValueText: "assign cell value: {1} to column: {0}",
            setValueExpressionPlaceholder: "An expression whose result will be assigned to the target question.",
            trigger_completeText: "survey becomes completed",
            trigger_setvalueText: "set into question: {0} value {1}",
            trigger_setvalueEmptyText: "clear question value: {0}",
            trigger_copyvalueText: "copy into question: {0} value from question {1}",
            trigger_skipText: "survey skip to the question {0}",
            trigger_runExpressionText1: "run expression: '{0}'",
            trigger_runExpressionText2: " and set its result into question: {0}",
            completedHtmlOnConditionText: "show custom text for the 'Thank you page'.",
            showAllQuestions: "All Questions",
            showAllActionTypes: "All Action Types",
            conditions: "Condition(s)",
            actions: "Action(s)",
            expressionEditorTitle: "Define condition(s)",
            actionsEditorTitle: "Define action(s)",
            deleteAction: "Delete Action",
            addNewAction: "Add Action",
            selectedActionCaption: "Select action...",
            expressionInvalid: "The logic expression is empty or invalid. Please correct it.",
            noActionError: "Please, add at least one action.",
            actionInvalid: "Please, fix problems in your action(s).",
            uncompletedRule_title: "Logical rules are incomplete",
            uncompletedRule_text: "You have not completed some of the logical rules. If you leave the tab now, the changes will be lost. Do you still want to leave the tab without completing the changes?",
            uncompletedRule_apply: "Yes",
            uncompletedRule_cancel: "No, I want to complete the rules",
            expressionSetup: "",
            actionsSetup: ""
        }
    },
    // Property Editors
    pe: {
        apply: "Apply",
        ok: "OK",
        save: "Save",
        clear: "Clear",
        saveTooltip: "Save",
        cancel: "Cancel",
        set: "Set",
        reset: "Reset",
        change: "Change",
        refresh: "Refresh",
        close: "Close",
        delete: "Delete",
        add: "Add",
        addNew: "Add New",
        addItem: "Click to add an item...",
        removeItem: "Click to remove the item...",
        dragItem: "Drag the item",
        addOther: "Other",
        addSelectAll: "Select All",
        addNone: "None",
        removeAll: "Remove All",
        edit: "Edit",
        back: "Return without saving",
        backTooltip: "Return without saving",
        saveAndBack: "Save and return",
        saveAndBackTooltip: "Save and return",
        doneEditing: "Done",
        editChoices: "Edit Choices",
        showChoices: "Show Choices",
        move: "Move",
        empty: "<empty>",
        emptyValue: "Value is empty",
        fastEntry: "Manual Entry",
        fastEntryNonUniqueError: "Value '{0}' is not unique",
        fastEntryChoicesCountError: "Please limit the number of items from {0} to {1}",
        fastEntryChoicesMinCountError: "Please enter at least {0} items",
        fastEntryPlaceholder: "You can set data in the following format:\nvalue1|text\nvalue2",
        formEntry: "Form Entry",
        testService: "Test the service",
        itemSelectorEmpty: "Please select the element",
        conditionActionEmpty: "Please select the action",
        conditionSelectQuestion: "Select question...",
        conditionSelectPage: "Select page...",
        conditionSelectPanel: "Select panel...",
        conditionValueQuestionTitle: "Please enter/select the value",
        expressionHelp: "Use curly brackets to access answers: `{question1} + {question2}`. Expressions also support functions: `iif()`, `today()`, `age()`, `min()`, `max()`, `count()`, `avg()`, and others",
        aceEditorHelp: "Press ctrl+space to get expression completion hint",
        aceEditorRowTitle: "Current row",
        aceEditorPanelTitle: "Current panel",
        showMore: "For more details please check the documentation",
        assistantTitle: "Available questions",
        cellsEmptyRowsColumns: "There is should be at least one column or row",
        showPreviewBeforeComplete: "Preview answers before submitting the survey",
        overridingPropertyPrefix: "Set by ",
        resetToDefaultCaption: "Reset",
        propertyIsEmpty: "Please enter a value",
        propertyIsNoUnique: "Please enter a unique value",
        propertyNameIsNotUnique: "Please enter a unique name",
        propertyNameIsIncorrect: "Do not use reserved words: \"item\", \"choice\", \"panel\", \"row\".",
        listIsEmpty: "No items have been added yet",
        "listIsEmpty@choices": "No choices have been added yet",
        "addNew@choices": "Add a choice",
        expressionIsEmpty: "Expression is empty",
        value: "Value",
        text: "Text",
        rowid: "Row ID",
        imageLink: "Image or video URL",
        columnEdit: "Edit column: {0}",
        itemEdit: "Edit item: {0}",
        url: "Service URL",
        path: "Path to data within the service",
        valueName: "Store answers in the following JSON field",
        choicesbyurl: {
            valueName: "Get values from the following JSON field"
        },
        titleName: "Get display texts from the following JSON field",
        imageLinkName: "Get image URLs from the following JSON field",
        allowEmptyResponse: "Allow empty response",
        titlePlaceholder: "Title",
        surveyTitlePlaceholder: "Survey Title",
        pageTitlePlaceholder: "Page {num}",
        descriptionPlaceholder: "Description",
        surveyDescriptionPlaceholder: "Description",
        pageDescriptionPlaceholder: "Description",
        showOtherItem: "Allow the Other option",
        otherText: "Other option text",
        showNoneItem: "Allow the None option",
        noneText: "None option text",
        showSelectAllItem: "Allow the Select All option",
        selectAllText: "Select All option text",
        choicesMin: "Minimum value for auto-generated items",
        choicesMax: "Maximum value for auto-generated items",
        choicesStep: "Step for auto-generated items",
        name: "Name",
        title: "Title",
        cellType: "Cell type",
        colCount: "Column count",
        choicesOrder: "Choices sort order",
        visible: "Visible",
        isRequired: "Required",
        markRequired: "Mark as required",
        removeRequiredMark: "Remove the required mark",
        isAllRowRequired: "Require answer for all rows",
        requiredErrorText: "\"Required\" error message",
        startWithNewLine: "Display the question on a new line",
        rows: "Rows",
        cols: "Columns",
        placeholder: "Input area placeholder",
        showPreview: "Show preview area",
        storeDataAsText: "Store file content in JSON result as text",
        maxSize: "Maximum file size (in bytes)",
        imageHeight: "Image height",
        imageWidth: "Image width",
        rowCount: "Row count",
        columnLayout: "Columns layout",
        addRowLocation: "Add Row button location",
        addRowText: "Add Row button text",
        removeRowText: "Remove Row button text",
        rateMin: "Minimum rate value",
        rateMax: "Maximum rate value",
        rateStep: "Rate step",
        minRateDescription: "Minimum rate value description",
        maxRateDescription: "Maximum rate value description",
        inputType: "Input type",
        optionsCaption: "Option placeholder",
        defaultValue: "Default Answer",
        cellsDefaultRow: "Default texts",
        surveyEditorTitle: "Edit survey settings",
        qEditorTitle: "Edit: {0}",
        maxLength: "Maximum length (in characters)",
        buildExpression: "Build",
        editExpression: "Edit",
        and: "and",
        or: "or",
        remove: "Remove",
        addCondition: "Add Condition",
        emptyLogicPopupMessage: "Select a question to start configuring conditions.",
        if: "If",
        then: "then",
        setToName: "Target question",
        fromName: "Question to copy answer from",
        gotoName: "Question to skip to",
        ruleIsNotSet: "Rule is incorrect",
        includeIntoResult: "Include into survey results",
        showTitle: "Show the title",
        expandCollapseTitle: "Expand/collapse title",
        locale: "Survey language",
        simulator: "Select device type",
        landscapeOrientation: "Switch to landscape orientation",
        portraitOrientation: "Switch to portrait orientation",
        mode: "Editable or read-only",
        clearInvisibleValues: "Clear invisible values",
        cookieName: "Cookie name",
        sendResultOnPageNext: "Save partial survey results in progress",
        storeOthersAsComment: "Store the Others value in a separate field",
        showPageTitles: "Show page titles",
        showPageNumbers: "Show page numbers",
        pagePrevText: "Previous Page button text",
        pageNextText: "Next Page button text",
        completeText: "Complete Survey button text",
        previewText: "Preview Answers button text",
        editText: "Edit Answer button text",
        startSurveyText: "Start Survey button text",
        showNavigationButtons: "Navigation buttons location",
        showPrevButton: "Show the Previous Page button",
        firstPageIsStarted: "First page is a start page",
        showCompletedPage: "Show the Survey Complete page",
        goNextPageAutomatic: "Proceed to the next page automatically",
        showProgressBar: "Progress bar location",
        questionTitleLocation: "Question title location",
        requiredText: "Required symbol(s)",
        questionStartIndex: "Start index (number or letter)",
        showQuestionNumbers: "Question numbering",
        questionTitleTemplate: "Question title template, default is: '{no}. {require} {title}'",
        questionErrorLocation: "Error message location",
        focusFirstQuestionAutomatic: "Focus first question on a new page",
        questionsOrder: "Element order on the page",
        maxTimeToFinish: "Time limit to finish the survey (in seconds)",
        maxTimeToFinishPage: "Time limit to finish one page (in seconds)",
        image: {
            imageHeight: "Image height (in CSS-accepted values)",
            imageWidth: "Image width (in CSS-accepted values)"
        },
        survey: {
            title: "Title"
        },
        page: {
            title: "Title",
            maxTimeToFinish: "Time limit to finish the page (in seconds)",
        },
        question: {
            page: "Parent page"
        },
        showTimerPanel: "Timer location",
        showTimerPanelMode: "Timer mode",
        renderMode: "Panel display mode",
        allowAddPanel: "Allow adding panels",
        allowRemovePanel: "Allow removing panels",
        noEntriesText: "Empty entries text",
        panelAddText: "Add Panel button text",
        panelRemoveText: "Remove Panel button text",
        isSinglePage: "Show all elements on one page",
        html: "HTML markup",
        expression: "Expression",
        setValue: "Answer",
        dataFormat: "Image format",
        allowAddRows: "Allow adding rows",
        allowRemoveRows: "Allow removing rows",
        allowRowsDragAndDrop: "Allow row drag and drop",
        responsiveImageSizeHelp: "Does not apply if you specify the exact image width or height.",
        minImageWidth: "Minimum image width",
        maxImageWidth: "Maximum image width",
        minImageHeight: "Minimum image height",
        maxImageHeight: "Maximum image height",
        minValue: "Minimum value",
        maxValue: "Maximum value",
        minLength: "Minimum length (in characters)",
        allowDigits: "Allow digits",
        minCount: "Minimum count",
        maxCount: "Maximum count",
        regex: "Regular expression",
        surveyvalidator: {
            text: "Error message",
            expression: "Validation expression"
        },
        totalText: "Total row text",
        totalType: "Total type",
        totalExpression: "Total expression",
        totalDisplayStyle: "Total value display style",
        totalCurrency: "Currency",
        totalFormat: "Formatted string",
        logo: "Logo (URL or base64-encoded string)",
        questionsOnPageMode: "Survey structure",
        maxTextLength: "Maximum answer length (in characters)",
        maxOthersLength: "Maximum comment length (in characters)",
        autoGrowComment: "Auto-expand comment area if necessary",
        allowResizeComment: "Allow users to resize text areas",
        textUpdateMode: "Update text question value",
        focusOnFirstError: "Set focus on the first invalid answer",
        checkErrorsMode: "Run validation",
        navigateToUrl: "Navigate to URL",
        navigateToUrlOnCondition: "Dynamic URL",
        completedBeforeHtml: "Markup to show if the user already filled out this survey",
        completedHtml: "Survey Complete page markup",
        completedHtmlOnCondition: "Dynamic Survey Complete page markup",
        loadingHtml: "Markup to show while survey model is loading",
        commentText: "Comment area text",
        autocomplete: "Autocomplete type",
        labelTrue: "\"True\" label",
        labelFalse: "\"False\" label",
        allowClear: "Show the Clear button",
        displayStyle: "Value display style",
        format: "Formatted string",
        maximumFractionDigits: "Maximum fractional digits",
        minimumFractionDigits: "Minimum fractional digits",
        useGrouping: "Display grouping separators",
        allowMultiple: "Allow multiple files",
        allowImagesPreview: "Preview images",
        acceptedTypes: "Accepted file types",
        waitForUpload: "Wait for the upload to complete",
        needConfirmRemoveFile: "Confirm file deletion",
        detailPanelMode: "Detail panel location",
        minRowCount: "Minimum row count",
        maxRowCount: "Maximum row count",
        confirmDelete: "Confirm row deletion",
        confirmDeleteText: "Confirmation message",
        paneldynamic: {
            confirmDelete: "Confirm panel deletion"
        },
        panelCount: "Initial panel count",
        minPanelCount: "Minimum panel count",
        maxPanelCount: "Maximum panel count",
        panelsState: "Inner panel expand state",
        templateDescription: "Description template",
        templateTitle: "Title template",
        panelPrevText: "Previous Panel button tooltip",
        panelNextText: "Next Panel button tooltip",
        showRangeInProgress: "Show progress bar",
        templateTitleLocation: "Question title location",
        panelRemoveButtonLocation: "Remove Panel button location",
        hideIfRowsEmpty: "Hide the question if there are no rows",
        hideColumnsIfEmpty: "Hide columns if there are no rows",
        rateValues: "Custom rate values",
        rateCount: "Rate count",
        autoGenerate: "How to specify rate values?",
        hideIfChoicesEmpty: "Hide the question if it contains no choices",
        hideNumber: "Hide question number",
        minWidth: "Minimum width (in CSS-accepted values)",
        maxWidth: "Maximum width (in CSS-accepted values)",
        width: "Width (in CSS-accepted values)",
        showHeader: "Show column headers",
        horizontalScroll: "Show horizontal scrollbar",
        columnMinWidth: "Minimum column width (in CSS-accepted values)",
        rowTitleWidth: "Row header width (in CSS-accepted values)",
        valueTrue: "\"True\" value",
        valueFalse: "\"False\" value",
        minErrorText: "\"Value is below minimum\" error message",
        maxErrorText: "\"Value exceeds maximum\" error message",
        otherErrorText: "\"Empty comment\" error message",
        keyDuplicationError: "\"Non-unique key value\" error message",
        minSelectedChoices: "Minimum selected choices",
        maxSelectedChoices: "Maximum selected choices",
        showClearButton: "Show the Clear button",
        showNumber: "Show panel number",
        logoWidth: "Logo width (in CSS-accepted values)",
        logoHeight: "Logo height (in CSS-accepted values)",
        readOnly: "Read-only",
        enableIf: "Editable if",
        emptyRowsText: "\"No rows\" message",
        size: "Input field size (in characters)",
        separateSpecialChoices: "Separate special choices (None, Other, Select All)",
        choicesFromQuestion: "Copy choices from the following question",
        choicesFromQuestionMode: "Which choices to copy?",
        showCommentArea: "Show the comment area",
        commentPlaceholder: "Comment area placeholder",
        displayRateDescriptionsAsExtremeItems: "Display rate descriptions as extreme values",
        rowsOrder: "Row order",
        columnsLayout: "Column layout",
        columnColCount: "Nested column count",
        state: "Panel expand state",
        correctAnswer: "Correct Answer",
        defaultPanelValue: "Default Values",
        cells: "Cell Texts",
        keyName: "Key column",
        itemvalue: {
            text: "Alt text"
        },
        logoPosition: "Logo position",
        addLogo: "Add logo...",
        changeLogo: "Change logo...",
        logoPositions: {
            none: "Remove logo",
            left: "Left",
            right: "Right",
            top: "On the top",
            bottom: "In the bottom"
        },
        tabs: {
            general: "General",
            fileOptions: "Options",
            html: "HTML Editor",
            columns: "Columns",
            rows: "Rows",
            choices: "Choices",
            items: "Items",
            visibleIf: "Visible If",
            enableIf: "Editable If",
            requiredIf: "Required If",
            rateValues: "Rate Values",
            choicesByUrl: "Choices from a RESTful Service",
            matrixChoices: "Default Choices",
            multipleTextItems: "Text Inputs",
            numbering: "Numbering",
            validators: "Validators",
            navigation: "Navigation",
            question: "Question",
            pages: "Pages",
            timer: "Timer/Quiz",
            calculatedValues: "Calculated Values",
            triggers: "Triggers",
            templateTitle: "Title template",
            totals: "Totals",
            logic: "Logic",
            layout: "Layout",
            data: "Data",
            validation: "Validation",
            cells: "Cell Texts",
            showOnCompleted: "Survey Complete",
            logo: "Logo in Survey Title",
            slider: "Slider",
            expression: "Expression",
            others: "Others"
        },
        editProperty: "Edit property '{0}'",
        items: "Items",
        choicesVisibleIf: "Choices are visible if",
        choicesEnableIf: "Choices are selectable if",
        columnsEnableIf: "Columns are visible if",
        rowsEnableIf: "Rows are visible if",
        indent: "Add indents",
        panel: {
            indent: "Add outer indents"
        },
        innerIndent: "Add inner indents",
        defaultValueFromLastRow: "Take default values from the last row",
        defaultValueFromLastPanel: "Take default values from the last panel",
        enterNewValue: "Please, enter the value.",
        noquestions: "There are no questions in the survey.",
        createtrigger: "Please create a trigger",
        titleKeyboardAdornerTip: "Press enter button to edit",
        keyboardAdornerTip: "Press enter button to edit item, press delete button to delete item, press alt plus arrow up or arrow down to move item",
        triggerOn: "On ",
        triggerMakePagesVisible: "Make pages visible",
        triggerMakeQuestionsVisible: "Make elements visible",
        triggerCompleteText: "Complete the survey if succeed.",
        triggerNotSet: "The trigger is not set",
        triggerRunIf: "Run if",
        triggerSetToName: "Change value of: ",
        triggerFromName: "Copy value from: ",
        triggerRunExpression: "Run this Expression",
        triggerSetValue: "to: ",
        triggerGotoName: "Go to the question",
        triggerIsVariable: "Do not put the variable into the survey result.",
        triggerRunExpressionEmpty: "Please enter a valid expression",
        emptyExpressionPlaceHolder: "Type expression here...",
        noFile: "No file choosen",
        clearIfInvisible: "Clear the value if the question becomes hidden",
        valuePropertyName: "Value property name",
        searchEnabled: "Enable search",
        hideSelectedItems: "Hide selected items",
        closeOnSelect: "Close the dropdown after selection",
        signatureWidth: "Signature width",
        signatureHeight: "Signature height",
        verticalAlign: "Vertical alignment",
        alternateRows: "Alternate rows",
        columnsVisibleIf: "Columns are visible if",
        rowsVisibleIf: "Rows are visible if",
        otherPlaceholder: "Comment area placeholder",
        rateType: "Rate type" // Auto-generated string
    },
    // Property values
    pv: {
        "true": "true",
        "false": "false",
        "file": "Local files",
        "camera": "Camera",
        "file-camera": "Local files or camera",
        inherit: "Inherit",
        show: "Visible",
        hide: "Hidden",
        default: "Inherit",
        initial: "Initial",
        random: "Random",
        collapsed: "Collapsed",
        expanded: "Expanded",
        none: "None",
        asc: "Ascending",
        desc: "Descending",
        indeterminate: "Indeterminate",
        decimal: "decimal",
        currency: "currency",
        percent: "percent",
        firstExpanded: "First panel is expanded",
        off: "Hide question numbers",
        onpanel: "Start on each panel",
        onPanel: "Start on each panel",
        onSurvey: "Continue throughout the survey",
        list: "List",
        progressTop: "Panel navigator + Progress bar at the top",
        progressBottom: "Panel navigator + Progress bar at the bottom",
        progressTopBottom: "Panel navigator + Progress bar at the top and bottom",
        tab: "Tabs",
        horizontal: "Horizontal",
        vertical: "Vertical",
        top: "Top",
        bottom: "Bottom",
        topBottom: "Top and bottom",
        both: "Both",
        left: "Left",
        right: "Right",
        color: "color",
        date: "date",
        datetime: "datetime",
        "datetime-local": "datetime-local",
        email: "email",
        month: "month",
        number: "number",
        password: "password",
        range: "range",
        tel: "tel",
        text: "text",
        time: "time",
        url: "url",
        week: "week",
        hidden: "Hidden",
        on: "Continue from the previous page",
        onPage: "Start on each page",
        edit: "Editable",
        display: "Read-only",
        onComplete: "When the survey is completed",
        onHidden: "When the question becomes hidden",
        onHiddenContainer: "When the question or its panel/page becomes hidden",
        clearInvisibleValues: {
            none: "Never"
        },
        inputType: {
            color: "Color",
            date: "Date",
            "datetime-local": "Date and Time",
            email: "Email",
            month: "Month",
            number: "Number",
            password: "Password",
            range: "Range",
            tel: "Phone Number",
            text: "Text",
            time: "Time",
            url: "URL",
            week: "Week"
        },
        all: "All",
        page: "Page",
        survey: "Survey",
        onNextPage: "When switching to the next page",
        onValueChanged: "After an answer is changed",
        onValueChanging: "Before an answer is changed",
        standard: "Original structure",
        singlePage: "All questions on a single page",
        questionPerPage: "Each question on an individual page",
        noPreview: "No preview",
        showAllQuestions: "Show all questions",
        showAnsweredQuestions: "Show answered questions only",
        pages: "Completed pages",
        questions: "Answered questions",
        requiredQuestions: "Answered required questions",
        correctQuestions: "Valid answers",
        buttons: "Completed pages (button UI)",
        underInput: "Under the input",
        underTitle: "Under the title",
        onBlur: "On blur",
        onTyping: "While typing",
        underRow: "Under the row",
        underRowSingle: "Under the row, only one panel is visible",
        showNavigationButtons: {
            none: "Hidden"
        },
        showProgressBar: {
            off: "Hidden"
        },
        showTimerPanel: {
            none: "Hidden"
        },
        showTimerPanelMode: {
            all: "Both"
        },
        detailPanelMode: {
            none: "Hidden"
        },
        addRowLocation: {
            default: "Depends on matrix layout"
        },
        panelsState: {
            default: "Users cannot expand or collapse panels",
            collapsed: "All panels are collapsed",
            expanded: "All panels are expanded"
        },
        widthMode: {
            auto: "Auto",
            static: "Static",
            responsive: "Responsive"
        },
        imageFit: {
            none: "None",
            contain: "Contain",
            cover: "Cover",
            fill: "Fill"
        },
        contentMode: {
            auto: "Auto",
            image: "Image",
            video: "Video",
            youtube: "YouTube"
        },
        displayMode: {
            auto: "Auto",
            buttons: "Buttons",
            dropdown: "Dropdown"
        },
        rateColorMode: {
            default: "Default"
        },
        autoGenerate: {
            "true": "Generate",
            "false": "Enter manually"
        },
        rateType: {
            labels: "Labels",
            stars: "Stars",
            smileys: "Smileys"
        }
    },
    // Operators
    op: {
        empty: "Empty",
        notempty: "Not empty",
        equal: "Equals",
        notequal: "Does not equal",
        contains: "Contains",
        notcontains: "Does not contain",
        anyof: "Any of",
        allof: "All of",
        greater: "Greater than",
        less: "Less than",
        greaterorequal: "Greater than or equal to",
        lessorequal: "Less than or equal to",
        and: "and",
        or: "or"
    },
    // Embed window
    ew: {
        angular: "Use Angular version",
        jquery: "Use jQuery version",
        knockout: "Use Knockout version",
        react: "Use React version",
        vue: "Use Vue version",
        bootstrap: "For bootstrap framework",
        modern: "Modern theme",
        default: "Default theme",
        orange: "Orange theme",
        darkblue: "Darkblue theme",
        darkrose: "Darkrose theme",
        stone: "Stone theme",
        winter: "Winter theme",
        winterstone: "Winter-Stone theme",
        showOnPage: "Show survey on a page",
        showInWindow: "Show survey in a window",
        loadFromServer: "Load Survey JSON from server",
        titleScript: "Scripts and styles",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    // Preview (Survey)
    ts: {
        selectPage: "Select the page to test it",
        showInvisibleElements: "Show invisible elements",
        hideInvisibleElements: "Hide invisible elements"
    },
    validators: {
        answercountvalidator: "Answer count",
        emailvalidator: "Email",
        expressionvalidator: "Expression",
        numericvalidator: "Number",
        regexvalidator: "Regex",
        textvalidator: "Text"
    },
    triggers: {
        completetrigger: "Complete survey",
        setvaluetrigger: "Set answer",
        copyvaluetrigger: "Copy answer",
        skiptrigger: "Skip to question",
        runexpressiontrigger: "Run expression",
        visibletrigger: "change visibility (deprecated)"
    },
    pehelp: {
        cookieName: "Cookies prevent users from filling out the same survey twice.",
        size: "Resizes the visible area of the input field. Please use the <b>Validation â†’ Maximum length</b> setting to limit the input length.",
        format: "Use {0} as a placeholder for the actual value.",
        totalText: "Visible only when at least one column has Total type or Total expression.",
        acceptedTypes: "Refer to the [accept](https://www.w3schools.com/tags/att_input_accept.asp) attribute description for more information.",
        columnColCount: "Applicable only to Radiogroup and Checkbox cell types.",
        autocomplete: "Refer to the [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attribute description for more information.",
        valueName: "If you do not set this property, the answer will be stored in a field specified by the Name property.",
        choicesbyurl: {
            valueName: " "
        },
        keyName: "If the specified column contains identical values, the survey throws the \"Non-unique key value\" error."
    },
    // Properties
    p: {
        title: {
            name: "title",
            title: "Leave it empty, if it is the same as 'Name'"
        },
        multiSelect: "Allow multiple selection",
        showLabel: "Show image captions",
        value: "Value",
        tabAlign: "Tab alignment",
        description: "Description",
        logoFit: "Logo fit",
        pages: "Pages",
        questions: "Questions",
        triggers: "Triggers",
        calculatedValues: "Calculated values",
        surveyId: "Survey id",
        surveyPostId: "Survey post id",
        surveyShowDataSaving: "Survey show data saving",
        questionDescriptionLocation: "Question description location",
        progressBarType: "Progress bar type",
        showTOC: "Show TOC",
        tocLocation: "Toc location",
        questionTitlePattern: "Question title pattern",
        widthMode: "Width mode",
        showBrandInfo: "Show brand info",
        useDisplayValuesInDynamicTexts: "Use display values in dynamic texts",
        visibleIf: "Visible if",
        titleLocation: "Title location",
        descriptionLocation: "Description location",
        defaultValueExpression: "Default value expression",
        requiredIf: "Required if",
        resetValueIf: "Reset value if",
        setValueIf: "Set value if",
        validators: "Validators",
        bindings: "Bindings",
        renderAs: "Render as",
        attachOriginalItems: "Attach original items",
        choices: "Choices",
        choicesByUrl: "Choices by url",
        currency: "Currency",
        cellHint: "Cell hint",
        isUnique: "Is unique",
        showInMultipleColumns: "Show in multiple columns",
        totalMaximumFractionDigits: "Total maximum fraction digits",
        totalMinimumFractionDigits: "Total minimum fraction digits",
        columns: "Columns",
        detailElements: "Detail elements",
        allowAdaptiveActions: "Allow adaptive actions",
        defaultRowValue: "Default row value",
        detailPanelShowOnAdding: "Detail panel show on adding",
        choicesLazyLoadEnabled: "Choices lazy load enabled",
        choicesLazyLoadPageSize: "Choices lazy load page size",
        inputFieldComponent: "Input field component",
        itemComponent: "Item component",
        min: "Min",
        max: "Max",
        minValueExpression: "Min value expression",
        maxValueExpression: "Max value expression",
        step: "Step",
        dataList: "Data list",
        itemSize: "Item size",
        elements: "Elements",
        content: "Content",
        navigationButtonsVisibility: "Navigation buttons visibility",
        navigationTitle: "Navigation title",
        navigationDescription: "Navigation description",
        longTap: "Long tap",
        autoGrow: "Auto grow",
        allowResize: "Allow resizing",
        acceptCarriageReturn: "Accept carriage return",
        displayMode: "Display mode",
        rateType: "Rate type",
        label: "Label",
        contentMode: "Content mode",
        imageFit: "Image fit",
        altText: "Alt text",
        height: "Height",
        penColor: "Pen color",
        backgroundColor: "Background color",
        templateElements: "Template elements",
        operator: "Operator",
        isVariable: "Is variable",
        runExpression: "Run expression",
        showCaption: "Show caption",
        iconName: "Icon name",
        iconSize: "Icon size",
        precision: "Precision",
        matrixDragHandleArea: "Matrix drag handle area",
        backgroundImage: "Background image",
        backgroundImageFit: "Background image fit",
        backgroundImageAttachment: "Background image attachment",
        backgroundOpacity: "Background opacity",
        selectToRankEnabled: "Select to rank enabled",
        selectToRankAreasLayout: "Select to rank areas layout",
        allowCameraAccess: "Allow camera access",
        scaleColorMode: "Scale color mode",
        rateColorMode: "Rate color mode",
        templateTabTitle: "Template tab title",
        templateVisibleIf: "Template visible if",
        copyDisplayValue: "Copy display value" // Auto-generated string
    },
    theme: {
        "--background": "Background color",
        "--background-dim-light": "Background dim light color",
        "--primary-foreground": "Primary foreground color",
        "--foreground": "Foreground color",
        "--base-unit": "Base unit",
        groupGeneral: "General",
        groupAdvanced: "Advanced",
        groupHeader: "Header",
        groupBackground: "Background",
        groupAppearance: "Appearance",
        themeName: "Theme",
        themeMode: "Question appearance",
        themeModePanels: "Default",
        themeModeLightweight: "Without Panels",
        themePaletteLight: "Light",
        themePaletteDark: "Dark",
        primaryColor: "Accent color",
        primaryDefaultColor: "Default",
        primaryDarkColor: "Hover",
        primaryLightColor: "Selected",
        coverTitleForecolor: "Title forecolor",
        coverDescriptionForecolor: "Description forecolor",
        coverOverlapEnabled: "Overlap",
        backgroundDimColor: "Background color",
        backgroundImage: "Background image",
        backgroundImageFitAuto: "Auto",
        backgroundImageFitCover: "Cover",
        backgroundImageFitContain: "Contain",
        backgroundImageFitFill: "Stretch",
        backgroundImageFitTile: "Tile",
        backgroundOpacity: "Opacity",
        backgroundImageAttachmentFixed: "Fixed",
        backgroundImageAttachmentScroll: "Scroll",
        panelBackgroundTransparency: "Panel background opacity",
        questionBackgroundTransparency: "Question background opacity",
        questionPanel: "Panel background and corner radius",
        questionTitle: "Question title font",
        questionDescription: "Question description font",
        editorPanel: "Input element",
        editorFont: "Input element font",
        backcolor: "Default background",
        hovercolor: "Hover background",
        borderDecoration: "Border decoration",
        accentBackground: "Accent background",
        accentForeground: "Accent foreground",
        primaryForecolor: "Default color",
        primaryForecolorLight: "Disabled color",
        linesColors: "Minor line colors",
        borderDefault: "Darker",
        borderLight: "Lighter",
        fontFamily: "Font family",
        fontSize: "Font size",
        color: "Color",
        placeholderColor: "Placeholder color",
        size: "Size",
        fontWeightRegular: "Regular",
        fontWeightHeavy: "Heavy",
        fontWeightSemiBold: "Semi-bold",
        fontWeightBold: "Bold",
        scale: "Scale",
        cornerRadius: "Corner radius",
        surveyTitle: "Survey title font",
        pageTitle: "Page title font",
        pageDescription: "Page description font",
        boxShadowX: "X",
        boxShadowY: "Y",
        boxShadowAddRule: "Add Shadow Effect",
        opacity: "Opacity",
        boxShadowBlur: "Blur",
        boxShadowSpread: "Spread",
        boxShadowDrop: "Drop",
        boxShadowInner: "Inner",
        questionShadow: "Shadow effects",
        editorShadow: "Input element shadow effects",
        headerView: "View",
        headerViewBasic: "Basic",
        headerViewAdvanced: "Advanced",
        coverInheritWidthFrom: "Content area width",
        coverInheritWidthFromSurvey: "Same as survey",
        coverInheritWidthFromContainer: "Fit to container",
        coverTextAreaWidth: "Text width",
        coverBackgroundColorSwitch: "Background color",
        coverBackgroundColorNone: "None",
        coverBackgroundColorAccentColor: "Accent color",
        coverBackgroundColorCustom: "Custom",
        horizontalAlignmentLeft: "Left",
        horizontalAlignmentCenter: "Center",
        horizontalAlignmentRight: "Right",
        verticalAlignmentTop: "Top",
        verticalAlignmentMiddle: "Middle",
        verticalAlignmentBottom: "Bottom",
        logoPosition: "Logo Position",
        coverTitlePosition: "Title Position",
        coverDescriptionPosition: "Description Position",
        names: {
            "default": "Default",
            "sharp": "Sharp",
            "borderless": "Borderless",
            "flat": "Flat",
            "plain": "Plain",
            "doubleborder": "Double Border",
            "layered": "Layered",
            "solid": "Solid",
            "threedimensional": "3D",
            "contrast": "Contrast"
        },
        colors: {
            teal: "Teal",
            blue: "Blue",
            purple: "Purple",
            orchid: "Orchid",
            tulip: "Tulip",
            brown: "Brown",
            green: "Green"
        }
    }
};
// Uncomment the line below if you create a custom dictionary.
// Replace "en" with a custom locale code (for example, "fr" or "de"),
// Replace `enStrings` with the name of the variable that contains the custom dictionary.
// editorLocalization.locales["en"] = enStrings;


/***/ }),

/***/ "./src/pages-controller.ts":
/*!*********************************!*\
  !*** ./src/pages-controller.ts ***!
  \*********************************/
/*! exports provided: PagesController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagesController", function() { return PagesController; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var PagesController = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PagesController, _super);
    function PagesController(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.onPagesChanged = _this.addEvent();
        _this.onCurrentPageChanged = _this.addEvent();
        _this.currentPageChangedFunc = function (sender, options) {
            _this.page2Display = _this.survey.currentPage;
            _this.onCurrentPageChanged.fire(_this, {});
        };
        _this.onSurveyChanged();
        return _this;
    }
    Object.defineProperty(PagesController.prototype, "survey", {
        get: function () {
            return this.creator.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PagesController.prototype, "pages", {
        get: function () {
            return this.survey.pages;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PagesController.prototype, "currentPage", {
        get: function () {
            return this.survey.currentPage;
        },
        set: function (value) {
            this.survey.currentPage = value;
            this.page2Display = value;
        },
        enumerable: false,
        configurable: true
    });
    PagesController.prototype.selectPage = function (value) {
        this.currentPage = value;
        this.creator.selectElement(value);
    };
    PagesController.prototype.getDisplayName = function (page) {
        if (!page)
            return "";
        return this.creator.getObjectDisplayName(page, "page-selector");
    };
    PagesController.prototype.raisePagesChanged = function () {
        this.page2Display = this.survey.currentPage;
        this.onPagesChanged.fire(this, {});
    };
    PagesController.prototype.onSurveyChanged = function () {
        this.removeFunctions();
        this.surveyValue = this.creator.survey;
        if (!this.surveyValue)
            return;
        this.raisePagesChanged();
        this.page2Display = this.survey.currentPage;
        this.surveyValue.onCurrentPageChanged.add(this.currentPageChangedFunc);
    };
    PagesController.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.removeFunctions();
    };
    PagesController.prototype.removeFunctions = function () {
        if (!!this.surveyValue && !this.surveyValue.isDisposed) {
            this.surveyValue.onCurrentPageChanged.remove(this.currentPageChangedFunc);
        }
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PagesController.prototype, "page2Display", void 0);
    return PagesController;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/plugins/undo-redo/index.ts":
/*!****************************************!*\
  !*** ./src/plugins/undo-redo/index.ts ***!
  \****************************************/
/*! exports provided: UndoRedoPlugin, undoRedoTransaction, ignoreUndoRedo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoPlugin", function() { return UndoRedoPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undoRedoTransaction", function() { return undoRedoTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ignoreUndoRedo", function() { return ignoreUndoRedo; });
/* harmony import */ var _undo_redo_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./undo-redo-controller */ "./src/plugins/undo-redo/undo-redo-controller.ts");

var UndoRedoPlugin = /** @class */ (function () {
    function UndoRedoPlugin(creator) {
        var _this = this;
        this.creator = creator;
        this.model = undefined;
        this.model = new _undo_redo_controller__WEBPACK_IMPORTED_MODULE_0__["UndoRedoController"](creator);
        this.model.createActions().forEach(function (action) { return creator.toolbar.actions.push(action); });
        creator.registerShortcut("undo", {
            affectedTab: "designer",
            hotKey: {
                ctrlKey: true,
                keyCode: 90,
            },
            macOsHotkey: {
                keyCode: 90,
            },
            execute: function () { return _this.model.undo(); }
        });
        creator.registerShortcut("redo", {
            affectedTab: "designer",
            hotKey: {
                ctrlKey: true,
                keyCode: 89,
            },
            macOsHotkey: {
                keyCode: 89,
            },
            execute: function () { return _this.model.redo(); }
        });
    }
    UndoRedoPlugin.prototype.activate = function () {
    };
    UndoRedoPlugin.prototype.deactivate = function () {
        return true;
    };
    UndoRedoPlugin.prototype.update = function () {
    };
    UndoRedoPlugin.prototype.addFooterActions = function () {
        this.model.undoAction && (this.creator.footerToolbar.actions.splice(2, 0, this.model.undoAction));
        this.model.redoAction && (this.creator.footerToolbar.actions.splice(3, 0, this.model.redoAction));
    };
    return UndoRedoPlugin;
}());

function undoRedoTransaction(transactionName, undoRedoManagerProperty) {
    if (undoRedoManagerProperty === void 0) { undoRedoManagerProperty = "undoRedoManager"; }
    return function (target, propertyKey, descriptor) {
        var wrappedFunction = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var undoRedoManager = this[undoRedoManagerProperty];
            try {
                undoRedoManager && undoRedoManager.startTransaction(transactionName || propertyKey);
                var result = wrappedFunction.apply(this, args);
                return result;
            }
            finally {
                undoRedoManager && undoRedoManager.stopTransaction();
            }
        };
        return descriptor;
    };
}
function ignoreUndoRedo(undoRedoManagerProperty) {
    if (undoRedoManagerProperty === void 0) { undoRedoManagerProperty = "undoRedoManager"; }
    return function (target, propertyKey, descriptor) {
        var wrappedFunction = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var undoRedoManager = this[undoRedoManagerProperty];
            try {
                undoRedoManager && undoRedoManager.suspend();
                var result = wrappedFunction.apply(this, args);
                return result;
            }
            finally {
                undoRedoManager && undoRedoManager.resume();
            }
        };
        return descriptor;
    };
}


/***/ }),

/***/ "./src/plugins/undo-redo/undo-redo-controller.ts":
/*!*******************************************************!*\
  !*** ./src/plugins/undo-redo/undo-redo-controller.ts ***!
  \*******************************************************/
/*! exports provided: UndoRedoController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoController", function() { return UndoRedoController; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../creator-base */ "./src/creator-base.ts");
/* harmony import */ var _undo_redo_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./undo-redo-manager */ "./src/plugins/undo-redo/undo-redo-manager.ts");




var UndoRedoController = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(UndoRedoController, _super);
    function UndoRedoController(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.undoRedoManager = undefined;
        /**
         * The event is called before undo happens.
         * options.canUndo a boolean value. It is true by default. Set it false to hide prevent undo operation.
         */
        _this.onBeforeUndo = new _creator_base__WEBPACK_IMPORTED_MODULE_2__["CreatorEvent"]();
        /**
          * The event is called before redo happens.
          * options.canRedo a boolean value. It is true by default. Set it false to hide prevent redo operation.
          */
        _this.onBeforeRedo = new _creator_base__WEBPACK_IMPORTED_MODULE_2__["CreatorEvent"]();
        _this.updateSurvey();
        return _this;
    }
    UndoRedoController.prototype.onSurveyPropertyValueChangedCallback = function (name, oldValue, newValue, sender, arrayChanges) {
        if (!this.undoRedoManager || !this.undoRedoManager.isCorrectProperty(sender, name)) {
            return;
        }
        var canUndoRedoMerge = this.undoRedoManager.tryMergeTransaction(sender, name, newValue);
        if (!canUndoRedoMerge) {
            this.undoRedoManager.startTransaction(name + " changed");
            this.undoRedoManager.onPropertyValueChanged(name, oldValue, newValue, sender, arrayChanges);
            this.creator.updateElementsOnLocaleChanged(sender, name);
            this.creator.updateConditionsOnNameChanged(sender, name, oldValue);
            this.undoRedoManager.stopTransaction();
        }
        else {
            this.creator.notifySurveyPropertyChanged({
                name: name,
                target: sender,
                oldValue: oldValue,
                newValue: newValue
            });
        }
    };
    UndoRedoController.prototype.updateSurvey = function () {
        var _this = this;
        var surveyModel = this.creator.survey;
        if (!!surveyModel) {
            surveyModel.onPropertyValueChangedCallback = function (name, oldValue, newValue, sender, arrayChanges) {
                _this.onSurveyPropertyValueChangedCallback(name, oldValue, newValue, sender, arrayChanges);
            };
        }
        this.undoRedoManager = new _undo_redo_manager__WEBPACK_IMPORTED_MODULE_3__["UndoRedoManager"]();
        this.undoRedoManager.changesFinishedCallback = function (actions, isUndo) {
            if (_this.notifySurveyMoveItem(actions, isUndo))
                return;
            for (var i = actions.length - 1; i >= 0; i--) {
                var action = actions[i];
                if (!!action) {
                    var changes = action.getChanges(isUndo);
                    _this.creator.notifySurveyPropertyChanged({
                        name: changes.propertyName,
                        target: changes.object,
                        oldValue: changes.oldValue,
                        newValue: changes.newValue
                    });
                }
            }
        };
        this.undoRedoManager.canUndoRedoCallback = function () {
            _this.updateUndeRedoActions();
        };
    };
    UndoRedoController.prototype.notifySurveyMoveItem = function (actions, isUndo) {
        if (actions.length !== 2)
            false;
        var act1 = actions[0];
        var act2 = actions[1];
        if (!act1 || !act2)
            return false;
        var changes1 = act1.getChanges(isUndo);
        var changes2 = act2.getChanges(isUndo);
        if (changes1.object !== changes2.object || changes1.propertyName !== changes2.propertyName)
            return false;
        var act1Del = act1.getDeletedElement(isUndo);
        var act1Ins = act1.getInsertedElement(isUndo);
        var act2Del = act2.getDeletedElement(isUndo);
        var act2Ins = act2.getInsertedElement(isUndo);
        if (act1Del === act1Ins || (act1Del !== act2Ins && act1Ins !== act2Del))
            return false;
        var indexFrom = act1Del ? act1.getIndex() : act2.getIndex();
        var indexTo = act1Ins ? act1.getIndex() : act2.getIndex();
        this.creator.notifySurveyItemMoved({
            arrayName: changes1.propertyName,
            parent: changes1.object,
            element: act1Del ? act1Del : act1Ins,
            indexFrom: !isUndo ? indexFrom : indexTo,
            indexTo: !isUndo ? indexTo : indexFrom
        });
        return true;
    };
    UndoRedoController.prototype.selectElementAfterUndo = function () {
        this.selectElementAfterUndoCore(this.creator.selectedElement);
    };
    UndoRedoController.prototype.selectElementAfterUndoCore = function (obj) {
        if (!!obj &&
            !obj.isDisposed &&
            !!obj.getSurvey() &&
            (!this.creator.isObjQuestion(obj) || !!obj["parent"])) {
            this.creator.selectElement(obj);
            return;
        }
        this.creator.selectElement(this.creator.survey);
    };
    UndoRedoController.prototype.undo = function () {
        if (!this.undoRedoManager)
            return;
        this.undoRedoManager.suspend();
        var options = { canUndo: this.undoRedoManager.canUndo() };
        this.onBeforeUndo.fire(this.creator, options);
        this.creator.onBeforeUndo.fire(this.creator, options);
        if (options.canUndo) {
            this.undoRedoManager.undo();
            this.selectElementAfterUndo();
        }
        this.undoRedoManager.resume();
    };
    UndoRedoController.prototype.redo = function () {
        if (!this.undoRedoManager)
            return;
        var options = { canRedo: this.undoRedoManager.canRedo() };
        this.onBeforeRedo.fire(this.creator, options);
        this.creator.onBeforeRedo.fire(this.creator, options);
        if (options.canRedo) {
            var item = this.undoRedoManager.redo();
            this.selectElementAfterUndo();
        }
    };
    UndoRedoController.prototype.startTransaction = function (name) {
        if (name === void 0) { name = ""; }
        this.undoRedoManager && this.undoRedoManager.startTransaction(name);
    };
    UndoRedoController.prototype.stopTransaction = function () {
        this.undoRedoManager && this.undoRedoManager.stopTransaction();
    };
    UndoRedoController.prototype.createActions = function () {
        var _this = this;
        var items = [];
        this.undoAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "action-undo",
            iconName: "icon-undo",
            locTitleName: "ed.undo",
            showTitle: false,
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "designer"; }),
            needSeparator: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                return _this.creator.isMobileView;
            }),
            action: function () { return _this.undo(); }
        });
        this.redoAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "action-redo",
            iconName: "icon-redo",
            locTitleName: "ed.redo",
            showTitle: false,
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return _this.creator.activeTab === "designer"; }),
            action: function () { return _this.redo(); }
        });
        items.push(this.undoAction);
        items.push(this.redoAction);
        this.updateUndeRedoActions();
        return items;
    };
    UndoRedoController.prototype.updateUndeRedoActions = function () {
        this.undoAction.enabled = this.undoRedoManager.canUndo();
        this.redoAction.enabled = this.undoRedoManager.canRedo();
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], UndoRedoController.prototype, "undoRedoManager", void 0);
    return UndoRedoController;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/plugins/undo-redo/undo-redo-manager.ts":
/*!****************************************************!*\
  !*** ./src/plugins/undo-redo/undo-redo-manager.ts ***!
  \****************************************************/
/*! exports provided: UndoRedoManager, Transaction, UndoRedoAction, UndoRedoArrayAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoManager", function() { return UndoRedoManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return Transaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoAction", function() { return UndoRedoAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoArrayAction", function() { return UndoRedoArrayAction; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editable_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../editable-object */ "./src/editable-object.ts");


var UndoRedoManager = /** @class */ (function () {
    function UndoRedoManager() {
        this._ignoreChanges = false;
        this._isExecuting = false;
        this._preparingTransaction = null;
        this._transactions = [];
        this._currentTransactionIndex = -1;
        this.transactionCounter = 0;
    }
    UndoRedoManager.prototype.onPropertyValueChanged = function (name, oldValue, newValue, sender, arrayChanges) {
        if (_editable_object__WEBPACK_IMPORTED_MODULE_1__["EditableObject"].isCopyObject(sender))
            return;
        if (this.isIgnoring)
            return;
        if (sender["ignoreUndoRedo"] === true)
            return;
        var transaction = this._preparingTransaction;
        var action = arrayChanges
            ? new UndoRedoArrayAction(name, sender, arrayChanges)
            : new UndoRedoAction(name, oldValue, newValue, sender);
        if (!transaction) {
            transaction = new Transaction(name);
            transaction.addAction(action);
            this._addTransaction(transaction);
            return;
        }
        transaction.addAction(action);
    };
    UndoRedoManager.prototype.isCorrectProperty = function (sender, propertyName) {
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getOriginalProperty(sender, propertyName);
        return !!prop && prop.isSerializable;
    };
    UndoRedoManager.prototype.tryMergeTransaction = function (sender, propertyName, newValue) {
        if (propertyName === "name")
            return false; //TODO check on
        var lastTransaction = this._getCurrentTransaction();
        if (!lastTransaction || lastTransaction.actions.length == 0)
            return false;
        var lastAction = lastTransaction.actions[lastTransaction.actions.length - 1];
        return lastAction.tryMerge(sender, propertyName, newValue);
    };
    UndoRedoManager.prototype.isCopyObject = function (sender) { };
    UndoRedoManager.prototype._cutOffTail = function () {
        if (this._currentTransactionIndex + 1 !== this._transactions.length) {
            this._transactions.length = this._currentTransactionIndex + 1;
        }
    };
    Object.defineProperty(UndoRedoManager.prototype, "isIgnoring", {
        get: function () {
            return this._ignoreChanges || this._isExecuting;
        },
        enumerable: false,
        configurable: true
    });
    UndoRedoManager.prototype._addTransaction = function (transaction) {
        if (transaction.isEmpty())
            return;
        this._cutOffTail();
        if (this._transactions[this._currentTransactionIndex] !== transaction) {
            this._transactions.push(transaction);
            this._currentTransactionIndex++;
        }
        this.canUndoRedoCallback();
    };
    UndoRedoManager.prototype._getCurrentTransaction = function () {
        var index = this._currentTransactionIndex;
        var currentTransaction = this._transactions[index];
        return currentTransaction;
    };
    UndoRedoManager.prototype._getNextTransaction = function () {
        var index = this._currentTransactionIndex;
        var nextTransaction = this._transactions[index + 1];
        return nextTransaction;
    };
    UndoRedoManager.prototype.notifyChangesFinished = function (transaction, isUndo) {
        if (isUndo === void 0) { isUndo = false; }
        if (transaction.actions.length > 0) {
            !!this.changesFinishedCallback &&
                this.changesFinishedCallback(transaction.actions, isUndo);
            // this.changesFinishedCallback(transaction.actions[0].getChanges(isUndo));
        }
    };
    UndoRedoManager.prototype.canUndoRedoCallback = function () { };
    UndoRedoManager.prototype.startTransaction = function (name) {
        if (this.isIgnoring)
            return;
        this.transactionCounter++;
        if (this._preparingTransaction)
            return;
        this._preparingTransaction = new Transaction(name);
    };
    UndoRedoManager.prototype.stopTransaction = function () {
        if (this.isIgnoring)
            return;
        if (this.transactionCounter > 0) {
            this.transactionCounter--;
        }
        if (!this._preparingTransaction || this.transactionCounter > 0)
            return;
        this._addTransaction(this._preparingTransaction);
        if (this.transactionCounter === 0) {
            this.notifyChangesFinished(this._preparingTransaction);
        }
        this._preparingTransaction = null;
    };
    UndoRedoManager.prototype.setUndoCallbackForTransaction = function (callback) {
        if (!this._preparingTransaction)
            return;
        this._preparingTransaction.undoCallback = callback;
    };
    Object.defineProperty(UndoRedoManager.prototype, "isProcessingUndoRedo", {
        get: function () {
            return this._isExecuting === true;
        },
        enumerable: false,
        configurable: true
    });
    UndoRedoManager.prototype.canUndo = function () {
        return !!this._getCurrentTransaction();
    };
    UndoRedoManager.prototype.undo = function () {
        var currentTransaction = this._getCurrentTransaction();
        if (!this.canUndo())
            return;
        this._isExecuting = true;
        currentTransaction.rollback();
        this._isExecuting = false;
        this._currentTransactionIndex--;
        this.canUndoRedoCallback();
        this.notifyChangesFinished(currentTransaction, true);
    };
    UndoRedoManager.prototype.canRedo = function () {
        return !!this._getNextTransaction();
    };
    UndoRedoManager.prototype.redo = function () {
        var nextTransaction = this._getNextTransaction();
        if (!this.canRedo())
            return;
        this._isExecuting = true;
        nextTransaction.apply();
        this._isExecuting = false;
        this._currentTransactionIndex++;
        this.canUndoRedoCallback();
        this.notifyChangesFinished(nextTransaction);
    };
    UndoRedoManager.prototype.suspend = function () {
        this._ignoreChanges = true;
    };
    UndoRedoManager.prototype.resume = function () {
        this._ignoreChanges = false;
    };
    return UndoRedoManager;
}());

var Transaction = /** @class */ (function () {
    function Transaction(_name) {
        this._name = _name;
        this._actions = [];
        this.undoCallback = function () { };
    }
    Transaction.prototype.apply = function () {
        var actions = this._actions;
        for (var index = 0; index < actions.length; index++) {
            var action = actions[index];
            action.apply();
        }
    };
    Transaction.prototype.rollback = function () {
        var actions = this._actions;
        for (var index = actions.length - 1; index >= 0; index--) {
            var action = actions[index];
            action.rollback();
        }
        this.undoCallback();
    };
    Transaction.prototype.addAction = function (action) {
        this._actions.push(action);
    };
    Transaction.prototype.isEmpty = function () {
        return this._actions.length === 0;
    };
    Object.defineProperty(Transaction.prototype, "actions", {
        get: function () {
            return this._actions;
        },
        enumerable: false,
        configurable: true
    });
    return Transaction;
}());

var UndoRedoAction = /** @class */ (function () {
    function UndoRedoAction(_propertyName, _oldValue, _newValue, _sender) {
        this._propertyName = _propertyName;
        this._oldValue = _oldValue;
        this._newValue = _newValue;
        this._sender = _sender;
        this.tickCount = new Date().getTime();
    }
    UndoRedoAction.prototype.apply = function () {
        this._sender[this._propertyName] = this._newValue;
    };
    UndoRedoAction.prototype.rollback = function () {
        this._sender[this._propertyName] = this._oldValue;
    };
    UndoRedoAction.prototype.getChanges = function (isUndo) {
        if (isUndo === void 0) { isUndo = false; }
        return {
            object: this._sender,
            propertyName: this._propertyName,
            oldValue: isUndo ? this._newValue : this._oldValue,
            newValue: isUndo ? this._oldValue : this._newValue
        };
    };
    UndoRedoAction.prototype.getDeletedElement = function (isUndo) { return undefined; };
    UndoRedoAction.prototype.getInsertedElement = function (isUndo) { return undefined; };
    UndoRedoAction.prototype.getIndex = function () { return -1; };
    UndoRedoAction.prototype.tryMerge = function (sender, propertyName, newValue) {
        if (sender !== this._sender || propertyName !== this._propertyName || newValue == this._oldValue)
            return false;
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getOriginalProperty(sender, propertyName);
        if (!prop || (prop.type !== "string" && prop.type !== "text"))
            return false;
        if (new Date().getTime() - this.tickCount > UndoRedoAction.maximumMergeTime)
            return false;
        this._newValue = newValue;
        return true;
    };
    UndoRedoAction.maximumMergeTime = 1000;
    return UndoRedoAction;
}());

var UndoRedoArrayAction = /** @class */ (function () {
    function UndoRedoArrayAction(_propertyName, _sender, arrayChanges) {
        this._propertyName = _propertyName;
        this._sender = _sender;
        this._index = 0;
        this._itemsToAdd = [];
        this._deletedItems = [];
        this.survey = _sender.getSurvey();
        this._index = arrayChanges.index;
        this._itemsToAdd = arrayChanges.itemsToAdd;
        this._deletedItems = arrayChanges.deletedItems;
    }
    UndoRedoArrayAction.prototype.apply = function () {
        this.rollback();
    };
    UndoRedoArrayAction.prototype.rollback = function () {
        this._sender = this.getSenderElement();
        if (!this._sender)
            return;
        var array = this._sender[this._propertyName];
        var index = this._index;
        var deleteCount = this._itemsToAdd.length;
        var itemsToAdd = this.getItemsToAdd();
        this._deletedItems = array.splice.apply(array, [index, deleteCount].concat(itemsToAdd));
        this._itemsToAdd = [].concat(itemsToAdd);
    };
    UndoRedoArrayAction.prototype.getChanges = function () {
        return {
            object: this._sender,
            propertyName: this._propertyName,
            oldValue: this._deletedItems,
            newValue: this._itemsToAdd
        };
    };
    UndoRedoArrayAction.prototype.getDeletedElement = function (isUndo) { return this.getMovedElement(this._deletedItems, this._itemsToAdd, isUndo); };
    UndoRedoArrayAction.prototype.getInsertedElement = function (isUndo) { return this.getMovedElement(this._itemsToAdd, this._deletedItems, isUndo); };
    UndoRedoArrayAction.prototype.getIndex = function () { return this._index; };
    UndoRedoArrayAction.prototype.getMovedElement = function (items1, items2, isUndo) {
        var items = isUndo ? items2 : items1;
        if (Array.isArray(items) && items.length === 1)
            return items[0];
        return undefined;
    };
    UndoRedoArrayAction.prototype.tryMerge = function (sender, propertyName, newValue) {
        return false;
    };
    UndoRedoArrayAction.prototype.getSenderElement = function () {
        if (!this._sender.isDisposed || !this.survey)
            return this._sender;
        var name = this._sender["name"];
        if (this._sender["isPage"] === true)
            return this.survey.getPageByName(name);
        if (this._sender["isPanel"] === true)
            return this.survey.getPanelByName(name);
        if (this._sender["isQuestion"] === true)
            return this.survey.getQuestionByName(name);
        return this._sender;
    };
    UndoRedoArrayAction.prototype.getItemsToAdd = function () {
        var res = [];
        for (var i = 0; i < this._deletedItems.length; i++) {
            var obj = this._deletedItems[i];
            if (obj.isDisposed && obj.getType) {
                var json = obj.toJSON();
                obj = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(obj.getType());
                obj.fromJSON(json);
            }
            res.push(obj);
        }
        return res;
    };
    return UndoRedoArrayAction;
}());



/***/ }),

/***/ "./src/property-grid-theme/property-grid.scss":
/*!****************************************************!*\
  !*** ./src/property-grid-theme/property-grid.scss ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/property-grid-theme/property-grid.ts":
/*!**************************************************!*\
  !*** ./src/property-grid-theme/property-grid.ts ***!
  \**************************************************/
/*! exports provided: propertyGridCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "propertyGridCss", function() { return propertyGridCss; });
var propertyGridCss = {
    root: "spg-root-modern",
    container: "spg-container-modern",
    header: "spg-title spg-container-modern__title",
    body: "spg-body",
    bodyEmpty: "spg-body spg-body--empty",
    footer: "spg-footer spg-body__footer spg-clearfix",
    title: "",
    description: "",
    logo: "spg-logo",
    logoImage: "spg-logo__image",
    headerText: "spg-header__text",
    navigationButton: "",
    completedPage: "spg-completedpage",
    navigation: {
        complete: "spg-btn spg-footer__complete-btn",
        prev: "spg-btn spg-footer__prev-btn",
        next: "spg-btn spg-footer__next-btn",
        start: "spg-btn spg-footer__start-btn",
        preview: "spg-btn spg-footer__preview-btn",
        edit: "spg-btn spg-footer__edit-btn"
    },
    panel: {
        title: "spg-title spg-panel__title",
        titleExpandable: "spg-panel__title--expandable",
        titleOnExpand: "spg-panel__title--expanded",
        titleOnError: "spg-panel__title--error",
        description: "spg-description spg-panel__description",
        container: "spg-panel spg-row__panel",
        content: "spg-panel__content",
        icon: "spg-panel__icon",
        iconExpanded: "spg-panel__icon--expanded",
        footer: "spg-panel__footer",
        requiredText: "spg-panel__required-text"
    },
    paneldynamic: {
        mainRoot: "spg-question spg-row__question",
        root: "spg-paneldynamic",
        navigation: "spg-paneldynamic__navigation",
        title: "spg-title spg-question__title",
        button: "spg-action-button spg-action-button--text",
        buttonRemove: "spg-action-button--danger",
        buttonAdd: "spg-paneldynamic__add-btn",
        progressTop: "spg-paneldynamic__progress spg-paneldynamic__progress--top",
        progressBottom: "spg-paneldynamic__progress spg-paneldynamic__progress--bottom",
        buttonPrev: "spg-paneldynamic__prev-btn",
        buttonNext: "spg-paneldynamic__next-btn",
        progressContainer: "spg-paneldynamic__progress-container",
        progress: "spg-progress",
        progressBar: "spg-progress__bar",
        progressText: "spg-paneldynamic__progress-text",
        panelFooter: "spg-panel__footer",
        separator: "spg-paneldynamic__separator"
    },
    progress: "spg-progress spg-body__progress",
    progressBar: "spg-progress__bar",
    progressText: "spg-progress__text",
    progressTextInBar: "spg-hidden",
    page: {
        root: "spg-page spg-body__page",
        title: "spg-title spg-page__title",
        description: "spg-description spg-page__description"
    },
    pageTitle: "spg-title spg-page__title",
    pageDescription: "spg-description spg-page__description",
    row: "spg-row spg-clearfix",
    rowMultiple: "spg-row--multiple",
    question: {
        mainRoot: "spg-question spg-row__question",
        flowRoot: "spg-question spg-row__question spg-row__question--flow",
        asCell: "spg-table__cell",
        header: "spg-question__header",
        headerLeft: "spg-question__header--location--left",
        headerTop: "spg-question__header--location--top",
        headerBottom: "spg-question__header--location--bottom",
        content: "spg-question__content",
        contentLeft: "spg-question__content--left",
        titleLeftRoot: "spg-question--location--left",
        titleOnAnswer: "spg-question__title--answer",
        titleOnError: "spg-question__title--error",
        title: "spg-title spg-question__title",
        requiredText: "spg-question__required-text",
        number: "spg-question__num",
        description: "spg-description spg-question__description",
        descriptionUnderInput: "spg-description spg-question__description",
        comment: "spg-comment",
        required: "spg-question--required",
        titleRequired: "spg-question__title--required",
        indent: 0,
        footer: "spg-question__footer",
        formGroup: "spg-question__form-group",
        hasError: "",
        disabled: "spg-question--disabled"
    },
    image: { root: "spg-image", image: "sv_image_image" },
    error: {
        root: "spg-question__erbox",
        icon: "spg-question__erbox-icon",
        item: "",
        locationTop: "spg-question__erbox--location--top",
        locationBottom: "spg-question__erbox--location--bottom"
    },
    checkbox: {
        root: "spg-selectbase",
        item: "spg-item spg-checkbox spg-selectbase__item",
        itemSelectAll: "spg-checkbox--selectall",
        itemNone: "spg-checkbox--none",
        itemDisabled: "spg-item--disabled spg-checkbox--disabled",
        itemChecked: "spg-checkbox--checked",
        itemHover: "spg-checkbox--allowhover",
        itemInline: "spg-selectbase__item--inline",
        label: "spg-selectbase__label",
        // label: "spg-checkbox",
        itemSvgIconId: "#icon-v2check",
        labelChecked: "",
        //itemControl: "spg-visuallyhidden spg-item__control",
        itemControl: "spg-checkbox__control",
        itemDecorator: "spg-checkbox__svg",
        //itemDecorator: "spg-checkbox__hidden",
        //controlLabel: "spg-item__control-label",
        controlLabel: "spg-checkbox__caption",
        materialDecorator: "spg-checkbox__rectangle",
        //materialDecorator: "spg-item__decorator spg-checkbox__decorator",
        other: "spg-comment spg-question__other",
        column: "spg-selectbase__column"
    },
    radiogroup: {
        root: "spg-selectbase",
        item: "spg-item spg-radio spg-selectbase__item",
        itemInline: "spg-selectbase__item--inline",
        label: "spg-selectbase__label",
        labelChecked: "",
        itemDisabled: "spg-item--disabled spg-radio--disabled",
        itemChecked: "spg-radio--checked",
        itemHover: "spg-radio--allowhover",
        itemControl: "spg-visuallyhidden spg-item__control",
        itemDecorator: "spg-item__svg spg-radio__svg",
        controlLabel: "spg-item__control-label",
        materialDecorator: "spg-item__decorator spg-radio__decorator",
        other: "spg-comment spg-question__other",
        clearButton: "spg-btn spg-selectbase__clear-btn",
        column: "spg-selectbase__column"
    },
    boolean: {
        mainRoot: "spg-question spg-row__question spg-question--boolean",
        rootCheckbox: "spg-selectbase",
        checkboxItem: "spg-checkbox",
        checkboxItemChecked: "spg-checkbox--checked",
        checkboxitemIndeterminate: "spg-checkbox--indeterminate",
        checkboxItemDisabled: "spg-checkbox--disabled",
        svgIconId: "#icon-v2check",
        checkboxLabel: "spg-selectbase__label",
        controlCheckbox: "spg-checkbox__control",
        checkboxControlLabel: "spg-checkbox__caption",
        checkboxItemDecorator: "spg-checkbox__svg",
        checkboxMaterialDecorator: "spg-checkbox__rectangle"
    },
    text: {
        root: "spg-input spg-text",
        small: "spg-row__question--small",
        content: "spg-question__content spg-text__content",
        remainingCharacterCounter: "spg-remaining-character-counter",
        onError: "spg-input--error"
    },
    multipletext: {
        root: "spg-multipletext",
        item: "spg-multipletext__item",
        itemTitle: "spg-multipletext__item-title",
        content: "spg-multipletext__content spg-text__content",
        row: "spg-multipletext__row",
        cell: "spg-multipletext__cell"
    },
    dropdown: {
        root: "",
        popup: "",
        small: "spg-row__question--small sd-row__question--small",
        control: "spg-input spg-dropdown sd-input sd-dropdown",
        filterStringInput: "sd-dropdown__filter-string-input spg-dropdown__filter-string-input",
        other: "spg-comment spg-question__other",
        onError: "spg-input--error",
        selectWrapper: "sv-dropdown_select-wrapper spg-dropdown_select-wrapper",
        chevronButton: "sd-dropdown_chevron-button spg-dropdown_chevron-button",
        chevronButtonSvg: "sd-dropdown_chevron-button-svg",
        chevronButtonIconId: "icon-chevron",
    },
    imagepicker: {
        root: "spg-imagepicker",
        item: "spg-imagepicker__item",
        itemInline: "spg-imagepicker__item--inline",
        itemChecked: "spg-imagepicker__item--checked",
        itemDisabled: "spg-imagepicker__item--disabled",
        itemHover: "spg-imagepicker__item--allowhover",
        label: "spg-imagepicker__label",
        itemControl: "spg-imagepicker__control",
        image: "spg-imagepicker__image",
        itemText: "spg-imagepicker__text",
        clearButton: "spg-btn",
        other: "spg-comment spg-question__other"
    },
    matrix: {
        tableWrapper: "spg-matrix spg-table-wrapper",
        root: "spg-table",
        rowError: "spg-matrix__row--error",
        cell: "spg-table__cell spg-matrix__cell",
        headerCell: "spg-table__cell spg-table__cell--header",
        label: "spg-item spg-radio spg-matrix__label",
        itemValue: "spg-visuallyhidden spg-item__control spg-radio__control",
        itemChecked: "spg-radio--checked",
        itemDisabled: "spg-item--disabled spg-radio--disabled",
        itemHover: "spg-radio--allowhover",
        materialDecorator: "spg-item__decorator spg-radio__decorator",
        itemDecorator: "spg-item__svg spg-radio__svg",
        cellText: "spg-matrix__text",
        cellTextSelected: "spg-matrix__text--checked",
        cellTextDisabled: "spg-matrix__text--disabled"
    },
    matrixdropdown: {
        tableWrapper: "spg-table-wrapper",
        root: "spg-table",
        cell: "spg-table__cell",
        headerCell: "spg-table__cell spg-table__cell--header"
    },
    matrixdynamic: {
        tableWrapper: "spg-table-wrapper",
        root: "spg-table spg-matrixdynamic",
        content: "spg-matrixdynamic__content spg-text__content",
        cell: "spg-table__cell",
        headerCell: "spg-table__cell spg-table__cell--header",
        button: "spg-btn",
        detailRow: "spg-table__row spg-table__row--detail",
        detailButton: "spg-table__cell--detail-button",
        detailButtonExpanded: "spg-table__cell--detail-button--expanded",
        detailIcon: "spg-detail-panel__icon",
        detailIconExpanded: "spg-detail-panel__icon--expanded",
        detailPanelCell: "spg-table__cell--detail-panel",
        actionsCell: "spg-table__cell spg-table__cell--actions",
        buttonAdd: "spg-matrixdynamic__add-btn spg-action-button spg-action-button--large",
        buttonRemove: "spg-matrixdynamic__remove-btn",
        iconAdd: "",
        iconRemove: "",
        dragElementDecorator: "spg-drag-element__svg",
        iconDragElement: "#icon-drag-area-indicator",
        iconDrag: "spg-matrixdynamic__drag-element",
        footer: "",
        dragDropGhostPositionTop: "spg-matrixdynamic__drag-drop-ghost-position-top",
        dragDropGhostPositionBottom: "spg-matrixdynamic__drag-drop-ghost-position-bottom",
        emptyRowsSection: "spg-matrixdynamic__placeholder",
        emptyRowsText: "spg-matrixdynamic__placeholder-text",
        cellQuestionWrapper: "spg-table__question-wrapper"
    },
    rating: {
        root: "spg-rating",
        item: "spg-rating__item",
        selected: "spg-rating__item--selected",
        minText: "spg-rating__min-text",
        itemText: "spg-rating__item-text",
        maxText: "spg-rating__max-text",
        disabled: "spg-rating--disabled"
    },
    comment: {
        root: "spg-input spg-comment",
        content: "spg-question__content spg-comment__content",
        remainingCharacterCounter: "spg-remaining-character-counter",
        small: "spg-row__question--small",
        onError: "spg-input--error"
    },
    expression: "",
    file: {
        root: "spg-file",
        other: "spg-comment spg-question__other",
        placeholderInput: "spg-visuallyhidden",
        preview: "spg-file__preview",
        fileSign: "spg-hidden",
        fileSignBottom: "spg-file__sign",
        fileDecorator: "spg-file__decorator",
        fileInput: "spg-visuallyhidden",
        noFileChosen: "spg-description spg-file__no-file-chosen",
        chooseFile: "spg-btn spg-file__choose-btn",
        disabled: "spg-file__choose-btn--disabled",
        removeButton: "spg-hidden",
        removeButtonBottom: "spg-btn spg-file__clean-btn",
        removeFile: "spg-hidden",
        removeFileSvg: "spg-file__remove-svg",
        wrapper: "spg-file__wrapper"
    },
    signaturepad: {
        root: "spg-signaturepad sjs_sp_container",
        small: "spg-row__question--small",
        controls: "sjs_sp_controls",
        clearButton: "sjs_sp_clear"
    },
    propertygrid_bindings: {
        content: "spg-question__content spg-question__nopadding spg-question-group"
    },
    propertygrid_restfull: {
        content: "spg-question__content spg-question__nopadding"
    },
    saveData: {
        root: "",
        saving: "",
        error: "",
        success: "",
        saveAgainButton: ""
    },
    window: {
        root: "sv_window",
        body: "sv_window_content",
        header: {
            root: "sv_window_title",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: ""
        }
    },
    actionBar: {
        root: "spg-action-bar",
        item: "spg-action-button",
        itemPressed: "spg-action-button--pressed",
        itemAsIcon: "spg-action-button--icon",
        itemIcon: "spg-action-button__icon",
        itemTitle: "spg-action-button__title",
    },
    spinedit: {
        root: "spg-input spg-spin-editor spg-input-container",
        control: "spg-spin-editor__input spg-input-container__input",
        buttonsContainer: "spg-input-container__buttons-container",
        arrowButton: "spg-input__edit-button",
        increaseButtonIcon: "icon-arrow-up",
        decreaseButtonIcon: "icon-arrow-down"
    },
    color: {
        root: "spg-input spg-color-editor spg-input-container",
        swatch: "spg-color-editor__color-swatch",
        swatchDefault: "spg-color-editor__color-swatch--default",
        swatchDisabled: "spg-color-editor__color-swatch--disabled",
        colorInput: "spg-color-editor__color-input",
        control: "spg-color-editor__input spg-input-container__input",
        colorDropdown: "spg-input__edit-button",
        colorDropdownIcon: "icon-drop-down-arrow",
        colorItem: "spg-color-editor__color-item",
        swatchIcon: "icon-color-picker"
    },
    textwithreset: {
        root: "spg-input spg-input-container",
        rootMultiline: "spg-input-container--multiline",
        control: "spg-input-container__input",
        controlMultiline: "spg-input-container__input spg-comment",
        resetButton: "spg-input__edit-button",
        resetButtonIcon: "icon-reset",
        content: "spg-question__content spg-text__content",
        remainingCharacterCounter: "spg-remaining-character-counter",
        onError: "spg-input--error"
    },
    fileedit: {
        root: "spg-input spg-input-container spg-file-edit",
        control: "spg-input-container__input",
        buttonsContainer: "spg-input-container__buttons-container",
        chooseButtonIcon: "icon-file",
        clearButtonIcon: "icon-clear",
        fileInput: "sd-visuallyhidden",
        clearButton: "spg-input__edit-button",
        chooseButton: "spg-input__edit-button spg-file-edit__choose-button",
        chooseButtonDisabled: "spg-input__edit-button--disabled"
    },
    linkvalue: {
        content: "spg-link"
    }
};


/***/ }),

/***/ "./src/property-grid/bindings.ts":
/*!***************************************!*\
  !*** ./src/property-grid/bindings.ts ***!
  \***************************************/
/*! exports provided: PropertyGridEditorBindings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorBindings", function() { return PropertyGridEditorBindings; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! . */ "./src/property-grid/index.ts");




var json = {
    name: "propertygrid_bindings",
    showInToolbox: false,
    createElements: function () {
        //tell ComponentCollection that it is composite question
    }
};
if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"].Instance.getCustomQuestionByName(json.name)) {
    survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"].Instance.add(json);
}
var PropertyGridEditorBindings = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorBindings, _super);
    function PropertyGridEditorBindings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorBindings.prototype.fit = function (prop) {
        return prop.type == "bindings";
    };
    PropertyGridEditorBindings.prototype.getJSON = function () {
        var res = {
            type: "propertygrid_bindings",
        };
        return res;
    };
    PropertyGridEditorBindings.prototype.onCreated = function (obj, question, prop, options) {
        question.contentPanel.fromJSON({ elements: this.getQuestions(obj, options) });
        question.valueFromDataCallback = function (value) {
            if (!value && obj.bindings.getNames().length > 0) {
                var result = {};
                for (var _i = 0, _a = obj.bindings.getNames(); _i < _a.length; _i++) {
                    var bindingName = _a[_i];
                    result[bindingName] = obj.bindings.getValueNameByPropertyName(bindingName);
                }
                return result;
            }
            return value;
        };
    };
    PropertyGridEditorBindings.prototype.getQuestions = function (obj, options) {
        var res = [];
        for (var _i = 0, _a = obj.bindings.getNames(); _i < _a.length; _i++) {
            var bindingName = _a[_i];
            res.push(this.getBindingJSON(bindingName, obj, options));
        }
        return res;
    };
    PropertyGridEditorBindings.prototype.getBindingJSON = function (bindingName, obj, options) {
        var prop = new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObjectProperty"](null, "value");
        prop.type = "questionvalue";
        var json = ___WEBPACK_IMPORTED_MODULE_3__["PropertyGridEditorCollection"].getJSON(obj, prop, options);
        json.titleLocation = "left";
        json.descriptionLocation = "hidden";
        json.minWidth = "0px";
        json.name = bindingName;
        json.title = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getPropertyName(bindingName);
        return json;
    };
    return PropertyGridEditorBindings;
}(___WEBPACK_IMPORTED_MODULE_3__["PropertyGridEditor"]));

___WEBPACK_IMPORTED_MODULE_3__["PropertyGridEditorCollection"].register(new PropertyGridEditorBindings());


/***/ }),

/***/ "./src/property-grid/cells-survey.ts":
/*!*******************************************!*\
  !*** ./src/property-grid/cells-survey.ts ***!
  \*******************************************/
/*! exports provided: CellsEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CellsEditor", function() { return CellsEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");




var CellsEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CellsEditor, _super);
    function CellsEditor(matrix, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, options) || this;
        _this.matrix = matrix;
        _this.editMatrixValue = (_this.editSurvey.getQuestionByName("question"));
        _this.buildColumns();
        _this.buildRows();
        _this.editMatrix.value = _this.matrix.cells.getJson();
        return _this;
    }
    CellsEditor.prototype.getSurveyJSON = function () {
        return {
            elements: [
                {
                    type: "matrixdropdown",
                    name: "question",
                    cellType: "comment",
                },
            ],
        };
    };
    CellsEditor.prototype.getSurveyCreationReason = function () {
        return "cells-editor";
    };
    Object.defineProperty(CellsEditor.prototype, "editMatrix", {
        get: function () {
            return this.editMatrixValue;
        },
        enumerable: false,
        configurable: true
    });
    CellsEditor.prototype.apply = function () {
        this.matrix.cells.setJson(this.editMatrix.value);
        return true;
    };
    CellsEditor.prototype.buildColumns = function () {
        var columns = this.matrix.columns;
        for (var i = 0; i < columns.length; i++) {
            this.editMatrix.addColumn("" + columns[i].value, columns[i].text);
        }
    };
    CellsEditor.prototype.buildRows = function () {
        this.editMatrix.rows.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"]("default", _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.cellsDefaultRow")));
        var rows = this.matrix.rows;
        for (var i = 0; i < rows.length; i++) {
            this.editMatrix.rows.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](rows[i].value, rows[i].text));
        }
    };
    return CellsEditor;
}(_index__WEBPACK_IMPORTED_MODULE_3__["PropertyEditorSetupValue"]));



/***/ }),

/***/ "./src/property-grid/condition-survey.ts":
/*!***********************************************!*\
  !*** ./src/property-grid/condition-survey.ts ***!
  \***********************************************/
/*! exports provided: ConditionEditorItem, SurveyConditionEditorItem, ConditionEditorItemsBuilder, ConditionEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionEditorItem", function() { return ConditionEditorItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyConditionEditorItem", function() { return SurveyConditionEditorItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionEditorItemsBuilder", function() { return ConditionEditorItemsBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionEditor", function() { return ConditionEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _components_tabs_logic_theme__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/tabs/logic-theme */ "./src/components/tabs/logic-theme.ts");
/* harmony import */ var _components_tabs_logic_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/tabs/logic-types */ "./src/components/tabs/logic-types.ts");









var ConditionEditorItem = /** @class */ (function () {
    function ConditionEditorItem() {
        this.conjunction = "and";
        this.operator = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.defaultOperators.default;
    }
    return ConditionEditorItem;
}());

var SurveyConditionEditorItem = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyConditionEditorItem, _super);
    function SurveyConditionEditorItem(survey) {
        var _this = _super.call(this) || this;
        _this.survey = survey;
        return _this;
    }
    SurveyConditionEditorItem.prototype.getOperatorText = function () {
        var op = this.operator;
        if (op == "equal")
            return "=";
        if (op == "notequal")
            return "<>";
        if (op == "greater")
            return ">";
        if (op == "less")
            return "<";
        if (op == "greaterorequal")
            return ">=";
        if (op == "lessorequal")
            return "<=";
        return op;
    };
    SurveyConditionEditorItem.prototype.getValueText = function () {
        var val = this.value;
        if (!val)
            return val;
        if (!Array.isArray(val))
            return this.valToText(val);
        var res = "[";
        for (var i = 0; i < val.length; i++) {
            res += this.valToText(val[i]);
            if (i < val.length - 1)
                res += ", ";
        }
        res += "]";
        return res;
    };
    Object.defineProperty(SurveyConditionEditorItem.prototype, "isValueRequired", {
        get: function () {
            return this.operator !== "empty" && this.operator !== "notempty";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyConditionEditorItem.prototype, "isReady", {
        get: function () {
            return (!!this.questionName &&
                (!this.isValueRequired || !survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(this.value)));
        },
        enumerable: false,
        configurable: true
    });
    SurveyConditionEditorItem.prototype.toExpression = function () {
        var text = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["wrapTextByCurlyBraces"])(this.getQuestionValueByName()) + " " + this.getOperatorText();
        if (this.isValueRequired) {
            text += " " + this.getValueText();
        }
        return text;
    };
    SurveyConditionEditorItem.prototype.getQuestionValueByName = function () {
        var question = this.survey.getQuestionByName(this.questionName);
        if (question &&
            question.name != question.getValueName() &&
            this.questionName != question.getValueName()) {
            return this.questionName.replace(question.name, question.getValueName());
        }
        return this.questionName;
    };
    SurveyConditionEditorItem.prototype.valToText = function (val) {
        if (val == "true" || val == "false")
            return val;
        if (this.isNumeric(val))
            return val;
        if (val[0] == "[")
            return val.replace(/(?!^)(['])(?!$)/g, "\\$1");
        if (!this.isQuote(val[0]))
            val = "'" + val;
        if (!this.isQuote(val[val.length - 1]))
            val = val + "'";
        return val.replace(/(?!^)(['"])(?!$)/g, "\\$1");
    };
    SurveyConditionEditorItem.prototype.isNumeric = function (val) {
        if (typeof val === "string" &&
            val.length > 1 &&
            val[0] === "0" &&
            val[1] !== "x")
            return false;
        return !isNaN(val);
    };
    SurveyConditionEditorItem.prototype.isQuote = function (ch) {
        return ch == "'" || ch == '"';
    };
    return SurveyConditionEditorItem;
}(ConditionEditorItem));

var ConditionEditorItemsBuilder = /** @class */ (function () {
    function ConditionEditorItemsBuilder(hasValue) {
        if (hasValue === void 0) { hasValue = null; }
        this.hasValue = hasValue;
    }
    ConditionEditorItemsBuilder.prototype.build = function (text) {
        if (!text)
            return [];
        var operand = null;
        operand = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ConditionsParser"]().parseExpression(text);
        if (!operand)
            return [];
        return this.buildEditorItems(operand);
    };
    ConditionEditorItemsBuilder.prototype.buildEditorItems = function (operand) {
        var res = [];
        if (!this.buildEditorItemsCore(operand, res, "")) {
            res = [];
        }
        return res;
    };
    ConditionEditorItemsBuilder.prototype.buildEditorItemsCore = function (operand, res, parentConjunction) {
        if (operand.getType() == "unary")
            return this.buildEditorItemsAddUnaryOperand(operand, res);
        if (operand.getType() !== "binary")
            return false;
        var op = operand;
        if (op.isArithmetic && !op.isConjunction)
            return false;
        if (op.isConjunction)
            return this.buildEditorItemsAddConjunction(op, res, parentConjunction);
        return this.buildEditorItemsAddBinaryOperand(op, res);
    };
    ConditionEditorItemsBuilder.prototype.buildEditorItemsAddConjunction = function (op, res, parentConjunction) {
        var conjunction = op.conjunction;
        if (conjunction == "or" && !!parentConjunction && parentConjunction != conjunction)
            return false;
        if (!this.buildEditorItemsCore(op.leftOperand, res, conjunction))
            return false;
        var conjunctionIndex = res.length;
        if (!this.buildEditorItemsCore(op.rightOperand, res, conjunction))
            return false;
        res[conjunctionIndex].conjunction = op.conjunction;
        return true;
    };
    ConditionEditorItemsBuilder.prototype.buildEditorItemsAddBinaryOperand = function (op, res) {
        var variableOperand = this.getOperandByType(op, "variable");
        var arrayValue = this.getArrayValueFromOperand(op);
        var constOperand = !arrayValue ? this.getOperandByType(op, "const") : null;
        if (!variableOperand ||
            (!constOperand && !arrayValue && this.canShowValueByOperator(op.operator)))
            return false;
        if (!this.isVariableInSurvey(variableOperand.variable))
            return false;
        var item = new ConditionEditorItem();
        item.questionName = variableOperand.variable;
        item.operator = op.leftOperand !== variableOperand ? this.getOppositeOperator(op.operator) : op.operator;
        if (!!arrayValue) {
            item.value = arrayValue;
        }
        if (!!constOperand) {
            item.value = constOperand.correctValue;
        }
        res.push(item);
        return true;
    };
    ConditionEditorItemsBuilder.prototype.isVariableInSurvey = function (variable) {
        return !!this.hasValue ? this.hasValue(variable) : true;
    };
    ConditionEditorItemsBuilder.prototype.getArrayValueFromOperand = function (op) {
        var arrayOperand = this.getOperandByType(op, "array");
        if (!arrayOperand || !arrayOperand.values)
            return null;
        var valuesOperand = arrayOperand.values;
        if (!Array.isArray(valuesOperand) || valuesOperand.length == 0)
            return null;
        var res = [];
        for (var i = 0; i < valuesOperand.length; i++) {
            var opConst = valuesOperand[i];
            if (!opConst)
                continue;
            if (opConst.getType() != "const")
                return null;
            res.push(opConst.correctValue);
        }
        if (res.length == 0)
            return null;
        return res;
    };
    ConditionEditorItemsBuilder.prototype.buildEditorItemsAddUnaryOperand = function (op, res) {
        var operator = op.operator;
        if (operator !== "empty" && operator != "notempty")
            return false;
        var operand = op.expression;
        if (operand == null || operand.getType() != "variable")
            return false;
        var questionName = operand.variable;
        if (!this.isVariableInSurvey(questionName))
            return false;
        var item = new ConditionEditorItem();
        item.questionName = questionName;
        item.operator = operator;
        res.push(item);
        return true;
    };
    ConditionEditorItemsBuilder.prototype.getOppositeOperator = function (operator) {
        if (operator == "less")
            return "greater";
        if (operator == "greater")
            return "less";
        if (operator == "lessorequal")
            return "greaterorequal";
        if (operator == "greaterorequal")
            return "lessorequal";
        return operator;
    };
    ConditionEditorItemsBuilder.prototype.getOperandByType = function (op, opType) {
        if (!op.rightOperand)
            return null;
        if (op.leftOperand.getType() !== opType &&
            op.rightOperand.getType() !== opType)
            return null;
        if (op.leftOperand.getType() == opType &&
            op.rightOperand.getType() == opType)
            return null;
        return op.leftOperand.getType() == opType
            ? op.leftOperand
            : op.rightOperand;
    };
    ConditionEditorItemsBuilder.prototype.canShowValueByOperator = function (operator) {
        return operator != "empty" && operator != "notempty";
    };
    return ConditionEditorItemsBuilder;
}());

function questionValueVisibleIf(params) {
    if (params.length !== 2)
        return false;
    if (!params[0] || !params[1])
        return false;
    return params[1] !== "empty" && params[1] !== "notempty";
}
survey_core__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.register("questionValueVisibleIf", questionValueVisibleIf);
var ConditionEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ConditionEditor, _super);
    function ConditionEditor(survey, object, options, propertyName) {
        if (object === void 0) { object = null; }
        if (options === void 0) { options = null; }
        if (propertyName === void 0) { propertyName = ""; }
        var _this = _super.call(this, options) || this;
        _this.propertyName = propertyName;
        _this.addConditionQuestionsHash = {};
        _this.isModalValue = true;
        _this.isSettingPanelValues = false;
        _this.calculatedValueQuestion = null;
        _this.surveyValue = survey;
        _this.objectValue = object;
        _this.panelValue = (_this.editSurvey.getQuestionByName("panel"));
        _this.textEditorValue = (_this.editSurvey.getQuestionByName("textEditor"));
        if (!!_this.options.maxLogicItemsInCondition) {
            _this.panel.maxPanelCount = _this.options.maxLogicItemsInCondition;
        }
        _this.allConditionQuestions = _this.createAllConditionQuestions();
        _this.editSurvey.onValueChanged.add(function (sender, options) {
            _this.onValueChanged(options);
        });
        _this.editSurvey.onDynamicPanelAdded.add(function (sender, options) {
            _this.onPanelAdded();
        });
        _this.editSurvey.onDynamicPanelRemoved.add(function (sender, options) {
            if (options.question.panelCount == 0) {
                options.question.addPanel();
            }
            if (_this.panel.panelCount > 0)
                _this.panel.panels[0].getQuestionByName("questionName").titleLocation = "left";
        });
        _this.editSurvey.onDynamicPanelItemValueChanged.add(function (sender, options) {
            _this.onPanelValueChanged(options.panel, options.name);
        });
        _this.editSurvey.css = _components_tabs_logic_theme__WEBPACK_IMPORTED_MODULE_7__["logicCss"];
        _this.editSurvey.onUpdateQuestionCssClasses.add(function (sender, options) {
            _this.onUpdateQuestionCssClasses(options);
        });
        _this.text = !!_this.object && _this.propertyName ? _this.object[_this.propertyName] : "";
        _this.updatePlaceholderVisibileIf();
        return _this;
    }
    ConditionEditor.canParseExpression = function (text) {
        if (!text)
            return true;
        return !!new survey_core__WEBPACK_IMPORTED_MODULE_1__["ConditionsParser"]().parseExpression(text);
    };
    ConditionEditor.canBuildExpression = function (text) {
        if (!text)
            return true;
        if (!ConditionEditor.canParseExpression(text))
            return false;
        return new ConditionEditorItemsBuilder().build(text).length > 0;
    };
    ConditionEditor.isOperatorEnabled = function (qType, operatorTypes) {
        if (!qType)
            return true;
        if (!operatorTypes || operatorTypes.length == 0)
            return true;
        var contains = [];
        var notContains = [];
        for (var i = 0; i < operatorTypes.length; i++) {
            var name_1 = operatorTypes[i];
            if (name_1[0] == "!") {
                notContains.push(name_1.substring(1));
            }
            else {
                contains.push(name_1);
            }
        }
        return ConditionEditor.isClassContains(qType, contains, notContains);
    };
    ConditionEditor.isClassContains = function (qType, contains, notContains) {
        var classInfo = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(qType);
        while (!!classInfo) {
            if (contains.indexOf(classInfo.name) > -1)
                return true;
            if (notContains.indexOf(classInfo.name) > -1)
                return false;
            classInfo = !!classInfo.parentName ? survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(classInfo.parentName) : null;
        }
        return contains.length == 0;
    };
    Object.defineProperty(ConditionEditor.prototype, "title", {
        get: function () {
            return this.panel.title;
        },
        set: function (val) {
            this.panel.title = val;
            this.textEditor.title = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionEditor.prototype, "isModal", {
        get: function () {
            return this.isModalValue;
        },
        set: function (val) {
            if (val === this.isModalValue)
                return;
            this.isModalValue = val;
            this.updatePlaceholderVisibileIf();
        },
        enumerable: false,
        configurable: true
    });
    ConditionEditor.prototype.updatePlaceholderVisibileIf = function () {
        if (!!this.panel) {
            var expression = "";
            if (this.isModal) {
                expression = "{panel.questionName} empty and {panelIndex} == 0";
            }
            this.panel.template.getQuestionByName("placeholder").visibleIf = expression;
        }
    };
    ConditionEditor.prototype.getSurveyJSON = function () {
        return {
            elements: [
                {
                    type: "paneldynamic",
                    titleLocation: "hidden",
                    name: "panel",
                    panelRemoveButtonLocation: "right",
                    panelAddText: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.addCondition"),
                    minPanelCount: 1,
                    maxPanelCount: 1,
                    startWithNewLine: false,
                    templateElements: [
                        {
                            name: "conjunction",
                            type: "dropdown",
                            renderAs: "logicoperator",
                            searchEnabled: false,
                            titleLocation: "hidden",
                            showOptionsCaption: false,
                            visibleIf: "{panelIndex} > 0",
                            choices: [
                                { value: "and", text: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.and") },
                                { value: "or", text: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.or") }
                            ]
                        },
                        {
                            name: "questionName",
                            type: "dropdown",
                            renderAs: "logicoperator",
                            title: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.if"),
                            titleLocation: "left",
                            showOptionsCaption: false,
                            startWithNewLine: false,
                            isRequired: true
                        },
                        {
                            name: "operator",
                            type: "dropdown",
                            renderAs: "logicoperator",
                            searchEnabled: false,
                            titleLocation: "hidden",
                            startWithNewLine: false,
                            showOptionsCaption: false,
                            isRequired: true,
                            enableIf: "{panel.questionName} notempty"
                        },
                        {
                            name: "removeAction",
                            type: "linkvalue",
                            titleLocation: "hidden",
                            showOptionsCaption: false,
                            visible: false,
                            startWithNewLine: false,
                            showValueInLink: false,
                            allowClear: false,
                            showClear: false
                        },
                        {
                            name: "questionValue",
                            type: "text",
                            visible: false
                        },
                        {
                            name: "placeholder",
                            type: "html",
                            visible: false,
                            html: "<div class='svc-logic-placeholder'><span class=\"svc-logic-placeholder__text\">" + _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.emptyLogicPopupMessage") + "<span></div>"
                        }
                    ]
                },
                {
                    type: "comment",
                    titleLocation: "hidden",
                    name: "textEditor",
                    textUpdateMode: "onTyping",
                    placeholder: _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.emptyExpressionPlaceHolder"),
                    visible: false
                }
            ]
        };
    };
    ConditionEditor.prototype.getSurveyCreationReason = function () {
        return "condition-builder";
    };
    Object.defineProperty(ConditionEditor.prototype, "text", {
        get: function () {
            return this.getText();
        },
        set: function (val) {
            if (!this.isModal && !ConditionEditor.canBuildExpression(val)) {
                this.panel.panelCount = 0;
                this.showTextEditor(val);
            }
            else {
                this.textEditor.value = val;
                this.showBuilder(val);
            }
        },
        enumerable: false,
        configurable: true
    });
    ConditionEditor.prototype.isModified = function (prevText) {
        if (this.textEditor.visible)
            return prevText != this.text;
        var items = this.getEditorItems();
        var prevOp = !!prevText ? new survey_core__WEBPACK_IMPORTED_MODULE_1__["ConditionsParser"]().parseExpression(prevText) : null;
        if (!prevOp)
            return !(items.length == 1 && !items[0].questionName);
        if (!this.isReady)
            return true;
        var curOp = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ConditionsParser"]().parseExpression(this.text);
        return !prevOp.isEqual(curOp);
    };
    Object.defineProperty(ConditionEditor.prototype, "context", {
        get: function () {
            return this.contextValue;
        },
        set: function (val) {
            if (val === this.context)
                return;
            this.contextValue = val;
            this.updateNamesOnContextChanged();
            if (this.onContextChanged) {
                this.onContextChanged(val);
            }
        },
        enumerable: false,
        configurable: true
    });
    ConditionEditor.prototype.processText = function (val) {
        this.panel.panelCount = 0;
        var items = new ConditionEditorItemsBuilder().build(val);
        this.buildPanels(items);
    };
    Object.defineProperty(ConditionEditor.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionEditor.prototype, "object", {
        get: function () {
            return this.objectValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionEditor.prototype, "panel", {
        get: function () {
            return this.panelValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionEditor.prototype, "textEditor", {
        get: function () {
            return this.textEditorValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionEditor.prototype, "isReady", {
        get: function () {
            if (this.textEditor.visible) {
                return ConditionEditor.canParseExpression(this.textEditor.value);
            }
            for (var i = 0; i < this.panel.panels.length; i++) {
                if (!this.createEditorItemFromPanel(this.panel.panels[i]).isReady)
                    return false;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    ConditionEditor.prototype.isEmpty = function () {
        if (this.panel.panels.length === 0)
            return true;
        if (this.panel.panels.length > 1)
            return false;
        var item = this.createEditorItemFromPanel(this.panel.panels[0]);
        return !item.questionName;
    };
    ConditionEditor.prototype.hasErrorInUI = function () {
        var creator = this.survey.creator;
        if (!this.isReady) {
            this.hasErrors();
            this.errorText = Object(_components_tabs_logic_types__WEBPACK_IMPORTED_MODULE_8__["getLogicString"])("expressionInvalid");
            !!creator &&
                creator.notify(this.errorText, "error");
            return true;
        }
        return false;
    };
    ConditionEditor.prototype.apply = function () {
        if (this.hasErrorInUI()) {
            return false;
        }
        if (!this.object || !this.propertyName)
            return;
        this.object[this.propertyName] = this.text;
        return true;
    };
    ConditionEditor.prototype.setIsFastEntry = function (showTextEdit) {
        if (showTextEdit) {
            this.showTextEditor(this.text);
        }
        else {
            if (!this.panel.visible) {
                this.showBuilder(this.text);
            }
        }
    };
    ConditionEditor.prototype.buildPanels = function (items) {
        this.panel.panelCount = items.length;
        for (var i = 0; i < items.length; i++) {
            this.setItemToPanel(items[i], this.panel.panels[i]);
        }
        if (this.panel.panelCount == 0) {
            this.panel.addPanel();
        }
    };
    ConditionEditor.prototype.setupConditionOperator = function (item, panel) {
        var _this = this;
        var questionOperator = panel.getQuestionByName("operator");
        questionOperator.choices = this.getOperators();
        questionOperator.value = item.operator;
        questionOperator.onOpened.add(function (_, opt) {
            var questionName = panel.getQuestionByName("questionName").value;
            var json = _this.getQuestionConditionJson(questionName);
            var qType = !!json ? json.type : null;
            var condQuestion = _this.getConditionQuestion(questionName);
            opt.choices.forEach(function (choice, index) {
                var isOperatorEnabled = ConditionEditor.isOperatorEnabled(qType, _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].operators[choice.value]);
                isOperatorEnabled = _this.options.isConditionOperatorEnabled(questionName, condQuestion, choice.value, isOperatorEnabled);
                choice.setIsEnabled(isOperatorEnabled);
                choice.setIsVisible(isOperatorEnabled);
            });
        });
    };
    ConditionEditor.prototype.setupConditionQuestionName = function (item, panel) {
        var panelQuestionName = panel.getQuestionByName("questionName");
        panelQuestionName.choices = this.getConditionQuestions();
        panelQuestionName.titleLocation = this.panel.panels.indexOf(panel) == 0 ? "left" : "hidden";
        var questionName = this.getQuestionNameToPanel(item.questionName);
        if (!!this.getConditionQuestion(questionName)) {
            panelQuestionName.value = questionName;
        }
    };
    ConditionEditor.prototype.setupRemoveQuestion = function (panel) {
        var dynamicPanel = (panel.getQuestionByName("removeAction").parentQuestion);
        var removeQuestionQuestion = panel.getQuestionByName("removeAction");
        removeQuestionQuestion.linkClickCallback = function () {
            if (!!dynamicPanel) {
                dynamicPanel.removePanelUI(panel);
            }
        };
        removeQuestionQuestion.linkSetButtonCssClasses = "svc-logic-condition-remove svc-icon-remove";
        removeQuestionQuestion.linkValueText = "";
    };
    ConditionEditor.prototype.setItemToPanel = function (item, panel) {
        this.isSettingPanelValues = true;
        panel.getQuestionByName("conjunction").value = item.conjunction;
        this.setupConditionOperator(item, panel);
        this.setupConditionQuestionName(item, panel);
        if (!!panel.getQuestionByName("questionValue")) {
            panel.getQuestionByName("questionValue").value = item.value;
            this.updateSurveyVariable(item);
        }
        this.setupRemoveQuestion(panel);
        this.isSettingPanelValues = false;
    };
    ConditionEditor.prototype.updateSurveyVariable = function (item) {
        this.editSurvey.setVariable(item.questionName, item.value);
    };
    ConditionEditor.prototype.getConditionQuestions = function () {
        if (!this.context)
            return this.allConditionQuestions;
        var res = [];
        for (var i = 0; i < this.allConditionQuestions.length; i++) {
            var item = this.allConditionQuestions[i];
            if (!item.context || item.context === this.context) {
                res.push(item);
            }
        }
        return res;
    };
    ConditionEditor.prototype.getText = function () {
        if (this.textEditor.visible)
            return this.textEditor.value;
        var res = "";
        var items = this.getEditorItems();
        for (var i = 0; i < items.length; i++) {
            if (!items[i].isReady)
                break;
            if (!!res) {
                res += " " + items[i].conjunction + " ";
            }
            res += items[i].toExpression();
        }
        return res;
    };
    ConditionEditor.prototype.getEditorItems = function () {
        var res = [];
        for (var i = 0; i < this.panel.panels.length; i++) {
            res.push(this.createEditorItemFromPanel(this.panel.panels[i]));
        }
        return res;
    };
    ConditionEditor.prototype.createEditorItemFromPanel = function (panel) {
        var item = new SurveyConditionEditorItem(this.survey);
        item.conjunction = panel.getQuestionByName("conjunction").value;
        item.questionName = this.getQuestionNameFromPanel(panel.getQuestionByName("questionName").value);
        item.operator = panel.getQuestionByName("operator").value;
        if (!!panel.getQuestionByName("questionValue")) {
            item.value = panel.getQuestionByName("questionValue").value;
            this.updateSurveyVariable(item);
        }
        return item;
    };
    ConditionEditor.prototype.getQuestionNameFromPanel = function (name) {
        if (!this.context || !name)
            return name;
        var prefix = this.context.getValueName() + ".";
        return name.replace(prefix, "");
    };
    ConditionEditor.prototype.getContextIndexInfo = function (name, prefix) {
        if (prefix === void 0) { prefix = ""; }
        return _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].getQuestionContextIndexInfo(name, prefix);
    };
    ConditionEditor.prototype.getQuestionNameToPanel = function (name) {
        if (!this.context || !name)
            return name;
        var indexInfo = this.getContextIndexInfo(name);
        if (!indexInfo || indexInfo.index !== 0)
            return name;
        return this.context.getValueName() + "." + name;
    };
    ConditionEditor.prototype.getContextFromPanels = function () {
        if (!!this.object)
            return null;
        for (var i = 0; i < this.panel.panels.length; i++) {
            var questionName = this.panel.panels[i].getQuestionByName("questionName").value;
            var context = this.getContextByQuestionName(questionName);
            if (!!context)
                return context;
        }
        return null;
    };
    ConditionEditor.prototype.updateNamesOnContextChanged = function () {
        for (var i = 0; i < this.panel.panels.length; i++) {
            this.panel.panels[i].getQuestionByName("questionName").choices = this.getConditionQuestions();
        }
    };
    ConditionEditor.prototype.getContextByQuestionName = function (name) {
        if (!name)
            return null;
        var indexInfo = this.getContextIndexInfo(name, ".");
        if (!indexInfo)
            return null;
        name = name.substring(0, indexInfo.index);
        return this.survey.getQuestionByValueName(name);
    };
    ConditionEditor.prototype.createAllConditionQuestions = function () {
        if (!this.survey)
            return [];
        var res = [];
        var questions = this.survey.getAllQuestions();
        var contextObject = this.getContextObject();
        var sortOrder = "acs";
        if (questions.length > 0) {
            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                if (contextObject == question)
                    continue;
                var context = contextObject ? contextObject : (!this.context || this.context === question);
                question.addConditionObjectsByContext(res, context);
            }
            sortOrder = this.options.onConditionQuestionsGetListCallback(this.propertyName, this.object, this, res);
            for (var i = 0; i < res.length; i++) {
                res[i].value = res[i].name;
                var question = !!res[i].question ? res[i].question : res[i];
                if (!this.options.showTitlesInExpressions) {
                    var name_2 = res[i].name;
                    var valueName = question.valueName;
                    if (!!valueName && name_2.indexOf(valueName) == 0) {
                        name_2 = name_2.replace(valueName, question.name);
                    }
                    res[i].text = this.options.getObjectDisplayName(question, "condition-editor", "condition", name_2);
                }
                this.addConditionQuestionsHash[res[i].name] = question;
            }
        }
        var variableNames = this.survey.getVariableNames();
        this.addSurveyCalculatedValues(variableNames);
        this.addValuesIntoConditionQuestions(variableNames, res);
        if (sortOrder === "asc") {
            _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].sortItems(res);
        }
        return res;
    };
    ConditionEditor.prototype.getContextObject = function () {
        if (this.object && this.object.isDescendantOf("itemvalue")) {
            var res = this.object.locOwner;
            if (!!res && res.getType) {
                if (!!res.locOwner && res.locOwner.isDescendantOf("matrixdropdowncolumn"))
                    return res.locOwner;
                return res;
            }
        }
        return this.object;
    };
    ConditionEditor.prototype.addValuesIntoConditionQuestions = function (values, res) {
        for (var i = 0; i < values.length; i++) {
            var name_3 = !!values[i].name ? values[i].name : values[i];
            this.addConditionQuestionsHash[name_3] = this.getCalculatedValueQuestion();
            res.push({
                value: name_3,
                text: name_3,
                question: this.getCalculatedValueQuestion()
            });
        }
    };
    ConditionEditor.prototype.addSurveyCalculatedValues = function (names) {
        this.survey.calculatedValues.forEach(function (item) {
            if (names.indexOf(item.name) < 0)
                names.push(item.name);
        });
    };
    ConditionEditor.prototype.getCalculatedValueQuestion = function () {
        if (!this.calculatedValueQuestion) {
            this.calculatedValueQuestion = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("text");
            this.calculatedValueQuestion.name = "question";
        }
        return this.calculatedValueQuestion;
    };
    ConditionEditor.prototype.getOperators = function () {
        var res = [];
        var ops = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].operators;
        for (var name_4 in ops) {
            res.push(new survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](name_4, _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("op." + name_4)));
        }
        return res;
    };
    ConditionEditor.prototype.rebuildQuestionValue = function (panel) {
        if (!!panel.getQuestionByName("questionValue")) {
            panel.getQuestionByName("questionValue").clearValue();
        }
        var json = this.getQuestionConditionJson(panel.getQuestionByName("questionName").value, panel.getQuestionByName("operator").value);
        if (!json) {
            json = {
                type: "text"
            };
        }
        json.isRequired = true;
        _survey_helper__WEBPACK_IMPORTED_MODULE_4__["SurveyHelper"].updateQuestionJson(json);
        json.enableIf = "{panel.questionName} notempty and {panel.operator} != 'empty' and {panel.operator} != 'notempty'";
        var newQuestion = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(json.type);
        delete json.type;
        new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, newQuestion);
        if (!newQuestion) {
            newQuestion = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("text", json);
        }
        var oldQuestion = panel.getQuestionByName("questionValue");
        if (!!oldQuestion) {
            panel.removeElement(oldQuestion);
        }
        if (this.canShowQuestionValue(panel)) {
            var title = newQuestion.title;
            newQuestion.name = "questionValue";
            newQuestion.visibleIf = "questionValueVisibleIf({panel.questionName}, {panel.operator})";
            newQuestion.title = title;
            newQuestion.description = "";
            newQuestion.titleLocation = "top";
            newQuestion.hasComment = false;
            panel.addElement(newQuestion);
        }
    };
    ConditionEditor.prototype.rebuildQuestionValueOnOperandChanging = function (panel) {
        var json = this.getQuestionConditionJson(panel.getQuestionByName("questionName").value, panel.getQuestionByName("operator").value);
        var question = panel.getQuestionByName("questionValue");
        if (!!question && (question.isReadOnly || !question.isVisible)) {
            question.clearValue();
        }
        if (!question || (!!json && json.type == question.getType()))
            return;
        this.rebuildQuestionValue(panel);
    };
    ConditionEditor.prototype.canShowQuestionValue = function (panel) {
        var questionOperator = panel.getQuestionByName("operator");
        if (!questionOperator)
            return false;
        this.updateOperatorEnables(panel);
        var choices = questionOperator.choices;
        for (var i = 0; i < choices.length; i++) {
            if (!choices[i].isEnabled)
                continue;
            var val = choices[i].value;
            if (val !== "empty" && val != "notempty")
                return true;
        }
        return false;
    };
    ConditionEditor.prototype.getConditionQuestion = function (name) {
        return this.addConditionQuestionsHash[name];
    };
    ConditionEditor.prototype.getQuestionConditionJson = function (questionName, operator) {
        var path = "";
        var question = this.getConditionQuestion(questionName);
        if (!question)
            return null;
        if (!operator) {
            operator = this.getDefaultOperatorByQuestion(question);
        }
        if (questionName.indexOf(question.getValueName()) == 0) {
            path = questionName.substring(question.getValueName().length);
        }
        var indexInfo = this.getContextIndexInfo(questionName);
        if (!!indexInfo && indexInfo.index == 0) {
            path = questionName.substring(indexInfo.name.length);
        }
        if (!path) {
            path = questionName;
        }
        if (!!path && path[0] == ".") {
            path = path.substring(1);
        }
        var json = question && question.getConditionJson ? question.getConditionJson(operator, path) : null;
        if (!json)
            return null;
        if (!!json.choicesFromQuestion) {
            this.updateChoicesFromQuestion(json);
        }
        if (json.type == "expression") {
            json.type = "text";
        }
        if (operator == "anyof") {
            if (!ConditionEditor.isClassContains(json.type, ["checkbox"], [])) {
                json.type = "checkbox";
            }
        }
        return json;
    };
    ConditionEditor.prototype.updateChoicesFromQuestion = function (json) {
        var question = this.getConditionQuestion(json.choicesFromQuestion);
        if (!question)
            return;
        delete json.choicesFromQuestion;
        var questionJSON = question.toJSON();
        if (!!questionJSON.choices) {
            json.choices = questionJSON.choices;
        }
        if (!!questionJSON.choicesByUrl) {
            json.choicesByUrl = questionJSON.choicesByUrl;
        }
    };
    ConditionEditor.prototype.updateOperatorEnables = function (panel) {
        var questionName = panel.getQuestionByName("questionName");
        if (!questionName)
            return;
        var json = this.getQuestionConditionJson(questionName.value);
        var qType = !!json ? json.type : null;
        var questionOperator = panel.getQuestionByName("operator");
        if (!questionOperator)
            return;
        var choices = questionOperator.choices;
        var isCurrentOperatorEnabled = true;
        var op = questionOperator.value;
        for (var i = 0; i < choices.length; i++) {
            var isOperatorEnabled = ConditionEditor.isOperatorEnabled(qType, _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].operators[choices[i].value]);
            choices[i].setIsEnabled(isOperatorEnabled);
            choices[i].setIsVisible(isOperatorEnabled);
            if (choices[i].value == op) {
                isCurrentOperatorEnabled = choices[i].isEnabled;
            }
        }
        if (!isCurrentOperatorEnabled) {
            questionOperator.value = this.getFirstEnabledOperator(choices);
        }
    };
    ConditionEditor.prototype.updateQuestionsWidth = function (panel) {
        var valueQuestion = panel.getQuestionByName("questionValue");
        var conjunctionQuestion = panel.getQuestionByName("conjunction");
        var nameQuestion = panel.getQuestionByName("questionName");
        var operatorQuestion = panel.getQuestionByName("operator");
        var isValueSameLine = !!valueQuestion && !valueQuestion.startWithNewLine;
        var isFirst = !conjunctionQuestion || !conjunctionQuestion.isVisible;
        if (!isFirst) {
            conjunctionQuestion.minWidth = "50px";
            conjunctionQuestion.width = "15%";
        }
        nameQuestion.minWidth = "50px";
        nameQuestion.width = isFirst ? "40%" : "25%";
        operatorQuestion.minWidth = "50px";
        operatorQuestion.width = isValueSameLine ? "25%" : "60%";
        if (!!valueQuestion) {
            valueQuestion.minWidth = "50px";
            valueQuestion.width = isValueSameLine ? "35%" : "";
        }
    };
    Object.defineProperty(ConditionEditor.prototype, "defaultOperator", {
        get: function () { return _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.defaultOperators.default; },
        enumerable: false,
        configurable: true
    });
    ConditionEditor.prototype.getDefaultOperatorByQuestionName = function (questionName) {
        return this.getDefaultOperatorByQuestion(this.getConditionQuestion(questionName));
    };
    ConditionEditor.prototype.getDefaultOperatorByQuestion = function (question) {
        if (!!question) {
            var defOps = _creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].logic.defaultOperators;
            if (!!defOps[question.getType()])
                return defOps[question.getType()];
        }
        return this.defaultOperator;
    };
    ConditionEditor.prototype.getFirstEnabledOperator = function (choices) {
        for (var i = 0; i < choices.length; i++) {
            if (choices[i].isEnabled) {
                return choices[i].value;
            }
        }
        return this.defaultOperator;
    };
    ConditionEditor.prototype.onPanelAdded = function () {
        this.setItemToPanel(new ConditionEditorItem(), this.panel.panels[this.panel.panels.length - 1]);
    };
    ConditionEditor.prototype.onPanelValueChanged = function (panel, name) {
        if (name == "questionName") {
            this.context = this.getContextFromPanels();
            this.rebuildQuestionValue(panel);
            if (!this.isSettingPanelValues) {
                panel.getQuestionByName("operator").value = this.getDefaultOperatorByQuestionName(panel.getQuestionByName("questionName").value);
            }
        }
        if (name == "operator") {
            this.rebuildQuestionValueOnOperandChanging(panel);
        }
        this.updateOperatorEnables(panel);
        this.updateQuestionsWidth(panel);
    };
    ConditionEditor.prototype.onUpdateQuestionCssClasses = function (options) {
        var cssClasses = options.cssClasses;
        var question = options.question;
        cssClasses.answered = "svc-logic-question--answered";
        if (question.name === "conjunction") {
            question.allowRootStyle = false;
            cssClasses.control += " svc-logic-operator svc-logic-operator--conjunction ";
        }
        if (question.name === "questionName") {
            question.allowRootStyle = false;
            cssClasses.control += " svc-logic-operator svc-logic-operator--question";
            cssClasses.error.root = "svc-logic-operator__error";
            cssClasses.onError = "svc-logic-operator--error";
        }
        if (question.name === "operator") {
            question.allowRootStyle = false;
            cssClasses.control += " svc-logic-operator svc-logic-operator--operator";
        }
        if (question.name === "removeAction") {
            question.allowRootStyle = false;
            cssClasses.mainRoot += " svc-logic-condition-remove-question";
        }
        if (question.name === "questionValue" || question.isContentElement) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["assignDefaultV2Classes"])(cssClasses, question.getType());
            cssClasses.mainRoot += " svc-logic-question-value sd-element--with-frame";
            cssClasses.error.root = "svc-logic-operator__error";
        }
        if (question.name === "panel") {
            cssClasses.root += " svc-logic-paneldynamic";
            cssClasses.buttonAdd += " svc-logic-operator--operator";
            cssClasses.iconRemove = "svc-icon-remove";
            cssClasses.buttonRemove = "svc-logic-paneldynamic__button svc-logic-paneldynamic__remove-btn";
            cssClasses.buttonRemoveRight = "svc-logic-paneldynamic__remove-btn--right";
            cssClasses.buttonRemoveText = "svc-logic-paneldynamic__button-remove-text";
        }
    };
    ConditionEditor.prototype.onValueChanged = function (options) {
        if (options.question.name === "panel" && options.value.length > 0) {
            var maxLogicItems = this.options.maxLogicItemsInCondition > 0 ? this.options.maxLogicItemsInCondition : 100;
            options.question.maxPanelCount = options.value.length === 1 && !options.value[0].questionName ? 1 : maxLogicItems;
            this.panel.panels.forEach(function (panel) {
                panel.getQuestionByName("removeAction").visible = options.value.length !== 1;
            });
        }
        this.setTitle();
    };
    ConditionEditor.prototype.setTitle = function () {
        var text = this.isReady ? this.text : "";
        this.title = this.options.onConditionGetTitleCallback(text, text || _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.ruleIsNotSet"));
    };
    ConditionEditor.prototype.showTextEditor = function (expression) {
        this.panel.visible = false;
        this.textEditor.value = expression;
        this.textEditor.visible = true;
    };
    ConditionEditor.prototype.showBuilder = function (expression) {
        if (!this.isModal && !this.getCanShowBuilder(expression))
            return;
        this.textEditor.visible = false;
        this.processText(expression);
        this.panel.visible = true;
    };
    ConditionEditor.prototype.getCanShowBuilder = function (expression) {
        return ConditionEditor.canBuildExpression(expression);
    };
    return ConditionEditor;
}(_index__WEBPACK_IMPORTED_MODULE_5__["PropertyEditorSetupValue"]));



/***/ }),

/***/ "./src/property-grid/condition.ts":
/*!****************************************!*\
  !*** ./src/property-grid/condition.ts ***!
  \****************************************/
/*! exports provided: PropertyGridEditorExpression, PropertyGridEditorCondition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorExpression", function() { return PropertyGridEditorExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorCondition", function() { return PropertyGridEditorCondition; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _condition_survey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./condition-survey */ "./src/property-grid/condition-survey.ts");



var PropertyGridEditorExpression = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorExpression, _super);
    function PropertyGridEditorExpression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorExpression.prototype.fit = function (prop) {
        return prop.type == "expression";
    };
    PropertyGridEditorExpression.prototype.getJSON = function (obj, prop, options) {
        return { type: "comment", showOptionsCaption: false };
    };
    PropertyGridEditorExpression.prototype.clearPropertyValue = function (obj, prop, question, options) {
        question.clearValue();
    };
    return PropertyGridEditorExpression;
}(_index__WEBPACK_IMPORTED_MODULE_1__["PropertyGridEditor"]));

var PropertyGridEditorCondition = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorCondition, _super);
    function PropertyGridEditorCondition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorCondition.prototype.fit = function (prop) {
        return prop.type == "condition";
    };
    PropertyGridEditorCondition.prototype.getJSON = function (obj, prop, options) {
        return {
            type: "comment",
            showOptionsCaption: false,
            readOnly: options.allowEditExpressionsInTextEditor === false
        };
    };
    PropertyGridEditorCondition.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        return new _condition_survey__WEBPACK_IMPORTED_MODULE_2__["ConditionEditor"](obj.getSurvey(), obj, options, prop.name);
    };
    return PropertyGridEditorCondition;
}(PropertyGridEditorExpression));

_index__WEBPACK_IMPORTED_MODULE_1__["PropertyGridEditorCollection"].register(new PropertyGridEditorExpression());
_index__WEBPACK_IMPORTED_MODULE_1__["PropertyGridEditorCollection"].register(new PropertyGridEditorCondition());


/***/ }),

/***/ "./src/property-grid/description-parser.ts":
/*!*************************************************!*\
  !*** ./src/property-grid/description-parser.ts ***!
  \*************************************************/
/*! exports provided: DescriptionMardownParser, parsePropertyDescription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DescriptionMardownParser", function() { return DescriptionMardownParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsePropertyDescription", function() { return parsePropertyDescription; });
var DescriptionMardownParser = /** @class */ (function () {
    function DescriptionMardownParser() {
    }
    DescriptionMardownParser.prototype.parse = function (text) {
        if (!DescriptionMardownParser.boldRegEx) {
            DescriptionMardownParser.boldRegEx = /\*{2}(.*?)\*{2}/gm;
            DescriptionMardownParser.italicRegEx = /\_(.*?)\_/gm;
            DescriptionMardownParser.codeRegEx = /\`(.*?)\`/gm;
            DescriptionMardownParser.linkRegEx = /\[(.+)\]\(([^ ]+?)( "(.+)")?\)/;
        }
        var createSpan = function (text, str, className, chars) {
            if (!str)
                return text;
            var index = text.indexOf(str);
            if (checkIfLink(text, index))
                return text;
            var innerStr = str.substring(chars.length, str.length);
            innerStr = innerStr.substring(0, innerStr.length - chars.length);
            var newStr = "<span class='" + className + "'>" + innerStr + "</span>";
            return text.replace(str, newStr);
        };
        var checkIfLink = function (text, index) {
            var isBracket = false;
            for (var i = index - 1; i > 0; i--) {
                if (text[i] === " " || text[i] === "\n")
                    return false;
                if (text[i] === "]" && isBracket)
                    return true;
                isBracket = text[i] === "(";
            }
            return false;
        };
        var createLink = function (text, str, className, chars) {
            if (!str)
                return text;
            var index = str.indexOf("](");
            if (index < 0)
                return text;
            var contentStr = str.substring(1, index);
            var linkStr = str.substring(index + 2, str.length - 1);
            var newStr = "<a class='" + className + "' target='_blank' href='" + linkStr + "'>" + contentStr + "</a>";
            return text.replace(str, newStr);
        };
        text = this.replace(DescriptionMardownParser.boldRegEx, text, "spg-bold", "**", createSpan);
        text = this.replace(DescriptionMardownParser.italicRegEx, text, "spg-italic", "_", createSpan);
        text = this.replace(DescriptionMardownParser.codeRegEx, text, "spg-code", "`", createSpan);
        text = this.replace(DescriptionMardownParser.linkRegEx, text, "spg-link", "", createLink);
        text = this.addLineBreaks(text);
        return text;
    };
    DescriptionMardownParser.prototype.replace = function (re, text, className, chars, replaceFunc) {
        var rArray = text.match(re);
        if (!Array.isArray(rArray) || rArray.length == 0)
            return text;
        for (var i = 0; i < rArray.length; i++) {
            text = replaceFunc(text, rArray[i], className, chars);
        }
        return text;
    };
    DescriptionMardownParser.prototype.addLineBreaks = function (text) {
        var br = "\n";
        if (text.indexOf(br) < 0)
            return text;
        var strs = text.split(br);
        return strs.join("<br/>");
    };
    return DescriptionMardownParser;
}());

function parsePropertyDescription(text) {
    return new DescriptionMardownParser().parse(text);
}


/***/ }),

/***/ "./src/property-grid/fast-entry.ts":
/*!*****************************************!*\
  !*** ./src/property-grid/fast-entry.ts ***!
  \*****************************************/
/*! exports provided: FastEntryEditorBase, FastEntryEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FastEntryEditorBase", function() { return FastEntryEditorBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FastEntryEditor", function() { return FastEntryEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");




var FastEntryEditorBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(FastEntryEditorBase, _super);
    function FastEntryEditorBase(choices, options, className, names) {
        if (options === void 0) { options = null; }
        if (className === void 0) { className = "item"; }
        if (names === void 0) { names = []; }
        var _this = _super.call(this, options) || this;
        _this.choices = choices;
        _this.className = className;
        _this.names = names;
        _this.commentValue = (_this.editSurvey.getQuestionByName("question"));
        _this.setComment();
        _this.editSurvey.getQuestionByName("question").placeholder =
            _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"].getString("pe.fastEntryPlaceholder");
        _this.editSurvey.onValidateQuestion.add(function (sender, options) {
            var minChoiceCount = _this.options.minimumChoicesCount;
            if (minChoiceCount > 0) {
                var choicesCount = _this.getChoicesCount();
                if (minChoiceCount > choicesCount) {
                    options.error = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"]
                        .getString("pe.fastEntryChoicesMinCountError")["format"](minChoiceCount);
                }
                return;
            }
            var maxChoicesCount = _this.options.maximumChoicesCount;
            if (maxChoicesCount > 0) {
                var choicesCount = _this.getChoicesCount();
                if (maxChoicesCount < choicesCount) {
                    options.error = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"]
                        .getString("pe.fastEntryChoicesCountError")["format"](choicesCount, maxChoicesCount);
                }
                return;
            }
            if (!_this.isValueUnique)
                return;
            var uniqueValue = _this.getFirstUniqueValue();
            if (!!uniqueValue) {
                options.error = _editorLocalization__WEBPACK_IMPORTED_MODULE_3__["editorLocalization"]
                    .getString("pe.fastEntryNonUniqueError")["format"](uniqueValue);
            }
        });
        return _this;
    }
    FastEntryEditorBase.calcBeforeApplyItemsArray = function (dest, src, names) {
        if (!src || src.length == 0) {
            dest.splice(0, dest.length);
            return;
        }
        if (dest.length > src.length) {
            dest.splice(src.length, dest.length - src.length);
        }
        if (dest.length < src.length) {
            var insertedArray = [];
            for (var i = dest.length; i < src.length; i++) {
                insertedArray.push(src[i]);
            }
            dest.splice.apply(dest, [dest.length, 0].concat(insertedArray));
        }
    };
    FastEntryEditorBase.applyItemsArray = function (dest, src, names) {
        if (names === void 0) { names = []; }
        this.calcBeforeApplyItemsArray(dest, src, names);
        for (var i = 0; i < dest.length; i++) {
            names.forEach(function (name) {
                dest[i][name] = src[i][name];
            });
        }
    };
    FastEntryEditorBase.prototype.getSurveyJSON = function () {
        return {
            elements: [
                {
                    type: "comment",
                    name: "question",
                    titleLocation: "hidden",
                    rows: 12
                }
            ]
        };
    };
    FastEntryEditorBase.prototype.getSurveyCreationReason = function () {
        return "fast-entry";
    };
    FastEntryEditorBase.prototype.apply = function () {
        if (this.comment.isEmpty())
            return false;
        if (this.editSurvey.hasErrors(true))
            return false;
        var items = this.convertTextToItemValues(this.comment.value);
        FastEntryEditorBase.applyItemsArray(this.choices, items, this.names);
        return true;
    };
    FastEntryEditorBase.prototype.convertTextToItemValues = function (text) {
        var items = [];
        if (!text)
            return items;
        var texts = text.split("\n");
        for (var i = 0; i < texts.length; i++) {
            if (!texts[i])
                continue;
            var elements = texts[i].split(survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].Separator);
            var valueItem = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(this.className);
            this.names.forEach(function (name, i) {
                valueItem[name] = elements[i];
            });
            items.push(valueItem);
        }
        return items;
    };
    Object.defineProperty(FastEntryEditorBase.prototype, "comment", {
        get: function () {
            return this.commentValue;
        },
        enumerable: false,
        configurable: true
    });
    FastEntryEditorBase.prototype.getChoicesCount = function () {
        var texts = this.comment.value.split("\n");
        var res = 0;
        for (var i = 0; i < texts.length; i++) {
            var str = texts[i];
            if (!!str)
                res++;
        }
        return res;
    };
    Object.defineProperty(FastEntryEditorBase.prototype, "isValueUnique", {
        get: function () {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty("itemvalue", "value").isUnique === true;
        },
        enumerable: false,
        configurable: true
    });
    FastEntryEditorBase.prototype.getFirstUniqueValue = function () {
        var texts = this.comment.value.split("\n");
        var values = {};
        for (var i = 0; i < texts.length; i++) {
            var str = texts[i];
            if (!str)
                continue;
            var value = str.split(survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].Separator)[0];
            if (values[value])
                return value;
            values[value] = true;
        }
        return undefined;
    };
    FastEntryEditorBase.prototype.setComment = function () {
        var text = this.convertItemValuesToText();
        this.comment.value = text;
    };
    FastEntryEditorBase.prototype.collectNames = function (item, type, separatorCounter) {
        var text = "";
        this.names.forEach(function (name) {
            if (type === "itemvalues") {
                if (name == "value")
                    return;
                var str = name == "text" ? item.pureText : item[name];
            }
            else {
                var str = item[name];
            }
            if (!!str) {
                for (var i = 0; i < separatorCounter; i++) {
                    text += survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].Separator;
                }
                text += str;
                separatorCounter = 1;
            }
            else {
                separatorCounter++;
            }
        });
        return text;
    };
    FastEntryEditorBase.prototype.convertItemValuesToText = function () {
        var _this = this;
        var text = "";
        this.choices.forEach(function (item) {
            if (text)
                text += "\n";
            text += _this.collectNames(item, "", 0);
        });
        return text;
    };
    return FastEntryEditorBase;
}(_index__WEBPACK_IMPORTED_MODULE_2__["PropertyEditorSetupValue"]));

var FastEntryEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(FastEntryEditor, _super);
    function FastEntryEditor(choices, options, className, names) {
        if (options === void 0) { options = null; }
        if (className === void 0) { className = "itemvalue"; }
        if (names === void 0) { names = ["value", "text"]; }
        var _this = _super.call(this, choices, options, className, names) || this;
        _this.choices = choices;
        _this.className = className;
        _this.names = names;
        return _this;
    }
    FastEntryEditor.applyItemValueArray = function (dest, src, names) {
        if (names === void 0) { names = []; }
        this.calcBeforeApplyItemsArray(dest, src, names);
        for (var i = 0; i < dest.length; i++) {
            if (dest[i].value != src[i].value) {
                dest[i].value = src[i].value;
            }
            dest[i].text = src[i].hasText ? src[i].text : "";
            names.forEach(function (name) {
                if (name == "value" || name == "text")
                    return;
                dest[i][name] = src[i][name];
            });
        }
    };
    FastEntryEditor.prototype.apply = function () {
        //if (this.comment.isEmpty()) return false;
        if (this.editSurvey.hasErrors(true))
            return false;
        var items = this.convertTextToItemValues(this.comment.value);
        FastEntryEditor.applyItemValueArray(this.choices, items, this.names);
        return true;
    };
    FastEntryEditor.prototype.convertItemValuesToText = function () {
        var _this = this;
        var text = "";
        this.choices.forEach(function (item) {
            if (text)
                text += "\n";
            text += item.value;
            text += _this.collectNames(item, "itemvalues", 1);
        });
        return text;
    };
    return FastEntryEditor;
}(FastEntryEditorBase));



/***/ }),

/***/ "./src/property-grid/index.ts":
/*!************************************!*\
  !*** ./src/property-grid/index.ts ***!
  \************************************/
/*! exports provided: setSurveyJSONForPropertyGrid, PropertyEditorSetupValue, PropertyGridEditorCollection, PropertyGridTitleActionsCreator, PropertyJSONGenerator, PropertyGridModel, PropertyGridEditor, PropertyGridEditorBoolean, PropertyGridEditorStringBase, PropertyGridEditorString, PropertyGridLinkEditor, PropertyGridEditorColor, PropertyGridEditorNumber, PropertyGridEditorImageSize, PropertyGridEditorText, PropertyGridEditorHtml, PropertyGridEditorStringArray, PropertyGridEditorDropdown, PropertyGridEditorSet, PropertyGridEditorPage, PropertyGridEditorQuestion, PropertyGridEditorQuestionSelectBase, PropertyGridEditorQuestionCarryForward, PropertyGridEditorQuestionValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSurveyJSONForPropertyGrid", function() { return setSurveyJSONForPropertyGrid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyEditorSetupValue", function() { return PropertyEditorSetupValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorCollection", function() { return PropertyGridEditorCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTitleActionsCreator", function() { return PropertyGridTitleActionsCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyJSONGenerator", function() { return PropertyJSONGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridModel", function() { return PropertyGridModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditor", function() { return PropertyGridEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorBoolean", function() { return PropertyGridEditorBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorStringBase", function() { return PropertyGridEditorStringBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorString", function() { return PropertyGridEditorString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridLinkEditor", function() { return PropertyGridLinkEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorColor", function() { return PropertyGridEditorColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorNumber", function() { return PropertyGridEditorNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorImageSize", function() { return PropertyGridEditorImageSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorText", function() { return PropertyGridEditorText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorHtml", function() { return PropertyGridEditorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorStringArray", function() { return PropertyGridEditorStringArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorDropdown", function() { return PropertyGridEditorDropdown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorSet", function() { return PropertyGridEditorSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorPage", function() { return PropertyGridEditorPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestion", function() { return PropertyGridEditorQuestion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionSelectBase", function() { return PropertyGridEditorQuestionSelectBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionCarryForward", function() { return PropertyGridEditorQuestionCarryForward; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionValue", function() { return PropertyGridEditorQuestionValue; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _editable_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../editable-object */ "./src/editable-object.ts");
/* harmony import */ var _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../property-grid-theme/property-grid */ "./src/property-grid-theme/property-grid.ts");
/* harmony import */ var _question_editor_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../question-editor/properties */ "./src/question-editor/properties.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _question_editor_definition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../question-editor/definition */ "./src/question-editor/definition.ts");
/* harmony import */ var _description_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./description-parser */ "./src/property-grid/description-parser.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");













function propertyVisibleIf(params) {
    if (!this.question)
        return false;
    var obj = this.question.obj;
    var prop = this.question.property;
    if (!obj || !prop)
        return false;
    if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].hasOriginalProperty(obj, prop.name))
        return false;
    return prop.visibleIf(obj);
}
function propertyEnableIf(params) {
    if (!this.question || !this.question.obj || !this.question.property)
        return false;
    return !this.question.obj[this.question.property.overridingProperty];
}
survey_core__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.register("propertyVisibleIf", propertyVisibleIf);
survey_core__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.register("propertyEnableIf", propertyEnableIf);
function setSurveyJSONForPropertyGrid(json, updateOnTyping, titleLocationLeft) {
    if (updateOnTyping === void 0) { updateOnTyping = true; }
    if (titleLocationLeft === void 0) { titleLocationLeft = true; }
    json.showNavigationButtons = "none";
    json.showPageTitles = false;
    json.focusFirstQuestionAutomatic = false;
    json.showQuestionNumbers = "off";
    if (titleLocationLeft) {
        json.questionTitleLocation = "left";
    }
    json.showProgressBar = "off";
    if (updateOnTyping) {
        json.textUpdateMode = "onTyping";
    }
    json.requiredText = "";
}
var PropertyEditorSetupValue = /** @class */ (function () {
    function PropertyEditorSetupValue(options, doSetup) {
        if (options === void 0) { options = null; }
        if (doSetup === void 0) { doSetup = true; }
        this.options = options;
        if (!this.options) {
            this.options = new _creator_settings__WEBPACK_IMPORTED_MODULE_6__["EmptySurveyCreatorOptions"]();
        }
        if (doSetup) {
            this.setupSurvey();
        }
    }
    PropertyEditorSetupValue.prototype.setupSurvey = function () {
        this.editSurveyValue = this.createSurvey();
    };
    Object.defineProperty(PropertyEditorSetupValue.prototype, "editSurvey", {
        get: function () {
            return this.editSurveyValue;
        },
        enumerable: false,
        configurable: true
    });
    PropertyEditorSetupValue.prototype.hasErrors = function () {
        return this.editSurvey.hasErrors(true, true);
    };
    PropertyEditorSetupValue.prototype.createSurvey = function () {
        var json = this.getSurveyJSON();
        setSurveyJSONForPropertyGrid(json, true, false);
        return this.options.createSurvey(json, this.getSurveyCreationReason(), this);
    };
    PropertyEditorSetupValue.prototype.dispose = function () {
        if (!!this.editSurvey) {
            this.editSurvey.dispose();
        }
    };
    return PropertyEditorSetupValue;
}());

var PropertyGridEditorCollection = {
    editors: new Array(),
    fitHash: {},
    clearHash: function () {
        this.fitHash = {};
    },
    register: function (editor) {
        this.editors.push(editor);
    },
    getEditor: function (prop, context) {
        if (!prop)
            return null;
        if (!!context) {
            for (var i = this.editors.length - 1; i >= 0; i--) {
                var ed_1 = this.editors[i];
                if (ed_1.fit(prop, context))
                    return ed_1;
            }
        }
        var fitEd = this.fitHash[prop.id];
        if (!!fitEd)
            return fitEd;
        var ed = this.isEditorFit(prop);
        return !!ed ? ed : this.isEditorFit(prop, true);
    },
    isEditorFit: function (prop, asDefault) {
        if (asDefault === void 0) { asDefault = false; }
        for (var i = this.editors.length - 1; i >= 0; i--) {
            var ed = this.editors[i];
            if ((!asDefault && ed.fit(prop)) ||
                (asDefault && ed.isDefault && ed.isDefault())) {
                this.fitHash[prop.id] = ed;
                return ed;
            }
        }
        return null;
    },
    getJSON: function (obj, prop, options, context) {
        var res = this.getEditor(prop, context);
        return !!res ? res.getJSON(obj, prop, options) : null;
    },
    onCreated: function (obj, question, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onCreated) {
            res.onCreated(obj, question, prop, options);
        }
    },
    onSetup: function (obj, question, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onSetup) {
            res.onSetup(obj, question, prop, options);
        }
    },
    validateValue: function (obj, question, prop, value) {
        var res = this.getEditor(prop);
        if (!!res && !!res.validateValue) {
            return res.validateValue(obj, question, prop, value);
        }
        return "";
    },
    onAfterRenderQuestion: function (obj, prop, evtOptions) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onAfterRenderQuestion) {
            res.onAfterRenderQuestion(obj, prop, evtOptions);
        }
    },
    onMatrixCellCreated: function (obj, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onMatrixCellCreated) {
            res.onMatrixCellCreated(options.question.obj, options);
        }
    },
    onMatrixCellValueChanged: function (obj, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onMatrixCellValueChanged) {
            res.onMatrixCellValueChanged(obj, options);
        }
        var row = options.row;
        if (!!row) {
            var cellQuestion = row.getQuestionByName(options.columnName);
            if (!!cellQuestion) {
                row.runCondition({}, { question: cellQuestion });
            }
        }
    },
    onMatrixAllowRemoveRow: function (obj, prop, row) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onMatrixAllowRemoveRow) {
            return res.onMatrixAllowRemoveRow(obj, row);
        }
        return true;
    },
    onGetMatrixRowAction: function (obj, prop, options, setObjFunc) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onGetMatrixRowAction) {
            res.onGetMatrixRowAction(obj, options, setObjFunc);
        }
    },
    onUpdateQuestionCssClasses: function (obj, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onUpdateQuestionCssClasses) {
            res.onUpdateQuestionCssClasses(obj, options);
        }
    },
    onGetQuestionTitleActions: function (obj, prop, options) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onGetQuestionTitleActions) {
            res.onGetQuestionTitleActions(obj, options);
        }
    },
    onValueChanged: function (obj, prop, question) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onValueChanged) {
            res.onValueChanged(obj, prop, question);
        }
    },
    onMasterValueChanged: function (obj, prop, question) {
        var res = this.getEditor(prop);
        if (!!res && !!res.onMasterValueChanged) {
            res.onMasterValueChanged(obj, prop, question);
        }
    },
};
var PropertyGridTitleActionsCreator = /** @class */ (function () {
    function PropertyGridTitleActionsCreator(obj, options) {
        this.obj = obj;
        this.options = options;
    }
    PropertyGridTitleActionsCreator.prototype.onGetQuestionTitleActions = function (options) {
        var question = options.question;
        var property = question.property;
        var editor = PropertyGridEditorCollection.getEditor(property);
        if (!editor)
            return;
        var actions = [];
        var enabled = !question.isReadOnly;
        var hasClear = !!editor.clearPropertyValue && (!editor.canClearPropertyValue || editor.canClearPropertyValue(this.obj, property, question, this.options));
        if (hasClear) {
            actions.push(this.createClearValueAction(editor, property, question, enabled));
        }
        if (question.allowBatchEdit !== false) {
            if (!!editor.createPropertyEditorSetup) {
                if (enabled) {
                    enabled =
                        !editor.isPropertyEditorSetupEnabled ||
                            editor.isPropertyEditorSetupEnabled(this.obj, property, options.question, this.options);
                }
                actions.push(this.createEditorSetupAction(editor, property, question, enabled));
            }
        }
        var helpAction = this.createPropertyHelpAction(question);
        if (!!helpAction) {
            actions.push(helpAction);
        }
        if (actions.length > 0) {
            options.titleActions = actions;
        }
    };
    PropertyGridTitleActionsCreator.prototype.createClearValueAction = function (editor, property, question, enabled) {
        var _this = this;
        return {
            id: "property-grid-clear",
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.clear"),
            showTitle: false,
            iconName: "icon-clear",
            innerCss: "spg-action-button--danger",
            enabled: enabled,
            visible: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                var propertyValue = question.obj[property.name];
                return Array.isArray(propertyValue) ? propertyValue.length > 0 : !!propertyValue;
            }),
            action: function () {
                editor.clearPropertyValue(question.obj, property, question, _this.options);
            }
        };
    };
    PropertyGridTitleActionsCreator.prototype.showModalPropertyEditor = function (editor, property, question) {
        return editor.showModalPropertyEditor(editor, property, question, this.options);
    };
    PropertyGridTitleActionsCreator.prototype.createEditorSetupAction = function (editor, property, question, enabled) {
        var _this = this;
        var setupAction = {
            id: "property-grid-setup",
            iconName: property.isArray ? "icon-fast-entry" : "icon-wizard",
            enabled: enabled,
            title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("pe.edit"),
            showTitle: false,
            action: function () {
                return _this.showModalPropertyEditor(editor, property, question);
            }
        };
        return setupAction;
    };
    PropertyGridTitleActionsCreator.prototype.createPropertyHelpAction = function (question) {
        var _this = this;
        if (!question.description)
            return null;
        var action = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            title: "",
            tooltip: question.description,
            id: "property-grid-help",
            iconName: this.getHelpActionIconName(question),
            showTitle: false,
            action: function () {
                question.descriptionLocation =
                    question.descriptionLocation != "hidden" ? "hidden" : "underTitle";
                action.iconName = _this.getHelpActionIconName(question);
            }
        });
        return action;
    };
    PropertyGridTitleActionsCreator.prototype.getHelpActionIconName = function (question) {
        return question.descriptionLocation != "hidden" ? "icon-description-hide" : "icon-description";
    };
    return PropertyGridTitleActionsCreator;
}());

var PropertyJSONGenerator = /** @class */ (function () {
    function PropertyJSONGenerator(obj, options, parentObj, parentProperty, properties) {
        if (options === void 0) { options = null; }
        if (parentObj === void 0) { parentObj = null; }
        if (parentProperty === void 0) { parentProperty = null; }
        if (properties === void 0) { properties = null; }
        this.obj = obj;
        this.options = options;
        this.parentObj = parentObj;
        this.parentProperty = parentProperty;
        this.properties = properties;
    }
    PropertyJSONGenerator.isPropertyReadOnly = function (prop, options, obj, parentObj, parentProperty) {
        var res = prop.readOnly;
        if (!!options && !!obj) {
            res = options.onIsPropertyReadOnlyCallback(obj, prop, res, parentObj, parentProperty);
        }
        return res;
    };
    PropertyJSONGenerator.getClassNameProperty = function (obj) {
        if (!!obj && !!obj["getClassNameProperty"])
            return obj["getClassNameProperty"]();
        return undefined;
    };
    PropertyJSONGenerator.prototype.toJSON = function (isNested, context) {
        if (isNested === void 0) { isNested = false; }
        if (context === void 0) { context = undefined; }
        return this.createJSON(isNested, context);
    };
    PropertyJSONGenerator.prototype.createColumnsJSON = function (className, names) {
        var res = [];
        for (var i = 0; i < names.length; i++) {
            var columnJSON = this.getColumnPropertyJSON(className, names[i]);
            if (!!columnJSON) {
                res.push(columnJSON);
            }
        }
        return res;
    };
    PropertyJSONGenerator.prototype.setupObjPanel = function (panel, isNestedObj, context) {
        if (isNestedObj === void 0) { isNestedObj = false; }
        if (context === void 0) { context = undefined; }
        panel.fromJSON(this.toJSON(isNestedObj, context));
        this.onQuestionsCreated(panel);
    };
    PropertyJSONGenerator.prototype.onQuestionsCreated = function (panel) {
        var properties = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getPropertiesByObj(this.obj);
        var props = {};
        for (var i = 0; i < properties.length; i++) {
            props[properties[i].name] = properties[i];
        }
        var questions = panel.questions;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            var prop = props[q.name];
            q.property = prop;
            q.obj = this.obj;
            q.options = this.options;
            var eventVisibility = this.getVisibilityOnEvent(prop);
            var eventReadOnly = this.isPropertyReadOnly(prop);
            q.readOnly = q.readOnly || eventReadOnly;
            q.visible = q.visible && eventVisibility;
            if (!!prop.visibleIf && eventVisibility) {
                q.visibleIf = "propertyVisibleIf() = true";
            }
            if (!!prop.overridingProperty && q.visible) {
                q.onUpdateCssClassesCallback = function (css) {
                    css.questionWrapper = "spg-boolean-wrapper--overriding";
                };
                if (!eventReadOnly) {
                    q.enableIf = "propertyEnableIf() = true";
                }
                var overridingQuestion = this.createOverridingQuestion(panel, q, prop.overridingProperty);
                q.parent.addElement(overridingQuestion, q.parent.elements.indexOf(q) + 1);
            }
            q.descriptionLocation = "hidden";
            var helpText = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getPropertyHelpInEditor(this.obj.getType(), prop.name, prop.type);
            if (!!helpText) {
                q.description = helpText;
            }
            PropertyGridEditorCollection.onCreated(this.obj, q, prop, this.options);
            this.options.onPropertyEditorCreatedCallback(this.obj, prop, q);
        }
    };
    PropertyJSONGenerator.prototype.getVisibilityOnEvent = function (prop, showMode) {
        if (showMode === void 0) { showMode = ""; }
        return this.options.onCanShowPropertyCallback(this.obj, prop, showMode, this.parentObj, this.parentProperty);
    };
    PropertyJSONGenerator.prototype.isPropertyReadOnly = function (prop) {
        return PropertyJSONGenerator.isPropertyReadOnly(prop, this.options, this.obj, this.parentObj, this.parentProperty);
    };
    PropertyJSONGenerator.prototype.createOverridingQuestion = function (panel, question, overridingProp) {
        var linkValue = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("linkvalue");
        linkValue.name = question.name + "_" + "overridingProperty";
        linkValue.startWithNewLine = false;
        linkValue.property = question.property;
        linkValue.obj = question.obj;
        linkValue.visibleIf = "propertyEnableIf() = false";
        var overridingQuestion = panel.getQuestionByName(overridingProp);
        var text = !!overridingQuestion ? overridingQuestion.title : overridingProp;
        linkValue.linkValueText = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.overridingPropertyPrefix") + text;
        linkValue.titleLocation = "hidden";
        linkValue.onUpdateCssClassesCallback = function (css) {
            css.questionWrapper = "spg-link-wrapper--overriding";
        };
        if (!!overridingQuestion) {
            linkValue.linkClickCallback = function () {
                //Focus and aways scroll into view
                overridingQuestion.focus(false, true);
            };
        }
        return linkValue;
    };
    PropertyJSONGenerator.prototype.getClasPropName = function () {
        if (!!this.parentObj && !!this.parentProperty)
            return this.parentProperty.name;
        var propName = PropertyJSONGenerator.getClassNameProperty(this.obj);
        if (!!propName && this.obj[propName])
            return this.obj[propName];
        return undefined;
    };
    PropertyJSONGenerator.prototype.createJSON = function (isNestedObj, context) {
        if (context === void 0) { context = undefined; }
        var className = undefined;
        var propName = this.getClasPropName();
        if (!!propName) {
            className = this.obj.getType();
            if (className === "itemvalue")
                className += "[]";
            className += "@" + propName;
        }
        var properties = new _question_editor_properties__WEBPACK_IMPORTED_MODULE_5__["SurveyQuestionProperties"](this.obj, null, className, undefined, this.parentObj, this.parentProperty);
        var tabs = properties.getTabs();
        var panels = {};
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].visible === false)
                continue;
            panels[tabs[i].name] = this.createPanelProps(tabs[i], context);
        }
        var json = {
            elements: []
        };
        for (var key in panels) {
            if (key == _creator_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].propertyGrid.generalTabName && isNestedObj) {
                var els = panels[key].elements;
                for (var i = 0; i < els.length; i++) {
                    json.elements.push(els[i]);
                }
            }
            else {
                json.elements.push(panels[key]);
            }
        }
        return json;
    };
    PropertyJSONGenerator.prototype.createPanelProps = function (tab, context) {
        var panel = this.createPanelJSON(tab.name, tab.title);
        for (var i = 0; i < tab.properties.length; i++) {
            var propDef = tab.properties[i];
            var propJSON = this.createQuestionJSON(propDef.property, propDef.title, false, context);
            if (propDef.onSameLine) {
                propJSON.startWithNewLine = false;
                this.updateQuestionJSONOnSameLine(propJSON);
                if (panel.elements.length > 0) {
                    this.updateQuestionJSONOnSameLine(panel.elements[panel.elements.length - 1]);
                }
            }
            if (!propJSON)
                continue;
            panel.elements.push(propJSON);
        }
        return panel;
    };
    PropertyJSONGenerator.prototype.updateQuestionJSONOnSameLine = function (json) {
        json.titleLocation = "left";
        json.minWidth = "50px";
    };
    PropertyJSONGenerator.prototype.createPanelJSON = function (category, title) {
        return {
            type: "panel",
            name: category,
            title: this.getPanelTitle(category, title),
            state: "collapsed",
            elements: []
        };
    };
    PropertyJSONGenerator.prototype.createQuestionJSON = function (prop, title, isColumn, context) {
        var _a;
        if (isColumn === void 0) { isColumn = false; }
        var isVisible = this.isPropertyVisible(prop, isColumn ? "list" : "");
        if (!isVisible && isColumn)
            return null;
        var json = PropertyGridEditorCollection.getJSON(this.obj, prop, this.options, context);
        if (!json)
            return null;
        json.name = prop.name;
        json.visible = prop.visible;
        json.isReadOnly = prop.readOnly;
        json.isRequired = prop.isRequired;
        json.requiredErrorText = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyIsEmpty");
        json.title = this.getQuestionTitle(prop, title);
        if (["page", "panelbase"].indexOf(prop.className) && json.name === "name") {
            json.isRequired = true;
            json.requiredErrorText = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyIsEmpty");
        }
        var propDescr = (_a = _question_editor_definition__WEBPACK_IMPORTED_MODULE_8__["SurveyQuestionEditorDefinition"].definition[this.obj.getType()]) === null || _a === void 0 ? void 0 : _a.properties.filter(function (property) { return property["name"] === prop.name; })[0];
        if (typeof propDescr === "object" && propDescr.placeholder) {
            json.placeholder = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe." + propDescr.placeholder);
        }
        return json;
    };
    PropertyJSONGenerator.prototype.getColumnPropertyJSON = function (className, propName) {
        if (!className)
            return null;
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(className, propName);
        if (!prop)
            return null;
        var json = this.createQuestionJSON(prop, "", true, undefined);
        if (!json)
            return null;
        json.name = prop.name;
        json.title = this.getQuestionTitle(prop, "");
        if (prop.isUnique) {
            json.isUnique = prop.isUnique;
        }
        if (!!json.type) {
            json.cellType = json.type;
            delete json.type;
        }
        if (json.cellType === "buttongroup") {
            json.cellType = "dropdown";
        }
        if (json.cellType === "fileedit") {
            json.cellType = "text";
        }
        if (!!prop.visibleIf) {
            json.visibleIf = "propertyVisibleIf() = true";
        }
        if (!!json.isReadOnly) {
            json.readOnly = json.isReadOnly;
            delete json.isReadOnly;
        }
        return json;
    };
    PropertyJSONGenerator.prototype.isPropertyVisible = function (prop, showMode) {
        if (!prop.visible)
            return false;
        return !showMode || !prop.showMode || showMode == prop.showMode;
    };
    PropertyJSONGenerator.prototype.getPanelTitle = function (name, title) {
        if (!!title)
            return title;
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.tabs." + name);
    };
    PropertyJSONGenerator.prototype.getQuestionTitle = function (prop, title) {
        if (!!prop.displayName)
            return prop.displayName;
        if (!!title && title !== prop.name)
            return title;
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getPropertyNameInEditor(this.obj.getType(), prop.name);
    };
    return PropertyJSONGenerator;
}());

var PropertyGridModel = /** @class */ (function () {
    function PropertyGridModel(obj, options) {
        if (obj === void 0) { obj = null; }
        if (options === void 0) { options = new _creator_settings__WEBPACK_IMPORTED_MODULE_6__["EmptySurveyCreatorOptions"](); }
        this.isCellCreating = false;
        this.options = options;
        if (this.options.enableLinkFileEditor) {
            PropertyGridEditorCollection.register(new PropertyGridLinkEditor());
        }
        this.obj = obj;
    }
    PropertyGridModel.prototype.refresh = function () {
        this.setObj(this.objValue);
    };
    Object.defineProperty(PropertyGridModel.prototype, "obj", {
        get: function () {
            return this.objValue;
        },
        set: function (value) {
            if (this.objValue === value)
                return;
            this.setObj(value);
        },
        enumerable: false,
        configurable: true
    });
    PropertyGridModel.prototype.selectProperty = function (propertyName, focus) {
        if (focus === void 0) { focus = true; }
        if (!this.survey)
            return;
        var question = this.survey.getQuestionByName(propertyName);
        if (!question)
            return;
        var panels = this.survey.getAllPanels();
        for (var i = 0; i < panels.length; i++) {
            var panel = panels[i];
            if (panel === question.parent) {
                panel.expand();
            }
            else {
                panel.collapse();
            }
        }
        if (focus) {
            question.focus();
        }
    };
    PropertyGridModel.prototype.setObjFromAction = function (value, propertyName) {
        if (this.changedFromActionCallback) {
            this.changedFromActionCallback(value, propertyName);
        }
        else {
            this.setObj(value);
        }
    };
    PropertyGridModel.prototype.setObj = function (value) {
        var _this = this;
        this.objValue = value;
        this.classNameProperty = !!this.obj
            ? PropertyJSONGenerator.getClassNameProperty(this.obj)
            : "";
        this.classNameValue = !!this.classNameProperty
            ? this.obj[this.classNameProperty]
            : undefined;
        this.titleActionsCreator = !!this.obj
            ? new PropertyGridTitleActionsCreator(this.obj, this.options)
            : undefined;
        var json = this.getSurveyJSON();
        if (this.options.readOnly) {
            json.mode = "display";
        }
        if (!!this.surveyValue) {
            this.surveyValue.onValidateQuestion.clear();
            this.surveyValue.onValueChanging.clear();
            this.surveyValue.onValueChanged.clear();
            this.surveyValue.onMatrixCellValueChanging.clear();
            this.surveyValue.onMatrixCellValidate.clear();
            this.surveyValue.onMatrixCellValueChanged.clear();
            this.surveyValue.editingObj = undefined;
            this.surveyValue.data = {};
            this.surveyValue.dispose();
        }
        this.surveyValue = this.createSurvey(json);
        this.surveyValue.questionErrorLocation = "bottom";
        this.surveyValue.getCss().list = {};
        this.surveyValue.css = _property_grid_theme_property_grid__WEBPACK_IMPORTED_MODULE_4__["propertyGridCss"];
        var page = this.surveyValue.createNewPage("p1");
        if (!this.obj)
            return;
        new PropertyJSONGenerator(this.obj, this.options).setupObjPanel(page, false);
        this.survey.enterKeyAction = "loseFocus";
        this.survey.addPage(page);
        this.survey.getAllQuestions().forEach(function (q) {
            PropertyGridEditorCollection.onSetup(_this.obj, q, q.property, _this.options);
        });
        this.survey.checkErrorsMode = "onValueChanging";
        this.survey.onValueChanged.add(function (sender, options) {
            _this.onValueChanged(options);
        });
        this.survey.onValueChanging.add(function (sender, options) {
            _this.onValueChanging(options);
        });
        this.survey.onValidateQuestion.add(function (sender, options) {
            _this.onValidateQuestion(options);
        });
        this.survey.onGetQuestionTitleActions.add(function (sender, options) {
            _this.titleActionsCreator.onGetQuestionTitleActions(options);
            _this.onGetQuestionTitleActions(options);
            var q = options.question;
            _this.options.onPropertyEditorUpdateTitleActionsCallback(_this.obj, q.property, q, options.titleActions);
        });
        this.survey.onGetPanelTitleActions.add(function (sender, options) {
            options.titleActions.splice(0, options.titleActions.length);
        });
        this.survey.onMatrixCellCreated.add(function (sender, options) {
            _this.onMatrixCellCreated(options);
        });
        this.survey.onMatrixCellValueChanging.add(function (sender, options) {
            _this.onMatrixCellValueChanging(options);
        });
        this.survey.onMatrixCellValidate.add(function (sender, options) {
            _this.onMatrixCellValidate(options);
        });
        this.survey.onMatrixCellValueChanged.add(function (sender, options) {
            _this.onMatrixCellValueChanged(options);
        });
        this.survey.onMatrixAllowRemoveRow.add(function (sender, options) {
            options.allow = _this.getMatrixAllowRemoveRow(options.question, options.row);
        });
        this.survey.onMatrixRowRemoving.add(function (sender, options) {
            options.allow = _this.getMatrixOnRowRemoving(options.question, options.row);
        });
        this.survey.onMatrixRowAdded.add(function (sender, options) {
            _this.onMatrixRowAdded(options);
        });
        this.survey.onGetMatrixRowActions.add(function (sender, options) {
            _this.onGetMatrixRowAction(options);
        });
        this.survey.onUpdateQuestionCssClasses.add(function (sender, options) {
            _this.onUpdateQuestionCssClasses(options);
        });
        this.survey.onAfterRenderQuestion.add(function (sender, options) {
            _this.onAfterRenderQuestion(options);
        });
        this.survey.onTextMarkdown.add(function (sender, options) {
            if (options.name === "description") {
                options.html = Object(_description_parser__WEBPACK_IMPORTED_MODULE_9__["parsePropertyDescription"])(options.text);
            }
        });
        this.survey.editingObj = this.obj;
        if (this.objValueChangedCallback) {
            this.objValueChangedCallback();
        }
        this.updateDependedPropertiesEditors();
        this.survey.onFocusInPanel.add(function (sender, options) {
            if (_this.currentlySelectedPanel !== options.panel) {
                var questionToFocus = options.panel.getFirstQuestionToFocus(false, true);
                _this.currentlySelectedProperty = !!questionToFocus ? questionToFocus.name : "";
                _this.currentlySelectedPanel = options.panel;
            }
        });
        this.survey.onFocusInQuestion.add(function (sender, options) {
            _this.currentlySelectedProperty = options.question.name;
            _this.currentlySelectedPanel = options.question.parent;
        });
        this.survey.onUploadFiles.add(function (_, options) {
            var callback = function (status, data) { return options.callback(status, [{ content: data, file: options.files[0] }]); };
            var question = options.question.obj.getType() == "survey" ? undefined : (options.question.obj.getType() == "imageitemvalue" ? options.question.obj.locOwner : options.question.obj);
            _this.options.uploadFiles(options.files, question, callback);
        });
        this.survey.getAllQuestions().map(function (q) { return q.allowRootStyle = false; });
        this.survey.onQuestionCreated.add(function (_, opt) {
            opt.question.allowRootStyle = false;
        });
        this.options.onPropertyGridSurveyCreatedCallback(this.obj, this.survey);
    };
    Object.defineProperty(PropertyGridModel.prototype, "options", {
        get: function () {
            return this.optionsValue;
        },
        set: function (val) {
            this.optionsValue = !!val ? val : new _creator_settings__WEBPACK_IMPORTED_MODULE_6__["EmptySurveyCreatorOptions"]();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyGridModel.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    PropertyGridModel.prototype.validate = function () {
        if (!this.survey)
            return;
        return !this.survey.hasErrors(true, true);
    };
    PropertyGridModel.prototype.collapseCategory = function (name) {
        var panel = this.survey.getPanelByName(name);
        if (!!panel) {
            panel.collapse();
        }
    };
    PropertyGridModel.prototype.expandCategory = function (name) {
        var panel = this.survey.getPanelByName(name);
        if (!!panel) {
            panel.expand();
        }
    };
    PropertyGridModel.prototype.collapseAllCategories = function () {
        var panels = this.survey.getAllPanels();
        for (var i = 0; i < panels.length; i++) {
            panels[i].collapse();
        }
    };
    PropertyGridModel.prototype.expandAllCategories = function () {
        var panels = this.survey.getAllPanels();
        for (var i = 0; i < panels.length; i++) {
            panels[i].expand();
        }
    };
    PropertyGridModel.prototype.createSurvey = function (json) {
        return this.options.createSurvey(json, "property-grid", this);
    };
    PropertyGridModel.prototype.getSurveyJSON = function () {
        var res = {};
        setSurveyJSONForPropertyGrid(res, true, false);
        return res;
    };
    PropertyGridModel.prototype.validateQuestionValue = function (obj, question, prop, val) {
        if (question.isRequired && (survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(val) || question["valueChangingEmpty"]))
            return this.getErrorTextOnValidate(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyIsEmpty"), prop.name, obj, val);
        if (this.isPropNameInValid(obj, prop, val) || question["nameHasError"])
            return this.getErrorTextOnValidate(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyNameIsIncorrect"), prop.name, obj, val);
        var editorError = PropertyGridEditorCollection.validateValue(obj, question, prop, val);
        return this.getErrorTextOnValidate(editorError, prop.name, obj, val);
    };
    PropertyGridModel.prototype.getErrorTextOnValidate = function (defaultError, propName, obj, val) {
        var customError = this.options.onGetErrorTextOnValidationCallback(propName, obj, val);
        return !!customError ? customError : defaultError;
    };
    PropertyGridModel.prototype.onValidateQuestion = function (options) {
        var q = options.question;
        if (!q || !q.property)
            return;
        options.error = this.validateQuestionValue(this.obj, q, q.property, options.value);
    };
    PropertyGridModel.prototype.onValueChanging = function (options) {
        var q = options.question;
        if (!q || !q.property || survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isTwoValueEquals(options.value, options.oldValue, false, false, false))
            return;
        var changingOptions = {
            obj: this.obj,
            propertyName: q.property.name,
            value: options.oldValue,
            newValue: options.value,
            doValidation: false
        };
        this.options.onValueChangingCallback(changingOptions);
        options.value = changingOptions.newValue;
        if (q.property.isRequired) {
            var isEmpty = survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(options.value);
            q["valueChangingEmpty"] = isEmpty;
        }
        var isPropertyNameInValid = this.isPropNameInValid(this.obj, q.property, options.value);
        q["nameHasError"] = isPropertyNameInValid;
    };
    PropertyGridModel.prototype.isPropNameInValid = function (obj, prop, val) {
        if (obj["isQuestion"] && prop.name === "name" && !!val) {
            val = val.toLowerCase();
            return ["item", "choice", "row", "panel"].indexOf(val) > -1;
        }
        return false;
    };
    PropertyGridModel.prototype.onValueChanged = function (options) {
        var _this = this;
        var q = options.question;
        if (!q || !q.property)
            return;
        q["valueChangingEmpty"] = false;
        q["nameHasError"] = false;
        this.changeDependedProperties(q, function (name) { return _this.survey.getQuestionByName(name); }, function (name) { return _this.survey.getValue(name); });
        PropertyGridEditorCollection.onValueChanged(this.obj, q.property, q);
        if (!!this.classNameProperty &&
            options.name === this.classNameProperty &&
            this.classNameValue !== options.value) {
            this.setObj(this.obj);
            if (!!this.survey) {
                var question = this.survey.getQuestionByName(options.name);
                if (!!question) {
                    question.focus();
                }
            }
        }
    };
    PropertyGridModel.prototype.changeDependedProperties = function (question, dependedsQuetion, dependedsValue) {
        var prop = question.property;
        if (!prop)
            return;
        var properties = prop.getDependedProperties();
        if (!properties)
            return;
        for (var i = 0; i < properties.length; i++) {
            var name = properties[i];
            var q = dependedsQuetion(name);
            if (!q)
                continue;
            this.updateDependedPropertiesEditor(q);
            var objValue = dependedsValue(name);
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isTwoValueEquals(q.value, objValue, false, false, false)) {
                q.value = objValue;
            }
            PropertyGridEditorCollection.onMasterValueChanged(question.obj, q.property, q);
        }
    };
    PropertyGridModel.prototype.updateDependedPropertiesEditor = function (editor) {
        var obj = editor.obj;
        if (!obj)
            return;
        var property = editor.property;
        if (!!property && property.onPropertyEditorUpdate) {
            property.onPropertyEditorUpdate(obj, editor);
        }
    };
    PropertyGridModel.prototype.updateDependedPropertiesEditors = function () {
        var questions = this.survey.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            this.updateDependedPropertiesEditor(questions[i]);
        }
    };
    PropertyGridModel.prototype.onAfterRenderQuestion = function (options) {
        PropertyGridEditorCollection.onAfterRenderQuestion(this.obj, options.question.property, options);
    };
    PropertyGridModel.prototype.onMatrixCellCreated = function (options) {
        this.isCellCreating = true;
        PropertyGridEditorCollection.onMatrixCellCreated(this.obj, options.question.property, options);
        this.isCellCreating = false;
        var obj = options.row.editingObj;
        if (!obj)
            return;
        var prop = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(obj.getType(), options.columnName);
        if (!prop)
            return;
        var allowEditRow = this.getMatrixAllowEditRow(options.question, options.row);
        options.cellQuestion.readOnly = !allowEditRow || PropertyJSONGenerator.isPropertyReadOnly(prop, this.options, obj, this.obj, options.question.property);
    };
    PropertyGridModel.prototype.onMatrixCellValueChanging = function (options) {
        if (this.isCellCreating)
            return;
        var changingOptions = {
            obj: options.row.editingObj,
            propertyName: options.columnName,
            value: options.oldValue,
            newValue: options.value,
            doValidation: false
        };
        this.options.onValueChangingCallback(changingOptions);
        options.value = changingOptions.newValue;
    };
    PropertyGridModel.prototype.onMatrixCellValidate = function (options) {
        if (this.isCellCreating)
            return;
        var q = options.row.getQuestionByColumnName(options.columnName);
        if (!q || !q.property)
            return;
        options.error = this.validateQuestionValue(options.row.editingObj, q, q.property, options.value);
    };
    PropertyGridModel.prototype.onGetMatrixRowAction = function (options) {
        var _this = this;
        PropertyGridEditorCollection.onGetMatrixRowAction(this.obj, options.question.property, options, function (obj) {
            _this.setObjFromAction(obj, options.question.name);
        });
    };
    PropertyGridModel.prototype.onUpdateQuestionCssClasses = function (options) {
        PropertyGridEditorCollection.onUpdateQuestionCssClasses(this.obj, options.question.property, options);
    };
    PropertyGridModel.prototype.onGetQuestionTitleActions = function (options) {
        PropertyGridEditorCollection.onGetQuestionTitleActions(this.obj, options.question.property, options);
    };
    PropertyGridModel.prototype.onMatrixCellValueChanged = function (options) {
        if (this.isCellCreating)
            return;
        var cellQuestion = options.row.getQuestionByName(options.columnName);
        if (!!cellQuestion) {
            this.changeDependedProperties(cellQuestion, function (name) { return options.row.getQuestionByName(name); }, function (name) { return options.row.getValue(name); });
        }
        PropertyGridEditorCollection.onMatrixCellValueChanged(this.obj, options.question.property, options);
    };
    PropertyGridModel.prototype.getMatrixAllowRemoveRow = function (question, row) {
        if (row.allowDeleteRow === undefined) {
            this.calculateMatrixAllowOperations(question, row);
        }
        return row.allowDeleteRow;
    };
    PropertyGridModel.prototype.getMatrixOnRowRemoving = function (question, row) {
        return this.options.onCollectionItemDeletingCallback(this.obj, question.property, question.value, row.editingObj);
    };
    PropertyGridModel.prototype.getMatrixAllowEditRow = function (question, row) {
        if (question.readOnly)
            return false;
        if (row.allowEditRow === undefined) {
            this.calculateMatrixAllowOperations(question, row);
        }
        return row.allowEditRow;
    };
    PropertyGridModel.prototype.calculateMatrixAllowOperations = function (question, row) {
        var rowOptions = { allowDelete: this.onMatrixAllowRemoveRow(question, row), allowEdit: true, allowAdd: undefined };
        this.options.onCollectionItemAllowingCallback(this.obj, question.property, question.value, row.editingObj, rowOptions);
        row.allowDeleteRow = rowOptions.allowDelete;
        row.allowEditRow = rowOptions.allowEdit;
    };
    PropertyGridModel.prototype.onMatrixAllowRemoveRow = function (question, row) {
        var res = PropertyGridEditorCollection.onMatrixAllowRemoveRow(this.obj, question.property, row);
        return this.options.onCanDeleteItemCallback(this.obj, row.editingObj, res);
    };
    PropertyGridModel.prototype.onMatrixRowAdded = function (options) {
        var item = options.row.editingObj;
        if (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(item.getType(), "itemvalue")) {
            this.options.onItemValueAddedCallback(this.obj, options.question.property.name, options.row.editingObj, options.question.value);
        }
        if (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(item.getType(), "matrixdropdowncolumn")) {
            this.options.onMatrixDropdownColumnAddedCallback(this.obj, options.row.editingObj, options.question.value);
        }
    };
    return PropertyGridModel;
}());

var PropertyGridEditor = /** @class */ (function () {
    function PropertyGridEditor() {
    }
    PropertyGridEditor.prototype.showModalPropertyEditor = function (editor, property, question, options, onClose) {
        var _this = this;
        var obj = question.obj;
        var surveyPropertyEditor = editor.createPropertyEditorSetup(obj, property, question, options);
        if (!surveyPropertyEditor)
            return null;
        if (property.type !== "condition") {
            surveyPropertyEditor.editSurvey.css = survey_core__WEBPACK_IMPORTED_MODULE_1__["defaultV2Css"];
        }
        if (question.isReadOnly) {
            surveyPropertyEditor.editSurvey.mode = "display";
        }
        if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog)
            return surveyPropertyEditor;
        var prevCurrentLocale = survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].currentLocale;
        var locale = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].currentLocale;
        survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].currentLocale = locale;
        var popupModel = survey_core__WEBPACK_IMPORTED_MODULE_1__["settings"].showDialog({
            componentName: "survey",
            data: {
                survey: surveyPropertyEditor.editSurvey,
                model: surveyPropertyEditor.editSurvey
            },
            onApply: function () {
                _this.onModalPropertyEditorClosed(editor, property, question, options, "apply");
                onClose && onClose("apply");
                return surveyPropertyEditor.apply();
            },
            onCancel: function () {
                _this.onModalPropertyEditorClosed(editor, property, question, options, "cancel");
                onClose && onClose("cancel");
            },
            cssClass: "sv-property-editor",
            title: question.title,
            displayMode: options.isMobileView ? "overlay" : "popup"
        }, options.rootElement);
        if (question.isReadOnly) {
            var applyBtn = popupModel.footerToolbar.getActionById("apply");
            if (!!applyBtn) {
                applyBtn.visible = false;
            }
        }
        popupModel.locale = locale;
        survey_core__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].currentLocale = prevCurrentLocale;
        this.onModalPropertyEditorShown(editor, property, question, options);
        options.onPropertyGridShowModalCallback(obj, property, question, surveyPropertyEditor, popupModel);
        return surveyPropertyEditor;
    };
    PropertyGridEditor.prototype.onModalPropertyEditorShown = function (editor, property, question, options) {
    };
    PropertyGridEditor.prototype.onModalPropertyEditorClosed = function (editor, property, question, options, reason) {
    };
    PropertyGridEditor.prototype.isSupportGrouping = function () {
        return false;
    };
    PropertyGridEditor.prototype.hasPreviousElementForGrouping = function (question) {
        if (!question || !question.parent)
            return false;
        var index = question.parent.elements.indexOf(question);
        if (index < 1)
            return;
        var prevElement = question.parent.elements[index - 1];
        var prevPrevElement = question.parent.elements[index - 2];
        if (prevElement.getType() === question.getType())
            return true;
        //in case of overriding property
        if (index > 1 && !prevElement.startWithNewLine && prevPrevElement["property"] === prevElement["property"] && prevPrevElement.getType() === question.getType())
            return true;
        return false;
    };
    PropertyGridEditor.prototype.onUpdateQuestionCssClasses = function (obj, options) {
        if (!this.isSupportGrouping())
            return;
        if (this.hasPreviousElementForGrouping(options.question)) {
            options.cssClasses.mainRoot += " spg-row-narrow__question";
        }
    };
    return PropertyGridEditor;
}());

var PropertyGridEditorBoolean = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorBoolean, _super);
    function PropertyGridEditorBoolean() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorBoolean.prototype.fit = function (prop, context) {
        return prop.type == "boolean" || prop.type == "switch";
    };
    PropertyGridEditorBoolean.prototype.getJSON = function (obj, prop, options) {
        return {
            type: "boolean",
            default: false,
            renderAs: "checkbox",
            titleLocation: "hidden"
        };
    };
    PropertyGridEditorBoolean.prototype.isSupportGrouping = function () {
        return true;
    };
    return PropertyGridEditorBoolean;
}(PropertyGridEditor));

var PropertyGridEditorStringBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorStringBase, _super);
    function PropertyGridEditorStringBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorStringBase.prototype.updateMaxLength = function (prop, json) {
        if (prop.maxLength > 0) {
            json.maxLength = prop.maxLength;
        }
        return json;
    };
    PropertyGridEditorStringBase.prototype.updateType = function (prop, obj, json) {
        if (!json.maxLength && obj.hasDefaultPropertyValue(prop.name)) {
            json.type = json.type + "withreset";
        }
        return json;
    };
    PropertyGridEditorStringBase.prototype.onCreated = function (obj, question, prop, options) {
        question.disableNativeUndoRedo = true;
        if (prop.name === "title") {
            question.allowSpaceAsAnswer = true;
        }
        if (question.getType() == "textwithreset" || question.getType() == "commentwithreset") {
            question.resetValueAdorner.resetValueCallback = function () {
                obj.resetPropertyValue(prop.name);
            };
            question.resetValueAdorner.caption = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.resetToDefaultCaption");
            var isDefaultValue_1 = function () { return !prop.isDefaultValue(prop.getValue(obj)); };
            question.resetValueAdorner.allowResetValue = isDefaultValue_1();
            obj.registerFunctionOnPropertyValueChanged(prop.name, function () {
                question.resetValueAdorner.allowResetValue = isDefaultValue_1();
            });
        }
    };
    return PropertyGridEditorStringBase;
}(PropertyGridEditor));

var PropertyGridEditorString = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorString, _super);
    function PropertyGridEditorString() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorString.prototype.fit = function (prop) {
        return prop.type == "string";
    };
    PropertyGridEditorString.prototype.isDefault = function () {
        return true;
    };
    PropertyGridEditorString.prototype.getJSON = function (obj, prop, options) {
        var json = this.updateType(prop, obj, this.updateMaxLength(prop, { type: "text" }));
        if (prop.isRequired) {
            json.textUpdateMode = "onBlur";
        }
        if (!!prop.dataList) {
            json.dataList = prop.dataList;
        }
        return json;
    };
    return PropertyGridEditorString;
}(PropertyGridEditorStringBase));

var PropertyGridLinkEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridLinkEditor, _super);
    function PropertyGridLinkEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridLinkEditor.prototype.fit = function (prop) {
        return prop.type === "url" || prop.type === "file";
    };
    PropertyGridLinkEditor.prototype.getJSON = function (obj, prop, options) {
        var res = { type: "fileedit", storeDataAsText: false };
        return res;
    };
    PropertyGridLinkEditor.prototype.onCreated = function (obj, question, prop, options) {
        if (["image", "imageitemvalue"].indexOf(obj.getType()) > -1) {
            var questionObj = obj.getType() == "imageitemvalue" ? obj.locOwner : obj;
            if (questionObj) {
                questionObj.registerFunctionOnPropertyValueChanged("contentMode", function (newValue) {
                    question.acceptedTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_10__["getAcceptedTypesByContentMode"])(newValue);
                });
                question.acceptedTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_10__["getAcceptedTypesByContentMode"])(questionObj.contentMode);
            }
        }
        else {
            question.acceptedTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_10__["getAcceptedTypesByContentMode"])("image");
        }
        question.onChooseFilesCallback = (function (input, onFilesChosen) {
            options.chooseFiles(input, onFilesChosen);
        });
    };
    return PropertyGridLinkEditor;
}(PropertyGridEditor));

var PropertyGridEditorColor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorColor, _super);
    function PropertyGridEditorColor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorColor.prototype.fit = function (prop) {
        return prop.type == "color";
    };
    PropertyGridEditorColor.prototype.getJSON = function (obj, prop, options) {
        var res = { type: "color", allowEmptyValue: true };
        return res;
    };
    return PropertyGridEditorColor;
}(PropertyGridEditor));

var PropertyGridEditorNumber = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorNumber, _super);
    function PropertyGridEditorNumber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorNumber.prototype.fit = function (prop) {
        return prop.type == "number" || prop.type == "responsiveImageSize";
    };
    PropertyGridEditorNumber.prototype.getJSON = function (obj, prop, options) {
        var res = { type: "text", inputType: "number", textUpdateMode: "onBlur" };
        if (prop.minValue !== undefined) {
            res.min = prop.minValue;
        }
        if (prop.maxValue !== undefined) {
            res.max = prop.maxValue;
        }
        return res;
    };
    return PropertyGridEditorNumber;
}(PropertyGridEditor));

var PropertyGridEditorImageSize = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorImageSize, _super);
    function PropertyGridEditorImageSize() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorImageSize.prototype.fit = function (prop) {
        return prop.type == "string" && (prop.name == "imageHeight" || prop.name == "imageWidth");
    };
    PropertyGridEditorImageSize.prototype.isDefault = function () {
        return false;
    };
    PropertyGridEditorImageSize.prototype.onCreated = function (obj, question, prop, options) {
        _super.prototype.onCreated.call(this, obj, question, prop, options);
        var isDefaultValue = function (imageHeight, imageWidth) {
            var imageHeightProperty = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(obj.getType(), "imageHeight");
            var imageWidthProperty = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(obj.getType(), "imageWidth");
            if (!imageHeightProperty && !imageWidthProperty)
                return false;
            return imageHeightProperty.isDefaultValue(imageHeight) && imageWidthProperty.isDefaultValue(imageWidth);
        };
        question.valueFromDataCallback = function (value) {
            var isDefaultSize = isDefaultValue(obj["imageHeight"], obj["imageWidth"]);
            return isDefaultSize ? undefined : value;
        };
    };
    return PropertyGridEditorImageSize;
}(PropertyGridEditorString));

var PropertyGridEditorText = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorText, _super);
    function PropertyGridEditorText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorText.prototype.fit = function (prop) {
        return prop.type === "text";
    };
    PropertyGridEditorText.prototype.getJSON = function (obj, prop, options) {
        return this.updateType(prop, obj, this.updateMaxLength(prop, {
            type: "comment"
        }));
    };
    return PropertyGridEditorText;
}(PropertyGridEditorStringBase));

var PropertyGridEditorHtml = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorHtml, _super);
    function PropertyGridEditorHtml() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorHtml.prototype.fit = function (prop) {
        return prop.type === "html";
    };
    PropertyGridEditorHtml.prototype.getJSON = function (obj, prop, options) {
        return this.updateMaxLength(prop, {
            type: "comment"
        });
    };
    return PropertyGridEditorHtml;
}(PropertyGridEditorStringBase));

var PropertyGridEditorStringArray = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorStringArray, _super);
    function PropertyGridEditorStringArray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorStringArray.prototype.fit = function (prop) {
        return prop.type == "string[]";
    };
    PropertyGridEditorStringArray.prototype.getJSON = function (obj, prop, options) {
        return { type: "comment" };
    };
    PropertyGridEditorStringArray.prototype.onCreated = function (obj, question, prop) {
        question.valueFromDataCallback = function (val) {
            if (!Array.isArray(val))
                return "";
            return val.join("\n");
        };
        question.valueToDataCallback = function (val) {
            if (!val)
                return [];
            if (Array.isArray(val) && !val["split"])
                return val;
            return val.split("\n");
        };
    };
    return PropertyGridEditorStringArray;
}(PropertyGridEditor));

var PropertyGridEditorDropdown = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorDropdown, _super);
    function PropertyGridEditorDropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorDropdown.prototype.fit = function (prop) {
        return this.isLocaleProp(prop) || prop.hasChoices;
    };
    PropertyGridEditorDropdown.prototype.getJSON = function (obj, prop, options) {
        var choices = this.getChoices(obj, prop);
        var json = {
            type: this.renderAsButtonGroup(prop, choices)
                ? "buttongroup"
                : "dropdown",
            choices: choices,
            showOptionsCaption: false
        };
        this.updateObjBasedOnEmptyValueItem(prop, choices, json);
        return json;
    };
    PropertyGridEditorDropdown.prototype.getChoices = function (obj, prop) {
        return prop.getChoices(obj, function (choices) { });
    };
    PropertyGridEditorDropdown.prototype.updateObjBasedOnEmptyValueItem = function (prop, choices, objOrJson) {
        var emptyValueItem = this.getEmptyJsonItemValue(prop, choices);
        if (!!emptyValueItem) {
            objOrJson.showOptionsCaption = true;
            objOrJson.allowClear = true;
            if (emptyValueItem.text) {
                objOrJson.optionsCaption = emptyValueItem.text;
            }
        }
    };
    Object.defineProperty(PropertyGridEditorDropdown.prototype, "canRenderAsButtonGroup", {
        get: function () {
            return _creator_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].propertyGrid.useButtonGroup;
        },
        enumerable: false,
        configurable: true
    });
    PropertyGridEditorDropdown.prototype.renderAsButtonGroup = function (prop, choices) {
        if (this.isLocaleProp(prop))
            return false;
        if (!this.canRenderAsButtonGroup ||
            !choices ||
            choices.length == 0 ||
            choices.length > 4)
            return false;
        var charCount = 0;
        for (var i = 0; i < choices.length; i++) {
            var text = this.getLocalizedText(prop, !!choices[i].value ? choices[i].value : choices[i]);
            charCount += !!text ? text.length : 0;
        }
        return charCount < _creator_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].propertyGrid.maxCharsInButtonGroup;
    };
    PropertyGridEditorDropdown.prototype.onCreated = function (obj, question, prop) {
        this.setChoices(obj, question, prop);
        question.displayValueCallback = function (text) {
            return !text ? question.optionsCaption : text;
        };
    };
    PropertyGridEditorDropdown.prototype.onMasterValueChanged = function (obj, prop, question) {
        this.setChoices(obj, question, prop);
        if (!question.isEmpty()) {
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getItemByValue(question.choices, question.value)) {
                question.clearValue();
            }
        }
    };
    PropertyGridEditorDropdown.prototype.setChoicesCore = function (question, prop, propChoices) {
        if (!propChoices || !Array.isArray(propChoices) || propChoices.length == 0)
            return;
        this.updateObjBasedOnEmptyValueItem(prop, propChoices, question);
        question.choices = this.choicesFromPropChoices(prop, propChoices);
    };
    PropertyGridEditorDropdown.prototype.isLocaleProp = function (prop) {
        return prop.name === "locale";
    };
    PropertyGridEditorDropdown.prototype.getLocalizedText = function (prop, value) {
        if (this.isLocaleProp(prop)) {
            var text = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getLocaleName(value);
            if (text)
                return text;
        }
        if (prop.name === "cellType") {
            var text = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("qt." + value);
            if (text)
                return text;
        }
        if (value === null)
            return null;
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getPropertyValueInEditor(prop.name, value);
    };
    PropertyGridEditorDropdown.prototype.choicesFromPropChoices = function (prop, propChoices) {
        var choices = [];
        for (var i = 0; i < propChoices.length; i++) {
            var jsonItem = this.getJsonItem(prop, propChoices[i]);
            if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(jsonItem.value)) {
                choices.push(jsonItem);
            }
        }
        return choices;
    };
    PropertyGridEditorDropdown.prototype.getJsonItem = function (prop, item) {
        var jsonItem = { value: item.value !== undefined ? item.value : item };
        var text = !!item.text ? item.text : "";
        if (!text) {
            text = this.getLocalizedText(prop, jsonItem.value);
        }
        if (!!text && text != jsonItem.value) {
            jsonItem.text = text;
        }
        return jsonItem;
    };
    PropertyGridEditorDropdown.prototype.setChoices = function (obj, question, prop) {
        var _this = this;
        var propChoices = prop.getChoices(obj, function (choices) {
            _this.setChoicesCore(question, prop, choices);
        });
        this.setChoicesCore(question, prop, propChoices);
    };
    PropertyGridEditorDropdown.prototype.getEmptyJsonItemValue = function (prop, choices) {
        if (!choices)
            return null;
        for (var i = 0; i < choices.length; i++) {
            var item = choices[i];
            var value = item.value !== undefined ? item.value : item;
            if (survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(value))
                return this.getJsonItem(prop, item);
        }
        return null;
    };
    return PropertyGridEditorDropdown;
}(PropertyGridEditor));

var PropertyGridEditorSet = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorSet, _super);
    function PropertyGridEditorSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorSet.prototype.fit = function (prop) {
        return prop.type == "set" || prop.type == "multiplevalues";
    };
    PropertyGridEditorSet.prototype.getJSON = function (obj, prop, options) {
        var json = _super.prototype.getJSON.call(this, obj, prop, options);
        var hasTagbox = !!survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass("tagbox");
        json.type = hasTagbox ? "tagbox" : "checkbox";
        json.hasSelectAll = !hasTagbox;
        return json;
    };
    return PropertyGridEditorSet;
}(PropertyGridEditorDropdown));

var PropertyGridEditorPage = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorPage, _super);
    function PropertyGridEditorPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorPage.prototype.fit = function (prop) {
        return prop.hasChoices && prop.name == "page";
    };
    Object.defineProperty(PropertyGridEditorPage.prototype, "canRenderAsButtonGroup", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    PropertyGridEditorPage.prototype.onCreated = function (obj, question, prop) {
        _super.prototype.onCreated.call(this, obj, question, prop);
        question.valueFromDataCallback = function (val) {
            return !!val ? val.name : "";
        };
        question.valueToDataCallback = function (val) {
            if (!val || !obj || !obj.getSurvey())
                return undefined;
            return obj.getSurvey().getPageByName(val);
        };
    };
    return PropertyGridEditorPage;
}(PropertyGridEditorDropdown));

var PropertyGridEditorQuestion = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorQuestion, _super);
    function PropertyGridEditorQuestion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorQuestion.prototype.fit = function (prop) {
        return prop.type == "question";
    };
    PropertyGridEditorQuestion.prototype.getJSON = function (obj, prop, options) {
        var result = {
            type: "dropdown",
            optionsCaption: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.conditionSelectQuestion"),
            choices: this.getChoices(obj, prop, options)
        };
        if (prop.type == "question") {
            result["allowClear"] = false;
        }
        return result;
    };
    PropertyGridEditorQuestion.prototype.getChoices = function (obj, prop, options) {
        var _this = this;
        var survey = _editable_object__WEBPACK_IMPORTED_MODULE_3__["EditableObject"].getSurvey(obj);
        if (!survey)
            return [];
        var questions = this.getQuestions(survey, obj);
        if (!questions)
            questions = [];
        var showTitles = !!options && options.showTitlesInExpressions;
        var qItems = questions.map(function (q) {
            var text = showTitles ? q.locTitle.renderedHtml : q.name;
            if (!!options)
                text = options.getObjectDisplayName(q, "property-grid:property-editor", "property-editor", text);
            var value = _this.getItemValue(q);
            return { value: value, text: text };
        });
        _survey_helper__WEBPACK_IMPORTED_MODULE_7__["SurveyHelper"].sortItems(qItems);
        return qItems;
    };
    PropertyGridEditorQuestion.prototype.getQuestions = function (survey, obj) {
        return survey.getAllQuestions();
    };
    PropertyGridEditorQuestion.prototype.getItemValue = function (question) {
        return question.name;
    };
    return PropertyGridEditorQuestion;
}(PropertyGridEditor));

var PropertyGridEditorQuestionSelectBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorQuestionSelectBase, _super);
    function PropertyGridEditorQuestionSelectBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorQuestionSelectBase.prototype.fit = function (prop) {
        return prop.type == "question_selectbase";
    };
    PropertyGridEditorQuestionSelectBase.prototype.isQuestionFit = function (question) {
        return survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(question.getType(), "selectbase");
    };
    PropertyGridEditorQuestionSelectBase.prototype.getQuestions = function (survey, obj) {
        var questions = _super.prototype.getQuestions.call(this, survey, obj);
        var res = [];
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            if (q !== obj && this.isQuestionFit(q)) {
                res.push(q);
            }
        }
        return res;
    };
    return PropertyGridEditorQuestionSelectBase;
}(PropertyGridEditorQuestion));

var PropertyGridEditorQuestionCarryForward = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorQuestionCarryForward, _super);
    function PropertyGridEditorQuestionCarryForward() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorQuestionCarryForward.prototype.fit = function (prop) {
        return prop.type == "question_carryforward";
    };
    PropertyGridEditorQuestionCarryForward.prototype.isQuestionFit = function (question) {
        return question.isValueArray || _super.prototype.isQuestionFit.call(this, question);
    };
    return PropertyGridEditorQuestionCarryForward;
}(PropertyGridEditorQuestionSelectBase));

var PropertyGridEditorQuestionValue = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorQuestionValue, _super);
    function PropertyGridEditorQuestionValue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorQuestionValue.prototype.fit = function (prop) {
        return prop.type == "questionvalue";
    };
    PropertyGridEditorQuestionValue.prototype.getItemValue = function (question) {
        return question.getValueName();
    };
    PropertyGridEditorQuestionValue.prototype.getQuestions = function (survey, obj) {
        var questions = _super.prototype.getQuestions.call(this, survey, obj);
        return questions.filter(function (q) { return !survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(q.getType(), "nonvalue"); });
    };
    return PropertyGridEditorQuestionValue;
}(PropertyGridEditorQuestion));

PropertyGridEditorCollection.register(new PropertyGridEditorBoolean());
PropertyGridEditorCollection.register(new PropertyGridEditorString());
PropertyGridEditorCollection.register(new PropertyGridEditorNumber());
PropertyGridEditorCollection.register(new PropertyGridEditorText());
PropertyGridEditorCollection.register(new PropertyGridEditorHtml());
PropertyGridEditorCollection.register(new PropertyGridEditorDropdown());
PropertyGridEditorCollection.register(new PropertyGridEditorSet());
PropertyGridEditorCollection.register(new PropertyGridEditorPage());
PropertyGridEditorCollection.register(new PropertyGridEditorStringArray());
PropertyGridEditorCollection.register(new PropertyGridEditorQuestion());
PropertyGridEditorCollection.register(new PropertyGridEditorQuestionValue());
PropertyGridEditorCollection.register(new PropertyGridEditorQuestionSelectBase());
PropertyGridEditorCollection.register(new PropertyGridEditorQuestionCarryForward());
PropertyGridEditorCollection.register(new PropertyGridEditorImageSize());
PropertyGridEditorCollection.register(new PropertyGridEditorColor());
survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("buttongroup", function (name) {
    return new survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionButtonGroupModel"](name);
});


/***/ }),

/***/ "./src/property-grid/matrices.ts":
/*!***************************************!*\
  !*** ./src/property-grid/matrices.ts ***!
  \***************************************/
/*! exports provided: PropertyGridEditorMatrix, PropertyGridEditorMatrixItemValues, PropertyGridEditorMatrixRateValues, PropertyGridEditorMatrixColumns, PropertyGridEditorMatrixPages, PropertyGridEditorMatrixCalculatedValues, PropertyGridEditorMatrixHtmlConditions, PropertyGridEditorMatrixUrlConditions, PropertyGridEditorMatrixMutlipleTextItems, PropertyGridEditorMatrixMultipleTypes, PropertyGridEditorMatrixValidators, PropertyGridEditorMatrixTriggers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrix", function() { return PropertyGridEditorMatrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixItemValues", function() { return PropertyGridEditorMatrixItemValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixRateValues", function() { return PropertyGridEditorMatrixRateValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixColumns", function() { return PropertyGridEditorMatrixColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixPages", function() { return PropertyGridEditorMatrixPages; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixCalculatedValues", function() { return PropertyGridEditorMatrixCalculatedValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixHtmlConditions", function() { return PropertyGridEditorMatrixHtmlConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixUrlConditions", function() { return PropertyGridEditorMatrixUrlConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixMutlipleTextItems", function() { return PropertyGridEditorMatrixMutlipleTextItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixMultipleTypes", function() { return PropertyGridEditorMatrixMultipleTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixValidators", function() { return PropertyGridEditorMatrixValidators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorMatrixTriggers", function() { return PropertyGridEditorMatrixTriggers; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _question_editor_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../question-editor/properties */ "./src/question-editor/properties.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _fast_entry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fast-entry */ "./src/property-grid/fast-entry.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _utils_actions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/actions */ "./src/utils/actions.ts");
/* harmony import */ var _components_question_rating__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/question-rating */ "./src/components/question-rating.ts");









survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addProperty("itemvalue", {
    name: "icon", isSerializable: false, readOnly: true, visibleIndex: 0,
    visibleIf: function (obj) {
        return obj &&
            obj.ownerPropertyName === "rateValues" &&
            obj.locOwner instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionRatingModel"] &&
            obj.locOwner.rateType == "smileys";
    },
});
var PropertyGridEditorMatrix = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrix, _super);
    function PropertyGridEditorMatrix() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrix.getNewColumnName = function (objs, keyPropName, baseName) {
        var arr = [];
        if (Array.isArray(objs)) {
            for (var i = 0; i < objs.length; i++) {
                arr.push(objs[i][keyPropName]);
            }
        }
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["getNextValue"])(baseName, arr);
    };
    PropertyGridEditorMatrix.prototype.onCreated = function (obj, question, prop) {
        var _this = this;
        question.onGetValueForNewRowCallBack = function (sender) {
            return _this.createNewItem(sender, prop);
        };
        this.setupMatrixQuestion(obj, question, prop);
    };
    PropertyGridEditorMatrix.prototype.onSetup = function (obj, question, prop, options) {
        var matrix = question;
        if (matrix.allowRowsDragAndDrop && matrix.dragDropMatrixRows) {
            matrix.dragDropMatrixRows.onDragStart.add(function () { options.startUndoRedoTransaction(); });
            matrix.dragDropMatrixRows.onDragEnd.add(function () { options.stopUndoRedoTransaction(); });
        }
    };
    PropertyGridEditorMatrix.prototype.initializePlaceholder = function (rowObj, cellQuestion, propertyName) {
        var objType = typeof rowObj.getType === "function" && rowObj.getType();
        if (cellQuestion.getType() === "text" && !!objType) {
            if (propertyName === "text" && objType === "itemvalue") {
                cellQuestion.placeholder = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    if (!!rowObj.value)
                        return rowObj.value.toString();
                    return rowObj.text;
                });
            }
            if (propertyName === "title" && objType === "matrixdropdowncolumn") {
                cellQuestion.placeholder = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () {
                    if (!!rowObj.name)
                        return rowObj.name;
                    return rowObj.title;
                });
            }
        }
    };
    PropertyGridEditorMatrix.prototype.onMatrixCellCreated = function (obj, options) {
        var rowObj = options.row.editingObj;
        if (!rowObj)
            return;
        var q = options.cellQuestion;
        q.obj = rowObj;
        this.initializePlaceholder(rowObj, q, options.columnName);
        q.property = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(rowObj.getType(), options.columnName);
    };
    PropertyGridEditorMatrix.prototype.onMatrixCellValueChanged = function (obj, options) {
        var matrix = options.question;
        var column = options.column;
        if (matrix && column && column.isUnique) {
            matrix.visibleRows.forEach(function (row) {
                if (row !== options.row) {
                    var question = row.getQuestionByColumnName(options.columnName);
                    if (question && question.errors.length > 0 && !question.isEmpty()) {
                        matrix.checkIfValueInRowDuplicated(row, question);
                    }
                }
            });
        }
    };
    PropertyGridEditorMatrix.prototype.onGetMatrixRowAction = function (obj, options, setObjFunc) {
        var _this = this;
        var question = options.question;
        var row = options.row;
        var actions = options.actions;
        if (this.getEditItemAsStandAlone()) {
            actions.push({
                id: "svd-grid-edit-column",
                iconName: "icon-edit",
                title: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.edit"),
                visibleIndex: 0,
                showTitle: false,
                location: "end",
                action: function () {
                    var column = options.row.editingObj;
                    setObjFunc(column);
                }
            });
        }
        var showDetailAction = actions.filter(function (item) { return item.id === "show-detail"; })[0];
        Object(_utils_actions__WEBPACK_IMPORTED_MODULE_7__["updateMatrixRemoveAction"])(question, actions, row);
        if (!!showDetailAction) {
            showDetailAction.component = "sv-action-bar-item";
            showDetailAction.iconName = this.getShowDetailActionIconName(row);
            showDetailAction.showTitle = false;
            showDetailAction.location = "end";
            showDetailAction.ariaExpanded = row.isDetailPanelShowing;
            showDetailAction.action = function () {
                row.showHideDetailPanelClick();
                showDetailAction.iconName = row.isDetailPanelShowing ? "icon-editing-finish" : "icon-edit";
            };
            showDetailAction.visibleIndex = 0;
            showDetailAction.visible = this.hasPropertiesInDetail;
            row.onDetailPanelShowingChanged = function () {
                showDetailAction.iconName = _this.getShowDetailActionIconName(row);
                showDetailAction.ariaExpanded = row.isDetailPanelShowing;
            };
        }
        Object(_utils_actions__WEBPACK_IMPORTED_MODULE_7__["updateMatixActionsClasses"])(actions);
    };
    PropertyGridEditorMatrix.prototype.getShowDetailActionIconName = function (row) {
        return row.isDetailPanelShowing ? "icon-editing-finish" : "icon-edit";
    };
    PropertyGridEditorMatrix.prototype.onGetQuestionTitleActions = function (obj, options) {
        var question = options.question;
        options.titleActions.push({
            id: "add-item",
            iconName: "icon-add",
            title: question.addRowText,
            showTitle: false,
            action: function () {
                question.addRow();
            },
            enabled: new survey_core__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"](function () { return question.canAddRow; })
        });
    };
    PropertyGridEditorMatrix.prototype.createNewItem = function (matrix, prop) {
        matrix.visibleRows.forEach(function (row) { return row.hideDetailPanel(); });
        var json = {};
        var baseValue = this.getBaseValue(prop);
        var keyPropName = this.getKeyValue();
        if (!baseValue) {
            baseValue = "item";
        }
        var keyValue = null;
        if (!!baseValue && !!keyPropName) {
            var newName = PropertyGridEditorMatrix.getNewColumnName(matrix.value, keyPropName, baseValue);
            keyValue = newName;
        }
        var obj = matrix.obj;
        var item = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(this.getDefaultClassName(obj, prop), json);
        if (!!keyValue) {
            item[keyPropName] = keyValue;
        }
        if (!!this.getObjTypeName()) {
            item[this.getObjTypeName()] = item.getType();
        }
        var arr = obj[prop.name];
        if (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(item.getType(), "itemvalue")) {
            item.text = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["getNextItemText"])(arr);
        }
        arr.push(item);
        if (arr != matrix.value) {
            matrix.value = arr;
        }
        return item;
    };
    PropertyGridEditorMatrix.prototype.getDefaultClassName = function (obj, prop) {
        return prop.className;
    };
    PropertyGridEditorMatrix.prototype.getBaseValue = function (prop) {
        return prop.getBaseValue();
    };
    PropertyGridEditorMatrix.prototype.getKeyValue = function () {
        return "";
    };
    PropertyGridEditorMatrix.prototype.getColumnNames = function (obj, prop, options) {
        var names = this.getPropertiesNames(obj, prop, options);
        if (!!names && names.length > 0) {
            return names;
        }
        return this.getDefaultListProperties(prop);
    };
    PropertyGridEditorMatrix.prototype.getColumnClassName = function (obj, prop) {
        return prop.className;
    };
    PropertyGridEditorMatrix.prototype.getPropertiesNames = function (obj, prop, options) {
        var res = [];
        var properties = this.getDefinedListProperties(obj, prop, options);
        for (var i = 0; i < properties.length; i++) {
            res.push(properties[i].name);
        }
        if (res.length == 0) {
            res = this.getDefaulColumnNames();
        }
        return res;
    };
    PropertyGridEditorMatrix.prototype.getDefinedListProperties = function (obj, prop, options) {
        if (!prop.className) {
            return [];
        }
        var newObj = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(prop.className);
        if (!newObj) {
            return [];
        }
        var props = new _question_editor_properties__WEBPACK_IMPORTED_MODULE_3__["SurveyQuestionProperties"](newObj, options, this.getColumnClassName(obj, prop), "list", obj, prop);
        if (props.getTabs().length == 0) {
            return [];
        }
        return props.getTabs()[0].properties;
    };
    PropertyGridEditorMatrix.prototype.getDefaultListProperties = function (prop) {
        var res = [];
        if (!!prop && !!prop.className) {
            var properties = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getProperties(prop.className);
            for (var i = 0; i < properties.length; i++) {
                if (!this.isPropertyShownInList(properties[i])) {
                    continue;
                }
                res.push(properties[i].name);
            }
        }
        return res.length > 0 ? res : this.getDefaulColumnNames();
    };
    PropertyGridEditorMatrix.prototype.getDefaulColumnNames = function () {
        return [];
    };
    PropertyGridEditorMatrix.prototype.isPropertyShownInList = function (prop) {
        return prop.visible && prop.showMode !== "form";
    };
    PropertyGridEditorMatrix.prototype.getObjTypeName = function () {
        return "";
    };
    PropertyGridEditorMatrix.prototype.hasDetailPanel = function () {
        return !this.getEditItemAsStandAlone();
    };
    PropertyGridEditorMatrix.prototype.setupMatrixQuestion = function (obj, matrix, prop) {
        var _this = this;
        this.hasPropertiesInDetail =
            this.hasDetailPanel() && this.calcHasPropertiesInDetail(matrix, prop);
        matrix.onHasDetailPanelCallback = function (row) {
            return row.allowEditRow !== false && _this.hasPropertiesInDetail;
        };
        matrix.onCreateDetailPanelRenderedRowCallback = function (renderedRow) {
            renderedRow.cells = [renderedRow.cells[1]];
            renderedRow.cells[0].colSpans += 2;
        };
        var q = matrix;
        matrix.onCreateDetailPanelCallback = function (row, panel) {
            new _index__WEBPACK_IMPORTED_MODULE_6__["PropertyJSONGenerator"](row.editingObj, q.options, q.obj, q.property).setupObjPanel(panel, true);
        };
        matrix.allowRowsDragAndDrop = this.getAllowRowDragDrop(prop) && !matrix.isReadOnly;
        if (!!q.options) {
            this.setupUsingOptions(obj, matrix, q.options, prop);
        }
        if (!!prop.uniquePropertyName) {
            var column = matrix.getColumnByName(prop.uniquePropertyName);
            if (!!column) {
                column.isUnique = true;
            }
        }
    };
    PropertyGridEditorMatrix.prototype.getAllowRowDragDrop = function (prop) { return false; };
    PropertyGridEditorMatrix.prototype.calcHasPropertiesInDetail = function (matrix, prop) {
        if (!prop.className)
            return true;
        var newObj = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(prop.className);
        if (!newObj)
            return true;
        var panel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["PanelModel"]("");
        new _index__WEBPACK_IMPORTED_MODULE_6__["PropertyJSONGenerator"](newObj, matrix.options, matrix.obj, prop).setupObjPanel(panel, true);
        return panel.elements.length > 0;
    };
    PropertyGridEditorMatrix.prototype.getJSON = function (obj, prop, options) {
        return this.getMatrixJSON(obj, prop, this.getColumnNames(obj, prop, options), options);
    };
    PropertyGridEditorMatrix.prototype.getMatrixJSON = function (obj, prop, propNames, options) {
        var className = prop.className;
        if (!className) {
            className = prop.baseClassName;
        }
        var columns = this.getColumnsJSON(obj, prop, propNames, options);
        var res = {
            type: "matrixdynamic",
            detailPanelMode: "underRow",
            cellType: "text",
            rowCount: 0,
            columns: columns,
            showHeader: columns.length > 2,
            hideColumnsIfEmpty: true,
            addRowText: this.getAddRowText(prop),
            keyDuplicationError: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.propertyIsNoUnique"),
            emptyRowsText: this.getEmptyRowsText(prop)
        };
        if (this.getShowDetailPanelOnAdding()) {
            res.detailPanelShowOnAdding = true;
        }
        var minRowCount = this.getMinimumRowCount(obj, prop, options);
        var maxRowCount = this.getMaximumRowCount(obj, prop, options);
        if (minRowCount > 0) {
            res.minRowCount = minRowCount;
        }
        if (maxRowCount > 0) {
            res.maxRowCount = maxRowCount;
        }
        return res;
    };
    PropertyGridEditorMatrix.prototype.getEmptyRowsText = function (prop) {
        var locName = "pe.listIsEmpty";
        var propLocName = locName + "@" + prop.name;
        if (!!_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].hasString(propLocName)) {
            locName = propLocName;
        }
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(locName);
    };
    PropertyGridEditorMatrix.prototype.getMinimumRowCount = function (obj, prop, options) {
        return -1;
    };
    PropertyGridEditorMatrix.prototype.getMaximumRowCount = function (obj, prop, options) {
        return -1;
    };
    PropertyGridEditorMatrix.prototype.filterPropertyNames = function (propNames, options) {
        return propNames;
    };
    PropertyGridEditorMatrix.prototype.getColumnsJSON = function (obj, prop, propNames, options) {
        var className = prop.className;
        if (!className) {
            className = prop.baseClassName;
        }
        var res = new _index__WEBPACK_IMPORTED_MODULE_6__["PropertyJSONGenerator"](obj, options).createColumnsJSON(className, this.filterPropertyNames(propNames, options));
        for (var i = 0; i < res.length; i++) {
            if (res[i].cellType == "comment") {
                res[i].cellType = "text";
            }
        }
        return res;
    };
    PropertyGridEditorMatrix.prototype.getEditItemAsStandAlone = function () {
        return false;
    };
    PropertyGridEditorMatrix.prototype.getShowDetailPanelOnAdding = function () {
        return false;
    };
    PropertyGridEditorMatrix.prototype.getAddRowText = function (prop) {
        var customLocStrName = "pe.addNew@" + prop.name;
        if (_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].hasString(customLocStrName)) {
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString(customLocStrName);
        }
        return _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("pe.addNew");
    };
    PropertyGridEditorMatrix.prototype.setupUsingOptions = function (obj, matrix, options, prop) {
        var evtOptions = {
            allowAddRemoveItems: true,
            allowRemoveAllItems: true,
            showTextView: true,
            allowBatchEdit: true
            // options.itemsEntryType
        };
        options.onSetPropertyEditorOptionsCallback(prop.name, obj, evtOptions);
        if (!evtOptions.allowAddRemoveItems) {
            matrix.allowAddRows = false;
            matrix.allowRemoveRows = false;
        }
        matrix.allowRemoveAllItems = evtOptions.allowRemoveAllItems;
        matrix.showTextView = evtOptions.showTextView;
        matrix.allowBatchEdit = evtOptions.allowBatchEdit;
    };
    return PropertyGridEditorMatrix;
}(_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditor"]));

var PropertyGridEditorMatrixItemValues = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixItemValues, _super);
    function PropertyGridEditorMatrixItemValues() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixItemValues.prototype.fit = function (prop) {
        return (prop.isArray && survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(prop.className, "itemvalue") && prop.name != "rateValues");
    };
    PropertyGridEditorMatrixItemValues.prototype.excludeTextPropertyName = function (propNames, options) {
        var hideText = options === null || options === void 0 ? void 0 : options.inplaceEditForValues;
        return !!hideText ? propNames.filter(function (p) { return p !== "text"; }) : propNames;
    };
    PropertyGridEditorMatrixItemValues.prototype.filterPropertyNames = function (propNames, options) {
        return this.excludeTextPropertyName(propNames, options).filter(function (p) { return p != "icon"; });
    };
    PropertyGridEditorMatrixItemValues.prototype.isPropertyEditorSetupEnabled = function (obj, prop, question, options) {
        if (question.showTextView === false)
            return false;
        var matrix = question;
        var column = matrix.getColumnByName("value");
        var items = question.value;
        return (!!column &&
            column.isVisible &&
            !column.readOnly &&
            !this.hasMultipleLanguage(items) &&
            !this.hasVisibleIfOrEnableIf(items));
    };
    PropertyGridEditorMatrixItemValues.prototype.getAllowRowDragDrop = function (prop) { return true; };
    PropertyGridEditorMatrixItemValues.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        var names = question.columns.filter(function (c) { return !c.readOnly; }).map(function (c) { return c.name; });
        return new _fast_entry__WEBPACK_IMPORTED_MODULE_5__["FastEntryEditor"](obj[prop.name], options, prop.className, names);
    };
    PropertyGridEditorMatrixItemValues.prototype.canClearPropertyValue = function (obj, prop, question, options) {
        return question.allowRemoveAllItems !== false;
    };
    PropertyGridEditorMatrixItemValues.prototype.clearPropertyValue = function (obj, prop, question, options) {
        var arr = obj[prop.name];
        if (!Array.isArray(arr)) {
            return;
        }
        arr.splice(0, arr.length);
    };
    PropertyGridEditorMatrixItemValues.prototype.getColumnClassName = function (obj, prop) {
        return obj.getType() + "@" + prop.name;
    };
    PropertyGridEditorMatrixItemValues.prototype.getDefaulColumnNames = function () {
        return ["value", "text"];
    };
    PropertyGridEditorMatrixItemValues.prototype.getKeyValue = function () {
        return "value";
    };
    PropertyGridEditorMatrixItemValues.prototype.getMatrixJSON = function (obj, prop, propNames, options) {
        var res = _super.prototype.getMatrixJSON.call(this, obj, prop, propNames, options);
        if (prop.name === "rateValues" && res.columns[0].name == "icon")
            res.showHeader = res.columns > 3;
        return res;
    };
    PropertyGridEditorMatrixItemValues.prototype.getMinimumRowCount = function (obj, prop, options) {
        if (prop.name === "choices")
            return options.minimumChoicesCount;
        return _super.prototype.getMaximumRowCount.call(this, obj, prop, options);
    };
    PropertyGridEditorMatrixItemValues.prototype.getMaximumRowCount = function (obj, prop, options) {
        if (prop.name === "choices")
            return options.maximumChoicesCount;
        if (prop.name === "rows")
            return options.maximumRowsCount;
        if (prop.name === "columns")
            return options.maximumColumnsCount;
        if (prop.name === "rateValues")
            return options.maximumRateValues;
        return _super.prototype.getMaximumRowCount.call(this, obj, prop, options);
    };
    PropertyGridEditorMatrixItemValues.prototype.hasMultipleLanguage = function (items) {
        if (!items || !Array.isArray(items)) {
            return false;
        }
        for (var i = 0; i < items.length; i++) {
            if (items[i].locText.hasNonDefaultText()) {
                return true;
            }
        }
        return false;
    };
    PropertyGridEditorMatrixItemValues.prototype.hasVisibleIfOrEnableIf = function (items) {
        if (!items || !Array.isArray(items)) {
            return false;
        }
        for (var i = 0; i < items.length; i++) {
            if (!!items[i].visibleIf || items[i].enableIf) {
                return true;
            }
        }
        return false;
    };
    PropertyGridEditorMatrixItemValues.prototype.onMatrixCellCreated = function (obj, options) {
        _super.prototype.onMatrixCellCreated.call(this, obj, options);
        function updateHtml(question, value) {
            question.html = "<div class=\"spg-smiley-icon\"><svg><use xlink:href=\"#icon-" + value + "\"></use></svg></div>";
        }
        function changeValueCallback(sender, options) {
            if (options.name != "value")
                return;
            updateHtml(sender, options.newValue);
        }
        if (obj instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionRatingModel"] && options.columnName == "icon") {
            updateHtml(options.cellQuestion, options.cellQuestion.value);
            options.cellQuestion.onPropertyChanged.add(changeValueCallback);
        }
    };
    PropertyGridEditorMatrixItemValues.prototype.onMatrixCellValueChanged = function (obj, options) {
        _super.prototype.onMatrixCellValueChanged.call(this, obj, options);
        if (obj instanceof survey_core__WEBPACK_IMPORTED_MODULE_1__["QuestionRatingModel"] && options.columnName == "icon") {
            //options.cellQuestion.html = "<svg style='fill: red'><use xlink:href=\"#" + options.cellQuestion.value + "\"></use></svg>";
            options.cellQuestion.html = options.cellQuestion.value;
        }
    };
    return PropertyGridEditorMatrixItemValues;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixRateValues = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixRateValues, _super);
    function PropertyGridEditorMatrixRateValues() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixRateValues.prototype.fit = function (prop) {
        return (prop.isArray && survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(prop.className, "itemvalue") && prop.name == "rateValues");
    };
    PropertyGridEditorMatrixRateValues.prototype.updateAllowAddRemove = function (matrixQuestion, obj) {
        matrixQuestion.allowRemoveRows = _components_question_rating__WEBPACK_IMPORTED_MODULE_8__["QuestionRatingAdornerViewModel"].allowRemoveForElement(obj);
        matrixQuestion.allowAddRows = _components_question_rating__WEBPACK_IMPORTED_MODULE_8__["QuestionRatingAdornerViewModel"].allowAddForElement(obj, matrixQuestion.maxRowCount);
    };
    PropertyGridEditorMatrixRateValues.prototype.onCreated = function (obj, question, prop) {
        var _this = this;
        _super.prototype.onCreated.call(this, obj, question, prop);
        var matrixQuestion = question;
        var ratingQuestion = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["getQuestionFromObj"])(obj);
        this.updateAllowAddRemove(matrixQuestion, ratingQuestion);
        obj.onPropertyChanged.add(function (sender, options) {
            if (options.name == "rateCount" || options.name == "rateDisplayMode") {
                _this.updateAllowAddRemove(matrixQuestion, ratingQuestion);
            }
        });
    };
    PropertyGridEditorMatrixRateValues.prototype.onGetQuestionTitleActions = function (obj, options) {
        var clearAction = options.titleActions.filter(function (a) { return a.id == "property-grid-clear"; })[0];
        if (clearAction)
            clearAction.visible = false;
        _super.prototype.onGetQuestionTitleActions.call(this, obj, options);
    };
    PropertyGridEditorMatrixRateValues.prototype.filterPropertyNames = function (propNames, options) {
        return this.excludeTextPropertyName(propNames, options);
    };
    return PropertyGridEditorMatrixRateValues;
}(PropertyGridEditorMatrixItemValues));

var PropertyGridEditorMatrixColumns = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixColumns, _super);
    function PropertyGridEditorMatrixColumns() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixColumns.prototype.fit = function (prop) {
        return prop.type == "matrixdropdowncolumns";
    };
    PropertyGridEditorMatrixColumns.prototype.getEditItemAsStandAlone = function () {
        return true;
    };
    PropertyGridEditorMatrixColumns.prototype.getDefaulColumnNames = function () {
        return ["name", "title"];
    };
    PropertyGridEditorMatrixColumns.prototype.getKeyValue = function () {
        return "name";
    };
    PropertyGridEditorMatrixColumns.prototype.getBaseValue = function (prop) {
        return "column";
    };
    PropertyGridEditorMatrixColumns.prototype.getMaximumRowCount = function (obj, prop, options) {
        return options.maximumColumnsCount;
    };
    PropertyGridEditorMatrixColumns.prototype.getAllowRowDragDrop = function (prop) { return true; };
    return PropertyGridEditorMatrixColumns;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixPages = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixPages, _super);
    function PropertyGridEditorMatrixPages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixPages.prototype.fit = function (prop) {
        return prop.type == "surveypages";
    };
    PropertyGridEditorMatrixPages.prototype.onMatrixAllowRemoveRow = function (obj, row) {
        var page = row.editingObj;
        if (!page || !page.survey) {
            return;
        }
        return page.survey.currentPage !== page;
    };
    PropertyGridEditorMatrixPages.prototype.getColumnClassName = function (obj, prop) {
        return "page@" + obj.getType();
    };
    PropertyGridEditorMatrixPages.prototype.getDefaulColumnNames = function () {
        return ["name", "title"];
    };
    PropertyGridEditorMatrixPages.prototype.hasDetailPanel = function () {
        return false;
    };
    PropertyGridEditorMatrixPages.prototype.getKeyValue = function () {
        return "name";
    };
    PropertyGridEditorMatrixPages.prototype.getBaseValue = function (prop) {
        return "page";
    };
    PropertyGridEditorMatrixPages.prototype.getAllowRowDragDrop = function (prop) { return true; };
    return PropertyGridEditorMatrixPages;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixCalculatedValues = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixCalculatedValues, _super);
    function PropertyGridEditorMatrixCalculatedValues() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixCalculatedValues.prototype.fit = function (prop) {
        return prop.type == "calculatedvalues";
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.getColumnClassName = function (obj, prop) {
        return "calculatedvalue@items";
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.getDefaulColumnNames = function () {
        return ["name"];
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.getKeyValue = function () {
        return "name";
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.getBaseValue = function (prop) {
        return "var";
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.getShowDetailPanelOnAdding = function () {
        return true;
    };
    PropertyGridEditorMatrixCalculatedValues.prototype.setupMatrixQuestion = function (obj, matrix, prop) {
        _super.prototype.setupMatrixQuestion.call(this, obj, matrix, prop);
        matrix.isUniqueCaseSensitive = false;
    };
    return PropertyGridEditorMatrixCalculatedValues;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixHtmlConditions = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixHtmlConditions, _super);
    function PropertyGridEditorMatrixHtmlConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixHtmlConditions.prototype.fit = function (prop) {
        return prop.type == "htmlconditions";
    };
    PropertyGridEditorMatrixHtmlConditions.prototype.getDefaulColumnNames = function () {
        return ["html"];
    };
    PropertyGridEditorMatrixHtmlConditions.prototype.getShowDetailPanelOnAdding = function () {
        return true;
    };
    return PropertyGridEditorMatrixHtmlConditions;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixUrlConditions = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixUrlConditions, _super);
    function PropertyGridEditorMatrixUrlConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixUrlConditions.prototype.fit = function (prop) {
        return prop.type == "urlconditions";
    };
    PropertyGridEditorMatrixUrlConditions.prototype.getDefaulColumnNames = function () {
        return ["url"];
    };
    PropertyGridEditorMatrixUrlConditions.prototype.getShowDetailPanelOnAdding = function () {
        return true;
    };
    return PropertyGridEditorMatrixUrlConditions;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixMutlipleTextItems = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixMutlipleTextItems, _super);
    function PropertyGridEditorMatrixMutlipleTextItems() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixMutlipleTextItems.prototype.fit = function (prop) {
        return prop.type == "textitem[]";
    };
    /*
    protected getEditItemAsStandAlone(): boolean {
      return true;
    }*/
    PropertyGridEditorMatrixMutlipleTextItems.prototype.getColumnClassName = function (obj, prop) {
        return "multipletext@items";
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.getDefaulColumnNames = function () {
        return ["name"];
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.getKeyValue = function () {
        return "name";
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.getBaseValue = function (prop) {
        return "item";
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.getAllowRowDragDrop = function () {
        return true;
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        var names = [];
        question.columns.forEach(function (col) {
            names.push(col.name);
        });
        return new _fast_entry__WEBPACK_IMPORTED_MODULE_5__["FastEntryEditorBase"](obj[prop.name], options, prop.className, names);
    };
    PropertyGridEditorMatrixMutlipleTextItems.prototype.onMatrixCellCreated = function (obj, options) {
        _super.prototype.onMatrixCellCreated.call(this, obj, options);
        var q = options.cellQuestion;
        if (!options.row.editingObj)
            return;
        var editor = options.row.editingObj.editor;
        if (!!editor && !!q.property) {
            editor.registerFunctionOnPropertyValueChanged(q.property.name, function () {
                q.value = editor[q.property.name];
            });
        }
    };
    return PropertyGridEditorMatrixMutlipleTextItems;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixMultipleTypes = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixMultipleTypes, _super);
    function PropertyGridEditorMatrixMultipleTypes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixMultipleTypes.prototype.getColumnsJSON = function (obj, prop, propNames, options) {
        var res = _super.prototype.getColumnsJSON.call(this, obj, prop, propNames, options);
        if (!!this.getObjTypeName()) {
            res.unshift({
                name: this.getObjTypeName(),
                cellType: "dropdown"
            });
        }
        return res;
    };
    PropertyGridEditorMatrixMultipleTypes.prototype.onMatrixCellCreated = function (obj, options) {
        _super.prototype.onMatrixCellCreated.call(this, obj, options);
        var q = options.cellQuestion;
        if (options.columnName === this.getObjTypeName()) {
            q.showOptionsCaption = false;
            q.choices = this.getChoices(obj);
            q.value = options.row.editingObj.getType();
        }
    };
    PropertyGridEditorMatrixMultipleTypes.prototype.onMatrixCellValueChanged = function (obj, options) {
        _super.prototype.onMatrixCellValueChanged.call(this, obj, options);
        if (options.columnName !== this.getObjTypeName())
            return;
        var index = options.question.visibleRows.indexOf(options.row);
        if (index < 0)
            return;
        var isDetailPanelShowing = options.row.isDetailPanelShowing;
        var objJSON = options.row.editingObj.toJSON();
        delete objJSON.type;
        var newItem = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(options.value);
        newItem.fromJSON(objJSON);
        newItem[this.getObjTypeName()] = newItem.getType();
        options.row.hideDetailPanel(true);
        options.question.value.splice(index, 1, newItem);
        options.row.value = newItem;
        if (isDetailPanelShowing) {
            options.row.showDetailPanel();
        }
    };
    PropertyGridEditorMatrixMultipleTypes.prototype.getShowDetailPanelOnAdding = function () {
        return true;
    };
    return PropertyGridEditorMatrixMultipleTypes;
}(PropertyGridEditorMatrix));

var PropertyGridEditorMatrixValidators = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixValidators, _super);
    function PropertyGridEditorMatrixValidators() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixValidators.prototype.fit = function (prop) {
        return prop.type == "validators";
    };
    PropertyGridEditorMatrixValidators.prototype.getObjTypeName = function () {
        return "validatorType";
    };
    PropertyGridEditorMatrixValidators.prototype.getDefaultClassName = function (obj, prop) {
        var res = "expression";
        var question = obj;
        if (!!question.getSupportedValidators) {
            var validators = question.getSupportedValidators();
            if (validators.length > 0 && validators.indexOf(res) < 0) {
                res = validators[0];
            }
        }
        return res + "validator";
    };
    PropertyGridEditorMatrixValidators.prototype.getChoices = function (obj) {
        var names = this.getSupportedValidators(obj);
        var res = [];
        for (var i = 0; i < names.length; i++) {
            var name = names[i] + "validator";
            res.push({
                value: name,
                text: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getValidatorName(name)
            });
        }
        return res;
    };
    PropertyGridEditorMatrixValidators.prototype.getSupportedValidators = function (obj) {
        if (!obj)
            return [];
        if (obj.getSupportedValidators)
            return obj.getSupportedValidators();
        if (obj.getOriginalObj)
            return this.getSupportedValidators(obj.getOriginalObj());
        return [];
    };
    return PropertyGridEditorMatrixValidators;
}(PropertyGridEditorMatrixMultipleTypes));

var PropertyGridEditorMatrixTriggers = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorMatrixTriggers, _super);
    function PropertyGridEditorMatrixTriggers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorMatrixTriggers.prototype.getAvailableTriggers = function () {
        return survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getChildrenClasses("surveytrigger", true).filter(function (classObj) { return classObj.name !== "visibletrigger"; });
    };
    PropertyGridEditorMatrixTriggers.prototype.fit = function (prop) {
        return prop.type == "triggers";
    };
    PropertyGridEditorMatrixTriggers.prototype.getObjTypeName = function () {
        return "triggerType";
    };
    PropertyGridEditorMatrixTriggers.prototype.getDefaultClassName = function (obj, prop) {
        var classes = this.getAvailableTriggers().map(function (tr) { return tr.name; });
        if (!classes.length)
            return prop.name;
        if (classes.indexOf("runexpressiontrigger") !== -1) {
            return "runexpressiontrigger";
        }
        else {
            return classes[0];
        }
    };
    PropertyGridEditorMatrixTriggers.prototype.getAllowRowDragDrop = function (prop) { return true; };
    PropertyGridEditorMatrixTriggers.prototype.getChoices = function (obj) {
        return this.getAvailableTriggers().map(function (tr) { return { value: tr.name, text: _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getTriggerName(tr.name) }; });
    };
    return PropertyGridEditorMatrixTriggers;
}(PropertyGridEditorMatrixMultipleTypes));

_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixItemValues());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixRateValues());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixColumns());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixPages());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixCalculatedValues());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixHtmlConditions());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixUrlConditions());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixMutlipleTextItems());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixValidators());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register(new PropertyGridEditorMatrixTriggers());
_index__WEBPACK_IMPORTED_MODULE_6__["PropertyGridEditorCollection"].register({
    fit: function (prop) {
        if (prop.name === "icon") {
            return prop.classInfo.name === "itemvalue";
        }
        return false;
    },
    getJSON: function (obj) {
        return {
            "type": "html"
        };
    }
});


/***/ }),

/***/ "./src/property-grid/object-selector.ts":
/*!**********************************************!*\
  !*** ./src/property-grid/object-selector.ts ***!
  \**********************************************/
/*! exports provided: ObjectSelectorItem, ObjectSelector, ObjectSelectorModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectSelectorItem", function() { return ObjectSelectorItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectSelector", function() { return ObjectSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectSelectorModel", function() { return ObjectSelectorModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");



var ObjectSelectorItem = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ObjectSelectorItem, _super);
    function ObjectSelectorItem(id, data, title, level) {
        var _this = _super.call(this, { id: "sv_item_selector_" + id.toString(), title: title }) || this;
        _this.data = data;
        _this.level = level;
        return _this;
    }
    ObjectSelectorItem.prototype.hasText = function (filteredTextInLow) {
        if (!filteredTextInLow)
            return true;
        if (!this.textInLow) {
            this.textInLow = this.title.toLocaleLowerCase();
        }
        return this.textInLow.indexOf(filteredTextInLow) > -1;
    };
    return ObjectSelectorItem;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]));

var ObjectSelector = /** @class */ (function () {
    function ObjectSelector(creator, survey, getObjectDisplayName) {
        if (getObjectDisplayName === void 0) { getObjectDisplayName = undefined; }
        this.creator = creator;
        this.getObjectDisplayName = getObjectDisplayName;
        this.surveyValue = survey;
        this.rebuild();
    }
    Object.defineProperty(ObjectSelector.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjectSelector.prototype, "items", {
        get: function () {
            return this.itemsValue;
        },
        enumerable: false,
        configurable: true
    });
    ObjectSelector.prototype.getItemByObj = function (obj) {
        var items = this.items;
        for (var i = 0; i < items.length; i++) {
            if (items[i].data === obj)
                return items[i];
        }
        return null;
    };
    ObjectSelector.prototype.filterByText = function (filteredText) {
        this.filteredTextInLow = !!filteredText ? filteredText.toLocaleLowerCase() : "";
        this.updateItemsVisibility();
    };
    ObjectSelector.prototype.rebuild = function () {
        var objs = [];
        this.deepestLevel = 0;
        var root = this.createItem(this.survey, null);
        objs.push(root);
        for (var i = 0; i < this.survey.pages.length; i++) {
            var page = this.survey.pages[i];
            var itemsParent = root;
            if (!this.creator || this.creator.pageEditMode !== "single") {
                var pageItem = this.createItem(page, root);
                objs.push(pageItem);
                itemsParent = pageItem;
            }
            this.buildElements(objs, this.getElements(page), itemsParent);
        }
        this.itemsValue = objs;
    };
    ObjectSelector.prototype.updateItemsVisibility = function () {
        for (var i = this.deepestLevel; i >= 0; i--) {
            this.updateItemsLevelVisibility(i);
        }
    };
    ObjectSelector.prototype.updateItemsLevelVisibility = function (level) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item.level !== level)
                continue;
            item.visible = this.hasVisibleChildren(i) || item.hasText(this.filteredTextInLow);
        }
    };
    ObjectSelector.prototype.hasVisibleChildren = function (index) {
        var level = this.items[index].level;
        for (var i = index + 1; i < this.items.length; i++) {
            if (this.items[i].level <= level)
                return false;
            if (this.items[i].visible)
                return true;
        }
        return false;
    };
    ObjectSelector.prototype.getElements = function (element) {
        return _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getElements(element);
    };
    ObjectSelector.prototype.buildElements = function (objs, elements, parentItem) {
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            var item = this.createItem(el, parentItem);
            objs.push(item);
            this.buildElements(objs, this.getElements(el), item);
        }
    };
    ObjectSelector.prototype.createItem = function (obj, parent) {
        var item = new ObjectSelectorItem(ObjectSelector.uniqueId++, obj, this.getText(obj), parent != null ? parent.level + 1 : 0);
        if (item.level > this.deepestLevel) {
            this.deepestLevel = item.level;
        }
        return item;
    };
    ObjectSelector.prototype.getText = function (obj) {
        var text = !!this.getObjectDisplayName
            ? this.getObjectDisplayName(obj, "property-grid-header:element-list", "property-grid", undefined)
            : _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getObjectName(obj, false);
        return text;
    };
    ObjectSelector.uniqueId = 0;
    return ObjectSelector;
}());

var ObjectSelectorModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ObjectSelectorModel, _super);
    function ObjectSelectorModel(creator, getObjectDisplayName) {
        if (getObjectDisplayName === void 0) { getObjectDisplayName = undefined; }
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.getObjectDisplayName = getObjectDisplayName;
        return _this;
    }
    Object.defineProperty(ObjectSelectorModel.prototype, "list", {
        get: function () {
            return this.listModelValue;
        },
        enumerable: false,
        configurable: true
    });
    ObjectSelectorModel.prototype.show = function (survey, selectedObj, onClose) {
        var _this = this;
        this.selector = new ObjectSelector(this.creator, survey, this.getObjectDisplayName);
        var selectedItem = this.selector.getItemByObj(selectedObj);
        if (!this.listModelValue) {
            this.listModelValue = new survey_core__WEBPACK_IMPORTED_MODULE_1__["ListModel"](this.selector.items, function (item) { onClose(item.data); }, true, selectedItem, function (text) { _this.selector.filterByText(text); });
        }
        else {
            this.listModelValue.setItems(this.selector.items);
            this.listModelValue.selectedItem = selectedItem;
        }
        this.isVisible = true;
    };
    ObjectSelectorModel.prototype.refresh = function () {
        this.listModelValue.refresh();
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], ObjectSelectorModel.prototype, "isVisible", void 0);
    return ObjectSelectorModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/property-grid/property-grid-view-model.ts":
/*!*******************************************************!*\
  !*** ./src/property-grid/property-grid-view-model.ts ***!
  \*******************************************************/
/*! exports provided: PropertyGridViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridViewModel", function() { return PropertyGridViewModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _object_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object-selector */ "./src/property-grid/object-selector.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../editorLocalization */ "./src/editorLocalization.ts");






var PropertyGridViewModel = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridViewModel, _super);
    function PropertyGridViewModel(propertyGridModel, creator) {
        var _this = _super.call(this) || this;
        _this.propertyGridModel = propertyGridModel;
        _this.creator = creator;
        _this.selectedElementName = _this.getTitle();
        _this.propertyGridModel.objValueChangedCallback = function () {
            _this.onSurveyChanged();
        };
        _this.propertyGridModel.changedFromActionCallback = function (obj, propertyName) {
            if (!!_this.selectionController) {
                _this.selectionController.selectFromAction(obj, propertyName);
            }
        };
        _this.initActions();
        _this.creator.onPropertyChanged.add(function (sender, options) {
            if (options.name === "sidebarLocation") {
                _this.selectorPopupModel.horizontalPosition = _this.creator.sidebarLocation == "right" ? "left" : "right";
            }
        });
        _this.onSurveyChanged();
        return _this;
    }
    PropertyGridViewModel.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (!!this.nextSelectionAction && name === "hasNext") {
            this.nextSelectionAction.enabled = this.hasNext;
        }
        if (!!this.prevSelectionAction && name === "hasPrev") {
            this.prevSelectionAction.enabled = this.hasPrev;
        }
    };
    Object.defineProperty(PropertyGridViewModel.prototype, "selectionController", {
        get: function () {
            return this.creator.selectionHistoryController;
        },
        enumerable: false,
        configurable: true
    });
    PropertyGridViewModel.prototype.onSurveyChanged = function () {
        var _this = this;
        this.survey = this.propertyGridModel.survey;
        if (!!this.survey) {
            this.survey.onValueChanged.add(function (sender, options) {
                if (options.name == "name" || options.name == "title") {
                    _this.updateTitle();
                }
            });
        }
        this.updateTitle();
        if (this.selectionController) {
            this.hasPrev = this.selectionController.hasPrev;
            this.hasNext = this.selectionController.hasNext;
        }
    };
    PropertyGridViewModel.prototype.updateTitle = function () {
        var titleName = this.getTitle();
        this.selectedElementName = titleName;
        this.objectSelectionAction.title = this.selectedElementName;
    };
    PropertyGridViewModel.prototype.getTitle = function () {
        var obj = this.getSelectedObj();
        if (!obj)
            return "";
        var displayName = _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getObjectName(obj, this.propertyGridModel.options.showObjectTitles);
        return this.propertyGridModel.options.getObjectDisplayName(obj, "property-grid-header:selected-element", "property-grid-title", displayName);
    };
    PropertyGridViewModel.prototype.getSelectedObj = function () {
        return this.propertyGridModel.obj;
    };
    PropertyGridViewModel.prototype.initActions = function () {
        var _this = this;
        if (_creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].propertyGrid.showNavigationButtons) {
            this.prevSelectionAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "svd-grid-history-prev",
                iconName: "icon-arrow-left",
                component: "sv-action-bar-item",
                title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_5__["getLocString"])("ed.prevSelected"),
                showTitle: false,
                enabled: this.hasPrev,
                action: function () {
                    _this.selectionController.prev();
                }
            });
            this.nextSelectionAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
                id: "svd-grid-history-next",
                iconName: "icon-arrow-right",
                component: "sv-action-bar-item",
                title: Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_5__["getLocString"])("ed.nextSelected"),
                showTitle: false,
                enabled: this.hasNext,
                action: function () {
                    _this.selectionController.next();
                }
            });
        }
        var selectorModel = new _object_selector__WEBPACK_IMPORTED_MODULE_3__["ObjectSelectorModel"](this.creator, function (obj, area, reason, displayName) {
            return _this.propertyGridModel.options.getObjectDisplayName(obj, area, reason, displayName);
        });
        this.selectorPopupModel = new survey_core__WEBPACK_IMPORTED_MODULE_1__["PopupModel"]("svc-object-selector", { model: selectorModel }, "bottom", "center");
        this.selectorPopupModel.cssClass += " svc-object-selector";
        this.selectorPopupModel.displayMode = this.creator.isTouch ? "overlay" : "popup";
        this.objectSelectionAction = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: "svd-grid-object-selector",
            title: this.selectedElementName,
            css: "sv-action--object-selector sv-action-bar-item--secondary",
            component: "sv-action-bar-item-dropdown",
            disableHide: true,
            action: function () {
                selectorModel.show(_this.selectionController.creator.survey, _this.propertyGridModel.obj, function (obj) {
                    _this.selectionController.selectFromAction(obj, "name");
                    _this.selectorPopupModel.toggleVisibility();
                });
                _this.selectorPopupModel.toggleVisibility();
                selectorModel.list.scrollToSelectedItem();
            },
            popupModel: this.selectorPopupModel
        });
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PropertyGridViewModel.prototype, "hasPrev", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PropertyGridViewModel.prototype, "hasNext", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PropertyGridViewModel.prototype, "survey", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PropertyGridViewModel.prototype, "selectedElementName", void 0);
    return PropertyGridViewModel;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/property-grid/restfull.ts":
/*!***************************************!*\
  !*** ./src/property-grid/restfull.ts ***!
  \***************************************/
/*! exports provided: PropertyGridEditorQuestionRestfull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridEditorQuestionRestfull", function() { return PropertyGridEditorQuestionRestfull; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");



var json = {
    name: "propertygrid_restfull",
    showInToolbox: false,
    createElements: function (panel) {
        //tell ComponentCollection that it is composite question
    }
};
if (!survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"].Instance.getCustomQuestionByName(json.name)) {
    survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"].Instance.add(json);
}
var PropertyGridEditorQuestionRestfull = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridEditorQuestionRestfull, _super);
    function PropertyGridEditorQuestionRestfull() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridEditorQuestionRestfull.prototype.fit = function (prop) {
        return prop.type == "restfull";
    };
    PropertyGridEditorQuestionRestfull.prototype.getJSON = function (obj, prop, options) {
        return {
            type: "propertygrid_restfull",
            titleLocation: "hidden"
        };
    };
    PropertyGridEditorQuestionRestfull.prototype.onCreated = function (obj, question, prop, options) {
        new _index__WEBPACK_IMPORTED_MODULE_2__["PropertyJSONGenerator"](obj[prop.name], options, obj, prop).setupObjPanel(question["contentPanel"], true);
    };
    return PropertyGridEditorQuestionRestfull;
}(_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorQuestion"]));

_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridEditorQuestionRestfull());


/***/ }),

/***/ "./src/property-grid/values-survey.ts":
/*!********************************************!*\
  !*** ./src/property-grid/values-survey.ts ***!
  \********************************************/
/*! exports provided: DefaultValueEditor, DefaultArrayValueEditor, DefaultMatrixRowValueEditor, DefaultPanelDynamicPanelValueEditor, TriggerValueEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultValueEditor", function() { return DefaultValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultArrayValueEditor", function() { return DefaultArrayValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultMatrixRowValueEditor", function() { return DefaultMatrixRowValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultPanelDynamicPanelValueEditor", function() { return DefaultPanelDynamicPanelValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriggerValueEditor", function() { return TriggerValueEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");



var DefaultValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DefaultValueEditor, _super);
    function DefaultValueEditor(editQuestion, propertyName, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, options, false) || this;
        _this.editQuestion = editQuestion;
        _this.propertyName = propertyName;
        _this.setupSurvey();
        _this.question.value = _this.getQuestionValue();
        return _this;
    }
    Object.defineProperty(DefaultValueEditor.prototype, "question", {
        get: function () {
            return this.editSurvey.getQuestionByName("question");
        },
        enumerable: false,
        configurable: true
    });
    DefaultValueEditor.prototype.getSurveyJSON = function () {
        return {
            elements: [this.getQuestionJSON()]
        };
    };
    DefaultValueEditor.prototype.getQuestionJSON = function () {
        var json = this.editQuestion.toJSON();
        json.name = "question";
        json.title = json.title || this.editQuestion.name;
        json.type = this.editQuestion.getType();
        if (json.type == "expression") {
            json.type = "text";
        }
        if (!!json.cellType && json.type == "matrixdropdowncolumn") {
            json.type = json.cellType;
            delete json["cellType"];
        }
        _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].updateQuestionJson(json);
        return json;
    };
    DefaultValueEditor.prototype.getQuestionValue = function () {
        return this.editQuestion[this.propertyName];
    };
    DefaultValueEditor.prototype.getEditValue = function () {
        return this.question.value;
    };
    DefaultValueEditor.prototype.getSurveyCreationReason = function () {
        return "default-value";
    };
    DefaultValueEditor.prototype.apply = function () {
        this.editQuestion[this.propertyName] = this.getEditValue();
        return true;
    };
    return DefaultValueEditor;
}(_index__WEBPACK_IMPORTED_MODULE_1__["PropertyEditorSetupValue"]));

var DefaultArrayValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DefaultArrayValueEditor, _super);
    function DefaultArrayValueEditor(editQuestion, propertyName, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, editQuestion, propertyName, options) || this;
        _this.editQuestion = editQuestion;
        _this.propertyName = propertyName;
        return _this;
    }
    DefaultArrayValueEditor.prototype.getQuestionValue = function () {
        var res = _super.prototype.getQuestionValue.call(this);
        if (!res)
            return res;
        if (!Array.isArray(res)) {
            res = [res];
        }
        return res;
    };
    DefaultArrayValueEditor.prototype.getEditValue = function () {
        var res = _super.prototype.getEditValue.call(this);
        if (res && Array.isArray(res)) {
            if (res.length == 0)
                return null;
            return res[0];
        }
        return res;
    };
    return DefaultArrayValueEditor;
}(DefaultValueEditor));

var DefaultMatrixRowValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DefaultMatrixRowValueEditor, _super);
    function DefaultMatrixRowValueEditor(editQuestion, propertyName, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, editQuestion, propertyName, options) || this;
        _this.editQuestion = editQuestion;
        _this.propertyName = propertyName;
        return _this;
    }
    DefaultMatrixRowValueEditor.prototype.getQuestionJSON = function () {
        var json = _super.prototype.getQuestionJSON.call(this);
        json.type = "matrixdynamic";
        json.rowCount = 1;
        json.minRowCount = 1;
        json.maxRowCount = 1;
        json.columnsLocation = "vertical";
        return json;
    };
    return DefaultMatrixRowValueEditor;
}(DefaultArrayValueEditor));

var DefaultPanelDynamicPanelValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DefaultPanelDynamicPanelValueEditor, _super);
    function DefaultPanelDynamicPanelValueEditor(editQuestion, propertyName, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, editQuestion, propertyName, options) || this;
        _this.editQuestion = editQuestion;
        _this.propertyName = propertyName;
        return _this;
    }
    DefaultPanelDynamicPanelValueEditor.prototype.getQuestionJSON = function () {
        var json = _super.prototype.getQuestionJSON.call(this);
        json.panelCount = 1;
        json.minPanelCount = 1;
        json.maxPanelCount = 1;
        return json;
    };
    return DefaultPanelDynamicPanelValueEditor;
}(DefaultArrayValueEditor));

var TriggerValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TriggerValueEditor, _super);
    function TriggerValueEditor(editQuestion, editObj, propertyName, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this, editQuestion, propertyName, options) || this;
        _this.editQuestion = editQuestion;
        _this.editObj = editObj;
        _this.propertyName = propertyName;
        _this.question.value = _this.getQuestionValue();
        return _this;
    }
    TriggerValueEditor.prototype.getQuestionValue = function () {
        return !!this.editObj ? this.editObj[this.propertyName] : null;
    };
    TriggerValueEditor.prototype.apply = function () {
        this.editObj[this.propertyName] = this.question.value;
        return true;
    };
    return TriggerValueEditor;
}(DefaultValueEditor));



/***/ }),

/***/ "./src/property-grid/values.ts":
/*!*************************************!*\
  !*** ./src/property-grid/values.ts ***!
  \*************************************/
/*! exports provided: PropertyGridValueEditorBase, PropertyGridCellsEditor, PropertyGridValueEditor, PropertyGridRowValueEditor, PropertyGridPanelValueEditor, PropertyGridTriggerValueEditor, PropertyGridTriggerValueInLogicEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridValueEditorBase", function() { return PropertyGridValueEditorBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridCellsEditor", function() { return PropertyGridCellsEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridValueEditor", function() { return PropertyGridValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridRowValueEditor", function() { return PropertyGridRowValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridPanelValueEditor", function() { return PropertyGridPanelValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTriggerValueEditor", function() { return PropertyGridTriggerValueEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyGridTriggerValueInLogicEditor", function() { return PropertyGridTriggerValueInLogicEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index */ "./src/property-grid/index.ts");
/* harmony import */ var _cells_survey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cells-survey */ "./src/property-grid/cells-survey.ts");
/* harmony import */ var _values_survey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./values-survey */ "./src/property-grid/values-survey.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");






var PropertyGridValueEditorBase = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridValueEditorBase, _super);
    function PropertyGridValueEditorBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onCreated = function (obj, question, prop, options) {
            var linkQuestion = question;
            linkQuestion.isClickableCallback = function () {
                return !linkQuestion.isReadOnly || !_this.isValueEmpty(linkQuestion.value);
            };
            linkQuestion.linkClickCallback = function () {
                _this.showModalPropertyEditor(_this, prop, question, options, function () { return linkQuestion.isSelected = false; });
                linkQuestion.isSelected = true;
            };
            linkQuestion.clearClickCallback = function () {
                _this.clearPropertyValue(question.obj, prop, question, null /*this.options*/);
            };
        };
        return _this;
    }
    PropertyGridValueEditorBase.prototype.getJSON = function (obj, prop, options) {
        return {
            type: "linkvalue",
            showValueInLink: false,
            titleLocation: "hidden"
        };
    };
    PropertyGridValueEditorBase.prototype.clearPropertyValue = function (obj, prop, question, options) {
        obj[prop.name] = undefined;
    };
    PropertyGridValueEditorBase.prototype.isValueEmpty = function (val) {
        return survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(val);
    };
    PropertyGridValueEditorBase.prototype.isSupportGrouping = function () {
        return true;
    };
    return PropertyGridValueEditorBase;
}(_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditor"]));

var PropertyGridCellsEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridCellsEditor, _super);
    function PropertyGridCellsEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridCellsEditor.prototype.fit = function (prop) {
        return prop.type == "cells";
    };
    PropertyGridCellsEditor.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        return new _cells_survey__WEBPACK_IMPORTED_MODULE_3__["CellsEditor"](obj, options);
    };
    PropertyGridCellsEditor.prototype.clearPropertyValue = function (obj, prop, question, options) {
        obj.cells.setJson(null);
    };
    PropertyGridCellsEditor.prototype.isValueEmpty = function (val) {
        if (!val)
            return true;
        return survey_core__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(val.values);
    };
    return PropertyGridCellsEditor;
}(PropertyGridValueEditorBase));

var PropertyGridValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridValueEditor, _super);
    function PropertyGridValueEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridValueEditor.prototype.fit = function (prop) {
        return prop.type == "value";
    };
    PropertyGridValueEditor.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        return new _values_survey__WEBPACK_IMPORTED_MODULE_4__["DefaultValueEditor"](obj, prop.name, options);
    };
    return PropertyGridValueEditor;
}(PropertyGridValueEditorBase));

var PropertyGridRowValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridRowValueEditor, _super);
    function PropertyGridRowValueEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridRowValueEditor.prototype.fit = function (prop) {
        return prop.type == "rowvalue";
    };
    PropertyGridRowValueEditor.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        return new _values_survey__WEBPACK_IMPORTED_MODULE_4__["DefaultMatrixRowValueEditor"](obj, prop.name, options);
    };
    return PropertyGridRowValueEditor;
}(PropertyGridValueEditorBase));

var PropertyGridPanelValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridPanelValueEditor, _super);
    function PropertyGridPanelValueEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridPanelValueEditor.prototype.fit = function (prop) {
        return prop.type == "panelvalue";
    };
    PropertyGridPanelValueEditor.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        return new _values_survey__WEBPACK_IMPORTED_MODULE_4__["DefaultPanelDynamicPanelValueEditor"](obj, prop.name, options);
    };
    return PropertyGridPanelValueEditor;
}(PropertyGridValueEditorBase));

var PropertyGridTriggerValueEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridTriggerValueEditor, _super);
    function PropertyGridTriggerValueEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridTriggerValueEditor.prototype.fit = function (prop) {
        return prop.type == "triggervalue";
    };
    PropertyGridTriggerValueEditor.prototype.createPropertyEditorSetup = function (obj, prop, question, options) {
        var trigger = question.obj;
        var setQuestion = this.getSetToNameQuestion(trigger);
        return new _values_survey__WEBPACK_IMPORTED_MODULE_4__["TriggerValueEditor"](setQuestion, trigger, prop.name, options);
    };
    PropertyGridTriggerValueEditor.prototype.getSetToNameQuestion = function (obj) {
        var survey = obj.getSurvey();
        if (!survey) {
            survey = obj["owner"];
        }
        if (!obj["setToName"] || !survey)
            return null;
        return survey.getQuestionByValueName(obj["setToName"]);
    };
    return PropertyGridTriggerValueEditor;
}(PropertyGridValueEditorBase));

var PropertyGridTriggerValueInLogicEditor = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PropertyGridTriggerValueInLogicEditor, _super);
    function PropertyGridTriggerValueInLogicEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyGridTriggerValueInLogicEditor.prototype.fit = function (prop, context) {
        return context === "logic" && prop.type == "triggervalue";
    };
    PropertyGridTriggerValueInLogicEditor.prototype.getJSON = function (obj, prop, options) {
        var setQuestion = this.getSetToNameQuestion(obj);
        if (!setQuestion)
            return {
                type: "linkvalue"
            };
        var json = setQuestion.toJSON();
        json.type = setQuestion.getType();
        _survey_helper__WEBPACK_IMPORTED_MODULE_5__["SurveyHelper"].updateQuestionJson(json);
        return json;
    };
    return PropertyGridTriggerValueInLogicEditor;
}(PropertyGridTriggerValueEditor));

_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridCellsEditor());
_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridValueEditor());
_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridRowValueEditor());
_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridPanelValueEditor());
_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridTriggerValueEditor());
_index__WEBPACK_IMPORTED_MODULE_2__["PropertyGridEditorCollection"].register(new PropertyGridTriggerValueInLogicEditor());


/***/ }),

/***/ "./src/question-editor/definition.ts":
/*!*******************************************!*\
  !*** ./src/question-editor/definition.ts ***!
  \*******************************************/
/*! exports provided: SurveyQuestionEditorDefinition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorDefinition", function() { return SurveyQuestionEditorDefinition; });
var SurveyQuestionEditorDefinition = /** @class */ (function () {
    function SurveyQuestionEditorDefinition() {
    }
    SurveyQuestionEditorDefinition.definition = {
        question: {
            properties: [
                "name",
                "title",
                "description",
                "visible",
                "isRequired",
                "readOnly",
                "showCommentArea",
                "commentText",
                "commentPlaceholder",
                { name: "visibleIf", tab: "logic" },
                { name: "enableIf", tab: "logic" },
                { name: "requiredIf", tab: "logic" },
                { name: "bindings", tab: "logic" },
                { name: "defaultValueExpression", tab: "logic" },
                { name: "resetValueIf", tab: "logic" },
                { name: "setValueIf", tab: "logic" },
                { name: "setValueExpression", tab: "logic" },
                { name: "page", tab: "layout" },
                { name: "startWithNewLine", tab: "layout" },
                { name: "hideNumber", tab: "layout" },
                { name: "state", tab: "layout" },
                { name: "titleLocation", tab: "layout" },
                { name: "descriptionLocation", tab: "layout" },
                { name: "errorLocation", tab: "layout" },
                { name: "indent", tab: "layout" },
                { name: "width", tab: "layout" },
                { name: "minWidth", tab: "layout" },
                { name: "maxWidth", tab: "layout" },
                { name: "valueName", tab: "data" },
                { name: "defaultValue", tab: "data" },
                { name: "correctAnswer", tab: "data" },
                { name: "useDisplayValuesInDynamicTexts", tab: "data" },
                { name: "clearIfInvisible", tab: "data" },
                { name: "requiredErrorText", tab: "validation" },
                { name: "validators", tab: "validation" }
            ],
            tabs: [
                { name: "logic", index: 100 },
                { name: "layout", index: 200 },
                { name: "data", index: 300 },
                { name: "validation", index: 400 }
            ]
        },
        comment: {
            properties: [
                { name: "rows", tab: "layout" },
                { name: "cols", tab: "layout" },
                "placeholder",
                { name: "maxLength", tab: "validation" },
                { name: "textUpdateMode", tab: "data" },
                { name: "autoGrow", tab: "layout" },
                { name: "allowResize", tab: "layout" },
            ]
        },
        file: {
            properties: [
                "sourceType",
                "allowMultiple",
                "allowImagesPreview",
                "acceptedTypes",
                { name: "showPreview" },
                { name: "storeDataAsText" },
                "maxSize",
                "imageHeight",
                "imageWidth",
                "waitForUpload",
                "needConfirmRemoveFile"
            ]
        },
        html: {
            properties: ["html"]
        },
        matrixdropdownbase: {
            properties: [
                "cellType",
                "optionsCaption",
                "detailPanelMode",
                "detailPanelShowOnAdding",
                { name: "showHeader", tab: "layout" },
                { name: "showColumnHeader", tab: "layout" },
                { name: "verticalAlign", tab: "layout" },
                { name: "alternateRows", tab: "layout" },
                { name: "columnsVisibleIf", tab: "logic" },
                { name: "columnLayout", tab: "layout" },
                { name: "horizontalScroll", tab: "layout" },
                { name: "columnColCount", tab: "layout" },
                { name: "columnMinWidth", tab: "layout" },
                { name: "cellErrorLocation", tab: "layout" },
                { name: "detailErrorLocation", tab: "layout" }
            ],
            tabs: [
                { name: "columns", index: 10 },
                { name: "rows", index: 11 },
                { name: "choices", index: 12 }
            ]
        },
        matrixdynamic: {
            properties: [
                "allowAddRows",
                "allowRemoveRows",
                "allowRowsDragAndDrop",
                "rowCount",
                "minRowCount",
                "maxRowCount",
                "addRowLocation",
                "addRowText",
                "removeRowText",
                "confirmDelete",
                "confirmDeleteText",
                "placeholder",
                { name: "hideColumnsIfEmpty", tab: "columns" },
                { name: "emptyRowsText", tab: "columns" },
                { name: "defaultRowValue", tab: "data" },
                { name: "defaultValueFromLastRow", tab: "data" },
                { name: "keyName", tab: "validation" },
                { name: "keyDuplicationError", tab: "validation" }
            ]
        },
        matrixdropdown: {
            properties: [
                "totalText",
                "placeholder",
                { name: "hideIfRowsEmpty", tab: "rows" },
                { name: "rowsVisibleIf", tab: "logic" },
                { name: "rowTitleWidth", tab: "layout" },
                { name: "keyDuplicationError", tab: "validation" }
            ]
        },
        matrix: {
            properties: [
                { name: "isAllRowRequired", tab: "validation" },
                { name: "showHeader", tab: "layout" },
                { name: "showColumnHeader", tab: "layout" },
                { name: "verticalAlign", tab: "layout" },
                { name: "alternateRows", tab: "layout" },
                { name: "rowsOrder", tab: "rows" },
                { name: "hideIfRowsEmpty", tab: "rows" },
                { name: "columnsVisibleIf", tab: "logic" },
                { name: "rowsVisibleIf", tab: "logic" },
                { name: "columnMinWidth", tab: "layout" },
                { name: "rowTitleWidth", tab: "layout" }
            ],
            tabs: [
                { name: "columns", index: 10 },
                { name: "rows", index: 11 },
                { name: "cells", index: 500 }
            ]
        },
        multipletext: {
            properties: [
                { name: "colCount", tab: "layout" },
                { name: "itemSize", tab: "layout" },
                { name: "itemErrorLocation", tab: "layout" }
            ],
            tabs: [{ name: "items", index: 10 }]
        },
        rating: {
            properties: [
                { name: "displayMode", tab: "layout" },
                { name: "rateCount", tab: "rateValues" },
                { name: "rateMin", tab: "rateValues" },
                { name: "rateMax", tab: "rateValues" },
                { name: "rateStep", tab: "rateValues" },
                { name: "minRateDescription", tab: "rateValues" },
                { name: "maxRateDescription", tab: "rateValues" },
                { name: "displayRateDescriptionsAsExtremeItems", tab: "rateValues" },
            ],
            tabs: [{ name: "rateValues", index: 10 }]
        },
        selectbase: {
            properties: [
                { name: "choicesFromQuestion", tab: "choices" },
                { name: "choicesFromQuestionMode", tab: "choices" },
                { name: "choiceValuesFromQuestion", tab: "choices" },
                { name: "choiceTextsFromQuestion", tab: "choices" },
                { name: "choicesOrder", tab: "choices" },
                { name: "colCount", tab: "layout" },
                { name: "showOtherItem", tab: "choices" },
                { name: "otherText", tab: "choices" },
                { name: "otherPlaceholder", tab: "choices" },
                { name: "showNoneItem", tab: "choices" },
                { name: "noneText", tab: "choices" },
                { name: "hideIfChoicesEmpty", tab: "logic" },
                { name: "choicesVisibleIf", tab: "logic" },
                { name: "choicesEnableIf", tab: "logic" },
                { name: "otherErrorText", tab: "validation" },
                { name: "separateSpecialChoices", tab: "choices" },
            ],
            tabs: [
                { name: "choices", index: 10 },
                { name: "choicesByUrl", index: 11 }
            ]
        },
        checkbox: {
            properties: [
                { name: "showSelectAllItem", tab: "choices" },
                { name: "selectAllText", tab: "choices" },
                { name: "minSelectedChoices", tab: "choices" },
                { name: "maxSelectedChoices", tab: "choices" },
                { name: "separateSpecialChoices", tab: "choices" },
            ]
        },
        ranking: {
            properties: [
                { name: "selectToRankEnabled" },
                { name: "selectToRankAreasLayout", tab: "layout" },
                { name: "minSelectedChoices", tab: "choices" },
                { name: "maxSelectedChoices", tab: "choices" }
            ]
        },
        radiogroup: {
            properties: [
                { name: "showClearButton", tab: "choices" },
                { name: "separateSpecialChoices", tab: "choices" },
            ]
        },
        dropdown: {
            properties: [
                "placeholder",
                "autocomplete",
                { name: "choicesMin", tab: "choices" },
                { name: "choicesMax", tab: "choices" },
                { name: "choicesStep", tab: "choices" },
                { name: "allowClear", tab: "choices" }
            ]
        },
        tagbox: {
            properties: [
                "closeOnSelect",
                "placeholder",
                { name: "searchEnabled", tab: "choices" },
                { name: "hideSelectedItems", tab: "choices" },
                { name: "allowClear", tab: "choices" }
            ]
        },
        imagepicker: {
            properties: [
                "contentMode",
                "imageFit",
                "isResponsive",
                "minImageWidth",
                "maxImageWidth",
                "minImageHeight",
                "maxImageHeight",
                { name: "imageHeight", placeholder: "auto" },
                { name: "imageWidth", placeholder: "auto" },
                "multiSelect",
                "showLabel",
            ]
        },
        image: {
            properties: [
                "imageLink",
                "contentMode",
                "imageFit",
                { name: "imageHeight", placeholder: "auto" },
                { name: "imageWidth", placeholder: "auto" },
                "text"
            ]
        },
        "itemvalue[]@choices": {
            properties: [{ name: "visibleIf" }, { name: "enableIf" }],
            tabs: [{ name: "general" }]
        },
        "itemvalue[]@rows": {
            properties: [{ name: "visibleIf" }, { name: "enableIf" }],
            tabs: [{ name: "general" }]
        },
        "itemvalue[]@columns": {
            properties: [{ name: "visibleIf" }, { name: "enableIf" }],
            tabs: [{ name: "general" }]
        },
        text: {
            properties: [
                "inputType",
                "min",
                "max",
                "step",
                "placeholder",
                "autocomplete",
                "dataList",
                { name: "minValueExpression", tab: "logic" },
                { name: "maxValueExpression", tab: "logic" },
                { name: "size", tab: "layout" },
                { name: "maxLength", tab: "validation" },
                { name: "minErrorText", tab: "validation" },
                { name: "maxErrorText", tab: "validation" },
                { name: "textUpdateMode", tab: "data" }
            ]
        },
        boolean: {
            properties: [
                "label",
                "labelTrue",
                "labelFalse",
                "showTitle",
                { name: "valueTrue", tab: "data" },
                { name: "valueFalse", tab: "data" }
            ]
        },
        expression: {
            properties: [
                "expression",
                "currency",
                "displayStyle",
                "format",
                "maximumFractionDigits",
                "minimumFractionDigits",
                "useGrouping"
            ]
        },
        matrixdropdowncolumn: {
            properties: ["name", "title"]
        },
        "matrixdropdowncolumn@default": {
            properties: [
                "cellType",
                "name",
                "title",
                "visible",
                "isRequired",
                "readOnly",
                "isUnique",
                "showInMultipleColumns",
                "width",
                "minWidth",
                { name: "visibleIf", tab: "logic" },
                { name: "enableIf", tab: "logic" },
                { name: "requiredIf", tab: "logic" },
                { name: "defaultValueExpression", tab: "logic" },
                { name: "resetValueIf", tab: "logic" },
                { name: "setValueIf", tab: "logic" },
                { name: "setValueExpression", tab: "logic" },
                { name: "totalType", tab: "totals" },
                { name: "totalDisplayStyle", tab: "totals" },
                { name: "totalCurrency", tab: "totals" },
                { name: "totalFormat", tab: "totals" },
                { name: "totalExpression", tab: "totals" }
            ],
            tabs: [
                { name: "general", index: 5 },
                { name: "logic", index: 20 },
                { name: "totals", index: 40 }
            ]
        },
        "matrixdropdowncolumn@checkbox": {
            properties: [
                { name: "choicesFromQuestion", tab: "choices" },
                { name: "choicesFromQuestionMode", tab: "choices" },
                { name: "choiceValuesFromQuestion", tab: "choices" },
                { name: "choiceTextsFromQuestion", tab: "choices" },
                { name: "showOtherItem", tab: "choices" },
                { name: "otherText", tab: "choices" },
                { name: "choicesOrder", tab: "choices" },
                { name: "colCount", tab: "choices" },
                { name: "showSelectAllItem", tab: "choices" },
                { name: "showNoneItem", tab: "choices" },
                { name: "noneText", tab: "choices" },
                { name: "minSelectedChoices", tab: "choices" },
                { name: "maxSelectedChoices", tab: "choices" },
                { name: "selectAllText", tab: "choices" },
                { name: "choicesVisibleIf", tab: "logic" },
                { name: "choicesEnableIf", tab: "logic" },
            ],
            tabs: [
                { name: "choices", index: 10 },
                { name: "choicesByUrl", index: 11 }
            ]
        },
        "matrixdropdowncolumn@radiogroup": {
            properties: [
                { name: "choicesFromQuestion", tab: "choices" },
                { name: "choicesFromQuestionMode", tab: "choices" },
                { name: "choiceValuesFromQuestion", tab: "choices" },
                { name: "choiceTextsFromQuestion", tab: "choices" },
                { name: "showOtherItem", tab: "choices" },
                { name: "otherText", tab: "choices" },
                { name: "choicesOrder", tab: "choices" },
                { name: "colCount", tab: "choices" },
                { name: "showNoneItem", tab: "choices" },
                { name: "noneText", tab: "choices" },
                { name: "choicesVisibleIf", tab: "logic" },
                { name: "choicesEnableIf", tab: "logic" },
            ],
            tabs: [
                { name: "choices", index: 10 },
                { name: "choicesByUrl", index: 11 }
            ]
        },
        "matrixdropdowncolumn@dropdown": {
            properties: [
                { name: "choicesFromQuestion", tab: "choices" },
                { name: "choicesFromQuestionMode", tab: "choices" },
                { name: "choiceValuesFromQuestion", tab: "choices" },
                { name: "choiceTextsFromQuestion", tab: "choices" },
                { name: "showOtherItem", tab: "choices" },
                { name: "otherText", tab: "choices" },
                { name: "choicesOrder", tab: "choices" },
                { name: "optionsCaption", tab: "choices" },
                { name: "showNoneItem", tab: "choices" },
                { name: "noneText", tab: "choices" },
                { name: "choicesVisibleIf", tab: "logic" },
                { name: "choicesEnableIf", tab: "logic" },
            ],
            tabs: [
                { name: "choices", index: 10 },
                { name: "choicesByUrl", index: 11 }
            ]
        },
        "matrixdropdowncolumn@text": {
            properties: [
                "inputType",
                "min",
                "max",
                "step",
                "placeholder",
                "dataList",
                "maxLength"
            ],
            tabs: [{ name: "validators", index: 10 }]
        },
        "matrixdropdowncolumn@comment": {
            properties: ["rows", "placeholder", "maxLength"],
            tabs: [{ name: "validators", index: 10 }]
        },
        "matrixdropdowncolumn@boolean": {
            properties: [
                "defaultValue",
                "labelTrue",
                "labelFalse",
                "valueTrue",
                "valueFalse"
            ]
        },
        "matrixdropdowncolumn@expression": {
            properties: ["displayStyle", "currency"],
            tabs: [{ name: "expression", index: 10 }]
        },
        "matrixdropdowncolumn@rating": {
            properties: [
                "rateValues",
                { name: "rateType", tab: "rateValues" },
                { name: "rateCount", tab: "rateValues" },
                { name: "rateColorMode", tab: "rateValues" },
                { name: "scaleColorMode", tab: "rateValues" },
                { name: "autoGenerate", tab: "rateValues" },
                { name: "rateMin", tab: "rateValues" },
                { name: "rateMax", tab: "rateValues" },
                { name: "rateStep", tab: "rateValues" },
                { name: "minRateDescription", tab: "rateValues" },
                { name: "maxRateDescription", tab: "rateValues" },
                { name: "displayRateDescriptionsAsExtremeItems", tab: "rateValues" },
            ],
            tabs: [{ name: "rateValues", index: 5 }]
        },
        multipletextitem: {
            properties: [
                "inputType",
                "name",
                "title",
                "isRequired",
                "maxLength",
                "size",
                "placeholder",
                "requiredErrorText",
                "validators",
                { name: "minValueExpression", tab: "logic" },
                { name: "maxValueExpression", tab: "logic" },
            ]
        },
        "multipletext@items": {
            properties: ["name", "title"]
        },
        calculatedvalue: {
            properties: ["name", "expression", "includeIntoResult"]
        },
        "calculatedvalue@items": {
            properties: ["name", "expression"]
        },
        paneldynamic: {
            properties: [
                "renderMode",
                "templateTabTitle",
                "tabAlign",
                "panelCount",
                "minPanelCount",
                "maxPanelCount",
                "panelsState",
                { name: "allowAddPanel" },
                { name: "allowRemovePanel" },
                "panelAddText",
                "panelRemoveText",
                "templateTitle",
                "templateDescription",
                "noEntriesText",
                "confirmDelete",
                "confirmDeleteText",
                "panelPrevText",
                "panelNextText",
                "showQuestionNumbers",
                "showRangeInProgress",
                { name: "defaultPanelValue", tab: "data" },
                { name: "defaultValueFromLastPanel", tab: "data" },
                { name: "templateTitleLocation", tab: "layout" },
                { name: "templateErrorLocation", tab: "layout" },
                { name: "panelRemoveButtonLocation", tab: "layout" },
                { name: "keyName", tab: "validation" },
                { name: "keyDuplicationError", tab: "validation" }
            ]
        },
        panelbase: {
            properties: [
                "name",
                "title",
                "description",
                "visible",
                "readOnly",
                { name: "visibleIf", tab: "logic" },
                { name: "enableIf", tab: "logic" },
                { name: "requiredIf", tab: "logic" },
                { name: "questionTitleLocation", tab: "layout" },
                { name: "questionErrorLocation", tab: "layout" }
            ],
            tabs: [
                { name: "logic", index: 100 },
                { name: "layout", index: 200 },
                { name: "data", index: 300 },
                { name: "validation", index: 400 }
            ]
        },
        panel: {
            properties: [
                "isRequired",
                { name: "requiredErrorText", tab: "validation" },
                { name: "page", tab: "layout" },
                { name: "startWithNewLine", tab: "layout" },
                { name: "state", tab: "layout" },
                { name: "questionsOrder", tab: "layout" },
                { name: "indent", tab: "layout" },
                { name: "innerIndent", tab: "layout" },
                { name: "width", tab: "layout" },
                { name: "showNumber", tab: "numbering" },
                { name: "showQuestionNumbers", tab: "numbering" },
                { name: "questionStartIndex", tab: "numbering" },
                { name: "minWidth", tab: "layout" },
                { name: "maxWidth", tab: "layout" },
            ],
            tabs: [{ name: "numbering", index: 350 }]
        },
        page: {
            properties: [
                "navigationTitle",
                "navigationDescription",
                "maxTimeToFinish",
                { name: "questionsOrder", tab: "layout" },
                { name: "navigationButtonsVisibility", tab: "layout" }
            ]
        },
        survey: {
            properties: [
                "title",
                "description",
                "showTitle",
                "locale",
                "mode",
                "cookieName",
                "widthMode",
                "width",
                "fitToContainer",
                { name: "showPreviewBeforeComplete", tab: "navigation" },
                { name: "pagePrevText", tab: "navigation" },
                { name: "pageNextText", tab: "navigation" },
                { name: "completeText", tab: "navigation" },
                { name: "previewText", tab: "navigation" },
                { name: "editText", tab: "navigation" },
                { name: "startSurveyText", tab: "navigation" },
                {
                    name: "showNavigationButtons",
                    tab: "navigation"
                },
                { name: "showPrevButton", tab: "navigation" },
                { name: "firstPageIsStarted", tab: "navigation" },
                { name: "goNextPageAutomatic", tab: "navigation" },
                { name: "showProgressBar", tab: "navigation" },
                { name: "progressBarType", tab: "navigation" },
                { name: "questionsOnPageMode", tab: "navigation" },
                { name: "showTOC", tab: "navigation" },
                { name: "tocLocation", tab: "navigation" },
                { name: "questionTitleLocation", tab: "question" },
                { name: "questionDescriptionLocation", tab: "question" },
                { name: "showQuestionNumbers", tab: "question" },
                { name: "questionTitlePattern", tab: "question" },
                { name: "requiredText", tab: "question" },
                { name: "questionStartIndex", tab: "question" },
                { name: "questionErrorLocation", tab: "question" },
                {
                    name: "focusFirstQuestionAutomatic",
                    tab: "question"
                },
                { name: "questionsOrder", tab: "question" },
                { name: "maxTextLength", tab: "question" },
                { name: "maxOthersLength", tab: "question" },
                { name: "autoGrowComment", tab: "question" },
                { name: "allowResizeComment", tab: "question" },
                { name: "showPageTitles", tab: "pages" },
                { name: "showPageNumbers", tab: "pages" },
                { name: "calculatedValues", tab: "logic" },
                { name: "triggers", tab: "logic" },
                { name: "clearInvisibleValues", tab: "data" },
                { name: "textUpdateMode", tab: "data" },
                { name: "sendResultOnPageNext", tab: "data" },
                { name: "storeOthersAsComment", tab: "data" },
                { name: "focusOnFirstError", tab: "validation" },
                { name: "checkErrorsMode", tab: "validation" },
                { name: "navigateToUrl", tab: "showOnCompleted" },
                { name: "showCompletedPage", tab: "showOnCompleted" },
                { name: "completedHtml", tab: "showOnCompleted" },
                { name: "navigateToUrlOnCondition", tab: "showOnCompleted" },
                { name: "completedHtmlOnCondition", tab: "showOnCompleted" },
                { name: "loadingHtml", tab: "showOnCompleted" },
                { name: "completedBeforeHtml", tab: "showOnCompleted" },
                { name: "maxTimeToFinish", tab: "timer" },
                { name: "maxTimeToFinishPage", tab: "timer" },
                { name: "showTimerPanel", tab: "timer" },
                { name: "showTimerPanelMode", tab: "timer" },
                { name: "logo", tab: "logo" },
                { name: "logoPosition", tab: "logo" },
                { name: "logoWidth", tab: "logo" },
                { name: "logoHeight", tab: "logo" },
                { name: "logoFit", tab: "logo" }
            ],
            tabs: [
                { name: "logo", index: 50 },
                { name: "navigation", index: 100 },
                { name: "question", index: 200 },
                { name: "pages", index: 250 },
                { name: "logic", index: 300 },
                { name: "data", index: 400 },
                { name: "validation", index: 500 },
                { name: "showOnCompleted", index: 600 },
                { name: "timer", index: 700 }
            ]
        },
        "page@survey": {
            properties: ["name", "title"]
        }
    };
    return SurveyQuestionEditorDefinition;
}());



/***/ }),

/***/ "./src/question-editor/properties.ts":
/*!*******************************************!*\
  !*** ./src/question-editor/properties.ts ***!
  \*******************************************/
/*! exports provided: SurveyQuestionEditorPropertyDefinition, SurveyQuestionEditorTabDefinition, SurveyQuestionProperties */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorPropertyDefinition", function() { return SurveyQuestionEditorPropertyDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorTabDefinition", function() { return SurveyQuestionEditorTabDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionProperties", function() { return SurveyQuestionProperties; });
/* harmony import */ var _definition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./definition */ "./src/question-editor/definition.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");




var SurveyQuestionEditorPropertyDefinition = /** @class */ (function () {
    function SurveyQuestionEditorPropertyDefinition() {
    }
    Object.defineProperty(SurveyQuestionEditorPropertyDefinition.prototype, "name", {
        get: function () {
            return !!this.property ? this.property.name : "";
        },
        enumerable: false,
        configurable: true
    });
    return SurveyQuestionEditorPropertyDefinition;
}());

var SurveyQuestionEditorTabDefinition = /** @class */ (function () {
    function SurveyQuestionEditorTabDefinition() {
        this.visible = true;
        this.index = 0;
        this.properties = [];
    }
    return SurveyQuestionEditorTabDefinition;
}());

var otherTabName = "others";
var SurveyQuestionProperties = /** @class */ (function () {
    function SurveyQuestionProperties(obj, options, className, showMode, parentObj, parentProperty) {
        if (options === void 0) { options = null; }
        if (className === void 0) { className = null; }
        if (showMode === void 0) { showMode = null; }
        if (parentObj === void 0) { parentObj = null; }
        if (parentProperty === void 0) { parentProperty = null; }
        this.obj = obj;
        this.options = options;
        this.parentObj = parentObj;
        this.parentProperty = parentProperty;
        this.tabs = [];
        this.showModeValue = showMode;
        this.properties = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getPropertiesByObj(this.obj);
        this.fillPropertiesHash();
        this.buildTabs(className);
    }
    SurveyQuestionProperties.prototype.getProperty = function (propertyName) {
        var res = this.propertiesHash[propertyName];
        return !!res && res.visible ? res.property : null;
    };
    Object.defineProperty(SurveyQuestionProperties.prototype, "showMode", {
        get: function () {
            return !!this.showModeValue ? this.showModeValue : "form";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyQuestionProperties.prototype, "isEmpty", {
        get: function () {
            for (var i = 0; i < this.tabs.length; i++) {
                if (this.tabs[i].visible && this.tabs[i].properties.length > 0)
                    return false;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    SurveyQuestionProperties.prototype.fillPropertiesHash = function () {
        this.propertiesHash = {};
        for (var i = 0; i < this.properties.length; i++) {
            var prop = this.properties[i];
            this.propertiesHash[prop.name] = {
                property: prop,
                visible: _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].isPropertyVisible(this.obj, prop, this.options, this.showMode, this.parentObj, this.parentProperty),
            };
        }
    };
    SurveyQuestionProperties.prototype.isJSONPropertyVisible = function (property) {
        var res = this.propertiesHash[property.name];
        return !!res && res.visible;
    };
    SurveyQuestionProperties.prototype.getTabByName = function (tabName) {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].name == tabName)
                return this.tabs[i];
        }
        return null;
    };
    SurveyQuestionProperties.prototype.getTabs = function () {
        return this.tabs;
    };
    SurveyQuestionProperties.prototype.getProperties = function (tab) {
        var res = [];
        for (var i = 0; i < tab.properties.length; i++) {
            res.push(tab.properties[i].property);
        }
        return res;
    };
    SurveyQuestionProperties.prototype.buildTabs = function (className) {
        if (!className) {
            className = this.obj.getType();
        }
        var definitions = this.getAllDefinitionsByClass(className);
        var addedProperties = [];
        for (var i = definitions.length - 1; i >= 0; i--) {
            var defItem = definitions[i];
            for (var j = !!defItem.tabs ? defItem.tabs.length - 1 : -1; j >= 0; j--) {
                if (addedProperties.indexOf(defItem.tabs[j].name) > -1)
                    continue;
                if (this.addPropertyIntoTab(defItem.tabs[j], true)) {
                    addedProperties.push(defItem.tabs[j].name);
                }
            }
            for (var j = !!defItem.properties ? defItem.properties.length - 1 : -1; j >= 0; j--) {
                var propertyName = defItem.properties[j]["name"] || defItem.properties[j];
                if (addedProperties.indexOf(propertyName) === -1) {
                    addedProperties.push(propertyName);
                    this.addPropertyIntoTab(defItem.properties[j]);
                }
            }
        }
        for (var i = this.tabs.length - 1; i >= 0; i--) {
            this.movePropertiesToNextProperties(this.tabs[i].properties);
            if (!this.tabs[i].visible) {
                this.tabs.splice(i, 1);
            }
            else {
                this.sortProperties(this.tabs[i].properties);
            }
        }
        this.tabs.sort(function (a, b) {
            return a.index < b.index ? -1 : a.index > b.index ? 1 : 0;
        });
    };
    SurveyQuestionProperties.prototype.addPropertyIntoTab = function (defProperty, isTab) {
        if (isTab === void 0) { isTab = false; }
        if (isTab) {
            var tab_1 = this.getTabOrCreate(defProperty.name);
            if (defProperty.index > 0) {
                tab_1.index = defProperty.index;
            }
            if (defProperty.visible === false) {
                tab_1.visible = false;
            }
            if (!!defProperty.title) {
                tab_1.title = defProperty.title;
            }
        }
        var isString = typeof defProperty == "string";
        var name = !isString ? defProperty.name : defProperty;
        var propRes = this.propertiesHash[name];
        if (!propRes)
            return false;
        if (!isString && defProperty.visible === false)
            return false;
        if (!propRes.visible &&
            (isString || (!isString && defProperty.visible !== true)))
            return false;
        var tabName = isTab ? defProperty.name : _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].propertyGrid.generalTabName;
        if (!isTab && !isString && !!defProperty.tab) {
            tabName = defProperty.tab;
        }
        var propertyDefinition = new SurveyQuestionEditorPropertyDefinition();
        propertyDefinition.property = propRes.property;
        propertyDefinition.category =
            !isString && !!defProperty.category ? defProperty.category : "";
        propertyDefinition.title =
            !isString && !!defProperty.title ? defProperty.title : "";
        propertyDefinition.onSameLine = this.isPropertyOnSameLine(propRes.property.nextToProperty);
        propertyDefinition.createdFromTabName = isTab;
        var tab = this.getTabOrCreate(tabName);
        tab.properties.unshift(propertyDefinition);
        return true;
    };
    SurveyQuestionProperties.prototype.movePropertiesToNextProperties = function (properties) {
        var props = [].concat(properties);
        for (var i = 0; i < props.length; i++) {
            var nextToProperty = this.getNextToNameProperty(props[i].property);
            var newTab = this.getTabByPropertyName(nextToProperty);
            if (!!newTab) {
                var prop = this.getPropertyByNameInTab(newTab, nextToProperty);
                var index = newTab.properties.indexOf(prop);
                newTab.properties.splice(index + 1, 0, props[i]);
                properties.splice(properties.indexOf(props[i]), 1);
            }
        }
    };
    SurveyQuestionProperties.prototype.getTabByPropertyName = function (propName) {
        if (!propName)
            return null;
        if (this.isPropertyOnSameLine(propName))
            propName = propName.substring(1);
        for (var i = 0; i < this.tabs.length; i++) {
            if (!!this.getPropertyByNameInTab(this.tabs[i], propName))
                return this.tabs[i];
        }
        return null;
    };
    SurveyQuestionProperties.prototype.getNextToNameProperty = function (property) {
        if (!property.nextToProperty)
            return "";
        if (this.isPropertyOnSameLine(property.nextToProperty))
            return property.nextToProperty.substring(1);
        return property.nextToProperty;
    };
    SurveyQuestionProperties.prototype.isPropertyOnSameLine = function (nextToProperty) {
        return !!nextToProperty && nextToProperty[0] === "*";
    };
    SurveyQuestionProperties.prototype.getPropertyByNameInTab = function (tab, propName) {
        var props = tab.properties;
        for (var i = 0; i < props.length; i++) {
            if (props[i].name == propName)
                return props[i];
        }
        return null;
    };
    SurveyQuestionProperties.prototype.getTabOrCreate = function (tabName) {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].name == tabName)
                return this.tabs[i];
        }
        var res = new SurveyQuestionEditorTabDefinition();
        res.name = tabName;
        if (tabName == _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].propertyGrid.generalTabName) {
            res.index = -1;
        }
        this.tabs.unshift(res);
        return res;
    };
    SurveyQuestionProperties.prototype.setUsedProperties = function (res, usedProperties) {
        for (var i = 0; i < res.length; i++) {
            var props = res[i].properties;
            if (!Array.isArray(props))
                continue;
            for (var j = 0; j < props.length; j++) {
                var propName = !!props[j]["name"] ? props[j]["name"] : props[j];
                usedProperties[propName] = true;
            }
        }
    };
    SurveyQuestionProperties.prototype.getAllDefinitionsByClass = function (className) {
        var result = [];
        var usedProperties = {};
        if (className.indexOf("@") > -1 &&
            _definition__WEBPACK_IMPORTED_MODULE_0__["SurveyQuestionEditorDefinition"].definition[className]) {
            var defaultName = className.substring(0, className.indexOf("@") + 1) + "default";
            if (defaultName != className &&
                !!_definition__WEBPACK_IMPORTED_MODULE_0__["SurveyQuestionEditorDefinition"].definition[defaultName]) {
                result.push(_definition__WEBPACK_IMPORTED_MODULE_0__["SurveyQuestionEditorDefinition"].definition[defaultName]);
            }
            result.push(_definition__WEBPACK_IMPORTED_MODULE_0__["SurveyQuestionEditorDefinition"].definition[className]);
            this.setUsedProperties(result, usedProperties);
            this.addNonTabProperties(result, usedProperties, true);
            return result;
        }
        var curClassName = className;
        var hasNonTabProperties = false;
        while (curClassName) {
            var metaClass = (survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(curClassName));
            if (!metaClass)
                break;
            var classRes = _definition__WEBPACK_IMPORTED_MODULE_0__["SurveyQuestionEditorDefinition"].definition[metaClass.name];
            if (classRes) {
                if (classRes.properties) {
                    var i = 0;
                    while (i < classRes.properties.length) {
                        var prop = classRes.properties[i];
                        var propName = typeof prop == "string" ? prop : prop.name;
                        var tabName = _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].propertyGrid.generalTabName;
                        if (typeof prop !== "string" && !!prop.tab) {
                            tabName = prop.tab;
                        }
                        var jsonProp = !!this.propertiesHash[propName]
                            ? this.propertiesHash[propName].property
                            : null;
                        var jsonPropertyCategory = this.getJsonPropertyCategory(jsonProp);
                        if (!!jsonPropertyCategory && jsonPropertyCategory !== tabName) {
                            classRes.properties.splice(i, 1);
                        }
                        else {
                            usedProperties[propName] = true;
                            i++;
                        }
                    }
                }
                if (classRes.tabs) {
                    for (var i = 0; i < classRes.tabs.length; i++) {
                        hasNonTabProperties =
                            hasNonTabProperties || classRes.tabs[i].name === otherTabName;
                        usedProperties[classRes.tabs[i].name] = true;
                    }
                }
                result.unshift(classRes);
            }
            curClassName = metaClass.parentName;
        }
        if (!hasNonTabProperties) {
            this.addNonTabProperties(result, usedProperties);
        }
        return result;
    };
    SurveyQuestionProperties.prototype.getJsonPropertyCategory = function (jsonProperty) {
        if (!jsonProperty)
            return null;
        if (!!jsonProperty.category)
            return jsonProperty.category;
        return null;
    };
    SurveyQuestionProperties.prototype.addNonTabProperties = function (tabs, usedProperties, isFormMode) {
        if (isFormMode === void 0) { isFormMode = false; }
        var classRes = { properties: [], tabs: [] };
        var tabNames = [];
        for (var i = 0; i < this.properties.length; i++) {
            var prop = this.properties[i];
            if (!this.isJSONPropertyVisible(prop) || !!usedProperties[prop.name] ||
                (isFormMode && prop.showMode !== "form"))
                continue;
            var propCategory = this.getJsonPropertyCategory(prop);
            var tabName = !!propCategory
                ? propCategory
                : tabs.length == 0 || (!!this.parentObj && this.showMode === "form")
                    ? _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].propertyGrid.generalTabName
                    : otherTabName;
            if (tabNames.indexOf(tabName) < 0 && tabName != _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].propertyGrid.generalTabName) {
                tabNames.push(tabName);
                classRes.tabs.push({
                    name: tabName,
                    index: tabName === otherTabName ? 1000 : tabNames.length * 10,
                });
            }
            if (prop.categoryIndex > -1 && tabNames.indexOf(tabName) > -1) {
                for (var j = 0; j < classRes.tabs.length; j++) {
                    if (classRes.tabs[j].name == tabName) {
                        classRes.tabs[j].index = prop.categoryIndex;
                    }
                }
            }
            classRes.properties.push({
                name: this.properties[i].name,
                tab: tabName,
            });
        }
        if (classRes.properties.length > 0) {
            tabs.push(classRes);
        }
    };
    SurveyQuestionProperties.prototype.sortProperties = function (properties) {
        if (!Array.isArray(properties))
            return;
        var props = [].concat(properties);
        for (var i = 0; i < props.length; i++) {
            var index = props[i].property.visibleIndex;
            if (props[i].createdFromTabName && index < 0) {
                index = 0;
            }
            if (index < 0)
                continue;
            var curIndex = properties.indexOf(props[i]);
            if (curIndex > -1) {
                properties.splice(curIndex, 1);
            }
            if (index < properties.length) {
                properties.splice(index, 0, props[i]);
            }
            else {
                properties.push(props[i]);
            }
        }
    };
    return SurveyQuestionProperties;
}());



/***/ }),

/***/ "./src/questionconverter.ts":
/*!**********************************!*\
  !*** ./src/questionconverter.ts ***!
  \**********************************/
/*! exports provided: QuestionConverter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionConverter", function() { return QuestionConverter; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./creator-settings */ "./src/creator-settings.ts");


var QuestionConverter = /** @class */ (function () {
    function QuestionConverter() {
    }
    Object.defineProperty(QuestionConverter, "convertInfo", {
        get: function () {
            if (!QuestionConverter.convertInfoValue) {
                QuestionConverter.convertInfoValue = {};
                QuestionConverter.createDefaultQuestionConverterItems();
            }
            return QuestionConverter.convertInfoValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionConverter.createDefaultQuestionConverterItems = function () {
        var classes = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getChildrenClasses("selectbase", true);
        for (var i = 0; i < classes.length; i++) {
            for (var j = 0; j < classes.length; j++) {
                if (i == j)
                    continue;
                QuestionConverter.addConvertInfo(classes[i].name, classes[j].name);
            }
        }
        QuestionConverter.addConvertInfo("text", "comment");
        QuestionConverter.addConvertInfo("comment", "text");
    };
    QuestionConverter.addConvertInfo = function (className, convertToClassName) {
        if (!QuestionConverter.convertInfo[className]) {
            QuestionConverter.convertInfo[className] = [];
        }
        QuestionConverter.convertInfo[className].push(convertToClassName);
    };
    QuestionConverter.getConvertToClasses = function (className, availableTypes, includeCurrent) {
        if (availableTypes === void 0) { availableTypes = null; }
        if (includeCurrent === void 0) { includeCurrent = false; }
        var res = _creator_settings__WEBPACK_IMPORTED_MODULE_1__["settings"].questionConvertMode == _creator_settings__WEBPACK_IMPORTED_MODULE_1__["QuestionConvertMode"].AllTypes
            ? getAllQuestionTypes(className, includeCurrent)
            : QuestionConverter.convertInfo[className];
        if (!res)
            return [];
        if (Array.isArray(availableTypes) && availableTypes.length > 0) {
            var types_1 = [];
            res.forEach(function (item) { return types_1.push(item); });
            res = availableTypes
                .filter(function (item) { return types_1.indexOf(item) >= 0; });
        }
        return !!res ? res : [];
    };
    QuestionConverter.convertObject = function (obj, convertToClass, defaultObjJSON, defaultJSON) {
        if (defaultObjJSON === void 0) { defaultObjJSON = null; }
        if (defaultJSON === void 0) { defaultJSON = null; }
        if (!obj || !obj.parent || convertToClass == obj.getType())
            return null;
        var newQuestion = !defaultJSON ? survey_core__WEBPACK_IMPORTED_MODULE_0__["QuestionFactory"].Instance.createQuestion(convertToClass, obj.name) : undefined;
        if (!newQuestion) {
            newQuestion = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(convertToClass, {});
        }
        newQuestion.name = obj.name;
        var json = defaultJSON ? survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(defaultJSON) : newQuestion.toJSON();
        var qJson = obj.toJSON();
        if (defaultObjJSON) {
            for (var key in defaultObjJSON) {
                if (qJson[key] && survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(qJson[key], defaultObjJSON[key])) {
                    delete qJson[key];
                }
            }
        }
        for (var key in qJson) {
            json[key] = qJson[key];
        }
        QuestionConverter.updateJSON(json, convertToClass, obj.getType());
        newQuestion.fromJSON(json);
        QuestionConverter.removeValidators(newQuestion);
        var panel = obj.parent;
        var index = panel.elements.indexOf(obj);
        panel.isConverting = true;
        var isSameLine = index + 1 < panel.elements.length ? panel.elements[index + 1].startWithNewLine === false : false;
        panel.removeElement(obj);
        panel.addElement(newQuestion, index);
        if (isSameLine) {
            panel.elements[index + 1].startWithNewLine = false;
        }
        delete panel.isConverting;
        newQuestion.onSurveyLoad();
        return newQuestion;
    };
    QuestionConverter.updateJSON = function (json, convertToClass, convertFromClass) {
        QuestionConverter.updateJSONForRating(json, convertToClass);
        QuestionConverter.updateJSONForMatrices(json, convertToClass, convertFromClass);
        QuestionConverter.updateJSONForPanels(json, convertToClass, convertFromClass);
        QuestionConverter.updateJSONForBarrating(json, convertToClass);
    };
    QuestionConverter.updateJSONForMatrices = function (json, convertToClass, convertFromClass) {
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertToClass, "matrix") &&
            survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertFromClass, "matrixdropdownbase") &&
            json.columns) {
            json.columns = json.columns.map(function (col) { return col.title ? { value: col.name, text: col.title } : col.name; });
        }
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertToClass, "matrixdropdownbase") &&
            survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertFromClass, "matrix") &&
            json.columns) {
            json.columns = json.columns.map(function (col) { return ({
                name: QuestionConverter.getColumnName(col.value || col), title: col.text
            }); });
        }
    };
    QuestionConverter.getColumnName = function (val) {
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(val))
            return "col" + val;
        return val;
    };
    QuestionConverter.updateJSONForRating = function (json, convertToClass) {
        if (convertToClass === "rating" && json.choices) {
            json.rateValues = json.choices;
        }
        if (!!json.rateValues && !survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertToClass, "matrixdropdownbase")) {
            json.choices = json.rateValues;
        }
    };
    QuestionConverter.updateJSONForBarrating = function (json, convertToClass) {
        if (convertToClass === "barrating") {
            json.choices = [1, 2, 3, 4, 5];
        }
    };
    QuestionConverter.updateJSONForPanels = function (json, convertToClass, convertFromClass) {
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertToClass, "paneldynamic") &&
            survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertFromClass, "panel") &&
            json.elements) {
            json.templateElements = json.elements;
            delete json.elements;
        }
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertToClass, "panel") &&
            survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(convertFromClass, "paneldynamic") &&
            json.templateElements) {
            json.elements = json.templateElements;
            delete json.templateElements;
        }
    };
    QuestionConverter.removeValidators = function (question) {
        var validators = question.validators;
        if (!Array.isArray(validators) || validators.length === 0)
            return;
        var supported = question.getSupportedValidators();
        for (var i = validators.length - 1; i >= 0; i--) {
            var valType = validators[i].getType().replace("validator", "");
            if (supported.indexOf(valType) < 0) {
                validators.splice(i, 1);
            }
        }
    };
    return QuestionConverter;
}());

function getAllQuestionTypes(className, includeCurrent) {
    if (includeCurrent === void 0) { includeCurrent = false; }
    if (className === "panel")
        return includeCurrent ? ["panel", "paneldynamic"] : ["paneldynamic"];
    var classes = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getChildrenClasses("question", true);
    var res = [];
    for (var i = 0; i < classes.length; i++) {
        if (includeCurrent || classes[i].name !== className) {
            res.push(classes[i].name);
        }
    }
    if (className === "paneldynamic")
        res.push("panel");
    var widgets = survey_core__WEBPACK_IMPORTED_MODULE_0__["CustomWidgetCollection"].Instance.widgets;
    for (var i = 0; i < widgets.length; i++) {
        if (includeCurrent || widgets[i].name !== className) {
            res.push(widgets[i].name);
        }
    }
    return res;
}


/***/ }),

/***/ "./src/responsivity.scss":
/*!*******************************!*\
  !*** ./src/responsivity.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/selection-history.ts":
/*!**********************************!*\
  !*** ./src/selection-history.ts ***!
  \**********************************/
/*! exports provided: SelectionHistory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectionHistory", function() { return SelectionHistory; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);


var SelectionHistory = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SelectionHistory, _super);
    function SelectionHistory(creator) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.items = [];
        return _this;
    }
    Object.defineProperty(SelectionHistory.prototype, "hasPrev", {
        get: function () {
            return this.currentIndex > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectionHistory.prototype, "hasNext", {
        get: function () {
            var index = this.currentIndex;
            return index > -1 && index < this.items.length - 1;
        },
        enumerable: false,
        configurable: true
    });
    SelectionHistory.prototype.hasInHistory = function (obj) {
        return this.getIndex(obj) > -1;
    };
    SelectionHistory.prototype.prev = function () {
        this.selectElement(this.currentIndex - 1);
    };
    SelectionHistory.prototype.next = function () {
        this.selectElement(this.currentIndex + 1);
    };
    SelectionHistory.prototype.reset = function () {
        this.items = [];
        if (!!this.creator.selectedElement) {
            this.onObjSelected(this.creator.selectedElement);
        }
    };
    SelectionHistory.prototype.selectFromAction = function (obj, propertyName) {
        var index = this.currentIndex;
        if (index > -1 && index < this.items.length) {
            this.items[index].propertyName = propertyName;
        }
        this.creator.selectElement(obj);
    };
    SelectionHistory.prototype.onObjSelected = function (obj) {
        if (this.isChangingInternally)
            return;
        var index = this.currentIndex;
        if (index > -1) {
            this.items.splice(index, 1);
        }
        this.items.push({
            obj: obj,
        });
    };
    Object.defineProperty(SelectionHistory.prototype, "currentIndex", {
        get: function () {
            return this.getIndex(this.creator.selectedElement);
        },
        enumerable: false,
        configurable: true
    });
    SelectionHistory.prototype.getIndex = function (obj) {
        if (!obj)
            return -1;
        this.updateItems();
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].obj == obj)
                return i;
        }
        return -1;
    };
    SelectionHistory.prototype.selectElement = function (index) {
        if (index < 0 || index >= this.items.length)
            return;
        this.isChangingInternally = true;
        var item = this.items[index];
        this.creator.selectElement(item.obj, item.propertyName);
        this.isChangingInternally = false;
    };
    SelectionHistory.prototype.updateItems = function () {
        for (var i = this.items.length - 1; i >= 0; i--) {
            var obj = this.items[i].obj;
            if (!!obj && (obj.isDisposed || !obj.inSurvey)) {
                this.items.splice(i, 1);
            }
        }
    };
    return SelectionHistory;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/survey-elements.ts":
/*!********************************!*\
  !*** ./src/survey-elements.ts ***!
  \********************************/
/*! exports provided: calculateIsEdge, calculateIsSide, calculateDragOverLocation, DragDropSurveyElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateIsEdge", function() { return calculateIsEdge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateIsSide", function() { return calculateIsSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateDragOverLocation", function() { return calculateDragOverLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropSurveyElements", function() { return DragDropSurveyElements; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./creator-settings */ "./src/creator-settings.ts");
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./survey-helper */ "./src/survey-helper.ts");




function calculateIsEdge(dropTargetNode, clientY) {
    var rect = dropTargetNode.getBoundingClientRect();
    return clientY - rect.top <= DragDropSurveyElements.edgeHeight || rect.bottom - clientY <= DragDropSurveyElements.edgeHeight;
}
function calculateIsSide(dropTargetNode, clientX) {
    var rect = dropTargetNode.getBoundingClientRect();
    return clientX - rect.left <= DragDropSurveyElements.edgeHeight || rect.right - clientX <= DragDropSurveyElements.edgeHeight;
}
function calculateDragOverLocation(clientX, clientY, dropTargetNode) {
    var rect = dropTargetNode.getBoundingClientRect();
    var tg = rect.height / rect.width;
    var dx = clientX - rect.x;
    var dy = clientY - rect.y;
    if (!_creator_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].dragDrop.allowDragToTheSameLine) {
        if (dy >= rect.height / 2) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom;
        }
        else {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top;
        }
    }
    if (dy >= tg * dx) {
        if (dy >= -tg * dx + rect.height) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom;
        }
        else {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Left;
        }
    }
    else {
        if (dy >= -tg * dx + rect.height) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Right;
        }
        else {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top;
        }
    }
}
var DragDropSurveyElements = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DragDropSurveyElements, _super);
    function DragDropSurveyElements() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isEdge = false;
        _this.isSide = false;
        _this.prevIsEdge = null;
        // protected ghostSurveyElement: IElement = null;
        _this.dragOverIndicatorElement = null;
        _this.isDraggedElementSelected = false;
        _this.maxNestedPanels = -1;
        _this.doBanDropHere = function () {
            _this.removeDragOverMarker(_this.dragOverIndicatorElement);
            _this.removeDragOverMarker(_this.dropTarget);
        };
        _this.doDrop = function () {
            var _a;
            if (!_this.dropTarget)
                return;
            var page = _this.parentElement;
            var dragged = _this.draggedElement;
            var src = _this.draggedElement;
            var dest = ((_a = _this.dragOverIndicatorElement) === null || _a === void 0 ? void 0 : _a.isPanel) ? _this.dragOverIndicatorElement : _this.dropTarget;
            var row = page.dragDropFindRow(dest);
            var targetIndex = _this.getElementIndexInPanel(dest, row);
            if (_this.dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Right || _this.dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom) {
                targetIndex++;
            }
            var elementsToSetSWNL = [];
            var elementsToResetSWNL = [];
            var srcRow = src && src.parent && src.parent.dragDropFindRow(src);
            if (srcRow && srcRow.elements.length > 1) {
                elementsToSetSWNL.push(src);
                if (srcRow.elements[0] === src) {
                    elementsToSetSWNL.push(srcRow.elements[1]);
                }
            }
            var dragOverIndicator = _this.dragOverIndicatorElement || _this.dropTarget;
            var dragOverLocation = dragOverIndicator.dragTypeOverMe;
            if (!!row) {
                if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Left) {
                    elementsToResetSWNL.push(dest);
                    if (row.elements.indexOf(dest) === 0 || row.elements.indexOf(src) === 0 && row.elements.indexOf(dest) === 1) {
                        elementsToSetSWNL.push(dragged);
                    }
                    else {
                        elementsToResetSWNL.push(dragged);
                    }
                }
                else if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Right) {
                    elementsToResetSWNL.push(dragged);
                    if (row.elements.indexOf(dest) === 0) {
                        elementsToSetSWNL.push(dragged);
                    }
                }
                else if (row.elements.length > 1) {
                    elementsToSetSWNL.push(dragged);
                    if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top) {
                        targetIndex = _this.getElementIndexInPanel(row.elements[0], row);
                    }
                    else if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom) {
                        targetIndex = _this.getElementIndexInPanel(row.elements[row.elements.length - 1], row) + 1;
                    }
                }
                else {
                    elementsToSetSWNL.push(dragged);
                }
            }
            var isTargetIsContainer = dest.isPanel || dest.isPage;
            if (!!src && !!src.parent) {
                page.survey.startMovingQuestion();
                var isSamePanel = !(isTargetIsContainer && dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].InsideEmptyPanel) && !!row && row.panel == src.parent;
                if (isSamePanel) {
                    _this.moveElementInPanel(row.panel, src, dragged, targetIndex);
                    row.panel.updateRows();
                    isTargetIsContainer = false;
                    targetIndex = -1;
                }
                else {
                    src.parent.removeElement(src);
                }
            }
            if (!_this.isEdge && !_this.isSide && isTargetIsContainer) {
                dest.addElement(dragged);
                dest.updateRows();
            }
            else if (!!row && targetIndex > -1) {
                row.panel.addElement(dragged, targetIndex);
                row.panel.updateRows();
            }
            page.survey.stopMovingQuestion();
            elementsToSetSWNL.map(function (e) { e.startWithNewLine = true; });
            elementsToResetSWNL.map(function (e) { e.startWithNewLine = false; });
            return dragged;
        };
        return _this;
    }
    Object.defineProperty(DragDropSurveyElements.prototype, "draggedElementType", {
        get: function () {
            return "survey-element";
        },
        enumerable: false,
        configurable: true
    });
    // private isRight: boolean;
    // protected prevIsRight: boolean;
    DragDropSurveyElements.prototype.startDragToolboxItem = function (event, draggedElementJson, toolboxItemModel) {
        var preventSaveTargetNode = true;
        var draggedElement = this.createElementFromJson(draggedElementJson);
        draggedElement.toolboxItemTitle = toolboxItemModel.title;
        draggedElement.toolboxItemIconName = toolboxItemModel.iconName;
        this.startDrag(event, draggedElement, null, null, preventSaveTargetNode);
    };
    DragDropSurveyElements.prototype.startDragSurveyElement = function (event, draggedElement, isElementSelected) {
        this.isDraggedElementSelected = isElementSelected;
        this.startDrag(event, draggedElement);
    };
    DragDropSurveyElements.prototype.getShortcutText = function (draggedElement) {
        return draggedElement.toolboxItemTitle || _super.prototype.getShortcutText.call(this, draggedElement);
    };
    DragDropSurveyElements.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        var draggedElementShortcut = document.createElement("div");
        var textSpan = document.createElement("span");
        textSpan.className = "svc-dragged-element-shortcut__text";
        textSpan.innerText = text;
        draggedElementShortcut.appendChild(this.createDraggedElementIcon());
        draggedElementShortcut.appendChild(textSpan);
        draggedElementShortcut.className = this.getDraggedElementClass();
        return draggedElementShortcut;
    };
    DragDropSurveyElements.prototype.createDraggedElementIcon = function () {
        var span = document.createElement("span");
        var iconName = this.draggedElement.toolboxItemIconName;
        var svgString = "<svg class=\"sv-svg-icon\" role=\"img\" style=\"width: 24px; height: 24px;\"><use xlink:href=\"#" + iconName + "\"></use></svg>";
        span.className = "svc-dragged-element-shortcut__icon";
        span.innerHTML = svgString;
        return span;
    };
    DragDropSurveyElements.prototype.getDraggedElementClass = function () {
        var result = "svc-dragged-element-shortcut";
        if (this.isDraggedElementSelected)
            result += " svc-dragged-element-shortcut--selected";
        return result;
    };
    DragDropSurveyElements.prototype.createElementFromJson = function (json) {
        var element = this.createNewElement(json);
        if (element["setSurveyImpl"]) {
            element["setSurveyImpl"](this.survey);
        }
        else {
            element["setData"](this.survey);
        }
        element.renderWidth = "100%";
        return element;
    };
    DragDropSurveyElements.prototype.createNewElement = function (json) {
        var newElement = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(json["type"]);
        new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, newElement);
        return newElement;
    };
    DragDropSurveyElements.prototype.findDropTargetNodeByDragOverNode = function (dragOverNode) {
        var ghostRow = dragOverNode.closest(".svc-row--ghost");
        if (!!ghostRow) {
            var ghostDataAttrSelector = "[data-sv-drop-target-survey-element='sv-drag-drop-ghost-survey-element-name']";
            var ghostNode = dragOverNode.closest(ghostDataAttrSelector) || dragOverNode.querySelector(ghostDataAttrSelector);
            if (!!ghostNode) {
                return ghostNode;
            }
        }
        var dropTargetNode = dragOverNode.closest(this.dropTargetDataAttributeName);
        return dropTargetNode;
    };
    DragDropSurveyElements.prototype.getDropTargetByDataAttributeValue = function (dataAttributeValue, dropTargetNode, event) {
        this.removeDragOverMarker(this.dragOverIndicatorElement);
        this.dragOverIndicatorElement = null;
        if (!dataAttributeValue) {
            // panel dynamic
            var nearestDropTargetElement = dropTargetNode.parentElement.closest(this.dropTargetDataAttributeName);
            dataAttributeValue = this.getDataAttributeValueByNode(nearestDropTargetElement);
        }
        if (!dataAttributeValue) {
            throw new Error("Can't find drop target survey element name");
        }
        if (dataAttributeValue === DragDropSurveyElements.ghostSurveyElementName) {
            return this.prevDropTarget;
        }
        // drop to new page
        if (dataAttributeValue === "newGhostPage") {
            return DragDropSurveyElements.newGhostPage;
        }
        // drop to page
        var page = this.survey.getPageByName(dataAttributeValue);
        if (page) {
            if (page.elements.length !== 0) {
                // TODO we can't drop on not empty page directly for now
                return null;
            }
            return page;
        }
        // drop to question or panel
        var dropTarget;
        var dragOverElement;
        this.survey.pages.forEach(function (page) {
            var question = page.getElementByName(dataAttributeValue);
            if (question) {
                dropTarget = question;
                dragOverElement = question;
            }
        });
        // drop to paneldynamic
        if (dropTarget.getType() === "paneldynamic" && !this.isEdge && !this.isSide) {
            dropTarget = dropTarget.template;
        }
        // drop to matrix detail panel
        if ((dropTarget.getType() === "matrixdropdown" || dropTarget.getType() === "matrixdynamic") && dropTarget.detailPanelMode !== "none" && !this.isEdge && !this.isSide) {
            dropTarget = dropTarget.detailPanel;
        }
        // drop to panel
        else if (dropTarget.isPanel) {
            dropTarget = this.getPanelDropTarget(dropTargetNode, dropTarget, event);
        }
        // drop to question
        //question inside paneldymanic
        if (!dropTarget.page) {
            var nearestDropTargetPageElement = dropTargetNode.parentElement.closest("[data-sv-drop-target-page]");
            dataAttributeValue = nearestDropTargetPageElement.dataset.svDropTargetPage;
            var page_1 = this.survey.getPageByName(dataAttributeValue);
            dropTarget.__page = page_1;
        }
        this.dragOverIndicatorElement = dragOverElement;
        return dropTarget;
        // EO drop to question or panel
    };
    DragDropSurveyElements.prototype.isDropTargetValid = function (dropTarget, dropTargetNode) {
        if (!dropTarget)
            return false;
        if (dropTarget === this.draggedElement)
            return false;
        if (this.draggedElement.getType() === "paneldynamic" && dropTarget === this.draggedElement.template) {
            return false;
        }
        if (this.maxNestedPanels >= 0 && this.draggedElement.isPanel) {
            var len = _survey_helper__WEBPACK_IMPORTED_MODULE_3__["SurveyHelper"].getElementDeepLength(dropTarget);
            if (this.isEdge && dropTarget.isPanel)
                len--;
            if (this.maxNestedPanels < len)
                return false;
        }
        if (DragDropSurveyElements.restrictDragQuestionBetweenPages &&
            this.shouldRestricDragQuestionBetweenPages(dropTarget)) {
            return false;
        }
        return true;
    };
    DragDropSurveyElements.prototype.shouldRestricDragQuestionBetweenPages = function (dropTarget) {
        var oldPage = this.draggedElement["page"];
        var newPage = dropTarget.isPage ? dropTarget : dropTarget["page"];
        // if oldPage === null then it is drop from the toolbox
        return oldPage && oldPage !== newPage;
    };
    DragDropSurveyElements.prototype.getPanelDropTarget = function (HTMLElement, dropTarget, event) {
        var isEdge = this.isEdge;
        if (!isEdge && dropTarget.questions.length !== 0) {
            HTMLElement = this.findDeepestDropTargetChild(HTMLElement);
            dropTarget = this.getDropTargetByNode(HTMLElement, event);
        }
        return dropTarget;
    };
    DragDropSurveyElements.prototype.findDeepestDropTargetChild = function (parent) {
        var selector = this.dropTargetDataAttributeName;
        var result = parent;
        while (!!parent) {
            result = parent;
            parent = parent.querySelector(selector);
        }
        return result;
    };
    DragDropSurveyElements.prototype.isAllowDragOver = function (dropTarget, dragOverLocation) {
        if (!this.survey || this.survey.onDragDropAllow.isEmpty)
            return true;
        var allowOptions = {
            allow: true,
            parent: this.parentElement,
            source: this.draggedElement,
            target: dropTarget,
            insertAfter: undefined,
            insertBefore: undefined
        };
        if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom || dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Right) {
            allowOptions.insertAfter = dropTarget;
        }
        if (dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top || dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Left) {
            allowOptions.insertBefore = dropTarget;
        }
        this.survey.onDragDropAllow.fire(this.survey, allowOptions);
        return allowOptions.allow;
    };
    DragDropSurveyElements.prototype.dragOverCore = function (dropTarget, dragOverLocation, isEdge, isSide) {
        if (isEdge === void 0) { isEdge = false; }
        if (isSide === void 0) { isSide = false; }
        this.removeDragOverMarker(this.dragOverIndicatorElement);
        this.removeDragOverMarker(this.dropTarget);
        if (this.isSameElement(dropTarget)) {
            this.allowDropHere = false;
            return;
        }
        this.dropTarget = dropTarget;
        this.dragOverLocation = dragOverLocation;
        this.isEdge = isEdge;
        this.isSide = isSide;
        this.parentElement = this.dropTarget.isPage
            ? this.dropTarget
            : (this.dropTarget.page || this.dropTarget.__page);
        if (!this.isAllowDragOver(dropTarget, dragOverLocation)) {
            this.allowDropHere = false;
            return;
        }
        var dragOverIndicator = this.dragOverIndicatorElement || this.dropTarget;
        if (!this.isEdge && !this.isSide && this.isDragOverInsideEmptyPanel()) {
            dragOverIndicator.dragTypeOverMe = survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].InsideEmptyPanel;
        }
        else {
            var row = this.parentElement.dragDropFindRow(dragOverIndicator);
            if (!!row && row.elements.length > 1 && (this.dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Top || this.dragOverLocation === survey_core__WEBPACK_IMPORTED_MODULE_1__["DragTypeOverMeEnum"].Bottom)) {
                row.dragTypeOverMe = this.dragOverLocation;
                this.dragOverIndicatorElement = row;
            }
            else {
                dragOverIndicator.dragTypeOverMe = this.dragOverLocation;
            }
        }
    };
    DragDropSurveyElements.prototype.isSameElement = function (target) {
        while (!!target) {
            if (target === this.draggedElement)
                return true;
            target = target.parent;
        }
        return false;
    };
    DragDropSurveyElements.prototype.dragOver = function (event) {
        var dropTargetNode = this.findDropTargetNodeFromPoint(event.clientX, event.clientY);
        if (!dropTargetNode) {
            this.banDropHere();
            return;
        }
        this.isEdge = calculateIsEdge(dropTargetNode, event.clientY);
        this.isSide = calculateIsSide(dropTargetNode, event.clientX);
        var dropTarget = this.getDropTargetByNode(dropTargetNode, event);
        var isDropTargetValid = this.isDropTargetValid(dropTarget, dropTargetNode);
        if (!isDropTargetValid) {
            this.banDropHere();
            return;
        }
        this.allowDropHere = true;
        var dragOverLocation = calculateDragOverLocation(event.clientX, event.clientY, dropTargetNode);
        this.dragOverCore(dropTarget, dragOverLocation, this.isEdge, this.isSide);
    };
    DragDropSurveyElements.prototype.onStartDrag = function () {
        // this.ghostSurveyElement = this.createGhostSurveyElement();
        this.draggedElement.isDragMe = true;
    };
    DragDropSurveyElements.prototype.getElementIndexInPanel = function (target, row) {
        if (!row)
            return -1;
        var index = row.elements.indexOf(target);
        if (row.index == 0)
            return index;
        var prevRow = row.panel.rows[row.index - 1];
        var prevElement = prevRow.elements[prevRow.elements.length - 1];
        return index + row.panel.elements.indexOf(prevElement) + 1;
    };
    DragDropSurveyElements.prototype.moveElementInPanel = function (panel, src, target, targetIndex) {
        var srcIndex = src.parent.elements.indexOf(src);
        if (targetIndex > srcIndex) {
            targetIndex--;
        }
        if (src === target && srcIndex === targetIndex) {
            return;
        }
        panel.removeElement(src);
        panel.addElement(target, targetIndex);
    };
    DragDropSurveyElements.prototype.removeDragOverMarker = function (dropTarget) {
        var _a;
        if (!!dropTarget) {
            dropTarget.dragTypeOverMe = null;
        }
        var row = (_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.dragDropFindRow(dropTarget);
        if (!!row) {
            row.dragTypeOverMe = null;
        }
    };
    DragDropSurveyElements.prototype.clear = function () {
        this.isEdge = null;
        this.isSide = null;
        this.removeDragOverMarker(this.prevDropTarget);
        this.removeDragOverMarker(this.dropTarget);
        this.removeDragOverMarker(this.dragOverIndicatorElement);
        if (!!this.draggedElement) {
            this.draggedElement.isDragMe = false;
        }
        _super.prototype.clear.call(this);
    };
    DragDropSurveyElements.prototype.getTargetParent = function (dropTarget) {
        var targetParent = dropTarget.isPage || dropTarget.isPanel ? dropTarget : dropTarget.parent;
        if (dropTarget.getType() === "paneldynamic") {
            targetParent = dropTarget.templateValue;
        }
        return targetParent;
    };
    DragDropSurveyElements.prototype.getTargetRow = function (dropTarget) {
        var targetParent = this.getTargetParent(dropTarget);
        var targetRow;
        targetParent.rows.forEach(function (row) {
            if (row.elements.indexOf(dropTarget) !== -1) {
                targetRow = row;
            }
        });
        return targetRow;
    };
    DragDropSurveyElements.prototype.isDragOverInsideEmptyPanel = function () {
        var isEmptyPanel = this.dropTarget.isPanel && this.dropTarget.questions.length === 0;
        var isDragOverInside = !this.isEdge && !this.isSide;
        return isEmptyPanel && isDragOverInside;
    };
    DragDropSurveyElements.newGhostPage = null;
    DragDropSurveyElements.restrictDragQuestionBetweenPages = false;
    DragDropSurveyElements.edgeHeight = 30;
    DragDropSurveyElements.nestedPanelDepth = -1;
    DragDropSurveyElements.ghostSurveyElementName = "sv-drag-drop-ghost-survey-element-name"; // before renaming use globa search (we have also css selectors)
    return DragDropSurveyElements;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["DragDropCore"]));



/***/ }),

/***/ "./src/survey-helper.ts":
/*!******************************!*\
  !*** ./src/survey-helper.ts ***!
  \******************************/
/*! exports provided: ObjType, SurveyHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjType", function() { return ObjType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyHelper", function() { return SurveyHelper; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");



var ObjType;
(function (ObjType) {
    ObjType["Unknown"] = "unknown";
    ObjType["Survey"] = "survey";
    ObjType["Page"] = "page";
    ObjType["Panel"] = "panel";
    ObjType["Question"] = "question";
    ObjType["Column"] = "column";
})(ObjType || (ObjType = {}));
var SurveyHelper = /** @class */ (function () {
    function SurveyHelper() {
    }
    SurveyHelper.getNewElementName = function (el) {
        var survey = el.getSurvey();
        if (!survey)
            return el.name;
        if (el.isPage)
            return this.getNewPageName(survey.pages);
        if (el.isPanel)
            return this.getNewPanelName(survey.getAllPanels());
        return this.getNewQuestionName(survey.getAllQuestions(false, false, true));
    };
    SurveyHelper.getNewPageName = function (objs) {
        return SurveyHelper.getNewName(objs, _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.newPageName"));
    };
    SurveyHelper.isPageNameAutoGenerated = function (name) {
        return SurveyHelper.isNameAutoGenerated(name, _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.newPageName"));
    };
    SurveyHelper.getNewQuestionName = function (objs) {
        return SurveyHelper.getNewName(objs, _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.newQuestionName"));
    };
    SurveyHelper.getNewPanelName = function (objs) {
        return SurveyHelper.getNewName(objs, _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.newPanelName"));
    };
    SurveyHelper.generateNewName = function (name) {
        var pos = name.length;
        while (pos > 0 && name[pos - 1] >= "0" && name[pos - 1] <= "9") {
            pos--;
        }
        var base = name.substring(0, pos);
        var num = 0;
        if (pos < name.length) {
            num = parseInt(name.substring(pos));
        }
        num++;
        return base + num;
    };
    SurveyHelper.getNewName = function (objs, baseName) {
        var hash = {};
        for (var i = 0; i < objs.length; i++) {
            hash[objs[i].name] = true;
        }
        var num = 1;
        while (true) {
            if (!hash[baseName + num.toString()])
                break;
            num++;
        }
        return baseName + num.toString();
    };
    SurveyHelper.isNameAutoGenerated = function (name, baseName) {
        if (!name || name.length < baseName.length)
            return false;
        var digits = name.substring(baseName.length);
        return survey_core__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(digits);
    };
    SurveyHelper.getObjectType = function (obj) {
        if (!obj || !obj["getType"])
            return ObjType.Unknown;
        if (obj.getType() == "page")
            return ObjType.Page;
        if (obj.getType() == "panel")
            return ObjType.Panel;
        if (obj.getType() == "survey")
            return ObjType.Survey;
        if (obj.getType() == "matrixdropdowncolumn")
            return ObjType.Column;
        if (obj["name"])
            return ObjType.Question;
        return ObjType.Unknown;
    };
    SurveyHelper.getObjectTypeStr = function (obj) {
        var objType = SurveyHelper.getObjectType(obj);
        if (objType === ObjType.Survey)
            return "survey";
        if (objType === ObjType.Page)
            return "page";
        if (objType === ObjType.Panel)
            return "panel";
        if (objType === ObjType.Question)
            return "question";
        if (objType === ObjType.Column)
            return "column";
        return "unknown";
    };
    SurveyHelper.getObjectName = function (obj, showObjectTitle) {
        if (showObjectTitle === void 0) { showObjectTitle = false; }
        var objType = SurveyHelper.getObjectType(obj);
        if (objType === ObjType.Survey)
            return _editorLocalization__WEBPACK_IMPORTED_MODULE_1__["editorLocalization"].getString("ed.surveyTypeName");
        if (showObjectTitle && obj["title"])
            return obj["title"];
        if (showObjectTitle && obj["text"])
            return obj["text"];
        if (obj["name"])
            return obj["name"];
        return "";
    };
    SurveyHelper.getElements = function (element, includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        if (!element)
            return [];
        if (element.getElementsInDesign)
            return element.getElementsInDesign(includeHidden);
        if (element.elements)
            return element.elements;
        return [];
    };
    SurveyHelper.addElements = function (elements, isPanel, result) {
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].isPanel === isPanel) {
                result.push(elements[i]);
            }
            SurveyHelper.addElements(SurveyHelper.getElements(elements[i]), isPanel, result);
        }
    };
    SurveyHelper.getAllElements = function (survey, isPanel) {
        var result = [];
        for (var i = 0; i < survey.pages.length; i++) {
            SurveyHelper.addElements(survey.pages[i].elements, isPanel, result);
        }
        return result;
    };
    SurveyHelper.isPropertyVisible = function (obj, property, options, showMode, parentObj, parentProperty) {
        if (options === void 0) { options = null; }
        if (showMode === void 0) { showMode = null; }
        if (parentObj === void 0) { parentObj = null; }
        if (parentProperty === void 0) { parentProperty = null; }
        if (!property || !property.visible)
            return false;
        if (!!showMode && !!property.showMode && showMode !== property.showMode)
            return false;
        if (!!property.isVisible &&
            !!obj.getLayoutType &&
            !property["isVisible"](obj.getLayoutType(), null))
            return false;
        var canShow = !!options
            ? function (object, property) {
                return options.onCanShowPropertyCallback(object, property, showMode, parentObj, parentProperty);
            }
            : null;
        if (!!canShow && !canShow(obj, property))
            return false;
        return true;
    };
    SurveyHelper.scrollIntoViewIfNeeded = function (el) {
        if (!el || !el.scrollIntoView)
            return;
        var rect = el.getBoundingClientRect();
        var scrollableDiv = SurveyHelper.getScrollableDiv(el);
        if (!scrollableDiv)
            return;
        var height = scrollableDiv.clientHeight;
        if (rect.top < scrollableDiv.offsetTop) {
            el.scrollIntoView(true);
        }
        else {
            var offsetTop = height + scrollableDiv.offsetTop;
            if (rect.bottom > offsetTop && rect.height < height) {
                el.scrollIntoView(false);
            }
        }
    };
    SurveyHelper.getScrollableDiv = function (el) {
        while (!!el) {
            if (!!el.id && el.id.indexOf("scrollableDiv") > -1)
                return el;
            if (!el.offsetParent)
                return null;
            el = el.offsetParent;
        }
        return null;
    };
    SurveyHelper.moveItemInArray = function (list, obj, newIndex) {
        if (!list || list.length < 2)
            return false;
        if (newIndex < 0 || newIndex >= list.length)
            return false;
        var oldIndex = list.indexOf(obj);
        if (oldIndex < 0 || oldIndex == newIndex)
            return false;
        for (var i = 0; i < list.length; i++) {
            SurveyHelper.disableSelectingObj(list[i]);
        }
        list.splice(oldIndex, 1);
        list.splice(newIndex, 0, obj);
        for (var i = 0; i < list.length; i++) {
            SurveyHelper.enableSelectingObj(list[i]);
        }
        return true;
    };
    SurveyHelper.applyItemValueArray = function (dest, src) {
        if (!src || src.length == 0) {
            dest.splice(0, dest.length);
            return;
        }
        if (dest.length > src.length) {
            dest.splice(src.length, dest.length - src.length);
        }
        if (dest.length < src.length) {
            var insertedArray = [];
            for (var i = dest.length; i < src.length; i++) {
                insertedArray.push(src[i]);
            }
            dest.splice.apply(dest, [dest.length, 0].concat(insertedArray));
        }
        for (var i = 0; i < dest.length; i++) {
            if (dest[i].value != src[i].value) {
                dest[i].value = src[i].value;
            }
            dest[i].text = src[i].hasText ? src[i].text : "";
        }
    };
    SurveyHelper.disableSelectingObj = function (obj) {
        obj["disableSelecting"] = true;
    };
    SurveyHelper.enableSelectingObj = function (obj) {
        delete obj["disableSelecting"];
    };
    SurveyHelper.canSelectObj = function (obj) {
        return !obj || obj["disableSelecting"] !== true;
    };
    SurveyHelper.warnNonSupported = function (name, newPropertyName) {
        var outputText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["wrapTextByCurlyBraces"])(name) + " is not supported in V2.";
        if (!!newPropertyName) {
            outputText += " Use the '" + newPropertyName + "' property instead";
        }
        SurveyHelper.warnText(outputText);
    };
    SurveyHelper.warnText = function (text) {
        // eslint-disable-next-line no-console
        console.warn(text);
    };
    SurveyHelper.deleteConditionProperties = function (json) {
        delete json["visible"];
        delete json["visibleIf"];
        delete json["readOnly"];
        delete json["enableIf"];
        delete json["valueName"];
        delete json["choicesVisibleIf"];
        delete json["choicesEnableIf"];
        delete json["width"];
        delete json["minWidth"];
        delete json["maxWidth"];
    };
    SurveyHelper.updateQuestionJson = function (questionJson) {
        questionJson.storeOthersAsComment = false;
        delete questionJson.valuePropertyName;
        SurveyHelper.deleteConditionProperties(questionJson);
        if (!!questionJson.choices) {
            for (var i = 0; i < questionJson.choices.length; i++) {
                SurveyHelper.deleteConditionProperties(questionJson.choices[i]);
            }
        }
    };
    SurveyHelper.convertMatrixRowsToText = function (rows) {
        var result = rows
            .filter(function (row) { return !row.cells[0].hasError; })
            .map(function (row) {
            return row.cells
                .map(function (cell) { return cell.value || ""; })
                .join(survey_core__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].Separator)
                .replace(/\|$/, "");
        })
            .join("\n");
        return result;
    };
    SurveyHelper.convertItemValuesToText = function (items) {
        var text = "";
        items.forEach(function (item) {
            if (text)
                text += "\n";
            text += item.value;
            if (item.pureText)
                text += survey_core__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].Separator + item.pureText;
        });
        return text;
    };
    SurveyHelper.convertTextToItemValues = function (text, properties, className) {
        var items = [];
        if (!text)
            return items;
        var texts = text.split("\n");
        for (var i = 0; i < texts.length; i++) {
            if (!texts[i])
                continue;
            var elements = texts[i].split(survey_core__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].Separator);
            var valueItem = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(className);
            properties.forEach(function (p, i) {
                valueItem[p.name] = elements[i];
            });
            items.push(valueItem);
        }
        return items;
    };
    SurveyHelper.sortItems = function (items, propertyName) {
        if (propertyName === void 0) { propertyName = "text"; }
        var getNumber = function (str, index) {
            var strNum = "";
            while (index < str.length && str[index] >= "0" && str[index] <= "9") {
                strNum += str[index];
                index++;
            }
            return parseFloat(strNum);
        };
        items.sort(function (a, b) {
            var aVal = !!a[propertyName] ? a[propertyName] : "";
            var bVal = !!b[propertyName] ? b[propertyName] : "";
            var index = 0;
            while (index < aVal.length && index < bVal.length && aVal[index] === bVal[index])
                index++;
            if (index < aVal.length && index < bVal.length) {
                while (index > 0 && (aVal[index - 1] >= "0" && aVal[index - 1] <= "9"))
                    index--;
                var aNum = getNumber(aVal, index);
                var bNum = getNumber(bVal, index);
                if (aNum < bNum)
                    return -1;
                if (aNum > bNum)
                    return 1;
            }
            return aVal.localeCompare(bVal);
        });
    };
    SurveyHelper.getQuestionContextIndexInfo = function (name, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var contextStrings = ["row", "panel"];
        for (var i = 0; i < contextStrings.length; i++) {
            var subStr = prefix + contextStrings[i] + ".";
            var index = name.indexOf(subStr);
            if (index > -1)
                return { index: index, name: subStr };
        }
        return undefined;
    };
    SurveyHelper.isSupportCellEditor = function (type) {
        var supportedTypes = ["selectbase", "boolean", "rating"];
        for (var i = 0; i < supportedTypes.length; i++) {
            if (survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].isDescendantOf(type, supportedTypes[i]))
                return true;
        }
        return false;
    };
    SurveyHelper.getElementDeepLength = function (element) {
        var res = 0;
        while (!!element) {
            if (element.isPanel)
                res++;
            element = element.parent;
        }
        return res;
    };
    return SurveyHelper;
}());



/***/ }),

/***/ "./src/svgbundle.ts":
/*!**************************!*\
  !*** ./src/svgbundle.ts ***!
  \**************************/
/*! exports provided: svgBundle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "svgBundle", function() { return svgBundle; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

var svgBundle;
var path = __webpack_require__("./src/images sync \\.svg$");
survey_core__WEBPACK_IMPORTED_MODULE_0__["SvgRegistry"].registerIconsFromFolder(path);


/***/ }),

/***/ "./src/textWorker.ts":
/*!***************************!*\
  !*** ./src/textWorker.ts ***!
  \***************************/
/*! exports provided: SurveyTextWorkerError, SurveyTextWorkerParserError, SurveyTextWorkerJsonError, SurveyTextWorker, JsonDuplicateNameError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerError", function() { return SurveyTextWorkerError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerParserError", function() { return SurveyTextWorkerParserError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorkerJsonError", function() { return SurveyTextWorkerJsonError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorker", function() { return SurveyTextWorker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonDuplicateNameError", function() { return JsonDuplicateNameError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _survey_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./survey-helper */ "./src/survey-helper.ts");
/* harmony import */ var _json5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json5 */ "./src/json5.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./creator-settings */ "./src/creator-settings.ts");





var SurveyForTextWorker = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyForTextWorker, _super);
    function SurveyForTextWorker(jsonObj) {
        var _this = _super.call(this) || this;
        _this.setDesignMode(true);
        _this.fromJSON(jsonObj);
        return _this;
    }
    return SurveyForTextWorker;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"]));
var SurveyTextWorkerJsonErrorFixerBase = /** @class */ (function () {
    function SurveyTextWorkerJsonErrorFixerBase() {
    }
    SurveyTextWorkerJsonErrorFixerBase.prototype.getCorrectAt = function (text, at, end) {
        return at;
    };
    Object.defineProperty(SurveyTextWorkerJsonErrorFixerBase.prototype, "isFixable", {
        get: function () { return false; },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerJsonErrorFixerBase.prototype.fixError = function (text, start, end) { return text; };
    return SurveyTextWorkerJsonErrorFixerBase;
}());
var SurveyTextWorkerError = /** @class */ (function () {
    function SurveyTextWorkerError(at, text) {
        this.at = at;
        this.text = text;
        this.rowAt = -1;
        this.columnAt = -1;
    }
    Object.defineProperty(SurveyTextWorkerError.prototype, "isFixable", {
        get: function () { return this.fixer.isFixable; },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerError.prototype.fixError = function (text) { return text; };
    Object.defineProperty(SurveyTextWorkerError.prototype, "fixer", {
        get: function () {
            if (!this.fixerValue) {
                this.fixerValue = this.createFixer();
            }
            return this.fixerValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerError.prototype.createFixer = function () {
        return new SurveyTextWorkerJsonErrorFixerBase();
    };
    return SurveyTextWorkerError;
}());

var SurveyTextWorkerParserError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerParserError, _super);
    function SurveyTextWorkerParserError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SurveyTextWorkerParserError.prototype.getErrorType = function () { return "parseerror"; };
    return SurveyTextWorkerParserError;
}(SurveyTextWorkerError));

var SurveyTextWorkerJsonErrorFixer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerJsonErrorFixer, _super);
    function SurveyTextWorkerJsonErrorFixer(element, jsonObj) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.jsonObj = jsonObj;
        return _this;
    }
    SurveyTextWorkerJsonErrorFixer.prototype.getNewIndex = function (text, findText, at, end) {
        var index = text.indexOf(findText, at);
        if (index > -1 && (end < 0 || index < end)) {
            return index;
        }
        return -1;
    };
    SurveyTextWorkerJsonErrorFixer.prototype.fixError = function (text, start, end) {
        var content = text.substring(start, end + 1);
        var json = JSON.parse(content);
        this.updatedJsonObjOnFix(json);
        return this.replaceJson(text, start, end, json);
    };
    SurveyTextWorkerJsonErrorFixer.prototype.updatedJsonObjOnFix = function (json) {
    };
    SurveyTextWorkerJsonErrorFixer.prototype.replaceJson = function (text, start, end, json) {
        var newContent = JSON.stringify(json, null, _creator_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].jsonEditor.indentation);
        newContent = this.addLeftIndentIntoContent(text, newContent, start - 1);
        return text.substring(0, start) + newContent + text.substring(end + 1);
    };
    SurveyTextWorkerJsonErrorFixer.prototype.addLeftIndentIntoContent = function (text, content, index) {
        if (index <= 0)
            return content;
        var indent = "";
        while (index > 0 && (text[index] === " " || text[index] === "\t")) {
            indent += text[index];
            index--;
        }
        if (!indent)
            return content;
        var lines = content.split("\n");
        for (var i = 1; i < lines.length; i++) {
            lines[i] = indent + lines[i];
        }
        return lines.join("\n");
    };
    return SurveyTextWorkerJsonErrorFixer;
}(SurveyTextWorkerJsonErrorFixerBase));
var SurveyTextWorkerJsonUnknownPropertyErrorFixer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerJsonUnknownPropertyErrorFixer, _super);
    function SurveyTextWorkerJsonUnknownPropertyErrorFixer(element, jsonObj, propertyName) {
        var _this = _super.call(this, element, jsonObj) || this;
        _this.element = element;
        _this.jsonObj = jsonObj;
        _this.propertyName = propertyName;
        return _this;
    }
    SurveyTextWorkerJsonUnknownPropertyErrorFixer.prototype.getCorrectAt = function (text, at, end) {
        var propName = this.propertyName;
        if (!propName)
            return at;
        return this.getNewIndex(text, this.propertyName, at, end);
    };
    return SurveyTextWorkerJsonUnknownPropertyErrorFixer;
}(SurveyTextWorkerJsonErrorFixer));
var SurveyTextWorkerJsonDuplicateNameErrorFixer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerJsonDuplicateNameErrorFixer, _super);
    function SurveyTextWorkerJsonDuplicateNameErrorFixer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SurveyTextWorkerJsonDuplicateNameErrorFixer.prototype, "isFixable", {
        get: function () { return true; },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerJsonDuplicateNameErrorFixer.prototype.getCorrectAt = function (text, at, end) {
        var newAt = this.getNewIndex(text, "name:", at, end);
        if (newAt > at)
            return newAt;
        return this.getNewIndex(text, "\"name\":", at, end);
    };
    SurveyTextWorkerJsonDuplicateNameErrorFixer.prototype.updatedJsonObjOnFix = function (json) {
        json["name"] = _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getNewElementName(this.element);
    };
    return SurveyTextWorkerJsonDuplicateNameErrorFixer;
}(SurveyTextWorkerJsonErrorFixer));
var SurveyTextWorkerJsonRequiredPropertyErrorFixer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerJsonRequiredPropertyErrorFixer, _super);
    function SurveyTextWorkerJsonRequiredPropertyErrorFixer(element, jsonObj, propertyName) {
        var _this = _super.call(this, element, jsonObj) || this;
        _this.element = element;
        _this.jsonObj = jsonObj;
        _this.propertyName = propertyName;
        return _this;
    }
    Object.defineProperty(SurveyTextWorkerJsonRequiredPropertyErrorFixer.prototype, "isFixable", {
        get: function () { return this.propertyName === "name"; },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerJsonRequiredPropertyErrorFixer.prototype.updatedJsonObjOnFix = function (json) {
        var name = this.element["name"];
        if (!name)
            name = _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getNewElementName(this.element);
        json["name"] = name;
    };
    return SurveyTextWorkerJsonRequiredPropertyErrorFixer;
}(SurveyTextWorkerJsonErrorFixer));
var SurveyTextWorkerJsonError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SurveyTextWorkerJsonError, _super);
    function SurveyTextWorkerJsonError(jsonError) {
        var _this = _super.call(this, jsonError.at, jsonError.getFullDescription()) || this;
        _this.elementStart = jsonError.at;
        _this.elementEnd = jsonError.end;
        _this.element = jsonError.element;
        _this.errorType = jsonError.type;
        _this.propertyName = jsonError["propertyName"];
        _this.jsonObj = jsonError.jsonObj;
        return _this;
    }
    SurveyTextWorkerJsonError.prototype.createFixer = function () {
        if (this.errorType === "unknownproperty")
            return new SurveyTextWorkerJsonUnknownPropertyErrorFixer(this.element, this.jsonObj, this.propertyName);
        if (this.errorType === "duplicatename")
            return new SurveyTextWorkerJsonDuplicateNameErrorFixer(this.element, this.jsonObj);
        if (this.errorType === "requiredproperty")
            return new SurveyTextWorkerJsonRequiredPropertyErrorFixer(this.element, this.jsonObj, this.propertyName);
        return _super.prototype.createFixer.call(this);
    };
    SurveyTextWorkerJsonError.prototype.getErrorType = function () { return this.errorType; };
    Object.defineProperty(SurveyTextWorkerJsonError.prototype, "isFixable", {
        get: function () { return this.fixer.isFixable && this.elementStart > -1 && this.elementEnd > this.elementStart; },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorkerJsonError.prototype.correctAt = function (text) {
        var newAt = this.fixer.getCorrectAt(text, this.at, this.elementEnd);
        if (newAt > -1) {
            this.at = newAt;
        }
    };
    SurveyTextWorkerJsonError.prototype.fixError = function (text) {
        return this.fixer.fixError(text, this.elementStart, this.elementEnd);
    };
    return SurveyTextWorkerJsonError;
}(SurveyTextWorkerError));

var SurveyTextWorker = /** @class */ (function () {
    function SurveyTextWorker(text) {
        this.text = text;
        if (!this.text || this.text.trim() == "") {
            this.text = "{}";
        }
        this.errors = [];
        this.process();
    }
    Object.defineProperty(SurveyTextWorker.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTextWorker.prototype, "isJsonCorrect", {
        get: function () {
            return !!this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTextWorker.prototype, "isJsonHasErrors", {
        get: function () {
            return this.errors.length > 0 || !this.isJsonCorrect;
        },
        enumerable: false,
        configurable: true
    });
    SurveyTextWorker.prototype.process = function () {
        var _this = this;
        try {
            this.jsonValue = new _json5__WEBPACK_IMPORTED_MODULE_3__["SurveyJSON5"](1).parse(this.text);
        }
        catch (error) {
            this.errors.push(new SurveyTextWorkerParserError(error.at, error.message));
        }
        if (this.jsonValue != null) {
            this.updateJsonPositions(this.jsonValue);
            this.surveyValue = new SurveyForTextWorker(this.jsonValue);
            var jsonErrors = this.surveyValue.jsonErrors;
            if (Array.isArray(jsonErrors)) {
                for (var i = 0; i < jsonErrors.length; i++) {
                    var error = new SurveyTextWorkerJsonError(jsonErrors[i]);
                    error.correctAt(this.text);
                    this.errors.push(error);
                }
            }
            this.getDuplicatedNamesErrors().forEach(function (error) { return _this.errors.push(error); });
        }
        this.setErrorsPositionByChartAt();
    };
    SurveyTextWorker.prototype.updateJsonPositions = function (jsonObj) {
        jsonObj["pos"]["self"] = jsonObj;
        for (var key in jsonObj) {
            var obj = jsonObj[key];
            if (obj && obj["pos"]) {
                jsonObj["pos"][key] = obj["pos"];
                this.updateJsonPositions(obj);
            }
        }
    };
    SurveyTextWorker.prototype.setErrorsPositionByChartAt = function () {
        if (this.errors.length === 0)
            return;
        this.errors.sort(function (el1, el2) {
            if (el1.at > el2.at)
                return 1;
            if (el1.at < el2.at)
                return -1;
            return 0;
        });
        var position = { row: 0, column: 0 };
        var startAt = 0;
        for (var i = 0; i < this.errors.length; i++) {
            var at = this.errors[i].at;
            position = this.getPostionByChartAt(position, startAt, at);
            var error = this.errors[i];
            if (at == error.at) {
                error.columnAt = position.column;
                error.rowAt = position.row;
            }
            startAt = at;
        }
    };
    SurveyTextWorker.prototype.getPostionByChartAt = function (startPosition, startAt, at) {
        var result = { row: startPosition.row, column: startPosition.column };
        var curChar = startAt;
        while (curChar < at) {
            if (this.text.charAt(curChar) == SurveyTextWorker.newLineChar) {
                result.row++;
                result.column = 0;
            }
            else {
                result.column++;
            }
            curChar++;
        }
        return result;
    };
    SurveyTextWorker.prototype.getDuplicatedNamesErrors = function () {
        var _this = this;
        var res = [];
        this.getDuplicatedElements().forEach(function (el) {
            var error = new SurveyTextWorkerJsonError(_this.createDuplicatedError(el));
            error.correctAt(_this.text);
            if (error)
                res.push(error);
        });
        return res;
    };
    SurveyTextWorker.prototype.getDuplicatedElements = function () {
        var _this = this;
        var res = [];
        var names = {};
        this.survey.pages.forEach(function (p) { return _this.checkDuplicatedElement(p, names, res); });
        _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getAllElements(this.survey, true).forEach(function (p) { return _this.checkDuplicatedElement(p, names, res); });
        _survey_helper__WEBPACK_IMPORTED_MODULE_2__["SurveyHelper"].getAllElements(this.survey, false).forEach(function (q) { return _this.checkDuplicatedElement(q, names, res); });
        return res;
    };
    SurveyTextWorker.prototype.checkDuplicatedElement = function (el, names, duplicates) {
        var name = el["name"];
        if (names[name]) {
            duplicates.push(el);
        }
        else {
            names[name] = true;
        }
    };
    SurveyTextWorker.prototype.createDuplicatedError = function (el) {
        var pos = el["pos"];
        if (!pos)
            return undefined;
        var error = new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonError"]("duplicatename", "The name: '" + el["name"] + "' is duplicated.");
        error.at = pos.start;
        error.end = pos.end;
        error.element = el;
        return error;
    };
    SurveyTextWorker.newLineChar = "\n";
    return SurveyTextWorker;
}());

var JsonDuplicateNameError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(JsonDuplicateNameError, _super);
    function JsonDuplicateNameError(el) {
        var _this = _super.call(this, "duplicatename", "The name: '" + el["name"] + "' is duplicated.") || this;
        _this.element = el;
        return _this;
    }
    return JsonDuplicateNameError;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonError"]));



/***/ }),

/***/ "./src/toolbox.ts":
/*!************************!*\
  !*** ./src/toolbox.ts ***!
  \************************/
/*! exports provided: QuestionToolboxCategory, QuestionToolboxItem, QuestionToolbox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionToolboxCategory", function() { return QuestionToolboxCategory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionToolboxItem", function() { return QuestionToolboxItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionToolbox", function() { return QuestionToolbox; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/entries/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _editorLocalization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editorLocalization */ "./src/editorLocalization.ts");
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./creator-settings */ "./src/creator-settings.ts");




var QuestionToolboxCategory = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionToolboxCategory, _super);
    function QuestionToolboxCategory(toolbox) {
        var _this = _super.call(this) || this;
        _this.toolbox = toolbox;
        return _this;
    }
    QuestionToolboxCategory.prototype.toggleState = function () {
        if (this.toolbox) {
            this.toolbox.toggleCategoryState(this.name);
        }
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionToolboxCategory.prototype, "name", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], QuestionToolboxCategory.prototype, "items", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionToolboxCategory.prototype, "collapsed", void 0);
    return QuestionToolboxCategory;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var QuestionToolboxItem = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionToolboxItem, _super);
    function QuestionToolboxItem(item) {
        var _this = _super.call(this, item) || this;
        _this.item = item;
        return _this;
    }
    QuestionToolboxItem.prototype.toJSON = function () {
        return this.item;
    };
    Object.defineProperty(QuestionToolboxItem.prototype, "typeName", {
        get: function () {
            if (!!this.json && !!this.json.type)
                return this.json.type;
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolboxItem.prototype, "isPanel", {
        get: function () {
            var type = this.typeName;
            return !!type && survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].isDescendantOf(type, "panelbase");
        },
        enumerable: false,
        configurable: true
    });
    return QuestionToolboxItem;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]));

/**
 * The list of Toolbox items.
 */
var QuestionToolbox = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(QuestionToolbox, _super);
    function QuestionToolbox(supportedQuestions, creator, useDefaultCategories) {
        if (supportedQuestions === void 0) { supportedQuestions = null; }
        if (creator === void 0) { creator = null; }
        if (useDefaultCategories === void 0) { useDefaultCategories = false; }
        var _this = _super.call(this) || this;
        _this.supportedQuestions = supportedQuestions;
        _this.creator = creator;
        _this._orderedQuestions = [
            "radiogroup", "rating", "checkbox", "dropdown", "tagbox", "boolean", "file", "imagepicker", "ranking",
            "text", "comment", "multipletext",
            "panel", "paneldynamic",
            "matrix", "matrixdropdown", "matrixdynamic",
            "html", "expression", "image", "signaturepad"
        ];
        /**
         * The maximum number of copied toolbox items. If an user adding copiedItemMaxCount + 1 item, the first added item will be removed.
         */
        _this.copiedItemMaxCount = 3;
        _this.allowExpandMultipleCategoriesValue = false;
        _this.keepAllCategoriesExpandedValue = false;
        _this.createDefaultItems(supportedQuestions, useDefaultCategories);
        _this.initDotsItem();
        return _this;
    }
    QuestionToolbox.getQuestionDefaultSettings = function (questionType) {
        if (!_creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].toolbox || !_creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].toolbox.defaultJSON)
            return undefined;
        return _creator_settings__WEBPACK_IMPORTED_MODULE_3__["settings"].toolbox.defaultJSON[questionType];
    };
    Object.defineProperty(QuestionToolbox.prototype, "orderedQuestions", {
        /**
         * Modify this array to change the toolbox items order.
         */
        get: function () {
            return this._orderedQuestions;
        },
        set: function (questions) {
            this._orderedQuestions = questions;
            this.reorderItems();
        },
        enumerable: false,
        configurable: true
    });
    QuestionToolbox.prototype.initDotsItem = function () {
        var _this = this;
        this.dotsItem.popupModel.horizontalPosition = "right";
        this.dotsItem.popupModel.verticalPosition = "top";
        this.dragOrClickHelper = new survey_core__WEBPACK_IMPORTED_MODULE_1__["DragOrClickHelper"](function (pointerDownEvent, currentTarget, itemModel) {
            var _a;
            var json = _this.creator.getJSONForNewElement(itemModel.json);
            _this.dotsItem.popupModel.toggleVisibility();
            (_a = _this.creator) === null || _a === void 0 ? void 0 : _a.onDragDropItemStart();
            _this.dragDropHelper.startDragToolboxItem(pointerDownEvent, json, itemModel);
        });
        this.hiddenItemsListModel.onPointerDown = function (pointerDownEvent, item) {
            if (!_this.creator.readOnly) {
                _this.dragOrClickHelper.onPointerDown(pointerDownEvent, item);
            }
        };
        this.dotsItem.popupModel.cssClass = "svc-toolbox-popup";
    };
    QuestionToolbox.prototype.getDefaultQuestionCategories = function () {
        var _this = this;
        var questionCategoryMap = {};
        Object.keys(QuestionToolbox.defaultCategories).forEach(function (key) {
            var cat = QuestionToolbox.defaultCategories[key];
            cat.forEach(function (name) {
                if (!_this.supportedQuestions || _this.supportedQuestions.indexOf(name) != -1) {
                    questionCategoryMap[name] = Object(_editorLocalization__WEBPACK_IMPORTED_MODULE_2__["getLocString"])("ed." + key);
                }
            });
        });
        return questionCategoryMap;
    };
    QuestionToolbox.prototype.onActiveCategoryChanged = function (newValue) {
        var categories = this.categories;
        //if(!this.allowExpandMultipleCategories) {
        for (var i = 0; i < categories.length; i++) {
            var category = categories[i];
            category.collapsed = category.name !== newValue;
        }
        //}
    };
    QuestionToolbox.prototype.setLocation = function (toolboxLocation) {
        if (toolboxLocation === "sidebar") {
            this.visibleActions.forEach(function (item) { return (item.mode = "small"); });
        }
        else {
            this.dotsItem.popupModel.horizontalPosition = this.creator.toolboxLocation == "right" ? "left" : "right";
        }
    };
    Object.defineProperty(QuestionToolbox.prototype, "jsonText", {
        /**
         * The Array of Toolbox items as Text JSON.
         */
        get: function () {
            return JSON.stringify(this.actions);
        },
        set: function (value) {
            this.actions = value ? JSON.parse(value) : [];
            this.onItemsChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "copiedJsonText", {
        /**
         * The Array of copied Toolbox items as Text JSON.
         */
        get: function () {
            return JSON.stringify(this.copiedItems);
        },
        set: function (value) {
            var newItems = value ? JSON.parse(value) : [];
            this.clearCopiedItems();
            for (var i = 0; i < newItems.length; i++) {
                newItems[i].isCopied = true;
                this.addItem(newItems[i]);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "items", {
        /**
         * The Array of Toolbox items.
         */
        get: function () {
            return this.actions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "itemNames", {
        get: function () {
            var res = [];
            for (var i = 0; i < this.items.length; i++) {
                res.push(this.items[i].typeName);
            }
            return res;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "copiedItems", {
        /**
         * The Array of copied Toolbox items
         */
        get: function () {
            var result = [];
            for (var i = 0; i < this.actions.length; i++) {
                if (this.actions[i].isCopied)
                    result.push(this.actions[i]);
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Add toolbox items into the Toolbox
     * @param items the list of new items
     * @param clearAll set it to true to clear all previous items.
     */
    QuestionToolbox.prototype.addItems = function (items, clearAll) {
        if (clearAll === void 0) { clearAll = false; }
        if (clearAll) {
            this.clearItems();
        }
        for (var i = 0; i < items.length; i++) {
            this.actions.push(this.getActionByItem(items[i]));
        }
        this.onItemsChanged();
    };
    /**
     * Add a copied Question into Toolbox
     * @param question a copied Survey.Question
     * @param options a json object that allows you to override question properties. Attributes are: name, title, tooltip, isCopied, iconName, json and category.
     */
    QuestionToolbox.prototype.addCopiedItem = function (question, options) {
        if (options === void 0) { options = null; }
        if (!options)
            options = {};
        var name = !!options.name ? options.name : question.name;
        var title = !!options.title ? options.title : name;
        var tooltip = !!options.tooltip ? options.tooltip : title;
        var iconName = !!options.iconName ? options.iconName : QuestionToolbox.defaultIconName;
        var item = {
            id: name,
            name: name,
            title: title,
            tooltip: tooltip,
            className: "svc-toolbox__item svc-toolbox__item--" + iconName,
            isCopied: options.isCopied !== false,
            iconName: iconName,
            json: !!options.json ? options.json : this.getQuestionJSON(question),
            category: !!options.category ? options.category : ""
        };
        if (this.replaceItem(item))
            return;
        var copied = this.copiedItems;
        if (this.copiedItemMaxCount > 0 && copied.length == this.copiedItemMaxCount)
            this.removeItem(copied[this.copiedItemMaxCount - 1].name);
        this.addItem(item);
    };
    /**
     * Add a toolbox item
     * @param item the toolbox item description
     * @param index the toolbox index to place the item, the item is added to the end if index not passed
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.getActionByItem = function (item) {
        if (item instanceof QuestionToolboxItem) {
            return item;
        }
        else {
            item.iconName = item.iconName ? item.iconName : QuestionToolbox.defaultIconName;
            return new QuestionToolboxItem(item);
        }
    };
    QuestionToolbox.prototype.addItem = function (item, index) {
        this.correctItem(item);
        var action = this.getActionByItem(item);
        if (index === undefined) {
            this.actions.push(action);
        }
        else {
            this.actions.splice(index, 0, action);
        }
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.correctItem = function (item) {
        if (!item.title)
            item.title = item.name;
        if (!item.tooltip)
            item.tooltip = item.title;
    };
    Object.defineProperty(QuestionToolbox.prototype, "dragDropHelper", {
        get: function () {
            return this.creator.dragDropSurveyElements;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Add a new toolbox item, add delete the old item with the same name
     * @param item the toolbox item description
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.replaceItem = function (item) {
        this.correctItem(item);
        var index = this.indexOf(item.name);
        if (index < 0)
            return;
        this.actions[index] = this.getActionByItem(item);
        this.onItemsChanged();
        return true;
    };
    /**
     * Remove a toolbox item by its name
     * @param name toolbox item name
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.removeItem = function (name) {
        var index = this.indexOf(name);
        if (index < 0)
            return false;
        this.actions.splice(index, 1);
        this.onItemsChanged();
        return true;
    };
    /**
     * Remove all toolbox items.
     */
    QuestionToolbox.prototype.clearItems = function () {
        this.actions = [];
        this.onItemsChanged();
    };
    /**
     * Remove all copied toolbox items.
     */
    QuestionToolbox.prototype.clearCopiedItems = function () {
        var removedItems = this.copiedItems;
        for (var i = 0; i < removedItems.length; i++) {
            this.removeItem(removedItems[i].name);
        }
    };
    /**
     * Returns toolbox item by its name. Returns null if there is no toolbox item with this name
     * @param name
     */
    QuestionToolbox.prototype.getItemByName = function (name) {
        var index = this.indexOf(name);
        return index > -1 ? this.actions[index] : null;
    };
    Object.defineProperty(QuestionToolbox.prototype, "allowExpandMultipleCategories", {
        /**
         * Set it to true, to allow end-user to expand more than one category. There will no active category in this case
         * @see activeCategory
         */
        get: function () {
            return this.allowExpandMultipleCategoriesValue;
        },
        set: function (val) {
            this.allowExpandMultipleCategoriesValue = val;
            this.updateCategoriesState();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "keepAllCategoriesExpanded", {
        /**
         * Set it to true to expand all categories and hide expand/collapse category buttons
         */
        get: function () {
            return this.keepAllCategoriesExpandedValue || !this.showCategoryTitlesValue;
        },
        set: function (val) {
            this.keepAllCategoriesExpandedValue = val;
            this.canCollapseCategories = !this.keepAllCategoriesExpanded;
            this.updateCategoriesState();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "showCategoryTitles", {
        /**
         * Specifies whether to display category titles in the Toolbox.
         *
         * If you disable this property, the Toolbox hides the titles but continues to display horizontal lines that divide categories. To remove these lines as well, call the `removeCategories()` method.
         * @see removeCategories
         */
        get: function () {
            return this.showCategoryTitlesValue;
        },
        set: function (val) {
            this.showCategoryTitlesValue = val;
            this.updateCategoriesState();
        },
        enumerable: false,
        configurable: true
    });
    QuestionToolbox.prototype.updateTitles = function () {
        this.actions.forEach(function (action) {
            var newTitle = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("qt." + action.name);
            if (!!newTitle) {
                action.title = newTitle;
                action.tooltip = newTitle;
            }
        });
    };
    QuestionToolbox.prototype.updateCategoriesState = function () {
        var noActive = this.allowExpandMultipleCategories || this.keepAllCategoriesExpanded;
        if (noActive) {
            this.activeCategory = "";
            if (this.keepAllCategoriesExpandedValue) {
                this.expandAllCategories();
            }
        }
        else {
            if (this.categories.length > 0) {
                this.activeCategory = this.categories[0].name;
            }
        }
    };
    /**
     * Change the category of the toolbox item
     * @param name the toolbox item name
     * @param category new category name
     */
    QuestionToolbox.prototype.changeCategory = function (name, category) {
        this.changeCategories([{ name: name, category: category }]);
    };
    /**
     * Change categories for several toolbox items.
     * @param changedItems the array of objects {name: "your toolbox item name", category: "new category name"}
     */
    QuestionToolbox.prototype.changeCategories = function (changedItems) {
        for (var i = 0; i < changedItems.length; i++) {
            var item = changedItems[i];
            var toolboxItem = this.getItemByName(item.name);
            if (toolboxItem) {
                toolboxItem.category = item.category;
            }
        }
        this.onItemsChanged();
    };
    /**
     * Removes categories from the Toolbox.
     */
    QuestionToolbox.prototype.removeCategories = function () {
        var allTypes = survey_core__WEBPACK_IMPORTED_MODULE_1__["ElementFactory"].Instance.getAllTypes();
        this.changeCategories(allTypes.map(function (t) { return ({ name: t, category: null }); }));
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.toggleCategoryState = function (categoryName) {
        if (this.keepAllCategoriesExpanded)
            return;
        if (this.allowExpandMultipleCategories) {
            var category = this.getCategoryByName(categoryName);
            if (category) {
                category.collapsed = !category.collapsed;
            }
        }
        else {
            this.activeCategory = categoryName;
        }
    };
    /**
     * Expand a category by its name. If allowExpandMultipleCategories is false (default value), all other categories become collapsed
     * @param categoryName the category name
     * @see allowExpandMultipleCategories
     * @see collapseCategory
     */
    QuestionToolbox.prototype.expandCategory = function (categoryName) {
        if (this.allowExpandMultipleCategories) {
            var category = this.getCategoryByName(categoryName);
            if (category) {
                category.collapsed = false;
            }
        }
        else {
            if (this.canCollapseCategories) {
                this.activeCategory = categoryName;
            }
        }
    };
    /**
     * Collapse a category by its name. If allowExpandMultipleCategories is false (default value) this function does nothing
     * @param categoryName the category name
     * @see allowExpandMultipleCategories
     */
    QuestionToolbox.prototype.collapseCategory = function (categoryName) {
        if (!this.allowExpandMultipleCategories)
            return;
        var category = this.getCategoryByName(categoryName);
        if (category) {
            category.collapsed = true;
        }
    };
    /**
     * Expand all categories. If allowExpandMultipleCategories is false (default value) this function does nothing
     * @see allowExpandMultipleCategories
     */
    QuestionToolbox.prototype.expandAllCategories = function () {
        this.expandCollapseAllCategories(false);
    };
    /**
     * Collapse all categories. If allowExpandMultipleCategories is false (default value) this function does nothing
     * @see allowExpandMultipleCategories
     */
    QuestionToolbox.prototype.collapseAllCategories = function () {
        this.expandCollapseAllCategories(true);
    };
    QuestionToolbox.prototype.hiddenItemSelected = function (model) {
        this.creator.clickToolboxItem(model.json);
    };
    QuestionToolbox.prototype.expandCollapseAllCategories = function (isCollapsed) {
        var categories = this.categories;
        for (var i = 0; i < categories.length; i++) {
            categories[i].collapsed = isCollapsed;
        }
    };
    QuestionToolbox.prototype.getCategoryByName = function (categoryName) {
        var categories = this.categories;
        for (var i = 0; i < categories.length; i++) {
            var category = categories[i];
            if (category.name === categoryName)
                return category;
        }
        return null;
    };
    QuestionToolbox.prototype.onItemsChanged = function () {
        var categories = new Array();
        var categoriesHash = {};
        var prevActiveCategory = this.activeCategory;
        for (var i = 0; i < this.actions.length; i++) {
            var item = this.actions[i];
            var categoryName = item.category ? item.category : _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("ed.toolboxGeneralCategory");
            if (!categoriesHash[categoryName]) {
                var category = this.createCategory();
                category.name = categoryName;
                category.collapsed = categoryName !== prevActiveCategory && !this.keepAllCategoriesExpanded;
                categoriesHash[categoryName] = category;
                categories.push(category);
            }
            categoriesHash[categoryName].items.push(item);
        }
        this.categories = categories;
        if (!this.keepAllCategoriesExpanded) {
            if (!this.allowExpandMultipleCategories) {
                if (prevActiveCategory && categoriesHash[prevActiveCategory]) {
                    this.activeCategory = prevActiveCategory;
                }
                else {
                    this.activeCategory = categories.length > 0 ? categories[0].name : "";
                }
            }
            else {
                if (categories.length > 0) {
                    categories[0].collapsed = false;
                }
            }
        }
        var newItems = [];
        this.categories.forEach(function (cat) {
            newItems = newItems.concat(cat.items);
        });
        this.actions = newItems;
        this.hasCategories = categories.length > 1;
        //this.updateCategoriesState();
        this.updateItemSeparators();
        this.raiseUpdate(false);
    };
    QuestionToolbox.prototype.createCategory = function () {
        return new QuestionToolboxCategory(this);
    };
    QuestionToolbox.prototype.indexOf = function (name) {
        for (var i = 0; i < this.actions.length; i++) {
            if (this.actions[i].name == name)
                return i;
        }
        return -1;
    };
    QuestionToolbox.prototype.updateItemSeparators = function () {
        var categories = this.hasCategories ? this.categories : [{ items: this.actions }];
        categories.forEach(function (category, categoryIndex) {
            (category.items || []).forEach(function (item, index) {
                item.needSeparator = categoryIndex !== 0 && index == 0;
                if (item.innerItem)
                    item.innerItem.needSeparator = item.needSeparator;
            });
        });
    };
    QuestionToolbox.prototype.reorderItems = function () {
        var _this = this;
        this.actions.sort(function (i1, i2) {
            var index1 = _this._orderedQuestions.indexOf(i1.name);
            if (index1 === -1)
                index1 = Number.MAX_VALUE;
            var index2 = _this._orderedQuestions.indexOf(i2.name);
            if (index2 === -1)
                index2 = Number.MAX_VALUE;
            return index1 - index2;
        });
        this.onItemsChanged();
    };
    /**
     * Adds default items to the Toolbox. If the Toolbox contains any items before you call this method, they will be removed.
     * @param supportedQuestions Specifies which question and panel types to include in the Toolbox.
     * @param useDefaultCategories Pass `true` if you want to create default categories.
     */
    QuestionToolbox.prototype.createDefaultItems = function (supportedQuestions, useDefaultCategories) {
        this.clearItems();
        var questions = this.getQuestionTypes(supportedQuestions);
        var defaultCategories = useDefaultCategories ? this.getDefaultQuestionCategories() : {};
        for (var i = 0; i < questions.length; i++) {
            var name = questions[i];
            var question = survey_core__WEBPACK_IMPORTED_MODULE_1__["ElementFactory"].Instance.createElement(name, "q1");
            if (!question) {
                question = survey_core__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(name);
            }
            var json = this.getQuestionJSON(question);
            var title = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("qt." + name);
            var iconName = "icon-" + name;
            var item = {
                id: name,
                name: name,
                iconName: iconName,
                title: title,
                tooltip: title,
                className: "svc-toolbox__item svc-toolbox__item--" + iconName,
                json: json,
                isCopied: false,
                category: (defaultCategories[name] || "")
            };
            this.actions.push(this.getActionByItem(item));
        }
        this.registerCustomWidgets();
        this.registerComponentQuestions();
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.registerCustomWidgets = function () {
        var inst = survey_core__WEBPACK_IMPORTED_MODULE_1__["CustomWidgetCollection"].Instance;
        if (!inst.getActivatedBy)
            return;
        var widgets = inst.widgets;
        for (var i = 0; i < widgets.length; i++) {
            if (widgets[i].canShowInToolbox) {
                this.addItemFromJSON(widgets[i].widgetJson);
            }
        }
    };
    QuestionToolbox.prototype.registerComponentQuestions = function () {
        var items = this.getComponentItems();
        for (var i = 0; i < items.length; i++) {
            this.addItemFromJSON(items[i].json);
        }
    };
    QuestionToolbox.prototype.getComponentItems = function () {
        var instanceOwner = undefined; // CustomQuestionCollection;
        if (!instanceOwner) {
            instanceOwner = survey_core__WEBPACK_IMPORTED_MODULE_1__["ComponentCollection"];
        }
        if (!instanceOwner)
            return [];
        var items = instanceOwner.Instance["items"];
        return !!items ? items : [];
    };
    QuestionToolbox.prototype.addItemFromJSON = function (json) {
        if (json.showInToolbox === false)
            return;
        var iconName = json.iconName ? json.iconName : QuestionToolbox.defaultIconName;
        var title = _editorLocalization__WEBPACK_IMPORTED_MODULE_2__["editorLocalization"].getString("qt." + json.name);
        if (!title || title == json.name) {
            title = json.title;
        }
        if (!title) {
            title = json.name;
        }
        var elementJson = json.defaultJSON ? json.defaultJSON : {};
        if (!elementJson.type) {
            elementJson.type = json.name;
        }
        var category = json.category ? json.category : "";
        var item = new survey_core__WEBPACK_IMPORTED_MODULE_1__["Action"]({
            id: json.name,
            name: json.name,
            iconName: iconName,
            title: title,
            tooltip: title,
            json: elementJson,
            isCopied: false,
            category: category
        });
        var action = this.getActionByItem(item);
        var existingAction = this.getActionById(item.id);
        if (!!existingAction) {
            this.actions.splice(this.actions.indexOf(existingAction), 1, action);
        }
        else {
            var index = Array.isArray(this.supportedQuestions) ? this.supportedQuestions.indexOf(item.id) : -1;
            if (index > -1) {
                this.actions.splice(index, 0, action);
            }
            else {
                this.actions.push(action);
            }
        }
    };
    QuestionToolbox.prototype.getQuestionJSON = function (question) {
        var json = new survey_core__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(question);
        json.type = question.getType();
        var defaultSettings = QuestionToolbox.getQuestionDefaultSettings(json.type);
        if (defaultSettings) {
            for (var key in defaultSettings) {
                json[key] = defaultSettings[key];
            }
        }
        return json;
    };
    QuestionToolbox.prototype.isHiddenCustomWidget = function (name) {
        var widget = survey_core__WEBPACK_IMPORTED_MODULE_1__["CustomWidgetCollection"].Instance.getCustomWidgetByName(name);
        return !!widget && !widget.showInToolbox;
    };
    QuestionToolbox.prototype.getQuestionTypes = function (supportedQuestions) {
        var allTypes = survey_core__WEBPACK_IMPORTED_MODULE_1__["ElementFactory"].Instance.getAllTypes();
        if (!supportedQuestions || supportedQuestions.length == 0)
            supportedQuestions = allTypes;
        var questions = [];
        for (var i = 0; i < this.orderedQuestions.length; i++) {
            var name_1 = this.orderedQuestions[i];
            if (supportedQuestions.indexOf(name_1) > -1 && allTypes.indexOf(name_1) > -1)
                questions.push(name_1);
        }
        for (var i = 0; i < supportedQuestions.length; i++) {
            var name = supportedQuestions[i];
            if (questions.indexOf(name) < 0 &&
                QuestionToolbox.hiddenTypes.indexOf(name) < 0 &&
                allTypes.indexOf(name) > -1 &&
                !this.isHiddenCustomWidget(name))
                questions.push(name);
        }
        return questions;
    };
    QuestionToolbox.hiddenTypes = ["buttongroup", "linkvalue", "embeddedsurvey", "spinedit", "color", "fileedit", "textwithreset", "commentwithreset"];
    QuestionToolbox.defaultIconName = "icon-default";
    QuestionToolbox.defaultCategories = {
        toolboxChoiceCategory: ["radiogroup", "rating", "checkbox", "dropdown", "tagbox", "boolean", "file", "imagepicker", "ranking"],
        toolboxTextCategory: ["text", "comment", "multipletext"],
        toolboxContainersCategory: ["panel", "paneldynamic"],
        toolboxMatrixCategory: ["matrix", "matrixdropdown", "matrixdynamic"],
        toolboxMiscCategory: ["html", "expression", "image", "signaturepad"]
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionToolbox.prototype, "showCategoryTitlesValue", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], QuestionToolbox.prototype, "categories", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: "",
            onSet: function (val, target) {
                target.onActiveCategoryChanged(val);
            }
        })
    ], QuestionToolbox.prototype, "activeCategory", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionToolbox.prototype, "hasCategories", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], QuestionToolbox.prototype, "canCollapseCategories", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (val, target) {
                if (target.hasCategories && target.showCategoryTitles) {
                    if (val) {
                        target.isResponsivenessDisabled = false;
                        target.raiseUpdate(true);
                    }
                    else {
                        target.isResponsivenessDisabled = true;
                        target.setActionsMode("large");
                    }
                }
            }
        })
    ], QuestionToolbox.prototype, "isCompact", void 0);
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
        Object(survey_core__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionToolbox.prototype, "forceCompact", void 0);
    return QuestionToolbox;
}(survey_core__WEBPACK_IMPORTED_MODULE_1__["AdaptiveActionContainer"]));



/***/ }),

/***/ "./src/utils/actions.ts":
/*!******************************!*\
  !*** ./src/utils/actions.ts ***!
  \******************************/
/*! exports provided: findAction, updateMatrixLogicExpandAction, updateMatrixLogicRemoveAction, updateMatrixRemoveAction, updateMatixActionsClasses */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findAction", function() { return findAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateMatrixLogicExpandAction", function() { return updateMatrixLogicExpandAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateMatrixLogicRemoveAction", function() { return updateMatrixLogicRemoveAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateMatrixRemoveAction", function() { return updateMatrixRemoveAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateMatixActionsClasses", function() { return updateMatixActionsClasses; });
function findAction(actions, id) {
    if (!Array.isArray(actions))
        return null;
    for (var i = 0; i < actions.length; i++) {
        if (actions[i].id === id)
            return actions[i];
    }
    return null;
}
function updateMatrixLogicExpandAction(question, actions, row) {
    var action = findAction(actions, "show-detail");
    if (!action)
        return;
    action.component = "sv-action-bar-item";
    action.iconName = "icon-logic-expand";
    action.innerCss = "sl-table__action-button sl-table__detail-button";
    action.iconSize = 48;
    action.showTitle = false;
    action.action = function () {
        row.showHideDetailPanelClick();
    };
    var updateIcon = function () { action.iconName = row.isDetailPanelShowing ? "icon-logic-collapse" : "icon-logic-expand"; };
    question.registerFunctionOnPropertyValueChanged("isRowShowing" + row.id, updateIcon);
    updateIcon();
}
function updateMatrixLogicRemoveAction(question, actions, row) {
    updateMatrixRemoveAction(question, actions, row);
    var action = findAction(actions, "remove-row");
    if (!action)
        return;
    action.css = "sl-table__action-button sl-table__remove-button";
}
function updateMatrixRemoveAction(question, actions, row) {
    var action = findAction(actions, "remove-row");
    if (!action)
        return;
    action.component = "sv-action-bar-item";
    action.iconName = "icon-delete";
    action.innerCss = "spg-action-button spg-action-button--danger";
    action.title = question.removeRowText;
    action.showTitle = false;
    action.visibleIndex = 10;
    action.action = function () {
        question.removeRowUI(row);
    };
}
function updateMatixActionsClasses(actions) {
    actions.forEach(function (action) {
        action.innerCss = (action.innerCss || "") + " spg-action-button--muted";
    });
}


/***/ }),

/***/ "./src/utils/context-button.scss":
/*!***************************************!*\
  !*** ./src/utils/context-button.scss ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/utils/design.scss":
/*!*******************************!*\
  !*** ./src/utils/design.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/utils/events.ts":
/*!*****************************!*\
  !*** ./src/utils/events.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/utils/layout.scss":
/*!*******************************!*\
  !*** ./src/utils/layout.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/utils/resizer.ts":
/*!******************************!*\
  !*** ./src/utils/resizer.ts ***!
  \******************************/
/*! exports provided: ResizeManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizeManager", function() { return ResizeManager; });
var ResizeManager = /** @class */ (function () {
    function ResizeManager(container, handles) {
        var _this = this;
        this.container = container;
        this.events = {
            "mousedown": { "touch": "touchend", "mouse": "mousedown", "pointer": "pointerdown" },
            "mouseup": { "touch": "touchstart", "mouse": "mouseup", "pointer": "pointerup" },
            "mousemove": { "touch": "touchmove", "mouse": "mousemove", "pointer": "pointermove" },
        };
        this.onMouseDownListener = function (e) {
            if (!window)
                return;
            e.preventDefault();
            _this.originalWidth = _this.getStyleValue(_this.container, "width");
            _this.originalMouseX = e.pageX;
            _this.currentResizer = e.target;
            window.addEventListener(_this.getMouseEvent("mousemove"), _this.resize);
            window.addEventListener(_this.getMouseEvent("mouseup"), _this.stopResize);
        };
        this.resize = function (e) {
            var width = _this.originalWidth;
            var horizontalDistinction = e.pageX - _this.originalMouseX;
            if (_this.currentResizer == _this.westResizer) {
                width -= horizontalDistinction;
            }
            else {
                width += horizontalDistinction;
            }
            if (width > _this.maxWidth) {
                width = _this.maxWidth;
            }
            else if (width < _this.minWidth) {
                width = _this.minWidth;
            }
            _this.container.style.width = width + "px";
        };
        this.stopResize = function (e) {
            if (!window)
                return;
            window.removeEventListener(_this.getMouseEvent("mousemove"), _this.resize);
            window.removeEventListener(_this.getMouseEvent("mouseup"), _this.stopResize);
        };
        this.init(container);
        this.setHandles(handles);
    }
    ResizeManager.prototype.setHandles = function (newVal) {
        var isThereWestResizer = false;
        var isThereEastResizer = false;
        var inputVal = newVal.split(",");
        inputVal.forEach(function (str) { return str.trim(); });
        inputVal = inputVal.filter(function (str) { return !!str; });
        (inputVal || []).forEach(function (handrail) {
            if (handrail == "w")
                isThereWestResizer = true;
            if (handrail == "e")
                isThereEastResizer = true;
        });
        this.westResizer.style["display"] = isThereWestResizer ? "block" : "none";
        this.eastResizer.style["display"] = isThereEastResizer ? "block" : "none";
    };
    ResizeManager.prototype.getStyleValue = function (element, style) {
        if (!window)
            return 0;
        return parseFloat(window.getComputedStyle(element).getPropertyValue(style).replace("px", ""));
    };
    ResizeManager.prototype.isEventSupported = function (eventName) {
        var el = document.createElement("div");
        eventName = "on" + eventName;
        var isSupported = (eventName in el);
        if (!isSupported) {
            el.setAttribute(eventName, "return;");
            isSupported = typeof el[eventName] == "function";
        }
        el = null;
        return isSupported;
    };
    ResizeManager.prototype.getEventPrefix = function () {
        if (this.mouseDevice === undefined) {
            if (this.isEventSupported("pointerdown")) {
                this.mouseDevice = "pointer";
            }
            else if (this.isEventSupported("touchstart")) {
                this.mouseDevice = "touch";
            }
            else if (this.isEventSupported("mousedown")) {
                this.mouseDevice = "mouse";
            }
        }
        return this.mouseDevice;
    };
    ResizeManager.prototype.getMouseEvent = function (eventName) {
        return this.events[eventName][this.getEventPrefix()];
    };
    ResizeManager.prototype.init = function (container) {
        this.westResizer = this.createrResizerElement("svc-resizer svc-resizer-west");
        this.eastResizer = this.createrResizerElement("svc-resizer svc-resizer-east");
        this.minWidth = this.getStyleValue(container, "min-width");
        this.maxWidth = this.getStyleValue(container, "max-width");
        container.insertBefore(this.westResizer, container.children[0]);
        container.appendChild(this.eastResizer);
    };
    ResizeManager.prototype.createrResizerElement = function (className) {
        var resizer = document.createElement("div");
        resizer.className = className;
        resizer.addEventListener(this.getMouseEvent("mousedown"), this.onMouseDownListener);
        return resizer;
    };
    ResizeManager.prototype.dispose = function () {
        this.eastResizer.removeEventListener(this.getMouseEvent("mousedown"), this.onMouseDownListener);
        this.eastResizer.remove();
        this.eastResizer = undefined;
        this.westResizer.removeEventListener(this.getMouseEvent("mousedown"), this.onMouseDownListener);
        this.westResizer.remove();
        this.westResizer = undefined;
    };
    return ResizeManager;
}());



/***/ }),

/***/ "./src/utils/utils.ts":
/*!****************************!*\
  !*** ./src/utils/utils.ts ***!
  \****************************/
/*! exports provided: getNextItemValue, getNextItemText, getNextValue, findParentNode, focusFirstControl, getFirstNonTextElement, getNodesFromKoComponentInfo, propertyExists, isPropertyVisible, toggleHovered, clearNewLines, select, copyObject, copyCssClasses, assignDefaultV2Classes, wrapTextByCurlyBraces, capitalize, notShortCircuitAnd, imageMimeTypes, getAcceptedTypesByContentMode, getQuestionFromObj, ingectAlpha, convertRgbaToString, parseRgbaFromString, parseColor, HSBToRGB, RGBToHSB, assign, ColorCalculator, saveToFileHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextItemValue", function() { return getNextItemValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextItemText", function() { return getNextItemText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextValue", function() { return getNextValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findParentNode", function() { return findParentNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusFirstControl", function() { return focusFirstControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFirstNonTextElement", function() { return getFirstNonTextElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodesFromKoComponentInfo", function() { return getNodesFromKoComponentInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "propertyExists", function() { return propertyExists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropertyVisible", function() { return isPropertyVisible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleHovered", function() { return toggleHovered; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearNewLines", function() { return clearNewLines; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return select; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyObject", function() { return copyObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyCssClasses", function() { return copyCssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignDefaultV2Classes", function() { return assignDefaultV2Classes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapTextByCurlyBraces", function() { return wrapTextByCurlyBraces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notShortCircuitAnd", function() { return notShortCircuitAnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "imageMimeTypes", function() { return imageMimeTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAcceptedTypesByContentMode", function() { return getAcceptedTypesByContentMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getQuestionFromObj", function() { return getQuestionFromObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ingectAlpha", function() { return ingectAlpha; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertRgbaToString", function() { return convertRgbaToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseRgbaFromString", function() { return parseRgbaFromString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseColor", function() { return parseColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HSBToRGB", function() { return HSBToRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBToHSB", function() { return RGBToHSB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assign", function() { return assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorCalculator", function() { return ColorCalculator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "saveToFileHandler", function() { return saveToFileHandler; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _creator_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../creator-settings */ "./src/creator-settings.ts");


function getNumericFromString(str) {
    if (!str)
        return "";
    var num = "";
    for (var i = str.length - 1; i >= 0; i--) {
        if (str[i] >= "0" && str[i] <= "9") {
            num = str[i] + num;
        }
        else {
            if (!!num)
                return num;
        }
        if (num.length == 10)
            break;
    }
    return num;
}
var opositeValues = {
    true: "false",
    True: "False",
    TRUE: "FALSE",
    false: "true",
    False: "True",
    FALSE: "TRUE",
    yes: "no",
    Yes: "No",
    YES: "NO",
    no: "yes",
    No: "Yes",
    NO: "YES"
};
function getOpositValue(str) {
    if (!!opositeValues[str])
        return opositeValues[str];
    return null;
}
function hasValueInArray(values, search) {
    search = search.toString();
    for (var i = 0; i < values.length; i++) {
        if (!values[i])
            continue;
        if (values[i].toString() === search)
            return true;
    }
    return false;
}
function getNextItemValue(prefix, choices) {
    var values = choices.map(function (item) { return item.value; });
    return getNextValue(prefix, values);
}
function getNextItemText(choices) {
    var ln = choices.length;
    if (ln === 0)
        return "";
    if (!choices[ln - 1].text || choices[ln - 1].text === choices[ln - 1].value)
        return "";
    var values = [];
    choices.forEach(function (item) { if (item.hasText)
        values.push(item.text); });
    choices.map(function (item) { return item.text; });
    var nextValue = getNextValue("", values);
    return !!nextValue ? nextValue.toString() : "";
}
function getNextValue(prefix, values) {
    if (values.length > 0)
        var oposite = getOpositValue(values[values.length - 1]);
    if (oposite && values.indexOf(oposite) < 0)
        return oposite;
    var numStr = "";
    var baseValue;
    var numStrIndex = -1;
    for (var i = values.length - 1; i >= 0; i--) {
        if (!values[i])
            continue;
        var str = values[i].toString();
        numStr = getNumericFromString(str);
        if (!!numStr) {
            numStrIndex = str.lastIndexOf(numStr);
            baseValue = values[i];
            break;
        }
    }
    if (numStrIndex > -1) {
        var num = parseInt(numStr);
        var isNumber = baseValue === num;
        var newValue;
        do {
            if (isNumber) {
                newValue = ++num;
            }
            else {
                var newNum = (num++).toString();
                while (numStr.length > newNum.length) {
                    newNum = "0" + newNum;
                }
                newValue = str.substring(0, numStrIndex) + newNum + str.substring(numStrIndex + numStr.length);
            }
        } while (hasValueInArray(values, newValue));
        return newValue;
    }
    if (!prefix) {
        prefix = values[values.length - 1];
    }
    return prefix + 1;
}
function findParentNode(className, sourceNode) {
    var parent = sourceNode;
    while (!!parent && !parent.classList.contains(className)) {
        parent = parent.parentElement;
    }
    return parent;
}
function focusFirstControl(renderedElements) {
    for (var i = 0; i < renderedElements.length; i++) {
        if (typeof renderedElements[i].getElementsByClassName === "function") {
            var elements = (renderedElements[i].getElementsByClassName("svd-focusable"));
            if (elements.length === 0 &&
                renderedElements[i].className.indexOf("svd-focusable") !== -1) {
                elements = [renderedElements[i]];
            }
            if (elements.length > 0) {
                var element = elements[0];
                if (element.tagName.toLowerCase() !== "a") {
                    element.focus({ preventScroll: true });
                    break;
                }
            }
        }
    }
}
function getFirstNonTextElement(elements) {
    if (!elements || !elements.length)
        return;
    for (var i = 0; i < elements.length; i++) {
        if (elements[i].nodeName != "#text" && elements[i].nodeName != "#comment")
            return elements[i];
    }
    return null;
}
// about compoentInfo: https://knockoutjs.com/documentation/component-registration.html
function getNodesFromKoComponentInfo(componentInfo) {
    // elem.nodeType === 3 // text node
    // elem.nodeType === 8 // comment node
    var element = componentInfo.element;
    var siblings = [];
    if (element.nodeType !== 8) {
        return element.childNodes;
    }
    while ((element = element.nextSibling)) {
        if (element.nodeType === 3)
            continue;
        siblings.push(element);
    }
    return siblings;
}
// ko.bindingHandlers["trueclick"] = {
//   init: function (element, valueAccessor, allBindingsAccessor) {
//     element.onclick = () => true;
//   },
// };
// export function createKey2click(element: HTMLElement) {
//   return (ev: KeyboardEvent) => {
//     var char = ev.which || ev.keyCode;
//     if (char === 13 || char === 32) {
//       element.click();
//     } else if (char === 27) {
//       element.blur();
//     }
//   };
// }
// ko.bindingHandlers["key2click"] = {
//   init: function (element, valueAccessor, allBindingsAccessor) {
//     element.onkeyup = createKey2click(element);
//   },
// };
// ko.bindingHandlers["clickNoFocus"] = {
//   init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
//     element.onclick = (ev) => {
//       valueAccessor().call(viewModel, viewModel, ev);
//     };
//   },
// };
// ko.bindingHandlers["afterRenderParent"] = {
//   init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
//     element.style.display = "none";
//     valueAccessor() && valueAccessor()([element.parentElement]);
//   },
// };
function propertyExists(obj, propertyName) {
    var result = true;
    if (!!obj && typeof obj.getType === "function") {
        var property = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].findProperty(obj.getType(), propertyName);
        result = !!property;
    }
    return result;
}
function isPropertyVisible(obj, propertyName) {
    var result = true;
    if (!!obj && typeof obj.getType === "function") {
        var property = survey_core__WEBPACK_IMPORTED_MODULE_0__["Serializer"].findProperty(obj.getType(), propertyName);
        result = !property || property.visible;
    }
    return result;
}
function toggleHovered(e, element, timeout) {
    if (timeout === void 0) { timeout = 0; }
    var processedFlagName = "__svc_question_processed";
    var name = "svc-hovered";
    var nameReady = "svc-hovered-ready";
    function setClass(className, checkReady) {
        if (checkReady === void 0) { checkReady = null; }
        var arr = (element.className || "").split(" ");
        if (checkReady) {
            if (arr.indexOf(checkReady) == -1) {
                return;
            }
        }
        if (arr.indexOf(className) == -1) {
            element.className += " " + className;
        }
    }
    if (!e[processedFlagName] && e.type === "mouseover") {
        if (timeout) {
            setClass(nameReady);
            setTimeout(function () {
                setClass(name, nameReady);
            }, timeout);
        }
        else {
            setClass(name);
        }
        e[processedFlagName] = true;
    }
    else {
        element.className = (element.className || "").replace(" svc-hovered-ready", "");
        element.className = (element.className || "").replace(" svc-hovered", "");
    }
}
function clearNewLines(text) {
    return text.replace(new RegExp("(\\r\\n|\\n|\\r)", "gm"), "");
}
function select(element) {
    if (!window)
        return;
    var range, selection;
    if (window.getSelection && document.createRange) {
        selection = window.getSelection();
        range = document.createRange();
        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);
    }
    else if (document["selection"] && document.body["createTextRange"]) {
        range = document.body["createTextRange"]();
        range.moveToElementText(element);
        range.select();
    }
}
function copyObject(dst, src) {
    for (var key in src) {
        var source = src[key];
        if (typeof source === "object") {
            source = {};
            this.copyObject(source, src[key]);
        }
        dst[key] = source;
    }
}
function copyCssClasses(dest, source) {
    if (!source)
        return;
    if (typeof source === "string" || source instanceof String) {
        dest["root"] = source;
    }
    else {
        copyObject(dest, source);
    }
}
function assignDefaultV2Classes(destination, questionType) {
    copyCssClasses(destination, survey_core__WEBPACK_IMPORTED_MODULE_0__["defaultV2Css"].question);
    copyCssClasses(destination, survey_core__WEBPACK_IMPORTED_MODULE_0__["defaultV2Css"][questionType]);
    destination.hasErrorTop = "";
    destination.hasErrorBottom = "";
}
function wrapTextByCurlyBraces(text) {
    return _creator_settings__WEBPACK_IMPORTED_MODULE_1__["settings"].logic.openBracket + text + _creator_settings__WEBPACK_IMPORTED_MODULE_1__["settings"].logic.closeBracket;
}
function capitalize(str) {
    if (!str)
        return str;
    str = str.replace(/[\s]+/g, " ");
    str = str.replace(/([\s]|^)(\S)/g, function (_, p1, p2) {
        return p1 + p2.toUpperCase();
    });
    return str;
}
function notShortCircuitAnd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return args.every(function (val) { return val === true; });
}
var imageMimeTypes = "image/png, image/gif, image/jpeg, image/apng, image/avif, image/svg+xml, image/webp";
function getAcceptedTypesByContentMode(contentMode) {
    if (["auto", "image"].indexOf(contentMode) > -1) {
        return imageMimeTypes;
    }
    else if (contentMode == "video") {
        return "video/*";
    }
    else {
        return "";
    }
}
function getQuestionFromObj(obj) {
    return (obj instanceof survey_core__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownColumn"]) ? obj.templateQuestion : obj;
}
function ingectAlpha(baseColor, alpha) {
    if (!!baseColor && alpha !== undefined) {
        var r = parseInt(baseColor.slice(1, 3), 16);
        var g = parseInt(baseColor.slice(3, 5), 16);
        var b = parseInt(baseColor.slice(5, 7), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    }
}
function convertRgbaToString(rgbValues, alpha) {
    return "rgba(" + rgbValues[0] + ", " + rgbValues[1] + ", " + rgbValues[2] + ", " + alpha + ")";
}
function parseRgbaFromString(value) {
    var matchRgb = value.match(/\((.*)\)/);
    if (matchRgb) {
        return matchRgb[1].split(",").map(function (i) { return parseFloat(i); });
    }
    else {
        return [];
    }
}
function parseColor(value) {
    var rgbValues = parseRgbaFromString(value);
    if (rgbValues.length !== 0) {
        var opacity = 1;
        if (rgbValues.length == 4) {
            opacity = rgbValues.pop();
        }
        var color = rgbValues.reduce(function (res, color) {
            var hex = color.toString(16);
            return res + (hex.length == 1 ? "0" + hex : hex);
        }, "#");
        return { color: color, opacity: opacity * 100 };
    }
    else {
        return { color: value, opacity: 100 };
    }
}
function HSBToRGB(h, s, b) {
    s /= 100;
    b /= 100;
    var k = function (n) { return (n + h / 60) % 6; };
    var f = function (n) { return b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1))); };
    return [Math.round(255 * f(5)), Math.round(255 * f(3)), Math.round(255 * f(1))];
}
function RGBToHSB(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    var v = Math.max(r, g, b), n = v - Math.min(r, g, b);
    var h = n === 0 ? 0 : n && v === r ? (g - b) / n : v === g ? 2 + (b - r) / n : 4 + (r - g) / n;
    return [60 * (h < 0 ? h + 6 : h), v && (n / v) * 100, v * 100];
}
function assign() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    var objects = (inputs || []).filter(function (obj) { return !!obj; });
    if (objects.length <= 1) {
        return;
    }
    if (objects.length == 2) {
        Object.keys(objects[1]).forEach(function (key) { return objects[0][key] = objects[1][key]; });
        return;
    }
    for (var i = 1; i < objects.length; i++) {
        assign(objects[0], objects[i]);
    }
}
var ColorCalculator = /** @class */ (function () {
    function ColorCalculator() {
        this.colorSettings = { baseColorAlpha: 1, darkColorAlpha: 1, lightColorAlpha: 1, deltaDarkColor: 0, deltaLightColor: 0, newColorLight: "", newColorDark: "" };
    }
    ColorCalculator.prototype.initialize = function (baseColor, lightColor, darkColor) {
        var primaryColorRgba = parseRgbaFromString(baseColor);
        var primaryColorDarkRgba = parseRgbaFromString(darkColor);
        var primaryColorLightRgba = parseRgbaFromString(lightColor);
        this.colorSettings.baseColorAlpha = primaryColorRgba[3];
        this.colorSettings.darkColorAlpha = primaryColorDarkRgba[3];
        this.colorSettings.lightColorAlpha = primaryColorLightRgba[3];
        var primaryColorHSB = RGBToHSB(primaryColorRgba[0], primaryColorRgba[1], primaryColorRgba[2]);
        var primaryColorDarkHSB = RGBToHSB(primaryColorDarkRgba[0], primaryColorDarkRgba[1], primaryColorDarkRgba[2]);
        var primaryColorLightHSB = RGBToHSB(primaryColorLightRgba[0], primaryColorLightRgba[1], primaryColorLightRgba[2]);
        this.colorSettings.deltaDarkColor = primaryColorHSB[2] - primaryColorDarkHSB[2];
        this.colorSettings.deltaLightColor = primaryColorHSB[2] - primaryColorLightHSB[2];
    };
    ColorCalculator.prototype.calculateColors = function (newColor) {
        var newColorRbg = parseRgbaFromString(newColor);
        if (newColorRbg.length === 0) {
            newColorRbg = parseRgbaFromString(ingectAlpha(newColor, 1));
        }
        var newColorHsb = RGBToHSB(newColorRbg[0], newColorRbg[1], newColorRbg[2]);
        var newPrimaryColorDarkRGB = HSBToRGB(newColorHsb[0], newColorHsb[1], newColorHsb[2] - this.colorSettings.deltaDarkColor);
        var newPrimaryColorLightRGB = HSBToRGB(newColorHsb[0], newColorHsb[1], newColorHsb[2] - this.colorSettings.deltaLightColor);
        this.colorSettings.newColorLight = convertRgbaToString(newPrimaryColorLightRGB, this.colorSettings.lightColorAlpha);
        this.colorSettings.newColorDark = convertRgbaToString(newPrimaryColorDarkRGB, this.colorSettings.darkColorAlpha);
    };
    return ColorCalculator;
}());

function saveToFileHandler(fileName, blob) {
    if (!window)
        return;
    if (window.navigator["msSaveOrOpenBlob"]) {
        window.navigator["msSaveBlob"](blob, fileName);
    }
    else {
        var elem = window.document.createElement("a");
        elem.href = window.URL.createObjectURL(blob);
        elem.download = fileName;
        document.body.appendChild(elem);
        elem.click();
        document.body.removeChild(elem);
    }
}


/***/ }),

/***/ "survey-core":
/*!*********************************************************************************************************!*\
  !*** external {"root":"Survey","commonjs2":"survey-core","commonjs":"survey-core","amd":"survey-core"} ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_survey_core__;

/***/ })

/******/ });
});
//# sourceMappingURL=survey-creator-core.js.map