import { Base } from "./base";
import { PopupModel } from "./popup";
import { CssClassBuilder } from "./utils/cssClassBuilder";
import { ActionContainer } from "./actions/container";
export declare const FOCUS_INPUT_SELECTOR = "input:not(:disabled):not([readonly]):not([type=hidden]),select:not(:disabled):not([readonly]),textarea:not(:disabled):not([readonly]), button:not(:disabled):not([readonly]), [tabindex]:not([tabindex^=\"-\"])";
export declare class PopupBaseViewModel extends Base {
    private static SubscriptionId;
    private subscriptionId;
    protected popupSelector: string;
    protected fixedPopupContainer: string;
    protected containerSelector: string;
    protected scrollingContentSelector: string;
    protected prevActiveElement: HTMLElement;
    protected footerToolbarValue: ActionContainer;
    top: string;
    left: string;
    height: string;
    width: string;
    minWidth: string;
    isVisible: boolean;
    locale: string;
    readonly container: HTMLElement;
    private containerElement;
    private createdContainer;
    getLocale(): string;
    protected hidePopup(): void;
    protected getStyleClass(): CssClassBuilder;
    protected getShowFooter(): boolean;
    protected getShowHeader(): boolean;
    protected getPopupHeaderTemplate(): string;
    protected createFooterActionBar(): void;
    protected resetDimensionsAndPositionStyleProperties(): void;
    protected onModelChanging(newModel: PopupModel): void;
    private setupModel;
    private _model;
    model: PopupModel;
    constructor(model: PopupModel);
    readonly title: string;
    readonly contentComponentName: string;
    readonly contentComponentData: any;
    readonly isModal: boolean;
    readonly isFocusedContent: boolean;
    readonly isFocusedContainer: boolean;
    readonly showFooter: boolean;
    readonly showHeader: boolean;
    readonly popupHeaderTemplate: string;
    readonly isOverlay: boolean;
    readonly styleClass: string;
    readonly cancelButtonText: string;
    readonly footerToolbar: ActionContainer;
    onKeyDown(event: any): void;
    private trapFocus;
    switchFocus(): void;
    updateOnShowing(): void;
    updateOnHiding(): void;
    private focusContainer;
    private focusFirstInput;
    clickOutside(event?: Event): void;
    cancel(): void;
    dispose(): void;
    initializePopupContainer(): void;
    setComponentElement(componentRoot: HTMLElement, targetElement?: HTMLElement | null): void;
    resetComponentElement(): void;
    protected preventScrollOuside(event: any, deltaY: number): void;
}
