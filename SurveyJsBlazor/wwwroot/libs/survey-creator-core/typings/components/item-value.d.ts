import { Base, ItemValue, QuestionSelectBase } from "survey-core";
import { CreatorBase } from "../creator-base";
export declare class ItemValueWrapperViewModel extends Base {
    creator: CreatorBase;
    question: QuestionSelectBase;
    item: ItemValue;
    isNew: boolean;
    isDragging: boolean;
    isDragDropGhost: boolean;
    isDragDropMoveDown: boolean;
    isDragDropMoveUp: boolean;
    ghostPosition: string;
    constructor(creator: CreatorBase, question: QuestionSelectBase, item: ItemValue);
    private dragOrClickHelper;
    private allowItemOperations;
    private canTouchItems;
    private focusCameFromDown;
    private collectionProperty;
    get canBeDragged(): boolean;
    private isBanStartDrag;
    private updateNewItemValue;
    private get collectionPropertyName();
    onPointerDown(pointerDownEvent: PointerEvent): boolean;
    startDragItemValue: (pointerDownEvent: PointerEvent, currentTarget: any) => void;
    private get dragDropHelper();
    dispose(): void;
    private getGhostPosition;
    private handleDragDropGhostPositionChanged;
    get isDraggable(): boolean;
    isDraggableItem(item: ItemValue): boolean;
    add(model: ItemValueWrapperViewModel): void;
    addNewItem(item: ItemValue, question: QuestionSelectBase, creator: CreatorBase): void;
    remove(model: ItemValueWrapperViewModel): void;
    onFocusOut(event: any): void;
    private findNextElementIndexToRemove;
    private focusNextElementToRemove;
    private updateIsNew;
    get allowRemove(): boolean;
    get tooltip(): string;
    get dragTooltip(): string;
    get allowAdd(): boolean;
    select(model: ItemValueWrapperViewModel, event: Event | undefined): void;
}
