import { DragDropCore, DragTypeOverMeEnum, IElement, IPanel, IShortcutText, ISurveyElement, JsonObject, PageModel, QuestionRowModel } from "survey-core";
import { IQuestionToolboxItem } from "./toolbox";
export declare function calculateIsEdge(dropTargetNode: HTMLElement, clientY: number): boolean;
export declare function calculateIsSide(dropTargetNode: HTMLElement, clientX: number): boolean;
export declare function calculateDragOverLocation(clientX: number, clientY: number, dropTargetNode: HTMLElement): DragTypeOverMeEnum;
export declare class DragDropSurveyElements extends DragDropCore<any> {
    static newGhostPage: PageModel;
    static restrictDragQuestionBetweenPages: boolean;
    static edgeHeight: number;
    static nestedPanelDepth: number;
    static ghostSurveyElementName: string;
    protected isEdge: boolean;
    protected isSide: boolean;
    protected prevIsEdge: any;
    protected dragOverIndicatorElement: any;
    protected dragOverLocation: DragTypeOverMeEnum;
    protected get draggedElementType(): string;
    protected isDraggedElementSelected: boolean;
    maxNestedPanels: number;
    startDragToolboxItem(event: PointerEvent, draggedElementJson: JsonObject, toolboxItemModel: IQuestionToolboxItem): void;
    startDragSurveyElement(event: PointerEvent, draggedElement: any, isElementSelected?: boolean): void;
    protected getShortcutText(draggedElement: IShortcutText): string;
    protected createDraggedElementShortcut(text: string, draggedElementNode?: HTMLElement, event?: PointerEvent): HTMLElement;
    protected createDraggedElementIcon(): HTMLElement;
    protected getDraggedElementClass(): string;
    protected createElementFromJson(json: object): HTMLElement;
    private createNewElement;
    protected findDropTargetNodeByDragOverNode(dragOverNode: HTMLElement): HTMLElement;
    protected getDropTargetByDataAttributeValue(dataAttributeValue: string, dropTargetNode: HTMLElement, event: PointerEvent): any;
    protected isDropTargetValid(dropTarget: any, dropTargetNode?: HTMLElement): boolean;
    protected doBanDropHere: () => void;
    private shouldRestricDragQuestionBetweenPages;
    private getPanelDropTarget;
    protected findDeepestDropTargetChild(parent: HTMLElement): HTMLElement;
    private isAllowDragOver;
    dragOverCore(dropTarget: ISurveyElement, dragOverLocation: DragTypeOverMeEnum, isEdge?: boolean, isSide?: boolean): void;
    private isSameElement;
    dragOver(event: PointerEvent): void;
    protected onStartDrag(): void;
    private getElementIndexInPanel;
    moveElementInPanel(panel: IPanel, src: IElement, target: IElement, targetIndex: number): void;
    protected doDrop: () => any;
    private removeDragOverMarker;
    clear(): void;
    private getTargetParent;
    protected getTargetRow(dropTarget: any): QuestionRowModel;
    protected isDragOverInsideEmptyPanel(): boolean;
}
