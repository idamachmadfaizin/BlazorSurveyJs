@using System.Reflection;
@using Newtonsoft.Json;
@using SurveyJsBlazor.Models;

@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<HeadContent>
    <link href="./_content/@(assemblyName)/libs/survey-core/defaultv2.min.css" rel="stylesheet" />
    <link href="./_content/@(assemblyName)/libs/survey-analytics/survey.analytics.min.css" rel="stylesheet" />
</HeadContent>

<div id="@GetHashCode()"></div>

@code {
    [Parameter]
    public object? Scheme { get; set; }

    [Parameter]
    public VisualizationPanelOptions? VisualizationPanelOptions { get; set; }

    [Parameter]
    public object? Data { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private readonly string assemblyName = Assembly.GetExecutingAssembly().GetName().Name ?? "";
    private readonly DotNetObjectReference<SurveyJsDashboard> objRef;
    private readonly Lazy<Task<IJSObjectReference>> jsModuleTask;

    public SurveyJsDashboard()
    {
        objRef = DotNetObjectReference.Create(this);
        jsModuleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{assemblyName}/Components/SurveyJsDashboard.razor.js").AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await jsModuleTask.Value;

            string? serializedScheme = this.Scheme is not null ? JsonConvert.SerializeObject(this.Scheme) : null;
            string? serializedData = this.Data is not null ? JsonConvert.SerializeObject(this.Data) : null;

            var renderModel = new DashboardJs.Render
                {
                    DotNetObject = objRef,
                    HashId = this.GetHashCode(),
                    VisualizationPanelOptions = VisualizationPanelOptions,
                    JsonScheme = serializedScheme,
                    Data = serializedData,
                };
            await module.InvokeVoidAsync("render", renderModel);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (jsModuleTask.IsValueCreated)
            {
                var module = await jsModuleTask.Value;
                await module.DisposeAsync();
            }

            objRef.Dispose();

            GC.SuppressFinalize(this);
        }
        catch (JSDisconnectedException)
        {
        }
    }
}
