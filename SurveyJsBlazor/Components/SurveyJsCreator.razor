@using System.Reflection;
@using Newtonsoft.Json;
@using SurveyJsBlazor.Models;

@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<HeadContent>
    <link href="./_content/@(assemblyName)/libs/survey-core/defaultv2.min.css" rel="stylesheet" />
    <link href="./_content/@(assemblyName)/libs/survey-creator-core/survey-creator-core.min.css" rel="stylesheet" />
</HeadContent>

<div id="@this.GetHashCode()" @attributes=AllOtherAttributes></div>

@code {
    [Parameter]
    public object? Scheme { get; set; }

    [Parameter]
    public CreatorOptions? CreatorOptions { get; set; }

    [Parameter]
    public string? Locale { get; set; }

    [Parameter]
    public EventCallback<object> SaveSurveyFunc { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private readonly string assemblyName = Assembly.GetExecutingAssembly().GetName().Name ?? "";
    private readonly DotNetObjectReference<SurveyJsCreator> objRef;
    private readonly Lazy<Task<IJSObjectReference>> jsModuleTask;

    public SurveyJsCreator()
    {
        objRef = DotNetObjectReference.Create(this);
        jsModuleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{assemblyName}/Components/SurveyJsCreator.razor.js").AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await jsModuleTask.Value;

            string? serializedScheme = this.Scheme is not null ? JsonConvert.SerializeObject(this.Scheme) : null;

            var renderModel = new CreatorJs.Render
                {
                    DotNetObject = objRef,
                    HashId = this.GetHashCode(),
                    CreatorOptions = CreatorOptions,
                    JsonScheme = serializedScheme,
                    Locale = Locale,
                };
            await module.InvokeVoidAsync("render", renderModel);
        }
    }

    [JSInvokable]
    public async void SaveSurveyFuncHandle(object data)
    {
        await SaveSurveyFunc.InvokeAsync(data);
    }

    /// <summary>
    /// Set the i18n of SurveyJs Creator.
    /// </summary>
    /// <param name="locale">language code. <see href="https://surveyjs.io/survey-creator/documentation/survey-localization-translate-surveys-to-different-languages#available-languages">Available Languages</see> .</param>
    /// <returns></returns>
    public async Task setLocale(string? locale)
    {
        var module = await jsModuleTask.Value;

        var model = new CreatorJs.SetLocal
            {
                HashId = this.GetHashCode(),
                Locale = string.IsNullOrEmpty(locale) ? "" : locale,
            };

        await module.InvokeVoidAsync("setLocale", model);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (jsModuleTask.IsValueCreated)
            {
                var module = await jsModuleTask.Value;

                // var model = new CreatorJs.Dispose
                //     {
                //         HashId = this.GetHashCode(),
                //     };
                // await module.InvokeVoidAsync("dispose", model);
                await module.DisposeAsync();
            }

            objRef.Dispose();

            GC.SuppressFinalize(this);
        }
        catch (JSDisconnectedException)
        {
        }
    }
}
