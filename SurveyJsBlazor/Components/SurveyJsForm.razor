@using System.Reflection;
@using Newtonsoft.Json;
@using SurveyJsBlazor.Models;

@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<HeadContent>
    <link href="/_content/@(assemblyName)/libs/survey-core/defaultv2.min.css" rel="stylesheet" />
</HeadContent>

<survey id="@this.GetHashCode()" params="survey: model" @attributes=AllOtherAttributes></survey>

@code {
    [Parameter]
    public object? Scheme { get; set; }

    [Parameter]
    public EventCallback<object> OnComplete { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private readonly string assemblyName = Assembly.GetExecutingAssembly().GetName().Name ?? "";
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<SurveyJsForm>? objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", $"/_content/{assemblyName}/Components/SurveyJsForm.razor.js");

            string? serializedScheme = this.Scheme is not null ? JsonConvert.SerializeObject(this.Scheme) : null;

            var renderModel = new SurveyJsFormRenderModel
            {
                DotNetObject = objRef, 
                HashId = this.GetHashCode(),
                JsonScheme = serializedScheme
            };
            await jsModule.InvokeVoidAsync("render", renderModel);
        }
    }

    [JSInvokable]
    public async void OnCompleteHandle(object data)
    {
        await OnComplete.InvokeAsync(data);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            var disposeModel = new SurveyJsFormDisposeModel
            {
                HashId = this.GetHashCode(),
            };
            await jsModule.InvokeVoidAsync("dispose", disposeModel);
            await jsModule.DisposeAsync();
        }
        objRef?.Dispose();

        GC.SuppressFinalize(this);
    }
}