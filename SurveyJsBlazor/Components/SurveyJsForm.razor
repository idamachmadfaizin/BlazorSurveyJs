@using System.Reflection;
@using Newtonsoft.Json;
@using SurveyJsBlazor.Enumerations;
@using SurveyJsBlazor.Models;

@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<HeadContent>
    <link href="./_content/@(assemblyName)/libs/survey-core/defaultv2.min.css" rel="stylesheet" />
</HeadContent>

<div @attributes=AllOtherAttributes>
    <survey id="@this.GetHashCode()" params="survey: model"></survey>
</div>

@code {
    [Parameter]
    public object? Scheme { get; set; }

    [Parameter]
    public string? Locale { get; set; }

    [Parameter]
    public FormJsTheme? Theme { get; set; }

    [Parameter]
    public EventCallback<object> OnComplete { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AllOtherAttributes { get; set; }

    private readonly string assemblyName = Assembly.GetExecutingAssembly().GetName().Name ?? "";
    private readonly DotNetObjectReference<SurveyJsForm> objRef;
    private readonly Lazy<Task<IJSObjectReference>> jsModuleTask;

    public SurveyJsForm()
    {
        objRef = DotNetObjectReference.Create(this);
        jsModuleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>("import", $"./_content/{assemblyName}/Components/SurveyJsForm.razor.js").AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await jsModuleTask.Value;

            string? serializedScheme = this.Scheme is not null ? JsonConvert.SerializeObject(this.Scheme) : null;

            var model = new FormJs.Render
                {
                    DotNetObject = objRef,
                    HashId = this.GetHashCode(),
                    JsonScheme = serializedScheme,
                    Locale = Locale,
                    Theme = Theme.HasValue ? Enum.GetName(typeof(FormJsTheme), Theme) : ""
                };
            await module.InvokeVoidAsync("render", model);
        }
    }

    [JSInvokable]
    public async void OnCompleteHandle(object data)
    {
        await OnComplete.InvokeAsync(data);
    }

    public async Task Clear()
    {
        var module = await jsModuleTask.Value;
        var model = new FormJs.Clear
            {
                HashId = this.GetHashCode()
            };
        await module.InvokeVoidAsync("clear", model);
    }

    /// <summary>
    /// Set the i18n.
    /// </summary>
    /// <param name="locale">language code. <see href="https://surveyjs.io/form-library/documentation/survey-localization#available-languages">Available Languages</see> .</param>
    /// <returns></returns>
    public async Task SetLocale(string? locale)
    {
        var module = await jsModuleTask.Value;
        var model = new FormJs.SetLocale
            {
                HashId = this.GetHashCode(),
                Locale = locale,
            };
        await module.InvokeVoidAsync("setLocale", model);
    }

    public async Task SetTheme(FormJsTheme? theme = null)
    {
        var module = await jsModuleTask.Value;
        var model = new FormJs.SetTheme
            {
                HashId = this.GetHashCode(),
                Theme = theme.HasValue ? Enum.GetName(typeof(FormJsTheme), theme) : "",
            };
        await module.InvokeVoidAsync("setTheme", model);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            if (jsModuleTask.IsValueCreated)
            {
                var module = await jsModuleTask.Value;
                var model = new FormJs.Dispose
                    {
                        HashId = this.GetHashCode(),
                    };
                await module.InvokeVoidAsync("dispose", model);
                await module.DisposeAsync();
            }

            objRef.Dispose();

            GC.SuppressFinalize(this);
        }
        catch (JSDisconnectedException)
        {
        }
    }
}